
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000c750  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800c9f0  0800c9f0  0000e08c  2**0
                  CONTENTS
  3 .exidx        00000008  0800c9f0  0800c9f0  0000d9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.attributes 00000030  0800c9f8  0800c9f8  0000e08c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  0800c9f8  0800c9f8  0000d9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800ca04  0800ca04  0000da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000008c  20000000  0800ca08  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001114c  20000400  0800ca94  0000e400  2**10
                  ALLOC
  9 .sram1        00080000  24000000  24000000  0000f000  2**2
                  ALLOC
 10 .sram2        00048000  30000000  30000000  0000f000  2**2
                  ALLOC
 11 .sram3        0000fc00  38000000  38000000  0000f000  2**2
                  ALLOC
 12 .dma          00000048  3800fc00  3800fc00  0000f000  2**2
                  ALLOC
 13 .heap         00000000  2001154c  2001154c  0000e0bc  2**0
                  CONTENTS
 14 .reserved_for_stack 00000000  2001154c  2001154c  0000e0bc  2**0
                  CONTENTS
 15 .debug_info   0004e6f4  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000786a  00000000  00000000  0005c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00016783  00000000  00000000  0006401a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b70  00000000  00000000  0007a79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000520e  00000000  00000000  0007b30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000536d1  00000000  00000000  0008051b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002f7ce  00000000  00000000  000d3bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00207f6a  00000000  00000000  001033ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000044  00000000  00000000  0030b324  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002ef8  00000000  00000000  0030b368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000001d4  00000000  00000000  0030e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800c9f0 l    d  .ARM.extab	00000000 .ARM.extab
0800c9f0 l    d  .exidx	00000000 .exidx
0800c9f8 l    d  .ARM.attributes	00000000 .ARM.attributes
0800c9f8 l    d  .init_array	00000000 .init_array
0800ca04 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
24000000 l    d  .sram1	00000000 .sram1
30000000 l    d  .sram2	00000000 .sram2
38000000 l    d  .sram3	00000000 .sram3
3800fc00 l    d  .dma	00000000 .dma
2001154c l    d  .heap	00000000 .heap
2001154c l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 crtstuff.c
080006c8 l     F .text	00000000 deregister_tm_clones
080006e4 l     F .text	00000000 register_tm_clones
08000708 l     F .text	00000000 __do_global_dtors_aux
20000400 l     O .bss	00000000 completed.1
0800ca04 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000730 l     F .text	00000000 frame_dummy
20000404 l     O .bss	00000000 object.0
0800c9f8 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
08000754 l     F .text	00000050 recorder::Analog::Start(bool) [clone .part.0]
20000424 l     O .bss	00000004 recorder::last_strum_idx
2000041c l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
080058e8 l     F .text	0000010c _GLOBAL__sub_I__ZN8recorder7analog_E
00000000 l    df *ABS*	00000000 adc.cpp
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 flash.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20011000 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
0800742c l     F .text	00000024 NVIC_SystemReset
200112a4 l     O .bss	00000004 recorder::system::ticks_
0800746c l     F .text	000000e0 recorder::system::ConfigureClocks()
200112a8 l     O .bss	00000150 recorder::system::serial_
200112a0 l     O .bss	00000004 recorder::system::wakeup_flags_
2001129d l     O .bss	00000001 _read::prev_was_cr
2001129c l     O .bss	00000001 _write::prev
08007be0 l     F .text	00000014 _GLOBAL__sub_I_TickHandler
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
200113f8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
080085d8 l     F .text	000000e0 RCCEx_PLL2_Config.part.0
080086b8 l     F .text	000000e0 RCCEx_PLL3_Config.part.0
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
0800c53c l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_mdma.c
0800c544 l     O .text	00000040 LL_MDMA_CH_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
0800c594 l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 sf_exp.c
00000000 l    df *ABS*	00000000 sf_exp2.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
0800a654 l     F .text	0000001c with_errnof
0800a670 l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_tanh.c
0800c840 l     O .text	00000004 one
0800c838 l     O .text	00000004 tiny
0800c83c l     O .text	00000004 two
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 sf_log.c
00000000 l    df *ABS*	00000000 sf_expm1.c
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
0800ad78 l     F .text	0000006c std
0800ade4 l     F .text	00000018 stdio_exit_handler
0800adfc l     F .text	00000040 cleanup_stdio
0800ae3c l     F .text	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
0800b14c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 mallocr.c
0800b3d0 l     F .text	00000044 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 refill.c
0800bc10 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
20011548 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 sf_log_data.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 reent.c
08007bf4  w    F .text	00000002 RTC_Alarm_IRQHandler
08007bf4  w    F .text	00000002 HASH_RNG_IRQHandler
08007bf4  w    F .text	00000002 EXTI2_IRQHandler
0800c584 g     O .text	00000010 LL_RCC_PrescTable
08007a7c g     F .text	00000006 recorder::system::Reset()
08007bf4  w    F .text	00000002 TIM8_CC_IRQHandler
0800bd58 g     F .text	00000020 _isatty_r
0800738c g     F .text	00000094 recorder::Serial::InterruptService()
200108e0 g     O .bss	00000004 recorder::play_button_
0800bf40 g     F .text	00000010 _getpid
0800afa4 g     F .text	000000aa _puts_r
08007bf4  w    F .text	00000002 HRTIM1_Master_IRQHandler
0800bd78 g     F .text	00000024 _lseek_r
08007bf4  w    F .text	00000002 DebugMon_Handler
08007bf4  w    F .text	00000002 UART8_IRQHandler
08007bf4  w    F .text	00000002 SPI4_IRQHandler
0800c848 g     O .text	00000120 .hidden __logf_data
08006ae4 g     F .text	000000b8 recorder::Dac::Init()
0800a1d0 g     F .text	000000d0 exp2f
0800066c g     F .text	0000005a .hidden __floatdidf
0800be20 g     F .text	00000024 _kill_r
24000000  w    O .sram1	00080000 recorder::SampleMemoryBase::buffer1_
0800af80 g     F .text	00000024 printf
08007bf4  w    F .text	00000002 TIM1_CC_IRQHandler
08007bf4  w    F .text	00000002 BDMA_Channel6_IRQHandler
0800b9f6 g     F .text	00000024 __sseek
0800ae90 g     F .text	00000030 __sinit
08007bf4  w    F .text	00000002 DMA2_Stream5_IRQHandler
0800ba22 g     F .text	0000007c __swbuf_r
08007550 g     F .text	00000010 recorder::system::ReloadWatchdog()
08007bf4  w    F .text	00000002 HardFault_Handler
08000988  w    F .text	000000d4 recorder::Flash::Writable(unsigned long, unsigned long)
08007bf4  w    F .text	00000002 HRTIM1_FLT_IRQHandler
08007bf4  w    F .text	00000002 JPEG_IRQHandler
20010dac  w    O .bss	00000004 recorder::Analog::instance_
08007bf4  w    F .text	00000002 DMA1_Stream5_IRQHandler
0800b990 g     F .text	0000000c __malloc_unlock
08007bf4  w    F .text	00000002 SysTick_Handler
08007bf4  w    F .text	00000002 BDMA_Channel1_IRQHandler
08007bf4  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
08007bf4  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800ca08 g       *ABS*	00000000 _sidata
08007bf4  w    F .text	00000002 PendSV_Handler
08007bf4  w    F .text	00000002 NMI_Handler
20010c40 g     O .bss	00000164 recorder::analog_
08007bf4  w    F .text	00000002 EXTI3_IRQHandler
08008284 g     F .text	0000011c HAL_RCC_GetSysClockFreq
08007bf4  w    F .text	00000002 LPTIM4_IRQHandler
0800b0c8 g     F .text	0000000c __errno
0800a69c g     F .text	0000000c .hidden __math_may_uflowf
20000428 g     O .bss	0000012c recorder::monitor_
08007bf4  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
0800a764 g     F .text	000000f8 tanhf
20011534 g     O .bss	00000004 __stdio_exit_handler
08007bf4  w    F .text	00000002 LPTIM2_IRQHandler
08007bf4  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08007954 g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
0800a920 g     F .text	000000c8 logf
0800bd34 g     F .text	00000024 _fstat_r
08007560 g     F .text	000003f4 recorder::system::Init()
20011544 g     O .bss	00000004 errno
0800c9f0 g       .text	00000000 _etext
08007bf4  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
080063dc g     F .text	000000b4 recorder::Adc::Stop()
20010908 g     O .bss	00000004 recorder::button_2_
08007cc8 g     F .text	0000000c HAL_GetREVID
08007bf4  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08007bf4  w    F .text	00000002 I2C3_ER_IRQHandler
08007bf4  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
08007a84 g     F .text	00000084 fgets
08009d2c g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08005de0 g     F .text	000000dc recorder::Adc::InitAudioSequence()
08007bf4  w    F .text	00000002 MDMA_IRQHandler
0800c5b0 g     O .text	00000148 .hidden __exp2f_data
2001090c g     O .bss	00000004 recorder::button_1_
08007bf4  w    F .text	00000002 LPTIM3_IRQHandler
0800af20 g     F .text	00000060 getc
20000554 g     O .bss	0000002c recorder::io_
0800c380  w    O .text	00000010 recorder::SynthEngine::minor_chord_multipliers_
0800b122 g     F .text	0000001c memcpy
2000008c g     O .data	00000000 .hidden __TMC_END__
08007bf4  w    F .text	00000002 HSEM1_IRQHandler
080005f4 g     F .text	00000022 .hidden __floatsidf
080034a0 g     F .text	000011f4 recorder::StateMachine(bool)
08007bf4  w    F .text	00000002 EXTI0_IRQHandler
08007bf4  w    F .text	00000002 I2C2_EV_IRQHandler
0800b050 g     F .text	00000010 puts
08007bf4  w    F .text	00000002 DMA1_Stream2_IRQHandler
08007bf4  w    F .text	00000002 FPU_IRQHandler
2000002c g     O .data	00000004 SystemCoreClock
0800ace8 g     F .text	00000048 feof
08007bf4  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08007bf4  w    F .text	00000002 FDCAN1_IT1_IRQHandler
0800bd9c g     F .text	00000050 _raise_r
0800bf30 g     F .text	00000010 _fstat
0800ac64 g     F .text	0000003c __assert_func
08007bf4  w    F .text	00000002 UsageFault_Handler
08006098 g     F .text	000002d0 recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08006a40 g     F .text	000000a4 recorder::Dac::InitDMA()
08007bf4  w    F .text	00000002 LTDC_ER_IRQHandler
0800c3a0  w    O .text	00000020 recorder::SynthEngine::minor_scale_multipliers_
08007bf4  w    F .text	00000002 DMA2_Stream2_IRQHandler
0800be44 g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
08007bf4  w    F .text	00000002 HRTIM1_TIME_IRQHandler
200108ec g     O .bss	00000001 recorder::state_
080005d4 g     F .text	0000001e .hidden __aeabi_ui2d
080094e0 g     F .text	0000006e LL_DAC_Init
20000000 g       .data	00000000 _sdata
08007bf4  w    F .text	00000002 SPI1_IRQHandler
08007060 g     F .text	00000050 recorder::irq::Init()
08000350 g     F .text	00000000 .hidden __aeabi_drsub
0800be48 g     F .text	00000020 _sbrk_r
08004694  w    F .text	000002c4 recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()
0800a6d8 g     F .text	0000001e .hidden __math_invalidf
08007bf4  w    F .text	00000002 TIM6_DAC_IRQHandler
0800ac54 g     F .text	0000000e fabsf
0800bdfc g     F .text	00000024 _read_r
08006f54 g     F .text	0000010c recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)
08007bf4  w    F .text	00000002 DCMI_IRQHandler
080072dc g     F .text	00000020 recorder::Serial::GetByteBlocking()
08007bf4  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
20000028 g     O .data	00000004 SystemD2Clock
08000618 g     F .text	00000042 .hidden __extendsfdf2
0800798c g     F .text	000000e0 recorder::system::Standby()
20010da8  w    O .bss	00000004 recorder::Analog::callback_
0800035c g     F .text	00000276 .hidden __adddf3
080072fc g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
08007bf4  w    F .text	00000002 DMA2_Stream3_IRQHandler
08009fe0 g     F .text	0000010c LL_USART_Init
0800bf50 g     F .text	00000010 _isatty
0800c52c g     O .text	00000010 D1CorePrescTable
0800b0d4 g     F .text	00000048 __libc_init_array
080007a4  w    F .text	000001e4 recorder::Switches::Init()
08007bf4  w    F .text	00000002 SAI2_IRQHandler
20010748 g     O .bss	00000144 recorder::recording_
0800b13e g     F .text	0000000e abort
080005d4 g     F .text	0000001e .hidden __floatunsidf
08005ebc g     F .text	000001dc recorder::Adc::InitPotSequence()
0800bf80 g     F .text	0000001c _sbrk
08007bf4  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08007bf4  w    F .text	00000002 USART6_IRQHandler
08005d50 g     F .text	0000008c recorder::Adc::InitADC(ADC_TypeDef*)
0800c9d8 g     F .text	00000000 _init
0800c758 g     O .text	000000e0 .hidden __sincosf_table
0800a480 g     F .text	000001d4 cosf
0800a85c g     F .text	000000c4 __ieee754_log10f
08007bf4  w    F .text	00000002 TIM17_IRQHandler
0800c3c0  w    O .text	00000020 recorder::SynthEngine::major_scale_multipliers_
08007bf4  w    F .text	00000002 USART3_IRQHandler
08007bf4  w    F .text	00000002 CRYP_IRQHandler
08007bf4  w    F .text	00000002 BDMA_Channel7_IRQHandler
2001154c g       .bss	00000000 _ebss
08007bf8 g     F .text	00000044 Reset_Handler
08007bf4  w    F .text	00000002 LPTIM5_IRQHandler
08007bf4  w    F .text	00000002 UART5_IRQHandler
20011538 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800c3e0  w    O .text	00000034 recorder::SynthEngine::chromatic_frequencies_
08007bf4  w    F .text	00000002 ADC3_IRQHandler
08007bf4  w    F .text	00000002 DMA2_Stream0_IRQHandler
080059f4 g     F .text	00000350 recorder::Adc::DMAService()
200108e4 g     O .bss	00000004 recorder::playback_timeout_
200113fc g     O .bss	00000138 __sf
0800c370  w    O .text	00000010 recorder::SynthEngine::diminished_chord_multipliers_
08009f14 g     F .text	000000cc LL_TIM_Init
08006490  w    F .text	0000036c recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
0800aec0 g     F .text	00000024 fprintf
08007bf4  w    F .text	00000002 TIM4_IRQHandler
0800035c g     F .text	00000276 .hidden __aeabi_dadd
30000000  w    O .sram2	00048000 recorder::SampleMemoryBase::buffer2_
08007128 g     F .text	00000058 recorder::irq::SetPriority(IRQn_Type, unsigned long)
08007bf4  w    F .text	00000002 BDMA_Channel2_IRQHandler
08007cd4 g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800065c g     F .text	0000006a .hidden __aeabi_ul2d
08007bf4  w    F .text	00000002 QUADSPI_IRQHandler
08007ce4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
2001154c g       .bss	00000000 end
08007bf4  w    F .text	00000002 I2C1_EV_IRQHandler
08007180 g     F .text	00000150 recorder::Serial::Init(unsigned long)
0800b120 g     F .text	00000002 __retarget_lock_release_recursive
08007bf4  w    F .text	00000002 DMA1_Stream6_IRQHandler
0800977c g     F .text	00000016 LL_GPIO_StructInit
0800a6f8 g     F .text	00000060 log10f
08004958  w    F .text	000003b0 recorder::SampleMemory<half>::Init()
20011298  w    O .bss	00000004 recorder::Serial::instance_
0800a690 g     F .text	0000000c .hidden __math_uflowf
0800986c g     F .text	00000190 LL_RCC_GetPLL1ClockFreq
08007bf4  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08007bf4  w    F .text	00000002 DMA1_Stream1_IRQHandler
08007bf4  w    F .text	00000002 TIM16_IRQHandler
0800b17a g     F .text	00000024 __sfputs_r
08007bf4  w    F .text	00000002 UART4_IRQHandler
0800ae78 g     F .text	0000000c __sfp_lock_acquire
080002b0 g     F .text	00000000 memchr
2001154c g       .bss	00000000 __bss_end__
08007bf4  w    F .text	00000002 BDMA_Channel5_IRQHandler
0800be8c g     F .text	00000094 _free_r
08007bf4  w    F .text	00000002 TIM3_IRQHandler
08007bf4  w    F .text	00000002 RCC_IRQHandler
08007bf4  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08007bf4  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
0800b060 g     F .text	00000030 __srget_r
08000358 g     F .text	0000027a .hidden __aeabi_dsub
08007bf4 g     F .text	00000002 Default_Handler
08007bf4  w    F .text	00000002 ECC_IRQHandler
0800ad30 g     F .text	00000048 ferror
0800065c g     F .text	0000006a .hidden __floatundidf
0800bf70 g     F .text	00000010 _lseek
08007bf4  w    F .text	00000002 CEC_IRQHandler
08007bf4  w    F .text	00000002 EXTI15_10_IRQHandler
080072d0 g     F .text	0000000c recorder::Serial::BytesAvailable()
08009794 g     F .text	000000d8 LL_MDMA_Init
08007bf4  w    F .text	00000002 BDMA_Channel0_IRQHandler
08007bf4  w    F .text	00000002 ADC_IRQHandler
080070f4 g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
080083a0 g     F .text	00000238 HAL_RCC_ClockConfig
0800b090 g     F .text	00000026 strncpy
08007bf4  w    F .text	00000002 DMA1_Stream7_IRQHandler
08007bf4  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
08006940 g     F .text	00000014 recorder::Analog::StartTimer()
080099fc g     F .text	00000190 LL_RCC_GetPLL2ClockFreq
08007bf4  w    F .text	00000002 SPI5_IRQHandler
080070b0 g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
08007bf4  w    F .text	00000002 TIM7_IRQHandler
08007bf4  w    F .text	00000002 SDMMC1_IRQHandler
0800bd14 g     F .text	00000020 _close_r
080005f4 g     F .text	00000022 .hidden __aeabi_i2d
3800fc30  w    O .dma	00000018 recorder::Dac::dma_buffer_
08007bf4  w    F .text	00000002 TIM5_IRQHandler
2001088c g     O .bss	00000054 recorder::sample_memory_
08007bf4  w    F .text	00000002 DMA2_Stream7_IRQHandler
08007bf4  w    F .text	00000002 TIM15_IRQHandler
08007bf4  w    F .text	00000002 PVD_AVD_IRQHandler
08007bf4  w    F .text	00000002 I2C3_EV_IRQHandler
0800baa0 g     F .text	000000ac __swsetup_r
08007bf4  w    F .text	00000002 EXTI9_5_IRQHandler
38000000  w    O .sram3	0000fc00 recorder::SampleMemoryBase::buffer3_
08007bf4  w    F .text	00000002 RTC_WKUP_IRQHandler
08007bf4  w    F .text	00000002 LTDC_IRQHandler
200108e8 g     O .bss	00000004 recorder::idle_timeout_
0800b99c g     F .text	00000022 __sread
08007bf4  w    F .text	00000002 SAI3_IRQHandler
08007bf4  w    F .text	00000002 ETH_WKUP_IRQHandler
08007cbc  w    F .text	0000000c HAL_GetTick
08007bf4  w    F .text	00000002 SPDIF_RX_IRQHandler
0800b984 g     F .text	0000000c __malloc_lock
08009b8c g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
0800b934 g     F .text	00000050 _fflush_r
08007bf4  w    F .text	00000002 SPI2_IRQHandler
20000000  w    O .data	00000024 recorder::SampleMemory<half>::link_info_
0800b11e g     F .text	00000002 __retarget_lock_acquire_recursive
08007bf4  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
0800b0b6 g     F .text	00000010 memset
08007bf4  w    F .text	00000002 MemManage_Handler
08004d08 g     F .text	00000bdc main
08007bf4  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800b11c g     F .text	00000002 __retarget_lock_init_recursive
0800aca0 g     F .text	00000048 clearerr
08007bf4  w    F .text	00000002 SVC_Handler
0800ba1a g     F .text	00000008 __sclose
08007bf4  w    F .text	00000002 CRS_IRQHandler
0800ca04 g       .init_array	00000000 __init_array_end
0800b414 g     F .text	00000100 _malloc_r
20000024 g     O .data	00000004 recorder::buttonIDs
08003178 g     F .text	000000d0 recorder::Transition(recorder::State)
0800066c g     F .text	0000005a .hidden __aeabi_l2d
08007bf4  w    F .text	00000002 EXTI4_IRQHandler
08007354 g     F .text	00000038 recorder::Serial::FlushTx(bool)
0800c390  w    O .text	00000010 recorder::SynthEngine::major_chord_multipliers_
08007c3c g     F .text	00000080 SystemInit
08007bf4  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
0800c9e4 g     F .text	00000000 _fini
0800af80 g     F .text	00000024 iprintf
080069e0 g     F .text	00000060 recorder::Dac::Stop()
20010b34 g     O .bss	00000001 recorder::synth_inactive_
08006968 g     F .text	00000078 recorder::Dac::Start()
08007bf4  w    F .text	00000002 FDCAN2_IT1_IRQHandler
0800be68 g     F .text	00000024 _write_r
08007d04 g     F .text	0000001c HAL_PWR_EnterSLEEPMode
0800754c g     F .text	00000004 HAL_InitTick
08007bf4  w    F .text	00000002 ETH_IRQHandler
0800a758 g     F .text	0000000c nanf
0800b514 g     F .text	000000da _printf_common
2000003c g     O .data	00000004 _impure_ptr
08007bf4  w    F .text	00000002 TIM1_UP_IRQHandler
08005d44 g     F .text	0000000c recorder::Adc::DMAHandler()
0800b82c g     F .text	00000108 __sflush_r
08007bf4  w    F .text	00000002 BDMA_Channel4_IRQHandler
08007bf4  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
0800aee4 g     F .text	0000003c _fwalk_sglue
0800c350  w    O .text	00000020 recorder::SynthEngine::major_scale_chord_types_
20010da4  w    O .bss	00000004 recorder::Adc::instance_
0800c9f8 g       .ARM.attributes	00000000 __preinit_array_end
0800bc2c g     F .text	000000e8 __srefill_r
08007bf4  w    F .text	00000002 WWDG_IRQHandler
08007bf4  w    F .text	00000002 SPI6_IRQHandler
08003248 g     F .text	00000258 recorder::checkRecordPlayback(bool, bool)
20010b38 g     O .bss	00000108 recorder::switches_
08007bf4  w    F .text	00000002 I2C4_EV_IRQHandler
08007bf4  w    F .text	00000002 MDIOS_IRQHandler
08007bf4  w    F .text	00000002 FDCAN2_IT0_IRQHandler
0800945c g     F .text	00000034 LL_ADC_Init
08007bf4  w    F .text	00000002 LPUART1_IRQHandler
08007bf4  w    F .text	00000002 FDCAN1_IT0_IRQHandler
08007bf4  w    F .text	00000002 TIM2_IRQHandler
0800a2a0 g     F .text	000001dc sinf
08006368 g     F .text	00000074 recorder::Adc::Start()
08007bf4  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08007bf4  w    F .text	00000002 OTG_HS_IRQHandler
08007bf4  w    F .text	00000002 DMA2D_IRQHandler
08007bf4  w    F .text	00000002 TIM1_BRK_IRQHandler
20010904 g     O .bss	00000004 recorder::button_3_
0800bb4c g     F .text	0000004c __swhatbuf_r
20000580 g     O .bss	000101c8 recorder::playback_
20020000 g       *ABS*	00000000 _estack
08007bf4  w    F .text	00000002 EXTI1_IRQHandler
08007bf4  w    F .text	00000002 SDMMC2_IRQHandler
20000030 g     O .data	0000000c __sglue
08009614 g     F .text	00000166 LL_GPIO_Init
08007b78 g     F .text	00000068 _write
2000008c g       .data	00000000 _edata
08007bf4  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
20000420 g     O .bss	00000001 recorder::strum_idx_changed
080023f8 g     F .text	00000d80 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20010928 g     O .bss	0000020c recorder::synth_engine_
08007bf4  w    F .text	00000002 BDMA_Channel3_IRQHandler
080067fc g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
0800c428  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
0800a6b4 g     F .text	00000024 .hidden __math_divzerof
08007bf4  w    F .text	00000002 UART7_IRQHandler
08009550 g     F .text	000000c4 LL_DMA_Init
08007bf4  w    F .text	00000002 MDIOS_WKUP_IRQHandler
08007bf4  w    F .text	00000002 USART2_IRQHandler
0800b9be g     F .text	00000038 __swrite
08007d6c  w    F .text	00000518 HAL_RCC_OscConfig
08007bf4  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08007bf4  w    F .text	00000002 SAI4_IRQHandler
0800aec0 g     F .text	00000024 fiprintf
0800b1a0 g     F .text	00000230 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
08008798 g     F .text	00000cc4 HAL_RCCEx_PeriphCLKConfig
0800bf60 g     F .text	00000010 _kill
08007420 g     F .text	0000000c recorder::Serial::InterruptHandler()
20000040 g     O .data	0000004c _impure_data
08007bf4  w    F .text	00000002 I2C2_ER_IRQHandler
200108f0 g     O .bss	00000010 recorder::buttons
0800ae84 g     F .text	0000000c __sfp_lock_release
0800c310  w    O .text	00000010 recorder::JingleEngine::ending_jingle_
08007bf4  w    F .text	00000002 DMA2_Stream1_IRQHandler
08007450 g     F .text	0000001c TickHandler
3800fc00  w    O .dma	00000030 recorder::Adc::dma_buffer_
08007b08 g     F .text	00000070 _read
0800c9f8 g       .init_array	00000000 __init_array_start
08007bf4  w    F .text	00000002 FLASH_IRQHandler
0800bf9c g     F .text	00000002 _exit
0800a0ec g     F .text	000000e4 expf
08007980 g     F .text	0000000c recorder::system::SerialFlushTx(bool)
08000a5c  w    F .text	0000199c recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)
08007bf4  w    F .text	00000002 DMA2_Stream4_IRQHandler
08007bf4  w    F .text	00000002 BusFault_Handler
08007bf4  w    F .text	00000002 USART1_IRQHandler
0800bb98 g     F .text	00000078 __smakebuf_r
080002a0 g       .text	00000000 _stext
0800c320  w    O .text	00000010 recorder::JingleEngine::startup_jingle_
0800a6a8 g     F .text	0000000c .hidden __math_oflowf
080002a0 g     F .text	00000010 strlen
0800c330  w    O .text	00000020 recorder::SynthEngine::minor_scale_chord_types_
08007bf4  w    F .text	00000002 OTG_FS_IRQHandler
0800b5f0 g     F .text	0000023c _printf_i
08007bf4  w    F .text	00000002 SPI3_IRQHandler
08007bf4  w    F .text	00000002 WAKEUP_PIN_IRQHandler
08007bf4  w    F .text	00000002 DMA1_Stream4_IRQHandler
2001153c g     O .bss	00000004 __malloc_sbrk_start
08007bf4  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
20010900 g     O .bss	00000004 recorder::button_4_
08007bf4  w    F .text	00000002 I2C1_ER_IRQHandler
08007cf4 g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
08007bf4  w    F .text	00000002 FMC_IRQHandler
08000618 g     F .text	00000042 .hidden __aeabi_f2d
0800c6f8 g     O .text	00000060 .hidden __inv_pio4
08007bf4  w    F .text	00000002 FDCAN_CAL_IRQHandler
20011540 g     O .bss	00000004 __malloc_free_list
08007bf4  w    F .text	00000002 SWPMI1_IRQHandler
08007bf4  w    F .text	00000002 COMP1_IRQHandler
08007bf4  w    F .text	00000002 LPTIM1_IRQHandler
08007a6c g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000358 g     F .text	0000027a .hidden __subdf3
0800b1a0 g     F .text	00000230 _vfprintf_r
0800c9f8 g       .ARM.attributes	00000000 __preinit_array_start
08007bf4  w    F .text	00000002 I2C4_ER_IRQHandler
0800c414  w    O .text	00000014 recorder::SynthEngine::kAttenuationLevels
0800a9e8 g     F .text	0000026c expm1f
08007d20 g     F .text	0000004c HAL_PWREx_ConfigSupply
08007bf4  w    F .text	00000002 DMA2_Stream6_IRQHandler
08006954 g     F .text	00000014 recorder::Dac::DMAHandler()
08009490 g     F .text	00000050 LL_ADC_REG_Init
08007bf4  w    F .text	00000002 SAI1_IRQHandler
08007bf4  w    F .text	00000002 DMA1_Stream3_IRQHandler
20011539 g     O .bss	00000001 __lock___sfp_recursive_mutex
0800bf20 g     F .text	00000010 _close
0800bdec g     F .text	00000010 raise
20010910 g     O .bss	00000018 recorder::jingle_engine_
08006b9c g     F .text	000003b8 recorder::Flash::Init()



Disassembly of section .text:

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <deregister_tm_clones>:
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <deregister_tm_clones+0x10>)
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <deregister_tm_clones+0x14>)
 80006cc:	4283      	cmp	r3, r0
 80006ce:	d002      	beq.n	80006d6 <deregister_tm_clones+0xe>
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <deregister_tm_clones+0x18>)
 80006d2:	b103      	cbz	r3, 80006d6 <deregister_tm_clones+0xe>
 80006d4:	4718      	bx	r3
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	00000000 	.word	0x00000000

080006e4 <register_tm_clones>:
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <register_tm_clones+0x18>)
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <register_tm_clones+0x1c>)
 80006e8:	1a1b      	subs	r3, r3, r0
 80006ea:	0fd9      	lsrs	r1, r3, #31
 80006ec:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80006f0:	1049      	asrs	r1, r1, #1
 80006f2:	d002      	beq.n	80006fa <register_tm_clones+0x16>
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <register_tm_clones+0x20>)
 80006f6:	b103      	cbz	r3, 80006fa <register_tm_clones+0x16>
 80006f8:	4718      	bx	r3
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	2000008c 	.word	0x2000008c
 8000704:	00000000 	.word	0x00000000

08000708 <__do_global_dtors_aux>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4c06      	ldr	r4, [pc, #24]	@ (8000724 <__do_global_dtors_aux+0x1c>)
 800070c:	7823      	ldrb	r3, [r4, #0]
 800070e:	b943      	cbnz	r3, 8000722 <__do_global_dtors_aux+0x1a>
 8000710:	f7ff ffda 	bl	80006c8 <deregister_tm_clones>
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__do_global_dtors_aux+0x20>)
 8000716:	b113      	cbz	r3, 800071e <__do_global_dtors_aux+0x16>
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <__do_global_dtors_aux+0x24>)
 800071a:	f3af 8000 	nop.w
 800071e:	2301      	movs	r3, #1
 8000720:	7023      	strb	r3, [r4, #0]
 8000722:	bd10      	pop	{r4, pc}
 8000724:	20000400 	.word	0x20000400
 8000728:	00000000 	.word	0x00000000
 800072c:	0800c9f0 	.word	0x0800c9f0

08000730 <frame_dummy>:
 8000730:	b508      	push	{r3, lr}
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <frame_dummy+0x18>)
 8000734:	b11b      	cbz	r3, 800073e <frame_dummy+0xe>
 8000736:	4905      	ldr	r1, [pc, #20]	@ (800074c <frame_dummy+0x1c>)
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <frame_dummy+0x20>)
 800073a:	f3af 8000 	nop.w
 800073e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000742:	f7ff bfcf 	b.w	80006e4 <register_tm_clones>
 8000746:	bf00      	nop
 8000748:	00000000 	.word	0x00000000
 800074c:	20000404 	.word	0x20000404
 8000750:	0800c9f0 	.word	0x0800c9f0

08000754 <recorder::Analog::Start(bool) [clone .part.0]>:

        void Start(bool enable_amplifier)
        {
            if (state_ == STATE_STOPPED)
            {
                state_ = STATE_STARTING;
 8000754:	2201      	movs	r2, #1
                fade_position_ = 0;
 8000756:	f04f 0c00 	mov.w	ip, #0
protected:
    static constexpr uint32_t kPinMask = 1 << pin_number;

    static void SetHigh(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <recorder::Analog::Start(bool) [clone .part.0]+0x48>)
        void Start(bool enable_amplifier)
 800075c:	b510      	push	{r4, lr}
                state_ = STATE_STARTING;
 800075e:	f8a0 2160 	strh.w	r2, [r0, #352]	@ 0x160
 8000762:	f44f 7200 	mov.w	r2, #512	@ 0x200
                fade_position_ = 0;
 8000766:	f8c0 c15c 	str.w	ip, [r0, #348]	@ 0x15c
        void Start(bool enable_amplifier)
 800076a:	4604      	mov	r4, r0
 800076c:	619a      	str	r2, [r3, #24]
        state ? Set() : Clear();
 800076e:	b181      	cbz	r1, 8000792 <recorder::Analog::Start(bool) [clone .part.0]+0x3e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8000770:	f5a3 53a0 	sub.w	r3, r3, #5120	@ 0x1400
 8000774:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000778:	619a      	str	r2, [r3, #24]
                cue_stop_ = false;

                boost_enable_.Set();
                amp_enable_.Write(enable_amplifier);

                dac_.Start();
 800077a:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 800077e:	f006 f8f3 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 8000782:	1d20      	adds	r0, r4, #4
 8000784:	f005 fdf0 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8000788:	4620      	mov	r0, r4
            {
                // re‑open the power stage even though we never fully stopped
                boost_enable_.Set();
                amp_enable_.Write(true);
            }
        }
 800078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                StartTimer();
 800078e:	f006 b8d7 	b.w	8006940 <recorder::Analog::StartTimer()>
    }

    static void SetLow(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8000792:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <recorder::Analog::Start(bool) [clone .part.0]+0x4c>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000798:	619a      	str	r2, [r3, #24]
    }
 800079a:	e7ee      	b.n	800077a <recorder::Analog::Start(bool) [clone .part.0]+0x26>
 800079c:	58021800 	.word	0x58021800
 80007a0:	58020400 	.word	0x58020400

080007a4 <recorder::Switches::Init()>:
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <recorder::Switches::Init()+0x1d4>)
        LL_GPIO_SetPinPull(gpio_struct(gpio_base), 1 << pin_number, pull);
        LL_GPIO_SetPinMode(gpio_struct(gpio_base), 1 << pin_number,
            LL_GPIO_MODE_INPUT);

        gpio_base_ = gpio_base;
        pin_number_ = pin_number;
 80007a6:	f04f 0c0b 	mov.w	ip, #11
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007aa:	4a74      	ldr	r2, [pc, #464]	@ (800097c <recorder::Switches::Init()+0x1d8>)
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007b0:	f041 0101 	orr.w	r1, r1, #1
{

class Switches
{
public:
    void Init(void)
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        pin_number_ = pin_number;
 80007c0:	2500      	movs	r5, #0
        invert_ = invert;
 80007c2:	2701      	movs	r7, #1
 80007c4:	4604      	mov	r4, r0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007c6:	f001 0101 	and.w	r1, r1, #1
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	9901      	ldr	r1, [sp, #4]
 80007ce:	68d1      	ldr	r1, [r2, #12]
 80007d0:	f021 0103 	bic.w	r1, r1, #3
 80007d4:	f041 0101 	orr.w	r1, r1, #1
 80007d8:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80007da:	6811      	ldr	r1, [r2, #0]
 80007dc:	f021 0103 	bic.w	r1, r1, #3
 80007e0:	6011      	str	r1, [r2, #0]
        invert_ = invert;
 80007e2:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
        pin_number_ = pin_number;
 80007e6:	e9c0 250f 	strd	r2, r5, [r0, #60]	@ 0x3c
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007ea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007ee:	4339      	orrs	r1, r7
 80007f0:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007f4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007f8:	4039      	ands	r1, r7
 80007fa:	9102      	str	r1, [sp, #8]
 80007fc:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007fe:	68d1      	ldr	r1, [r2, #12]
 8000800:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8000804:	f041 0110 	orr.w	r1, r1, #16
 8000808:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800080a:	6811      	ldr	r1, [r2, #0]
 800080c:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8000810:	6011      	str	r1, [r2, #0]
        pin_number_ = pin_number;
 8000812:	2102      	movs	r1, #2
        gpio_base_ = gpio_base;
 8000814:	6002      	str	r2, [r0, #0]
        pin_number_ = pin_number;
 8000816:	6041      	str	r1, [r0, #4]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 8000818:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        invert_ = invert;
 800081c:	7207      	strb	r7, [r0, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 800081e:	f041 0108 	orr.w	r1, r1, #8
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000822:	4857      	ldr	r0, [pc, #348]	@ (8000980 <recorder::Switches::Init()+0x1dc>)
 8000824:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000828:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800082c:	f001 0108 	and.w	r1, r1, #8
 8000830:	9103      	str	r1, [sp, #12]
 8000832:	9903      	ldr	r1, [sp, #12]
 8000834:	68c6      	ldr	r6, [r0, #12]
 8000836:	4953      	ldr	r1, [pc, #332]	@ (8000984 <recorder::Switches::Init()+0x1e0>)
 8000838:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 800083c:	f446 0680 	orr.w	r6, r6, #4194304	@ 0x400000
 8000840:	60c6      	str	r6, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000842:	6806      	ldr	r6, [r0, #0]
 8000844:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 8000848:	6006      	str	r6, [r0, #0]
class Debouncer
{
public:
    void Init(uint32_t duration, bool initial_state = false)
    {
        duration_ = duration;
 800084a:	260a      	movs	r6, #10
        invert_ = invert;
 800084c:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
        pin_number_ = pin_number;
 8000850:	2704      	movs	r7, #4
 8000852:	e9c4 0c12 	strd	r0, ip, [r4, #72]	@ 0x48
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8000856:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800085a:	f040 0004 	orr.w	r0, r0, #4
 800085e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000862:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000866:	f000 0004 	and.w	r0, r0, #4
 800086a:	9004      	str	r0, [sp, #16]
 800086c:	9804      	ldr	r0, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800086e:	68c8      	ldr	r0, [r1, #12]
 8000870:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000874:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8000878:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800087a:	6808      	ldr	r0, [r1, #0]
 800087c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000880:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 8000882:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 8000884:	6127      	str	r7, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8000886:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 800088a:	7525      	strb	r5, [r4, #20]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800088c:	f040 0001 	orr.w	r0, r0, #1
 8000890:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000894:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000898:	f000 0001 	and.w	r0, r0, #1
 800089c:	9005      	str	r0, [sp, #20]
 800089e:	9805      	ldr	r0, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008a0:	68d0      	ldr	r0, [r2, #12]
 80008a2:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80008a6:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80008aa:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008ac:	6810      	ldr	r0, [r2, #0]
 80008ae:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80008b2:	6010      	str	r0, [r2, #0]
        pin_number_ = pin_number;
 80008b4:	2007      	movs	r0, #7
        gpio_base_ = gpio_base;
 80008b6:	61a2      	str	r2, [r4, #24]
        pin_number_ = pin_number;
 80008b8:	61e0      	str	r0, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80008ba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 80008be:	f884 5020 	strb.w	r5, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80008c2:	4338      	orrs	r0, r7
 80008c4:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008c8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008cc:	4038      	ands	r0, r7
 80008ce:	9006      	str	r0, [sp, #24]
 80008d0:	9806      	ldr	r0, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008d2:	68c8      	ldr	r0, [r1, #12]
 80008d4:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80008d8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80008dc:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008de:	6808      	ldr	r0, [r1, #0]
 80008e0:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80008e4:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 80008e6:	6261      	str	r1, [r4, #36]	@ 0x24
        pin_number_ = pin_number;
 80008e8:	2103      	movs	r1, #3
        invert_ = invert;
 80008ea:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
        pin_number_ = pin_number;
 80008ee:	62a1      	str	r1, [r4, #40]	@ 0x28
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80008f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80008f4:	f041 0101 	orr.w	r1, r1, #1
 80008f8:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	9307      	str	r3, [sp, #28]
 8000906:	9b07      	ldr	r3, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000908:	68d3      	ldr	r3, [r2, #12]
 800090a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800091a:	6013      	str	r3, [r2, #0]
        invert_ = invert;
 800091c:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        count_ = 0;
        history_ = initial_state;
 8000920:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 8000924:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 8000928:	f8a4 50b0 	strh.w	r5, [r4, #176]	@ 0xb0
 800092c:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
        pin_number_ = pin_number;
 8000930:	e9c4 270c 	strd	r2, r7, [r4, #48]	@ 0x30
        count_ = 0;
 8000934:	e9c4 6524 	strd	r6, r5, [r4, #144]	@ 0x90
 8000938:	e9c4 6527 	strd	r6, r5, [r4, #156]	@ 0x9c
 800093c:	e9c4 652a 	strd	r6, r5, [r4, #168]	@ 0xa8
 8000940:	e9c4 652d 	strd	r6, r5, [r4, #180]	@ 0xb4
 8000944:	e9c4 6530 	strd	r6, r5, [r4, #192]	@ 0xc0
        history_ = initial_state;
 8000948:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
        db_[SWITCH_KEY_3].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_KEY_4].Init(kButtonDebounceDuration_ms);


        db_[SWITCH_RECORD].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 800094c:	f007 f88e 	bl	8007a6c <recorder::system::WakeupWasPlayButton()>
 8000950:	462b      	mov	r3, r5
 8000952:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8000956:	f360 0307 	bfi	r3, r0, #0, #8
 800095a:	f8a4 5104 	strh.w	r5, [r4, #260]	@ 0x104
 800095e:	f360 230f 	bfi	r3, r0, #8, #8
        count_ = 0;
 8000962:	e9c4 6521 	strd	r6, r5, [r4, #132]	@ 0x84
 8000966:	e9c4 6533 	strd	r6, r5, [r4, #204]	@ 0xcc
 800096a:	e9c4 653f 	strd	r6, r5, [r4, #252]	@ 0xfc
        history_ = initial_state;
 800096e:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
            system::WakeupWasPlayButton());
        db_[SWITCH_LOOP].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_EFFECT].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_REVERSE].Init(kButtonDebounceDuration_ms);
        db_[NUM_SWITCHES + DETECT_LINE_IN].Init(kButtonDebounceDuration_ms);
    }
 8000972:	b009      	add	sp, #36	@ 0x24
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	bf00      	nop
 8000978:	58024400 	.word	0x58024400
 800097c:	58020000 	.word	0x58020000
 8000980:	58020c00 	.word	0x58020c00
 8000984:	58020800 	.word	0x58020800

08000988 <recorder::Flash::Writable(unsigned long, unsigned long)>:
        WaitForWriteInProgress();
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
        return true;
    }

    bool Writable(uint32_t location, uint32_t length)
 8000988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SendCommand(CMD_WRITE_ENABLE);
    }

    uint8_t ReadStatus(void)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800098c:	4c31      	ldr	r4, [pc, #196]	@ (8000a54 <recorder::Flash::Writable(unsigned long, unsigned long)+0xcc>)
    bool Writable(uint32_t location, uint32_t length)
 800098e:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 8000992:	4682      	mov	sl, r0
 8000994:	4689      	mov	r9, r1
 8000996:	4617      	mov	r7, r2
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8000998:	4e2f      	ldr	r6, [pc, #188]	@ (8000a58 <recorder::Flash::Writable(unsigned long, unsigned long)+0xd0>)
            QSPI_INSTRUCTION_1_LINE |
            CMD_READ_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
        uint8_t status = DataRead8();
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800099a:	2502      	movs	r5, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800099c:	68a3      	ldr	r3, [r4, #8]
 800099e:	f013 0320 	ands.w	r3, r3, #32
 80009a2:	d1fb      	bne.n	800099c <recorder::Flash::Writable(unsigned long, unsigned long)+0x14>
        QUADSPI->DLR = 0;
 80009a4:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 80009a6:	6166      	str	r6, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80009a8:	68a3      	ldr	r3, [r4, #8]
 80009aa:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80009ae:	d0fb      	beq.n	80009a8 <recorder::Flash::Writable(unsigned long, unsigned long)+0x20>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80009b0:	f894 2020 	ldrb.w	r2, [r4, #32]
 80009b4:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80009b6:	68a3      	ldr	r3, [r4, #8]
 80009b8:	0799      	lsls	r1, r3, #30
 80009ba:	d5fc      	bpl.n	80009b6 <recorder::Flash::Writable(unsigned long, unsigned long)+0x2e>
        while (write_in_progress())
 80009bc:	07d2      	lsls	r2, r2, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80009be:	60e5      	str	r5, [r4, #12]
        while (write_in_progress())
 80009c0:	d503      	bpl.n	80009ca <recorder::Flash::Writable(unsigned long, unsigned long)+0x42>
            system::Delay_ms(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f006 ffc6 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80009c8:	e7e8      	b.n	800099c <recorder::Flash::Writable(unsigned long, unsigned long)+0x14>
        while (length)
 80009ca:	2f00      	cmp	r7, #0
 80009cc:	d03a      	beq.n	8000a44 <recorder::Flash::Writable(unsigned long, unsigned long)+0xbc>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80009ce:	4c21      	ldr	r4, [pc, #132]	@ (8000a54 <recorder::Flash::Writable(unsigned long, unsigned long)+0xcc>)
        QUADSPI->CCR =
 80009d0:	4e21      	ldr	r6, [pc, #132]	@ (8000a58 <recorder::Flash::Writable(unsigned long, unsigned long)+0xd0>)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80009d2:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80009d6:	46b8      	mov	r8, r7
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80009d8:	f04f 0502 	mov.w	r5, #2
 80009dc:	bf28      	it	cs
 80009de:	f44f 6880 	movcs.w	r8, #1024	@ 0x400
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80009e2:	68a3      	ldr	r3, [r4, #8]
 80009e4:	f013 0320 	ands.w	r3, r3, #32
 80009e8:	d1fb      	bne.n	80009e2 <recorder::Flash::Writable(unsigned long, unsigned long)+0x5a>
        QUADSPI->DLR = 0;
 80009ea:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 80009ec:	6166      	str	r6, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80009f4:	d0fb      	beq.n	80009ee <recorder::Flash::Writable(unsigned long, unsigned long)+0x66>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80009f6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80009fa:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80009fc:	68a3      	ldr	r3, [r4, #8]
 80009fe:	079b      	lsls	r3, r3, #30
 8000a00:	d5fc      	bpl.n	80009fc <recorder::Flash::Writable(unsigned long, unsigned long)+0x74>
        while (write_in_progress())
 8000a02:	f012 0b01 	ands.w	fp, r2, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8000a06:	60e5      	str	r5, [r4, #12]
        while (write_in_progress())
 8000a08:	d003      	beq.n	8000a12 <recorder::Flash::Writable(unsigned long, unsigned long)+0x8a>
            system::Delay_ms(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f006 ffa2 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8000a10:	e7e7      	b.n	80009e2 <recorder::Flash::Writable(unsigned long, unsigned long)+0x5a>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8000a12:	4643      	mov	r3, r8
 8000a14:	4669      	mov	r1, sp
 8000a16:	464a      	mov	r2, r9
 8000a18:	4650      	mov	r0, sl
 8000a1a:	f006 fa9b 	bl	8006f54 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
            for (uint32_t i = 0; i < len; i++)
 8000a1e:	466b      	mov	r3, sp
 8000a20:	eb0d 0108 	add.w	r1, sp, r8
 8000a24:	e001      	b.n	8000a2a <recorder::Flash::Writable(unsigned long, unsigned long)+0xa2>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d008      	beq.n	8000a3c <recorder::Flash::Writable(unsigned long, unsigned long)+0xb4>
                if (buffer[i] != kFillByte)
 8000a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a2e:	2aff      	cmp	r2, #255	@ 0xff
 8000a30:	d0f9      	beq.n	8000a26 <recorder::Flash::Writable(unsigned long, unsigned long)+0x9e>
    }
 8000a32:	4658      	mov	r0, fp
 8000a34:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8000a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (length)
 8000a3c:	ebb7 0708 	subs.w	r7, r7, r8
            location += len;
 8000a40:	44c1      	add	r9, r8
        while (length)
 8000a42:	d1c6      	bne.n	80009d2 <recorder::Flash::Writable(unsigned long, unsigned long)+0x4a>
        return true;
 8000a44:	f04f 0b01 	mov.w	fp, #1
    }
 8000a48:	4658      	mov	r0, fp
 8000a4a:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8000a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a52:	bf00      	nop
 8000a54:	52005000 	.word	0x52005000
 8000a58:	05000105 	.word	0x05000105

08000a5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)>:
    }

    // mode = false → major scale, true → minor scale
    // major7: apply major seventh; minor7: apply minor seventh
    // if both major7 and minor7: apply major sixth
    void Process(float (&block)[kAudioOSFactor],
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	ed2d 8b0a 	vpush	{d8-d12}
 8000a64:	b093      	sub	sp, #76	@ 0x4c
 8000a66:	4604      	mov	r4, r0
 8000a68:	460d      	mov	r5, r1
 8000a6a:	eef0 aa60 	vmov.f32	s21, s1
 8000a6e:	f89d 10a0 	ldrb.w	r1, [sp, #160]	@ 0xa0
 8000a72:	f89d 00a4 	ldrb.w	r0, [sp, #164]	@ 0xa4
 8000a76:	f89d c09c 	ldrb.w	ip, [sp, #156]	@ 0x9c
                 bool mode,
                 bool major7,
                 bool minor7)
    {
        // Check for entering/exiting base frequency mode
        if (major7 && minor7) {
 8000a7a:	ea11 0600 	ands.w	r6, r1, r0
    void Process(float (&block)[kAudioOSFactor],
 8000a7e:	9101      	str	r1, [sp, #4]
        if (major7 && minor7) {
 8000a80:	f000 815c 	beq.w	8000d3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2e0>
            seventh_hold_counter_++;
 8000a84:	69a1      	ldr	r1, [r4, #24]
 8000a86:	3101      	adds	r1, #1
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000a88:	2963      	cmp	r1, #99	@ 0x63
            seventh_hold_counter_++;
 8000a8a:	61a1      	str	r1, [r4, #24]
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000a8c:	f300 83c9 	bgt.w	8001222 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7c6>
                // Return to normal operation
                updateChordTargets(major7, minor7);
            }
        }

        if (!in_base_freq_mode_) {
 8000a90:	7d21      	ldrb	r1, [r4, #20]
 8000a92:	2900      	cmp	r1, #0
 8000a94:	f001 82bd 	beq.w	8002012 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15b6>
                
            }
            
        } else {
            // Base frequency selection mode
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000a98:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 8000d28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2cc>
            // Only first voice plays the base frequency
            target_freq_[0] = base_frequency_;
            
            // Turn off all other voices
            for (int v = 1; v < kNumVoices; ++v) {
                target_freq_[v] = 0.0f;
 8000a9c:	2100      	movs	r1, #0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000a9e:	4ba3      	ldr	r3, [pc, #652]	@ (8000d2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d0>)
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000aa0:	ee20 0a27 	vmul.f32	s0, s0, s15
                target_freq_[v] = 0.0f;
 8000aa4:	6621      	str	r1, [r4, #96]	@ 0x60
 8000aa6:	6661      	str	r1, [r4, #100]	@ 0x64
 8000aa8:	66a1      	str	r1, [r4, #104]	@ 0x68
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000aaa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000aae:	ee10 1a10 	vmov	r1, s0
 8000ab2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6123      	str	r3, [r4, #16]
            target_freq_[0] = base_frequency_;
 8000aba:	65e3      	str	r3, [r4, #92]	@ 0x5c
            }
            
            // No strum activation in base freq mode
            last_strum_ = -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac0:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
    int current_chord_;
    bool mode_;

    static inline void slew(float &c, float t, float r)
    {
        float d = t - c;
 8000ac4:	edd4 6a33 	vldr	s13, [r4, #204]	@ 0xcc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000ac8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
        float d = t - c;
 8000acc:	edd4 7a39 	vldr	s15, [r4, #228]	@ 0xe4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000ad0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
        phase_inc_(0.0f),
        waveform_(Waveform::SINE)
    {}

    inline void SetFrequency(float freq) {
        phase_inc_ = freq * kPhaseFactor;
 8000ad4:	eddf 8a96 	vldr	s17, [pc, #600]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        float d = t - c;
 8000ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000adc:	ed94 5a19 	vldr	s10, [r4, #100]	@ 0x64
 8000ae0:	edd4 5a1a 	vldr	s11, [r4, #104]	@ 0x68
 8000ae4:	ee65 9a28 	vmul.f32	s19, s10, s17
            current_freq_[v] = target_freq_[v];
 8000ae8:	ed84 5a15 	vstr	s10, [r4, #84]	@ 0x54
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000af0:	ed94 4a17 	vldr	s8, [r4, #92]	@ 0x5c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000af4:	eef0 7ae7 	vabs.f32	s15, s15
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000af8:	edd4 4a18 	vldr	s9, [r4, #96]	@ 0x60
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000afc:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
            current_freq_[v] = target_freq_[v];
 8000b00:	edc4 5a16 	vstr	s11, [r4, #88]	@ 0x58
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            current_freq_[v] = target_freq_[v];
 8000b08:	ed84 4a13 	vstr	s8, [r4, #76]	@ 0x4c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b0c:	eef4 7ac6 	vcmpe.f32	s15, s12
        float d = t - c;
 8000b10:	edd4 7a3a 	vldr	s15, [r4, #232]	@ 0xe8
 8000b14:	ee24 aa28 	vmul.f32	s20, s8, s17
            current_freq_[v] = target_freq_[v];
 8000b18:	edc4 4a14 	vstr	s9, [r4, #80]	@ 0x50
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b1c:	bf88      	it	hi
 8000b1e:	eeb0 7a46 	vmovhi.f32	s14, s12
 8000b22:	ed9f 6a83 	vldr	s12, [pc, #524]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2a:	edc4 9a0e 	vstr	s19, [r4, #56]	@ 0x38
 8000b2e:	ee24 9aa8 	vmul.f32	s18, s9, s17
 8000b32:	ed84 aa08 	vstr	s20, [r4, #32]
 8000b36:	ee65 8aa8 	vmul.f32	s17, s11, s17
 8000b3a:	bfc8      	it	gt
 8000b3c:	ee76 6a87 	vaddgt.f32	s13, s13, s14
        float d = t - c;
 8000b40:	ed94 7a34 	vldr	s14, [r4, #208]	@ 0xd0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b44:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000b48:	ed84 9a0b 	vstr	s18, [r4, #44]	@ 0x2c
        float d = t - c;
 8000b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b50:	edc4 8a11 	vstr	s17, [r4, #68]	@ 0x44
 8000b54:	ee26 6a86 	vmul.f32	s12, s13, s12
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b58:	edc4 6a33 	vstr	s13, [r4, #204]	@ 0xcc
        float d = t - c;
 8000b5c:	edd4 6a35 	vldr	s13, [r4, #212]	@ 0xd4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b64:	eef0 7ae7 	vabs.f32	s15, s15
 8000b68:	ed84 6a22 	vstr	s12, [r4, #136]	@ 0x88
 8000b6c:	ed9f 6a70 	vldr	s12, [pc, #448]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000b78:	edd4 7a3b 	vldr	s15, [r4, #236]	@ 0xec
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b7c:	bf88      	it	hi
 8000b7e:	eef0 5a45 	vmovhi.f32	s11, s10
        float d = t - c;
 8000b82:	ee77 7ae6 	vsub.f32	s15, s15, s13
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b92:	bfc8      	it	gt
 8000b94:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000b98:	eef0 7ae7 	vabs.f32	s15, s15
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000ba4:	ed84 7a34 	vstr	s14, [r4, #208]	@ 0xd0
 8000ba8:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000bac:	ed94 7a36 	vldr	s14, [r4, #216]	@ 0xd8
 8000bb0:	edd4 7a3c 	vldr	s15, [r4, #240]	@ 0xf0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bb4:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000bb8:	ed84 6a25 	vstr	s12, [r4, #148]	@ 0x94
        float d = t - c;
 8000bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bc0:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bc4:	bf88      	it	hi
 8000bc6:	eef0 5a45 	vmovhi.f32	s11, s10
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bd6:	eef0 7ae7 	vabs.f32	s15, s15
 8000bda:	bfc8      	it	gt
 8000bdc:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000be8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8000bec:	edc4 6a35 	vstr	s13, [r4, #212]	@ 0xd4
 8000bf0:	ee26 6a86 	vmul.f32	s12, s13, s12
        float d = t - c;
 8000bf4:	edd4 7a3d 	vldr	s15, [r4, #244]	@ 0xf4
 8000bf8:	edd4 6a37 	vldr	s13, [r4, #220]	@ 0xdc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bfc:	bf88      	it	hi
 8000bfe:	eef0 5a45 	vmovhi.f32	s11, s10
 8000c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000c06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c0a:	ed84 6a28 	vstr	s12, [r4, #160]	@ 0xa0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c0e:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000c12:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000c16:	bfc8      	it	gt
 8000c18:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c20:	eef0 7ae7 	vabs.f32	s15, s15
 8000c24:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000c28:	ed84 7a36 	vstr	s14, [r4, #216]	@ 0xd8
 8000c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000c30:	ed94 7a3e 	vldr	s14, [r4, #248]	@ 0xf8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c34:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000c38:	edd4 7a38 	vldr	s15, [r4, #224]	@ 0xe0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c3c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000c40:	ed84 6a2b 	vstr	s12, [r4, #172]	@ 0xac
        float d = t - c;
 8000c44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c48:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c4c:	bf88      	it	hi
 8000c4e:	eef0 5a45 	vmovhi.f32	s11, s10
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000c5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000c5e:	eeb0 7ac7 	vabs.f32	s14, s14
 8000c62:	bfc8      	it	gt
 8000c64:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000c70:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8000c74:	edc4 6a37 	vstr	s13, [r4, #220]	@ 0xdc
 8000c78:	ee26 6a86 	vmul.f32	s12, s13, s12
 8000c7c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000d34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d8>
 8000c80:	bf88      	it	hi
 8000c82:	eef0 5a45 	vmovhi.f32	s11, s10
 8000c86:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            bool g = button[v];
 8000c8e:	f892 8000 	ldrb.w	r8, [r2]
 8000c92:	eef4 aae6 	vcmpe.f32	s21, s13
            if (g && !gate_[v])
 8000c96:	f894 1080 	ldrb.w	r1, [r4, #128]	@ 0x80
 8000c9a:	ed84 6a2e 	vstr	s12, [r4, #184]	@ 0xb8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c9e:	bfc8      	it	gt
 8000ca0:	ee77 7aa5 	vaddgt.f32	s15, s15, s11
 8000ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca8:	edc4 7a38 	vstr	s15, [r4, #224]	@ 0xe0
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	bfac      	ite	ge
 8000cb2:	2303      	movge	r3, #3
 8000cb4:	2304      	movlt	r3, #4
 8000cb6:	edc4 7a31 	vstr	s15, [r4, #196]	@ 0xc4
            if (g && !gate_[v])
 8000cba:	f1b8 0f00 	cmp.w	r8, #0
 8000cbe:	f000 82b8 	beq.w	8001232 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7d6>
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	f000 85d6 	beq.w	8001874 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe18>
            gate_[v] = g;
 8000cc8:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 8000ccc:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 8000cd0:	f892 9001 	ldrb.w	r9, [r2, #1]
            if (in_base_freq_mode_ && v != 0) {
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	f040 82ba 	bne.w	800124e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7f2>
            if (g && !gate_[v])
 8000cda:	f1b9 0f00 	cmp.w	r9, #0
 8000cde:	f040 8495 	bne.w	800160c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbb0>
            gate_[v] = g;
 8000ce2:	f884 6081 	strb.w	r6, [r4, #129]	@ 0x81
            else if (!g && gate_[v])
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	f000 85cf 	beq.w	800188a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe2e>
            bool g = button[v];
 8000cec:	7897      	ldrb	r7, [r2, #2]
            if (g && !gate_[v])
 8000cee:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000cf2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (g && !gate_[v])
 8000cf6:	2f00      	cmp	r7, #0
 8000cf8:	f040 8495 	bne.w	8001626 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbca>
            gate_[v] = g;
 8000cfc:	f884 7082 	strb.w	r7, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8000d00:	2900      	cmp	r1, #0
 8000d02:	f000 8497 	beq.w	8001634 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbd8>
            bool g = button[v];
 8000d06:	f892 a003 	ldrb.w	sl, [r2, #3]
            if (g && !gate_[v])
 8000d0a:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000d0e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 8000d12:	f1ba 0f00 	cmp.w	sl, #0
 8000d16:	f000 82af 	beq.w	8001278 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x81c>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 82b1 	bne.w	8001282 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x826>
                env_state_[v] = ENV_ATTACK;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8000d26:	e2ac      	b.n	8001282 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x826>
 8000d28:	414fd70a 	.word	0x414fd70a
 8000d2c:	0800c3e0 	.word	0x0800c3e0
 8000d30:	39cde32e 	.word	0x39cde32e
 8000d34:	3f7fbe77 	.word	0x3f7fbe77
 8000d38:	3f7ff972 	.word	0x3f7ff972
            if (in_base_freq_mode_) {
 8000d3c:	7d21      	ldrb	r1, [r4, #20]
        // Get the scale multipliers based on mode
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
        const int* chord_types = mode_ ? minor_scale_chord_types_ : major_scale_chord_types_;
        
        // Get the root frequency for this chord
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000d3e:	edd4 7a04 	vldr	s15, [r4, #16]
            seventh_hold_counter_ = 0;
 8000d42:	61a6      	str	r6, [r4, #24]
            if (in_base_freq_mode_) {
 8000d44:	2900      	cmp	r1, #0
 8000d46:	f040 84f7 	bne.w	8001738 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcdc>
 8000d4a:	f080 0101 	eor.w	r1, r0, #1
 8000d4e:	f894 e208 	ldrb.w	lr, [r4, #520]	@ 0x208
 8000d52:	f8d4 8204 	ldr.w	r8, [r4, #516]	@ 0x204
 8000d56:	9105      	str	r1, [sp, #20]
 8000d58:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 8000d5c:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
 8000d60:	9102      	str	r1, [sp, #8]
 8000d62:	f894 10fe 	ldrb.w	r1, [r4, #254]	@ 0xfe
 8000d66:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8000d6a:	9103      	str	r1, [sp, #12]
 8000d6c:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 8000d70:	f894 1101 	ldrb.w	r1, [r4, #257]	@ 0x101
 8000d74:	9104      	str	r1, [sp, #16]
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000d76:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
        if (a < b) {
 8000d7a:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 8000d38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2dc>
            if (mode != mode_) { mode_ = mode; }
 8000d7e:	45e6      	cmp	lr, ip
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000d80:	eeb4 0ac7 	vcmpe.f32	s0, s14
        if (a < b) {
 8000d84:	fe80 7a47 	vminnm.f32	s14, s0, s14
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000d88:	ee27 7a26 	vmul.f32	s14, s14, s13
            if (mode != mode_) { mode_ = mode; }
 8000d8c:	bf18      	it	ne
 8000d8e:	f884 c208 	strbne.w	ip, [r4, #520]	@ 0x208
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000d9a:	bfac      	ite	ge
 8000d9c:	2101      	movge	r1, #1
 8000d9e:	2100      	movlt	r1, #0
 8000da0:	ee17 ea10 	vmov	lr, s14
 8000da4:	448e      	add	lr, r1
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000da6:	49d7      	ldr	r1, [pc, #860]	@ (8001104 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6a8>)
            if (chord_idx != current_chord_)
 8000da8:	45f0      	cmp	r8, lr
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000daa:	f8df 8378 	ldr.w	r8, [pc, #888]	@ 8001124 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c8>
                current_chord_ = chord_idx;
 8000dae:	bf18      	it	ne
 8000db0:	f8c4 e204 	strne.w	lr, [r4, #516]	@ 0x204
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000db4:	f1bc 0f00 	cmp.w	ip, #0
 8000db8:	f8df c36c 	ldr.w	ip, [pc, #876]	@ 8001128 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6cc>
 8000dbc:	bf08      	it	eq
 8000dbe:	4661      	moveq	r1, ip
 8000dc0:	f8df c368 	ldr.w	ip, [pc, #872]	@ 800112c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d0>
 8000dc4:	bf18      	it	ne
 8000dc6:	46c4      	movne	ip, r8
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000dc8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
        
        // Determine chord type (major, minor, diminished)
        int chord_type = chord_types[current_chord_];
 8000dcc:	f85c 802e 	ldr.w	r8, [ip, lr, lsl #2]
 8000dd0:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000dd4:	ed91 7a00 	vldr	s14, [r1]
        const float* chord_multipliers;
        
        switch (chord_type) {
 8000dd8:	f1b8 0f01 	cmp.w	r8, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
        switch (chord_type) {
 8000de0:	f001 807e 	beq.w	8001ee0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1484>
 8000de4:	f8df e334 	ldr.w	lr, [pc, #820]	@ 800111c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c0>
 8000de8:	4fc7      	ldr	r7, [pc, #796]	@ (8001108 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ac>)
 8000dea:	f1b8 0f02 	cmp.w	r8, #2
 8000dee:	bf18      	it	ne
 8000df0:	46be      	movne	lr, r7
            default:
                chord_multipliers = major_chord_multipliers_;
        }
        
        // Calculate frequencies for the first three voices
        target_freq_[0] = root_freq * chord_multipliers[0];
 8000df2:	ed84 7a17 	vstr	s14, [r4, #92]	@ 0x5c
        target_freq_[1] = root_freq * chord_multipliers[1];
 8000df6:	edde 6a01 	vldr	s13, [lr, #4]
        target_freq_[2] = root_freq * chord_multipliers[2];
        
        // Calculate the fourth voice based on seventh flags
        if (major7 && !minor7)
 8000dfa:	9f05      	ldr	r7, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8000dfc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000e00:	edc4 6a18 	vstr	s13, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 8000e04:	edde 6a02 	vldr	s13, [lr, #8]
 8000e08:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000e0c:	edc4 6a19 	vstr	s13, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 8000e10:	2f00      	cmp	r7, #0
 8000e12:	f000 8415 	beq.w	8001640 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbe4>
 8000e16:	9f01      	ldr	r7, [sp, #4]
 8000e18:	2f00      	cmp	r7, #0
 8000e1a:	f000 8411 	beq.w	8001640 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbe4>
            target_freq_[3] = root_freq * kMajor7Ratio;
 8000e1e:	eddf 6abb 	vldr	s13, [pc, #748]	@ 800110c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b0>
 8000e22:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 8000e26:	f1b8 0f02 	cmp.w	r8, #2
        else if (minor7 && !major7)
            target_freq_[3] = root_freq * kMinor7Ratio;
        else if (major7 && minor7)
            target_freq_[3] = root_freq * kMajor6Ratio;
 8000e2a:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 8000e2e:	f000 8418 	beq.w	8001662 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc06>
 8000e32:	f1b8 0f01 	cmp.w	r8, #1
 8000e36:	f000 852d 	beq.w	8001894 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe38>
            if (strum_state_[s] != ENV_IDLE)
 8000e3a:	f1b9 0f00 	cmp.w	r9, #0
 8000e3e:	d005      	beq.n	8000e4c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3f0>
                strum_target_[s] = note * (1 << oct);
 8000e40:	ed91 7a00 	vldr	s14, [r1]
 8000e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e48:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8000e4c:	9802      	ldr	r0, [sp, #8]
 8000e4e:	b148      	cbz	r0, 8000e64 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x408>
                strum_target_[s] = note * (1 << oct);
 8000e50:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8001110 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b4>
 8000e54:	ed91 7a00 	vldr	s14, [r1]
 8000e58:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000e60:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8000e64:	9803      	ldr	r0, [sp, #12]
 8000e66:	b148      	cbz	r0, 8000e7c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x420>
                strum_target_[s] = note * (1 << oct);
 8000e68:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8001114 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b8>
 8000e6c:	ed91 7a00 	vldr	s14, [r1]
 8000e70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000e78:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8000e7c:	f1bb 0f00 	cmp.w	fp, #0
 8000e80:	d007      	beq.n	8000e92 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x436>
                strum_target_[s] = note * (1 << oct);
 8000e82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000e86:	ed91 7a00 	vldr	s14, [r1]
 8000e8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000e8e:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8000e92:	f1ba 0f00 	cmp.w	sl, #0
 8000e96:	d007      	beq.n	8000ea8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x44c>
                strum_target_[s] = note * (1 << oct);
 8000e98:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000e9c:	ed91 7a00 	vldr	s14, [r1]
 8000ea0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ea4:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8000ea8:	9804      	ldr	r0, [sp, #16]
 8000eaa:	b148      	cbz	r0, 8000ec0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x464>
                strum_target_[s] = note * (1 << oct);
 8000eac:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8001118 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6bc>
 8000eb0:	ed91 7a00 	vldr	s14, [r1]
 8000eb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000eb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ebc:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
            if (strum_idx_changed)
 8000ec0:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f000 8416 	beq.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                int idx = strum_idx % kNumVoices;
 8000ec8:	4258      	negs	r0, r3
 8000eca:	f003 0e03 	and.w	lr, r3, #3
                last_strum_ = strum_idx;
 8000ece:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
                int idx = strum_idx % kNumVoices;
 8000ed2:	f000 0003 	and.w	r0, r0, #3
                int chord_type = chord_types[current_chord_];
 8000ed6:	f8dc 7000 	ldr.w	r7, [ip]
                float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000eda:	edd1 5a00 	vldr	s11, [r1]
                int idx = strum_idx % kNumVoices;
 8000ede:	bf58      	it	pl
 8000ee0:	f1c0 0e00 	rsbpl	lr, r0, #0
                int oct = strum_idx / kNumVoices;
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bfb8      	it	lt
 8000eea:	1cd8      	addlt	r0, r3, #3
                switch (chord_type) {
 8000eec:	2f01      	cmp	r7, #1
                int oct = strum_idx / kNumVoices;
 8000eee:	ea4f 00a0 	mov.w	r0, r0, asr #2
                switch (chord_type) {
 8000ef2:	f001 8131 	beq.w	8002158 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16fc>
                    case 0: chord_multipliers = major_chord_multipliers_; break;
 8000ef6:	4e89      	ldr	r6, [pc, #548]	@ (800111c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c0>)
 8000ef8:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 8001108 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ac>
 8000efc:	2f02      	cmp	r7, #2
 8000efe:	bf18      	it	ne
 8000f00:	4666      	movne	r6, ip
                float target_note = note * (1 << oct);
 8000f02:	f04f 0c01 	mov.w	ip, #1
                float note = root_freq * chord_multipliers[idx];
 8000f06:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8000f0a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8001120 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c4>
 8000f0e:	2f02      	cmp	r7, #2
                float target_note = note * (1 << oct);
 8000f10:	fa0c f000 	lsl.w	r0, ip, r0
 8000f14:	ed96 6a00 	vldr	s12, [r6]
 8000f18:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8000f1c:	ee07 0a10 	vmov	s14, r0
 8000f20:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8000f24:	eb04 0686 	add.w	r6, r4, r6, lsl #2
                strum_state_[voice_idx] = ENV_ATTACK;
 8000f28:	4423      	add	r3, r4
                float target_note = note * (1 << oct);
 8000f2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f32:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000f36:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000f3a:	ee67 6a26 	vmul.f32	s13, s14, s13
                strum_current_[voice_idx] = target_note;
 8000f3e:	ed80 7a33 	vstr	s14, [r0, #204]	@ 0xcc
                strum_target_[voice_idx] = target_note;
 8000f42:	ed80 7a39 	vstr	s14, [r0, #228]	@ 0xe4
 8000f46:	edc6 6a22 	vstr	s13, [r6, #136]	@ 0x88
                strum_level_[voice_idx] = 0.0f;
 8000f4a:	f04f 0600 	mov.w	r6, #0
 8000f4e:	f8c0 6104 	str.w	r6, [r0, #260]	@ 0x104
                strum_state_[voice_idx] = ENV_ATTACK;
 8000f52:	f883 c0fc 	strb.w	ip, [r3, #252]	@ 0xfc
                strum_activation_time_[voice_idx] = ++strum_activation_counter_;
 8000f56:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 8000f5a:	4463      	add	r3, ip
 8000f5c:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8000f60:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
                strum_attenuation_[voice_idx] = 1.0f;
 8000f64:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f68:	f8c0 313c 	str.w	r3, [r0, #316]	@ 0x13c
            if (strum_state_[s] != ENV_IDLE)
 8000f6c:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
 8000f70:	f001 80a1 	beq.w	80020b6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x165a>
 8000f74:	4567      	cmp	r7, ip
 8000f76:	f001 813c 	beq.w	80021f2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1796>
 8000f7a:	f1b9 0f00 	cmp.w	r9, #0
 8000f7e:	d005      	beq.n	8000f8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x530>
                strum_target_[s] = note * (1 << oct);
 8000f80:	ed91 7a00 	vldr	s14, [r1]
 8000f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f88:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8000f8c:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	b14b      	cbz	r3, 8000fa8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x54c>
                strum_target_[s] = note * (1 << oct);
 8000f94:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001110 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b4>
 8000f98:	edd1 6a00 	vldr	s13, [r1]
 8000f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000fa4:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8000fa8:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8000fac:	9303      	str	r3, [sp, #12]
 8000fae:	b14b      	cbz	r3, 8000fc4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x568>
                strum_target_[s] = note * (1 << oct);
 8000fb0:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001114 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b8>
 8000fb4:	ed91 7a00 	vldr	s14, [r1]
 8000fb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000fbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000fc0:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8000fc4:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8000fc8:	f1bb 0f00 	cmp.w	fp, #0
 8000fcc:	d007      	beq.n	8000fde <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x582>
                strum_target_[s] = note * (1 << oct);
 8000fce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000fd2:	ed91 7a00 	vldr	s14, [r1]
 8000fd6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000fda:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8000fde:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 8000fe2:	f1ba 0f00 	cmp.w	sl, #0
 8000fe6:	d007      	beq.n	8000ff8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x59c>
                strum_target_[s] = note * (1 << oct);
 8000fe8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000fec:	ed91 7a00 	vldr	s14, [r1]
 8000ff0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ff4:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8000ff8:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8000ffc:	9304      	str	r3, [sp, #16]
 8000ffe:	b14b      	cbz	r3, 8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 8001000:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001118 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6bc>
 8001004:	ed91 7a00 	vldr	s14, [r1]
 8001008:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
            if (strum_state_[s] != ENV_IDLE)
 8001014:	f1b9 0f00 	cmp.w	r9, #0
 8001018:	f001 8011 	beq.w	800203e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e2>
                active_voices[active_count].index = s;
 800101c:	2300      	movs	r3, #0
                active_count++;
 800101e:	f04f 0801 	mov.w	r8, #1
                active_voices[active_count].index = s;
 8001022:	9306      	str	r3, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001024:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001028:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 800102a:	9b02      	ldr	r3, [sp, #8]
 800102c:	b153      	cbz	r3, 8001044 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5e8>
                active_voices[active_count].index = s;
 800102e:	a912      	add	r1, sp, #72	@ 0x48
 8001030:	2301      	movs	r3, #1
 8001032:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8001036:	4498      	add	r8, r3
 8001038:	f841 3c30 	str.w	r3, [r1, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800103c:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8001040:	f841 3c2c 	str.w	r3, [r1, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001044:	9b03      	ldr	r3, [sp, #12]
 8001046:	b15b      	cbz	r3, 8001060 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x604>
                active_voices[active_count].index = s;
 8001048:	a912      	add	r1, sp, #72	@ 0x48
 800104a:	2302      	movs	r3, #2
 800104c:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8001050:	f108 0801 	add.w	r8, r8, #1
 8001054:	f841 3c30 	str.w	r3, [r1, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001058:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800105c:	f841 3c2c 	str.w	r3, [r1, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001060:	f1bb 0f00 	cmp.w	fp, #0
 8001064:	d00b      	beq.n	800107e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x622>
                active_voices[active_count].index = s;
 8001066:	ab12      	add	r3, sp, #72	@ 0x48
 8001068:	2103      	movs	r1, #3
 800106a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800106e:	f108 0801 	add.w	r8, r8, #1
 8001072:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001076:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 800107a:	f843 1c2c 	str.w	r1, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 800107e:	f1ba 0f00 	cmp.w	sl, #0
 8001082:	d00b      	beq.n	800109c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x640>
                active_voices[active_count].index = s;
 8001084:	ab12      	add	r3, sp, #72	@ 0x48
 8001086:	2104      	movs	r1, #4
 8001088:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800108c:	f108 0801 	add.w	r8, r8, #1
 8001090:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001094:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 8001098:	f843 1c2c 	str.w	r1, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 800109c:	9b04      	ldr	r3, [sp, #16]
 800109e:	b15b      	cbz	r3, 80010b8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x65c>
                active_voices[active_count].index = s;
 80010a0:	ab12      	add	r3, sp, #72	@ 0x48
 80010a2:	2105      	movs	r1, #5
 80010a4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80010a8:	f108 0801 	add.w	r8, r8, #1
 80010ac:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 80010b0:	f8d4 1134 	ldr.w	r1, [r4, #308]	@ 0x134
 80010b4:	f843 1c2c 	str.w	r1, [r3, #-44]
            strum_attenuation_[s] = 1.0f;
 80010b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 80010bc:	f1b8 0f01 	cmp.w	r8, #1
            strum_attenuation_[s] = 1.0f;
 80010c0:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 80010c4:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80010c8:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 80010cc:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80010d0:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80010d4:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 80010d8:	f340 830c 	ble.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
            for (int i = 0; i < active_count - 1; i++)
 80010dc:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80010e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80010e4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 80010e6:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 80010ea:	463b      	mov	r3, r7
 80010ec:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 80010f0:	f10d 0e20 	add.w	lr, sp, #32
 80010f4:	e9cd 7202 	strd	r7, r2, [sp, #8]
                for (int j = 0; j < active_count - i - 1; j++)
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	2901      	cmp	r1, #1
 80010fc:	dd4d      	ble.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80010fe:	45b4      	cmp	ip, r6
 8001100:	d851      	bhi.n	80011a6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x74a>
 8001102:	e025      	b.n	8001150 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f4>
 8001104:	0800c3a0 	.word	0x0800c3a0
 8001108:	0800c390 	.word	0x0800c390
 800110c:	3ff1a1c2 	.word	0x3ff1a1c2
 8001110:	3fa14517 	.word	0x3fa14517
 8001114:	3fbfc886 	.word	0x3fbfc886
 8001118:	40214517 	.word	0x40214517
 800111c:	0800c370 	.word	0x0800c370
 8001120:	39cde32e 	.word	0x39cde32e
 8001124:	0800c330 	.word	0x0800c330
 8001128:	0800c3c0 	.word	0x0800c3c0
 800112c:	0800c350 	.word	0x0800c350
 8001130:	412f73da 	.word	0x412f73da
 8001134:	3f7fbe77 	.word	0x3f7fbe77
 8001138:	3c4ccccd 	.word	0x3c4ccccd
 800113c:	3b4ccccd 	.word	0x3b4ccccd
 8001140:	3f7f3333 	.word	0x3f7f3333
 8001144:	3ca3d70a 	.word	0x3ca3d70a
 8001148:	40c90fdb 	.word	0x40c90fdb
 800114c:	40a7ef06 	.word	0x40a7ef06
                for (int j = 0; j < active_count - i - 1; j++)
 8001150:	2b01      	cmp	r3, #1
 8001152:	f000 86c9 	beq.w	8001ee8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x148c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001156:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001158:	42b7      	cmp	r7, r6
 800115a:	d334      	bcc.n	80011c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x76a>
                for (int j = 0; j < active_count - i - 1; j++)
 800115c:	2b02      	cmp	r3, #2
 800115e:	f001 8037 	beq.w	80021d0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1774>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001162:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8001166:	4557      	cmp	r7, sl
 8001168:	d83d      	bhi.n	80011e6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x78a>
                for (int j = 0; j < active_count - i - 1; j++)
 800116a:	2b03      	cmp	r3, #3
 800116c:	f001 803e 	beq.w	80021ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1790>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001170:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8001172:	45ba      	cmp	sl, r7
 8001174:	d845      	bhi.n	8001202 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7a6>
                for (int j = 0; j < active_count - i - 1; j++)
 8001176:	2b04      	cmp	r3, #4
 8001178:	f001 80aa 	beq.w	80022d0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1874>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800117c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800117e:	42b9      	cmp	r1, r7
 8001180:	d20b      	bcs.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 8001182:	aa0e      	add	r2, sp, #56	@ 0x38
 8001184:	9201      	str	r2, [sp, #4]
                        active_voices[j] = active_voices[j + 1];
 8001186:	aa10      	add	r2, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 8001188:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 800118c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001190:	9a01      	ldr	r2, [sp, #4]
 8001192:	e882 0003 	stmia.w	r2, {r0, r1}
                        active_voices[j + 1] = temp;
 8001196:	e9cd a710 	strd	sl, r7, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 800119a:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 800119c:	1c59      	adds	r1, r3, #1
 800119e:	2901      	cmp	r1, #1
 80011a0:	ddfb      	ble.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011a2:	45b4      	cmp	ip, r6
 80011a4:	d9d4      	bls.n	8001150 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f4>
                        VoiceInfo temp = active_voices[j];
 80011a6:	9e06      	ldr	r6, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 80011a8:	aa06      	add	r2, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 80011aa:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 80011ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80011b0:	e882 0003 	stmia.w	r2, {r0, r1}
                        active_voices[j + 1] = temp;
 80011b4:	e9cd 6c08 	strd	r6, ip, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 80011b8:	f000 8696 	beq.w	8001ee8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x148c>
 80011bc:	4666      	mov	r6, ip
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011be:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80011c0:	468c      	mov	ip, r1
 80011c2:	42b7      	cmp	r7, r6
 80011c4:	d2ca      	bcs.n	800115c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x700>
                        VoiceInfo temp = active_voices[j];
 80011c6:	9f08      	ldr	r7, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 80011c8:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 80011ca:	e899 0003 	ldmia.w	r9, {r0, r1}
 80011ce:	e88e 0003 	stmia.w	lr, {r0, r1}
                        active_voices[j + 1] = temp;
 80011d2:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 80011d6:	f000 87fe 	beq.w	80021d6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x177a>
 80011da:	4637      	mov	r7, r6
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011dc:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80011e0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80011e2:	4557      	cmp	r7, sl
 80011e4:	d9c1      	bls.n	800116a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x70e>
                        VoiceInfo temp = active_voices[j];
 80011e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 80011ea:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 80011ec:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80011f0:	e889 0003 	stmia.w	r9, {r0, r1}
                        active_voices[j + 1] = temp;
 80011f4:	e9cd a70c 	strd	sl, r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 80011f8:	d0cf      	beq.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 80011fa:	46ba      	mov	sl, r7
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011fc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80011fe:	45ba      	cmp	sl, r7
 8001200:	d9b9      	bls.n	8001176 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x71a>
                        active_voices[j] = active_voices[j + 1];
 8001202:	a90e      	add	r1, sp, #56	@ 0x38
                        VoiceInfo temp = active_voices[j];
 8001204:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001206:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 8001208:	9101      	str	r1, [sp, #4]
 800120a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800120e:	e88b 0003 	stmia.w	fp, {r0, r1}
                        active_voices[j + 1] = temp;
 8001212:	e9cd 7a0e 	strd	r7, sl, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 8001216:	d0c0      	beq.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001218:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800121a:	458a      	cmp	sl, r1
 800121c:	d9bd      	bls.n	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 800121e:	4657      	mov	r7, sl
 8001220:	e7b1      	b.n	8001186 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x72a>
                in_base_freq_mode_ = true;
 8001222:	2301      	movs	r3, #1
 8001224:	7523      	strb	r3, [r4, #20]
                        env_state_[v] = ENV_ATTACK;
 8001226:	f103 2304 	add.w	r3, r3, #67109888	@ 0x4000400
 800122a:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800122e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        if (!in_base_freq_mode_) {
 8001230:	e432      	b.n	8000a98 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3c>
            else if (!g && gate_[v])
 8001232:	2900      	cmp	r1, #0
 8001234:	f43f ad48 	beq.w	8000cc8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x26c>
            gate_[v] = g;
 8001238:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 800123c:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 8001240:	f892 9001 	ldrb.w	r9, [r2, #1]
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8001244:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (in_base_freq_mode_ && v != 0) {
 8001248:	2e00      	cmp	r6, #0
 800124a:	f43f ad46 	beq.w	8000cda <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x27e>
            else if (!g && gate_[v])
 800124e:	b121      	cbz	r1, 800125a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7fe>
            gate_[v] = g;
 8001250:	2200      	movs	r2, #0
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8001252:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            gate_[v] = g;
 8001256:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
            if (g && !gate_[v])
 800125a:	f894 9082 	ldrb.w	r9, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 800125e:	f1b9 0f00 	cmp.w	r9, #0
 8001262:	f000 830c 	beq.w	800187e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe22>
            gate_[v] = g;
 8001266:	f04f 0900 	mov.w	r9, #0
            if (g && !gate_[v])
 800126a:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 800126e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 8001272:	464f      	mov	r7, r9
            gate_[v] = g;
 8001274:	f884 9082 	strb.w	r9, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8001278:	b10a      	cbz	r2, 800127e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x822>
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 800127a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
            if (g && !gate_[v])
 800127e:	f04f 0a00 	mov.w	sl, #0
        float releaseTime = kMinRelTime * exp2f(hold_pot * kRelLog2Ratio);
 8001282:	ed1f 0a55 	vldr	s0, [pc, #-340]	@ 8001130 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d4>
            gate_[v] = g;
 8001286:	f884 a083 	strb.w	sl, [r4, #131]	@ 0x83
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 800128a:	ee20 0a6a 	vnmul.f32	s0, s0, s21
 800128e:	f008 ff9f 	bl	800a1d0 <exp2f>
        if (hold_pot < 0.999f)
 8001292:	ed5f 7a58 	vldr	s15, [pc, #-352]	@ 8001134 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d8>
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 8001296:	ed1f 7a58 	vldr	s14, [pc, #-352]	@ 8001138 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6dc>
        if (hold_pot < 0.999f)
 800129a:	eef4 aae7 	vcmpe.f32	s21, s15
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 800129e:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 80012a2:	ee20 ba07 	vmul.f32	s22, s0, s14
        if (hold_pot < 0.999f)
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	f100 838c 	bmi.w	80019c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf6a>
 80012ae:	f894 806d 	ldrb.w	r8, [r4, #109]	@ 0x6d
 80012b2:	f894 906e 	ldrb.w	r9, [r4, #110]	@ 0x6e
 80012b6:	f894 706f 	ldrb.w	r7, [r4, #111]	@ 0x6f
            switch (env_state_[v])
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f000 854f 	beq.w	8001d5e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1302>
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	f000 8517 	beq.w	8001cf4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1298>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	f040 8340 	bne.w	800194c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xef0>
                    env_level_[v] += kAttackInc;
 80012cc:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] >= 1.0f)
 80012d0:	ed1f 7a65 	vldr	s14, [pc, #-404]	@ 8001140 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	f280 8642 	bge.w	8001f64 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1508>
                    env_level_[v] += kAttackInc;
 80012e0:	ed1f 7a6a 	vldr	s14, [pc, #-424]	@ 800113c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 80012e4:	ed5f ba69 	vldr	s23, [pc, #-420]	@ 8001144 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 80012e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ec:	ee67 baab 	vmul.f32	s23, s15, s23
 80012f0:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
        waveform_ = w;
    }

    inline float Process() {
        float out;
        if (waveform_ == Waveform::SINE) {
 80012f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            out = sinf(phase_);
 80012f6:	ed94 ca07 	vldr	s24, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 8511 	bne.w	8001d22 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x12c6>
            out = sinf(phase_);
 8001300:	eeb0 0a4c 	vmov.f32	s0, s24
 8001304:	f008 ffcc 	bl	800a2a0 <sinf>
            float tri = (phi < 1.0f)
                      ? phi
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
            out = tri * 2.0f - 1.0f;
        }
        phase_ += phase_inc_;
 8001308:	ee7c 7a0a 	vadd.f32	s15, s24, s20
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 800130c:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 8001148 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 8001310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	db01      	blt.n	800131e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8c2>
 800131a:	ee77 7ac7 	vsub.f32	s15, s15, s14
            switch (env_state_[v])
 800131e:	f1b8 0f02 	cmp.w	r8, #2
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8001322:	ee20 8a2b 	vmul.f32	s16, s0, s23
 8001326:	edc4 7a07 	vstr	s15, [r4, #28]
            switch (env_state_[v])
 800132a:	f000 8318 	beq.w	800195e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf02>
 800132e:	f1b8 0f04 	cmp.w	r8, #4
 8001332:	f000 84cc 	beq.w	8001cce <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1272>
 8001336:	f1b8 0f01 	cmp.w	r8, #1
 800133a:	f040 82fc 	bne.w	8001936 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xeda>
                    env_level_[v] += kAttackInc;
 800133e:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] >= 1.0f)
 8001342:	ed1f 7a81 	vldr	s14, [pc, #-516]	@ 8001140 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	f280 863e 	bge.w	8001fce <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1572>
                    env_level_[v] += kAttackInc;
 8001352:	ed1f 7a86 	vldr	s14, [pc, #-536]	@ 800113c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 8001356:	ed1f aa85 	vldr	s20, [pc, #-532]	@ 8001144 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 800135a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800135e:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8001362:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
        if (waveform_ == Waveform::SINE) {
 8001366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            out = sinf(phase_);
 8001368:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
        if (waveform_ == Waveform::SINE) {
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 830d 	bne.w	800198c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf30>
            out = sinf(phase_);
 8001372:	eeb0 0a6b 	vmov.f32	s0, s23
 8001376:	f008 ff93 	bl	800a2a0 <sinf>
        phase_ += phase_inc_;
 800137a:	ee7b 7a89 	vadd.f32	s15, s23, s18
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 800137e:	ed1f 7a8e 	vldr	s14, [pc, #-568]	@ 8001148 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 8001382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	db01      	blt.n	8001390 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x934>
 800138c:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8001390:	eea0 8a0a 	vfma.f32	s16, s0, s20
 8001394:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
            switch (env_state_[v])
 8001398:	f1b9 0f02 	cmp.w	r9, #2
 800139c:	f000 8484 	beq.w	8001ca8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x124c>
 80013a0:	f1b9 0f04 	cmp.w	r9, #4
 80013a4:	f000 844b 	beq.w	8001c3e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11e2>
 80013a8:	f1b9 0f01 	cmp.w	r9, #1
 80013ac:	f040 82b8 	bne.w	8001920 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xec4>
                    env_level_[v] += kAttackInc;
 80013b0:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] >= 1.0f)
 80013b4:	ed1f 7a9e 	vldr	s14, [pc, #-632]	@ 8001140 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 80013b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	f280 85ef 	bge.w	8001fa2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1546>
                    env_level_[v] += kAttackInc;
 80013c4:	ed1f 7aa3 	vldr	s14, [pc, #-652]	@ 800113c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 80013c8:	ed1f 9aa2 	vldr	s18, [pc, #-648]	@ 8001144 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 80013cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d0:	ee27 9a89 	vmul.f32	s18, s15, s18
 80013d4:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
        if (waveform_ == Waveform::SINE) {
 80013d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
            out = sinf(phase_);
 80013da:	ed94 aa0d 	vldr	s20, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8444 	bne.w	8001c6c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1210>
            out = sinf(phase_);
 80013e4:	eeb0 0a4a 	vmov.f32	s0, s20
 80013e8:	f008 ff5a 	bl	800a2a0 <sinf>
        phase_ += phase_inc_;
 80013ec:	ee7a 7a29 	vadd.f32	s15, s20, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 80013f0:	ed1f 7aab 	vldr	s14, [pc, #-684]	@ 8001148 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 80013f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	db01      	blt.n	8001402 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9a6>
 80013fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8001402:	eea0 8a09 	vfma.f32	s16, s0, s18
 8001406:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
            switch (env_state_[v])
 800140a:	2f02      	cmp	r7, #2
 800140c:	f000 84e5 	beq.w	8001dda <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x137e>
 8001410:	2f04      	cmp	r7, #4
 8001412:	f000 84b7 	beq.w	8001d84 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1328>
 8001416:	2f01      	cmp	r7, #1
 8001418:	f040 8278 	bne.w	800190c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xeb0>
                    env_level_[v] += kAttackInc;
 800141c:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] >= 1.0f)
 8001420:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 8001140 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	f2c0 85a4 	blt.w	8001f78 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x151c>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001430:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001434:	2202      	movs	r2, #2
 8001436:	ed1f 9abd 	vldr	s18, [pc, #-756]	@ 8001144 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 800143a:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
 800143e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        if (waveform_ == Waveform::SINE) {
 8001440:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            out = sinf(phase_);
 8001442:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
        if (waveform_ == Waveform::SINE) {
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 84b3 	bne.w	8001db2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1356>
            out = sinf(phase_);
 800144c:	eeb0 0a69 	vmov.f32	s0, s19
 8001450:	f008 ff26 	bl	800a2a0 <sinf>
        phase_ += phase_inc_;
 8001454:	ee78 7aa9 	vadd.f32	s15, s17, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001458:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 8001148 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 800145c:	eea0 8a09 	vfma.f32	s16, s0, s18
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	bfa8      	it	ge
 800146a:	ee77 7ac7 	vsubge.f32	s15, s15, s14
        phase_ += phase_inc_;
 800146e:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
        if (!in_base_freq_mode_) {
 8001472:	2e00      	cmp	r6, #0
 8001474:	d16a      	bne.n	800154c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xaf0>
        float strumReleaseTime = kStrumMinRelTime * exp2f(hold_pot * kStrumRelLog2Ratio);
 8001476:	ed1f 0acb 	vldr	s0, [pc, #-812]	@ 800114c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f0>
 800147a:	f104 06fb 	add.w	r6, r4, #251	@ 0xfb
 800147e:	f504 7b82 	add.w	fp, r4, #260	@ 0x104
 8001482:	46a0      	mov	r8, r4
 8001484:	ee20 0a6a 	vnmul.f32	s0, s0, s21
                        if (strum_level_[s] >= 1.0f)
 8001488:	ed9f aa9c 	vldr	s20, [pc, #624]	@ 80016fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca0>
 800148c:	f008 fea0 	bl	800a1d0 <exp2f>
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 8001490:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8001700 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca4>
                        if (strum_level_[s] <= kSustain)
 8001494:	eddf aa9b 	vldr	s21, [pc, #620]	@ 8001704 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca8>
 8001498:	f204 1a01 	addw	sl, r4, #257	@ 0x101
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 800149c:	ee60 9a27 	vmul.f32	s19, s0, s15
                        if (strum_level_[s] <= 0.0f)
 80014a0:	ed9f ba99 	vldr	s22, [pc, #612]	@ 8001708 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcac>
 80014a4:	e015      	b.n	80014d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa76>
                switch (strum_state_[s])
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d10d      	bne.n	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                        strum_level_[s] += kAttackInc;
 80014aa:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] >= 1.0f)
 80014ae:	eef4 7aca 	vcmpe.f32	s15, s20
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	f280 82a2 	bge.w	80019fe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfa2>
                        strum_level_[s] += kAttackInc;
 80014ba:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800170c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb0>
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	edcb 7a00 	vstr	s15, [fp]
            for (int s = 0; s < kNumStrum; ++s)
 80014c6:	4556      	cmp	r6, sl
 80014c8:	f10b 0b04 	add.w	fp, fp, #4
 80014cc:	f108 080c 	add.w	r8, r8, #12
 80014d0:	d03c      	beq.n	800154c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xaf0>
                switch (strum_state_[s])
 80014d2:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f000 8209 	beq.w	80018ee <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe92>
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d1e2      	bne.n	80014a6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa4a>
                        strum_level_[s] -= strumRelInc;
 80014e0:	eddb 8a00 	vldr	s17, [fp]
 80014e4:	ee78 8ae9 	vsub.f32	s17, s17, s19
                        if (strum_level_[s] <= 0.0f)
 80014e8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
                        strum_level_[s] -= strumRelInc;
 80014ec:	edcb 8a00 	vstr	s17, [fp]
                        if (strum_level_[s] <= 0.0f)
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	f240 82be 	bls.w	8001a74 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1018>
        if (waveform_ == Waveform::SINE) {
 80014f8:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
            out = sinf(phase_);
 80014fc:	ed98 9a21 	vldr	s18, [r8, #132]	@ 0x84
        if (waveform_ == Waveform::SINE) {
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 8480 	bne.w	8001e06 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13aa>
            out = sinf(phase_);
 8001506:	eeb0 0a49 	vmov.f32	s0, s18
 800150a:	f008 fec9 	bl	800a2a0 <sinf>
        phase_ += phase_inc_;
 800150e:	edd8 7a22 	vldr	s15, [r8, #136]	@ 0x88
            for (int s = 0; s < kNumStrum; ++s)
 8001512:	f10b 0b04 	add.w	fp, fp, #4
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001516:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001710 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb4>
 800151a:	f108 080c 	add.w	r8, r8, #12
        phase_ += phase_inc_;
 800151e:	ee79 7a27 	vadd.f32	s15, s18, s15
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	bfa8      	it	ge
 800152c:	ee77 7ac7 	vsubge.f32	s15, s15, s14
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 8001530:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001714 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb8>
            for (int s = 0; s < kNumStrum; ++s)
 8001534:	4556      	cmp	r6, sl
        phase_ += phase_inc_;
 8001536:	edc8 7a1e 	vstr	s15, [r8, #120]	@ 0x78
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 800153a:	eddb 7a0d 	vldr	s15, [fp, #52]	@ 0x34
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8001546:	eea7 8a80 	vfma.f32	s16, s15, s0
            for (int s = 0; s < kNumStrum; ++s)
 800154a:	d1c2      	bne.n	80014d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa76>
        float absIn = fabsf(in);
 800154c:	eef0 6ac8 	vabs.f32	s13, s16
        if (absIn > compEnv_)
 8001550:	ed94 7a00 	vldr	s14, [r4]
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 8001554:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        mix = tanh(2.5 * mix);
 8001558:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
        if (absIn > compEnv_)
 800155c:	eef4 6ac7 	vcmpe.f32	s13, s14
        mix = tanh(2.5 * mix);
 8001560:	ee28 0a00 	vmul.f32	s0, s16, s0
        if (absIn > compEnv_)
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 8001568:	bfcc      	ite	gt
 800156a:	ed94 6a02 	vldrgt	s12, [r4, #8]
            compEnv_ = alphaRel_ * compEnv_ + (1 - alphaRel_) * absIn;
 800156e:	ed94 6a03 	vldrle	s12, [r4, #12]
 8001572:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800157a:	eee7 7a06 	vfma.f32	s15, s14, s12
                            ? (kCompThreshold / compEnv_)
 800157e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001586:	edc4 7a00 	vstr	s15, [r4]
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	bfcc      	ite	gt
 8001590:	eec7 6a27 	vdivgt.f32	s13, s14, s15
 8001594:	eef0 6a47 	vmovle.f32	s13, s14
        if (targetGain < compGain_)
 8001598:	ed94 7a01 	vldr	s14, [r4, #4]
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 800159c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        if (targetGain < compGain_)
 80015a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 80015a8:	bfcc      	ite	gt
 80015aa:	ed94 6a02 	vldrgt	s12, [r4, #8]
            compGain_ = alphaRel_ * compGain_ + (1 - alphaRel_) * targetGain;
 80015ae:	ed94 6a03 	vldrle	s12, [r4, #12]
 80015b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80015b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015ba:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001718 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcbc>
 80015be:	eee7 7a06 	vfma.f32	s15, s14, s12
 80015c2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800171c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc0>
 80015c6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80015ca:	edc4 7a01 	vstr	s15, [r4, #4]
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
 80015ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80015d2:	f009 f8c7 	bl	800a764 <tanhf>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80015d6:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8001720 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc4>
 80015da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	f100 8219 	bmi.w	8001a18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfbc>
        mix *= kAudioOSFactor * kAudioOutputLevel;
 80015e6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001724 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc8>
      if (__b < __a)
 80015ea:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80015ee:	ee20 0a07 	vmul.f32	s0, s0, s14
 80015f2:	fe80 0a67 	vminnm.f32	s0, s0, s15
           block[i] = mix;
 80015f6:	ed85 0a00 	vstr	s0, [r5]
 80015fa:	ed85 0a01 	vstr	s0, [r5, #4]
 80015fe:	ed85 0a02 	vstr	s0, [r5, #8]
    }
 8001602:	b013      	add	sp, #76	@ 0x4c
 8001604:	ecbd 8b0a 	vpop	{d8-d12}
 8001608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (g && !gate_[v])
 800160c:	b911      	cbnz	r1, 8001614 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbb8>
                env_state_[v] = ENV_ATTACK;
 800160e:	2101      	movs	r1, #1
 8001610:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
            gate_[v] = g;
 8001614:	2101      	movs	r1, #1
 8001616:	f884 1081 	strb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 800161a:	7897      	ldrb	r7, [r2, #2]
            if (g && !gate_[v])
 800161c:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
 8001620:	2f00      	cmp	r7, #0
 8001622:	f43f ab6b 	beq.w	8000cfc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2a0>
 8001626:	b911      	cbnz	r1, 800162e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbd2>
                env_state_[v] = ENV_ATTACK;
 8001628:	2101      	movs	r1, #1
 800162a:	f884 106e 	strb.w	r1, [r4, #110]	@ 0x6e
            gate_[v] = g;
 800162e:	2101      	movs	r1, #1
 8001630:	f884 1082 	strb.w	r1, [r4, #130]	@ 0x82
            bool g = button[v];
 8001634:	f892 a003 	ldrb.w	sl, [r2, #3]
            if (g && !gate_[v])
 8001638:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 800163c:	f7ff bb69 	b.w	8000d12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2b6>
        else if (minor7 && !major7)
 8001640:	9f01      	ldr	r7, [sp, #4]
 8001642:	2f01      	cmp	r7, #1
 8001644:	f000 814a 	beq.w	80018dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe80>
 8001648:	2800      	cmp	r0, #0
 800164a:	f000 8147 	beq.w	80018dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe80>
            target_freq_[3] = root_freq * kMinor7Ratio;
 800164e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001728 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xccc>
 8001652:	f1b8 0f02 	cmp.w	r8, #2
 8001656:	ee27 7a26 	vmul.f32	s14, s14, s13
            target_freq_[3] = root_freq * kMajor6Ratio;
 800165a:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 800165e:	f47f abe8 	bne.w	8000e32 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3d6>
            if (strum_state_[s] != ENV_IDLE)
 8001662:	f1b9 0f00 	cmp.w	r9, #0
 8001666:	d005      	beq.n	8001674 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc18>
                strum_target_[s] = note * (1 << oct);
 8001668:	ed91 7a00 	vldr	s14, [r1]
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001674:	9802      	ldr	r0, [sp, #8]
 8001676:	b148      	cbz	r0, 800168c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc30>
                strum_target_[s] = note * (1 << oct);
 8001678:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800172c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd0>
 800167c:	edd1 6a00 	vldr	s13, [r1]
 8001680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001684:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001688:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 800168c:	9803      	ldr	r0, [sp, #12]
 800168e:	b148      	cbz	r0, 80016a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
                strum_target_[s] = note * (1 << oct);
 8001690:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001730 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd4>
 8001694:	edd1 6a00 	vldr	s13, [r1]
 8001698:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016a0:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 80016a4:	f1bb 0f00 	cmp.w	fp, #0
 80016a8:	d007      	beq.n	80016ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc5e>
                strum_target_[s] = note * (1 << oct);
 80016aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016ae:	edd1 6a00 	vldr	s13, [r1]
 80016b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016b6:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80016ba:	f1ba 0f00 	cmp.w	sl, #0
 80016be:	d007      	beq.n	80016d0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc74>
                strum_target_[s] = note * (1 << oct);
 80016c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016c4:	edd1 6a00 	vldr	s13, [r1]
 80016c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016cc:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80016d0:	9804      	ldr	r0, [sp, #16]
 80016d2:	2800      	cmp	r0, #0
 80016d4:	f43f abf4 	beq.w	8000ec0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x464>
                strum_target_[s] = note * (1 << oct);
 80016d8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001734 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd8>
 80016dc:	edd1 6a00 	vldr	s13, [r1]
 80016e0:	ee27 7a87 	vmul.f32	s14, s15, s14
            if (strum_idx_changed)
 80016e4:	9826      	ldr	r0, [sp, #152]	@ 0x98
                strum_target_[s] = note * (1 << oct);
 80016e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016ea:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
            if (strum_idx_changed)
 80016ee:	2800      	cmp	r0, #0
 80016f0:	f47f abea 	bne.w	8000ec8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x46c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80016f4:	2600      	movs	r6, #0
 80016f6:	f7ff b9e5 	b.w	8000ac4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x68>
 80016fa:	bf00      	nop
 80016fc:	3f7f3333 	.word	0x3f7f3333
 8001700:	3aa3d70b 	.word	0x3aa3d70b
 8001704:	3f334bc6 	.word	0x3f334bc6
 8001708:	00000000 	.word	0x00000000
 800170c:	3b4ccccd 	.word	0x3b4ccccd
 8001710:	40c90fdb 	.word	0x40c90fdb
 8001714:	3ca3d70a 	.word	0x3ca3d70a
 8001718:	3f333333 	.word	0x3f333333
 800171c:	3e99999a 	.word	0x3e99999a
 8001720:	beb3a62d 	.word	0xbeb3a62d
 8001724:	40366666 	.word	0x40366666
 8001728:	3fe411ed 	.word	0x3fe411ed
 800172c:	3f9837ef 	.word	0x3f9837ef
 8001730:	3fb504f7 	.word	0x3fb504f7
 8001734:	401837ef 	.word	0x401837ef
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8001738:	f894 e208 	ldrb.w	lr, [r4, #520]	@ 0x208
 800173c:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 8001a4c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff0>
 8001740:	f1be 0f00 	cmp.w	lr, #0
 8001744:	f8df a308 	ldr.w	sl, [pc, #776]	@ 8001a50 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff4>
 8001748:	49b5      	ldr	r1, [pc, #724]	@ (8001a20 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfc4>)
 800174a:	f8df 9308 	ldr.w	r9, [pc, #776]	@ 8001a54 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff8>
 800174e:	bf1c      	itt	ne
 8001750:	4641      	movne	r1, r8
 8001752:	46d1      	movne	r9, sl
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8001754:	f8d4 8204 	ldr.w	r8, [r4, #516]	@ 0x204
                in_base_freq_mode_ = false;
 8001758:	7526      	strb	r6, [r4, #20]
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 800175a:	eb01 0188 	add.w	r1, r1, r8, lsl #2
        int chord_type = chord_types[current_chord_];
 800175e:	f859 a028 	ldr.w	sl, [r9, r8, lsl #2]
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8001762:	ed91 7a00 	vldr	s14, [r1]
        switch (chord_type) {
 8001766:	f1ba 0f01 	cmp.w	sl, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 800176a:	ee27 7a87 	vmul.f32	s14, s15, s14
        switch (chord_type) {
 800176e:	f000 8595 	beq.w	800229c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1840>
 8001772:	f8df 92e4 	ldr.w	r9, [pc, #740]	@ 8001a58 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xffc>
 8001776:	f8df b2e4 	ldr.w	fp, [pc, #740]	@ 8001a5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1000>
 800177a:	f1ba 0f02 	cmp.w	sl, #2
 800177e:	bf18      	it	ne
 8001780:	46d9      	movne	r9, fp
        target_freq_[0] = root_freq * chord_multipliers[0];
 8001782:	ed84 7a17 	vstr	s14, [r4, #92]	@ 0x5c
        if (major7 && !minor7)
 8001786:	f080 0701 	eor.w	r7, r0, #1
        target_freq_[1] = root_freq * chord_multipliers[1];
 800178a:	edd9 6a01 	vldr	s13, [r9, #4]
        if (major7 && !minor7)
 800178e:	2801      	cmp	r0, #1
 8001790:	9705      	str	r7, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8001792:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001796:	edc4 6a18 	vstr	s13, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 800179a:	edd9 6a02 	vldr	s13, [r9, #8]
 800179e:	ee66 6a87 	vmul.f32	s13, s13, s14
 80017a2:	edc4 6a19 	vstr	s13, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 80017a6:	f000 8504 	beq.w	80021b2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1756>
 80017aa:	9f01      	ldr	r7, [sp, #4]
 80017ac:	2f00      	cmp	r7, #0
 80017ae:	f000 8500 	beq.w	80021b2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1756>
            target_freq_[3] = root_freq * kMajor7Ratio;
 80017b2:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8001a24 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfc8>
 80017b6:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 80017ba:	f1ba 0f02 	cmp.w	sl, #2
            if (strum_state_[s] != ENV_IDLE)
 80017be:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
            target_freq_[3] = root_freq * kMajor7Ratio;
 80017c2:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 80017c6:	f000 8586 	beq.w	80022d6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x187a>
 80017ca:	f1ba 0f01 	cmp.w	sl, #1
 80017ce:	f000 85d3 	beq.w	8002378 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x191c>
            if (strum_state_[s] != ENV_IDLE)
 80017d2:	f1b9 0f00 	cmp.w	r9, #0
 80017d6:	d005      	beq.n	80017e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd88>
                strum_target_[s] = note * (1 << oct);
 80017d8:	ed91 7a00 	vldr	s14, [r1]
 80017dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e0:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80017e4:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 80017e8:	9702      	str	r7, [sp, #8]
 80017ea:	b14f      	cbz	r7, 8001800 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xda4>
                strum_target_[s] = note * (1 << oct);
 80017ec:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8001a28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfcc>
 80017f0:	ed91 7a00 	vldr	s14, [r1]
 80017f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80017fc:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001800:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 8001804:	9703      	str	r7, [sp, #12]
 8001806:	b14f      	cbz	r7, 800181c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdc0>
                strum_target_[s] = note * (1 << oct);
 8001808:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001a2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd0>
 800180c:	ed91 7a00 	vldr	s14, [r1]
 8001810:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001814:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001818:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 800181c:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8001820:	f1bb 0f00 	cmp.w	fp, #0
 8001824:	d007      	beq.n	8001836 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdda>
                strum_target_[s] = note * (1 << oct);
 8001826:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800182a:	ed91 7a00 	vldr	s14, [r1]
 800182e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001832:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8001836:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800183a:	f1ba 0f00 	cmp.w	sl, #0
 800183e:	d007      	beq.n	8001850 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdf4>
                strum_target_[s] = note * (1 << oct);
 8001840:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001844:	ed91 7a00 	vldr	s14, [r1]
 8001848:	ee27 7a26 	vmul.f32	s14, s14, s13
 800184c:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8001850:	f894 7101 	ldrb.w	r7, [r4, #257]	@ 0x101
 8001854:	9704      	str	r7, [sp, #16]
 8001856:	2f00      	cmp	r7, #0
 8001858:	f43f aa8d 	beq.w	8000d76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                strum_target_[s] = note * (1 << oct);
 800185c:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001a30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd4>
 8001860:	ed91 7a00 	vldr	s14, [r1]
 8001864:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001868:	ee27 7a26 	vmul.f32	s14, s14, s13
 800186c:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 8001870:	f7ff ba81 	b.w	8000d76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                env_state_[v] = ENV_ATTACK;
 8001874:	2101      	movs	r1, #1
 8001876:	f884 106c 	strb.w	r1, [r4, #108]	@ 0x6c
 800187a:	f7ff ba25 	b.w	8000cc8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x26c>
            if (g && !gate_[v])
 800187e:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 8001882:	464f      	mov	r7, r9
            gate_[v] = g;
 8001884:	f884 9082 	strb.w	r9, [r4, #130]	@ 0x82
            if (in_base_freq_mode_ && v != 0) {
 8001888:	e4f6      	b.n	8001278 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x81c>
            if (g && !gate_[v])
 800188a:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
            bool g = button[v];
 800188e:	7897      	ldrb	r7, [r2, #2]
            if (in_base_freq_mode_ && v != 0) {
 8001890:	f7ff ba31 	b.w	8000cf6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x29a>
            if (strum_state_[s] != ENV_IDLE)
 8001894:	f1b9 0f00 	cmp.w	r9, #0
 8001898:	d005      	beq.n	80018a6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe4a>
                strum_target_[s] = note * (1 << oct);
 800189a:	ed91 7a00 	vldr	s14, [r1]
 800189e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a2:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80018a6:	9802      	ldr	r0, [sp, #8]
 80018a8:	b148      	cbz	r0, 80018be <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe62>
                strum_target_[s] = note * (1 << oct);
 80018aa:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001a34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd8>
 80018ae:	ed91 7a00 	vldr	s14, [r1]
 80018b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018ba:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 80018be:	9803      	ldr	r0, [sp, #12]
 80018c0:	2800      	cmp	r0, #0
 80018c2:	f43f aeef 	beq.w	80016a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
                strum_target_[s] = note * (1 << oct);
 80018c6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001a2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd0>
 80018ca:	edd1 6a00 	vldr	s13, [r1]
 80018ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018d6:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
 80018da:	e6e3      	b.n	80016a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
        else if (major7 && minor7)
 80018dc:	2e00      	cmp	r6, #0
 80018de:	f000 847d 	beq.w	80021dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1780>
            target_freq_[3] = root_freq * kMajor6Ratio;
 80018e2:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001a38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfdc>
 80018e6:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 80018ea:	f7ff ba9c 	b.w	8000e26 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3ca>
                        strum_level_[s] -= kDecayInc;
 80018ee:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] <= kSustain)
 80018f2:	eef4 7aea 	vcmpe.f32	s15, s21
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	f240 8087 	bls.w	8001a0c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfb0>
                        strum_level_[s] -= kDecayInc;
 80018fe:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001a3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe0>
 8001902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001906:	edcb 7a00 	vstr	s15, [fp]
 800190a:	e5dc      	b.n	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
            if (env_state_[v] != ENV_IDLE)
 800190c:	2f00      	cmp	r7, #0
 800190e:	f43f adb0 	beq.w	8001472 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa16>
 8001912:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
 8001916:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8001a60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 800191a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800191e:	e58f      	b.n	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
 8001920:	f1b9 0f00 	cmp.w	r9, #0
 8001924:	f43f ad71 	beq.w	800140a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9ae>
 8001928:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
 800192c:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 8001a60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 8001930:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001934:	e550      	b.n	80013d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
 8001936:	f1b8 0f00 	cmp.w	r8, #0
 800193a:	f43f ad2d 	beq.w	8001398 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x93c>
 800193e:	ed94 aa1d 	vldr	s20, [r4, #116]	@ 0x74
 8001942:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8001a60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 8001946:	ee2a aa27 	vmul.f32	s20, s20, s15
 800194a:	e50c      	b.n	8001366 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 853a 	bne.w	80023c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x196a>
            switch (env_state_[v])
 8001952:	f1b8 0f02 	cmp.w	r8, #2
        float mix = 0.0f;
 8001956:	ed9f 8a3a 	vldr	s16, [pc, #232]	@ 8001a40 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe4>
            switch (env_state_[v])
 800195a:	f47f ace8 	bne.w	800132e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8d2>
                    env_level_[v] -= kDecayInc;
 800195e:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] <= kSustain)
 8001962:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001a70 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1014>
 8001966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196e:	f200 8338 	bhi.w	8001fe2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1586>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe8>)
 8001974:	ed9f aa34 	vldr	s20, [pc, #208]	@ 8001a48 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfec>
 8001978:	6763      	str	r3, [r4, #116]	@ 0x74
 800197a:	2303      	movs	r3, #3
            out = sinf(phase_);
 800197c:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
 8001980:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
        if (waveform_ == Waveform::SINE) {
 8001984:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001986:	2b00      	cmp	r3, #0
 8001988:	f43f acf3 	beq.w	8001372 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x916>
                      ? phi
 800198c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001a64 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1008>
            float phi = phase_ * kInvPi;
 8001990:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001a68 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x100c>
                      ? phi
 8001994:	eef4 bac7 	vcmpe.f32	s23, s14
            float phi = phase_ * kInvPi;
 8001998:	ee6b 7aa7 	vmul.f32	s15, s23, s15
                      ? phi
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	f2c0 83f7 	blt.w	8002192 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1736>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80019a4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a6c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1010>
 80019a8:	eef4 bac7 	vcmpe.f32	s23, s14
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	f140 847c 	bpl.w	80022ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1850>
 80019b4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 80019b8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80019bc:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 80019c0:	eea7 0a87 	vfma.f32	s0, s15, s14
 80019c4:	e4d9      	b.n	800137a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	f000 8282 	beq.w	8001ed0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1474>
 80019cc:	f894 806d 	ldrb.w	r8, [r4, #109]	@ 0x6d
 80019d0:	f1b8 0f03 	cmp.w	r8, #3
 80019d4:	f000 8273 	beq.w	8001ebe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1462>
 80019d8:	f894 906e 	ldrb.w	r9, [r4, #110]	@ 0x6e
 80019dc:	f1b9 0f03 	cmp.w	r9, #3
 80019e0:	f000 8265 	beq.w	8001eae <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1452>
 80019e4:	f894 706f 	ldrb.w	r7, [r4, #111]	@ 0x6f
 80019e8:	2f03      	cmp	r7, #3
 80019ea:	f47f ac66 	bne.w	80012ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
 80019ee:	f1ba 0f00 	cmp.w	sl, #0
 80019f2:	f47f ac62 	bne.w	80012ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
                    env_state_[v] = ENV_RELEASE;
 80019f6:	2704      	movs	r7, #4
 80019f8:	f884 706f 	strb.w	r7, [r4, #111]	@ 0x6f
            for (int v = 0; v < kNumVoices; ++v)
 80019fc:	e45d      	b.n	80012ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
                            { strum_level_[s] = 1.0f; strum_state_[s] = ENV_DECAY; }
 80019fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a02:	f8cb 3000 	str.w	r3, [fp]
 8001a06:	2302      	movs	r3, #2
 8001a08:	7033      	strb	r3, [r6, #0]
 8001a0a:	e55c      	b.n	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                            { strum_level_[s] = kSustain; strum_state_[s] = ENV_SUSTAIN; }
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe8>)
 8001a0e:	f8cb 3000 	str.w	r3, [fp]
 8001a12:	2303      	movs	r3, #3
 8001a14:	7033      	strb	r3, [r6, #0]
 8001a16:	e556      	b.n	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
      return __a;
 8001a18:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001a1c:	e5eb      	b.n	80015f6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xb9a>
 8001a1e:	bf00      	nop
 8001a20:	0800c3c0 	.word	0x0800c3c0
 8001a24:	3ff1a1c2 	.word	0x3ff1a1c2
 8001a28:	3fa14517 	.word	0x3fa14517
 8001a2c:	3fbfc886 	.word	0x3fbfc886
 8001a30:	40214517 	.word	0x40214517
 8001a34:	3f9837ef 	.word	0x3f9837ef
 8001a38:	3fd744fe 	.word	0x3fd744fe
 8001a3c:	39c49ba6 	.word	0x39c49ba6
 8001a40:	00000000 	.word	0x00000000
 8001a44:	3f333333 	.word	0x3f333333
 8001a48:	3c656041 	.word	0x3c656041
 8001a4c:	0800c3a0 	.word	0x0800c3a0
 8001a50:	0800c330 	.word	0x0800c330
 8001a54:	0800c350 	.word	0x0800c350
 8001a58:	0800c370 	.word	0x0800c370
 8001a5c:	0800c390 	.word	0x0800c390
 8001a60:	3ca3d70a 	.word	0x3ca3d70a
 8001a64:	40490fdb 	.word	0x40490fdb
 8001a68:	3ea2f983 	.word	0x3ea2f983
 8001a6c:	40c90fdb 	.word	0x40c90fdb
 8001a70:	3f334bc6 	.word	0x3f334bc6
                            strum_state_[s] = ENV_IDLE; 
 8001a74:	2200      	movs	r2, #0
                            strum_level_[s] = 0.0f; 
 8001a76:	ed8b ba00 	vstr	s22, [fp]
                            strum_state_[s] = ENV_IDLE; 
 8001a7a:	7032      	strb	r2, [r6, #0]
            if (strum_state_[s] != ENV_IDLE)
 8001a7c:	f894 30fc 	ldrb.w	r3, [r4, #252]	@ 0xfc
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 826c 	beq.w	8001f5e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1502>
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001a86:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001a8a:	2102      	movs	r1, #2
                active_count++;
 8001a8c:	f04f 0c01 	mov.w	ip, #1
                active_voices[active_count].index = s;
 8001a90:	9206      	str	r2, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001a92:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 8001a94:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8001a98:	b153      	cbz	r3, 8001ab0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1054>
                active_voices[active_count].index = s;
 8001a9a:	ab12      	add	r3, sp, #72	@ 0x48
 8001a9c:	eb03 02cc 	add.w	r2, r3, ip, lsl #3
 8001aa0:	2301      	movs	r3, #1
                active_count++;
 8001aa2:	468c      	mov	ip, r1
                active_voices[active_count].index = s;
 8001aa4:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001aa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8001aac:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001ab0:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8001ab4:	b15b      	cbz	r3, 8001ace <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1072>
                active_voices[active_count].index = s;
 8001ab6:	aa12      	add	r2, sp, #72	@ 0x48
 8001ab8:	2302      	movs	r3, #2
 8001aba:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001abe:	f10c 0c01 	add.w	ip, ip, #1
 8001ac2:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001ac6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8001aca:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001ace:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8001ad2:	b15b      	cbz	r3, 8001aec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1090>
                active_voices[active_count].index = s;
 8001ad4:	aa12      	add	r2, sp, #72	@ 0x48
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001adc:	f10c 0c01 	add.w	ip, ip, #1
 8001ae0:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001ae4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8001ae8:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001aec:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
 8001af0:	b15b      	cbz	r3, 8001b0a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x10ae>
                active_voices[active_count].index = s;
 8001af2:	aa12      	add	r2, sp, #72	@ 0x48
 8001af4:	2304      	movs	r3, #4
 8001af6:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001afa:	f10c 0c01 	add.w	ip, ip, #1
 8001afe:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b02:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8001b06:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001b0a:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8001b0e:	b15b      	cbz	r3, 8001b28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x10cc>
                active_voices[active_count].index = s;
 8001b10:	aa12      	add	r2, sp, #72	@ 0x48
 8001b12:	2305      	movs	r3, #5
 8001b14:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001b18:	f10c 0c01 	add.w	ip, ip, #1
 8001b1c:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b20:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
 8001b24:	f842 3c2c 	str.w	r3, [r2, #-44]
            strum_attenuation_[s] = 1.0f;
 8001b28:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 8001b2c:	f1bc 0f01 	cmp.w	ip, #1
            strum_attenuation_[s] = 1.0f;
 8001b30:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8001b34:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 8001b38:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8001b3c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8001b40:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8001b44:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 8001b48:	f77f acbd 	ble.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
            for (int i = 0; i < active_count - 1; i++)
 8001b4c:	f10c 3eff 	add.w	lr, ip, #4294967295	@ 0xffffffff
 8001b50:	9f07      	ldr	r7, [sp, #28]
 8001b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 8001b54:	f10d 0920 	add.w	r9, sp, #32
 8001b58:	4673      	mov	r3, lr
 8001b5a:	9404      	str	r4, [sp, #16]
 8001b5c:	e9cd c602 	strd	ip, r6, [sp, #8]
                for (int j = 0; j < active_count - i - 1; j++)
 8001b60:	1c59      	adds	r1, r3, #1
 8001b62:	2901      	cmp	r1, #1
 8001b64:	dd25      	ble.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001b66:	42ba      	cmp	r2, r7
 8001b68:	d329      	bcc.n	8001bbe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1162>
                for (int j = 0; j < active_count - i - 1; j++)
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f000 815f 	beq.w	8001e2e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13d2>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001b70:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8001b74:	4562      	cmp	r2, ip
 8001b76:	d833      	bhi.n	8001be0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1184>
                for (int j = 0; j < active_count - i - 1; j++)
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	f000 8298 	beq.w	80020ae <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1652>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001b7e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8001b80:	45b4      	cmp	ip, r6
 8001b82:	d83c      	bhi.n	8001bfe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11a2>
                for (int j = 0; j < active_count - i - 1; j++)
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	f000 8321 	beq.w	80021cc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1770>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001b8a:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
 8001b8e:	4566      	cmp	r6, ip
 8001b90:	d844      	bhi.n	8001c1c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11c0>
                for (int j = 0; j < active_count - i - 1; j++)
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	f000 8328 	beq.w	80021e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x178c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001b98:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001b9a:	4561      	cmp	r1, ip
 8001b9c:	d209      	bcs.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001b9e:	a90e      	add	r1, sp, #56	@ 0x38
 8001ba0:	9101      	str	r1, [sp, #4]
                        active_voices[j] = active_voices[j + 1];
 8001ba2:	a910      	add	r1, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 8001ba4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 8001ba6:	9c01      	ldr	r4, [sp, #4]
 8001ba8:	c903      	ldmia	r1, {r0, r1}
 8001baa:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001bae:	e9cd 6c10 	strd	r6, ip, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 8001bb2:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	2901      	cmp	r1, #1
 8001bb8:	ddfb      	ble.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bba:	42ba      	cmp	r2, r7
 8001bbc:	d2d5      	bcs.n	8001b6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x110e>
                        VoiceInfo temp = active_voices[j];
 8001bbe:	9a06      	ldr	r2, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 8001bc0:	ac06      	add	r4, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 8001bc2:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 8001bc4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8001bc8:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001bcc:	e9cd 2708 	strd	r2, r7, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001bd0:	f000 812d 	beq.w	8001e2e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13d2>
 8001bd4:	463a      	mov	r2, r7
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bd6:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8001bda:	460f      	mov	r7, r1
 8001bdc:	4562      	cmp	r2, ip
 8001bde:	d9cb      	bls.n	8001b78 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x111c>
                        active_voices[j] = active_voices[j + 1];
 8001be0:	a90a      	add	r1, sp, #40	@ 0x28
                        VoiceInfo temp = active_voices[j];
 8001be2:	9e08      	ldr	r6, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001be4:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 8001be6:	c903      	ldmia	r1, {r0, r1}
 8001be8:	e889 0003 	stmia.w	r9, {r0, r1}
                        active_voices[j + 1] = temp;
 8001bec:	e9cd 620a 	strd	r6, r2, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001bf0:	f000 825f 	beq.w	80020b2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1656>
 8001bf4:	4694      	mov	ip, r2
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bf6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8001bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001bfa:	45b4      	cmp	ip, r6
 8001bfc:	d9c2      	bls.n	8001b84 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1128>
                        active_voices[j] = active_voices[j + 1];
 8001bfe:	a90c      	add	r1, sp, #48	@ 0x30
                        VoiceInfo temp = active_voices[j];
 8001c00:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
                        active_voices[j] = active_voices[j + 1];
 8001c02:	ac0a      	add	r4, sp, #40	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001c04:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 8001c06:	c903      	ldmia	r1, {r0, r1}
 8001c08:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c0c:	e9cd 6c0c 	strd	r6, ip, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001c10:	d0cf      	beq.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001c12:	4666      	mov	r6, ip
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c14:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
 8001c18:	4566      	cmp	r6, ip
 8001c1a:	d9ba      	bls.n	8001b92 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1136>
                        active_voices[j] = active_voices[j + 1];
 8001c1c:	a90e      	add	r1, sp, #56	@ 0x38
                        VoiceInfo temp = active_voices[j];
 8001c1e:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
                        active_voices[j] = active_voices[j + 1];
 8001c22:	ac0c      	add	r4, sp, #48	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001c24:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 8001c26:	9101      	str	r1, [sp, #4]
 8001c28:	c903      	ldmia	r1, {r0, r1}
 8001c2a:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c2e:	e9cd c60e 	strd	ip, r6, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 8001c32:	d0be      	beq.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c34:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001c36:	428e      	cmp	r6, r1
 8001c38:	d9bb      	bls.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001c3a:	46b4      	mov	ip, r6
 8001c3c:	e7b1      	b.n	8001ba2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1146>
                    env_level_[v] -= relInc;
 8001c3e:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
                    if (env_level_[v] <= 0.0f)
 8001c42:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001c44:	ee39 9a4b 	vsub.f32	s18, s18, s22
                    if (env_level_[v] <= 0.0f)
 8001c48:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	f240 8221 	bls.w	8002096 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x163a>
 8001c54:	ed5f 7a7e 	vldr	s15, [pc, #-504]	@ 8001a60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
        if (waveform_ == Waveform::SINE) {
 8001c58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                    env_level_[v] -= relInc;
 8001c5a:	ed84 9a1e 	vstr	s18, [r4, #120]	@ 0x78
 8001c5e:	ee29 9a27 	vmul.f32	s18, s18, s15
            out = sinf(phase_);
 8001c62:	ed94 aa0d 	vldr	s20, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f43f abbc 	beq.w	80013e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x988>
                      ? phi
 8001c6c:	ed1f 7a83 	vldr	s14, [pc, #-524]	@ 8001a64 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1008>
            float phi = phase_ * kInvPi;
 8001c70:	ed5f 7a83 	vldr	s15, [pc, #-524]	@ 8001a68 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x100c>
                      ? phi
 8001c74:	eeb4 aac7 	vcmpe.f32	s20, s14
            float phi = phase_ * kInvPi;
 8001c78:	ee6a 7a27 	vmul.f32	s15, s20, s15
                      ? phi
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	f2c0 828f 	blt.w	80021a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1746>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001c84:	ed1f 7a87 	vldr	s14, [pc, #-540]	@ 8001a6c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1010>
 8001c88:	eeb4 aac7 	vcmpe.f32	s20, s14
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	f140 8310 	bpl.w	80022b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1858>
 8001c94:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001c98:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001ca0:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001ca4:	f7ff bba2 	b.w	80013ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
                    env_level_[v] -= kDecayInc;
 8001ca8:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] <= kSustain)
 8001cac:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8001a70 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1014>
 8001cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	f200 817d 	bhi.w	8001fb6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x155a>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001cbc:	4be1      	ldr	r3, [pc, #900]	@ (8002044 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001cbe:	ed9f 9ae2 	vldr	s18, [pc, #904]	@ 8002048 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001cc2:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001cca:	f7ff bb85 	b.w	80013d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                    env_level_[v] -= relInc;
 8001cce:	ed94 aa1d 	vldr	s20, [r4, #116]	@ 0x74
                    if (env_level_[v] <= 0.0f)
 8001cd2:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001cd4:	ee3a aa4b 	vsub.f32	s20, s20, s22
                    if (env_level_[v] <= 0.0f)
 8001cd8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	f240 81df 	bls.w	80020a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1646>
 8001ce4:	eddf 7ad9 	vldr	s15, [pc, #868]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
                    env_level_[v] -= relInc;
 8001ce8:	ed84 aa1d 	vstr	s20, [r4, #116]	@ 0x74
 8001cec:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001cf0:	f7ff bb39 	b.w	8001366 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 8001cf4:	edd4 ba1c 	vldr	s23, [r4, #112]	@ 0x70
                    if (env_level_[v] <= 0.0f)
 8001cf8:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001cfa:	ee7b bacb 	vsub.f32	s23, s23, s22
                    if (env_level_[v] <= 0.0f)
 8001cfe:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	f240 81c1 	bls.w	800208c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1630>
 8001d0a:	eddf 7ad0 	vldr	s15, [pc, #832]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
        if (waveform_ == Waveform::SINE) {
 8001d0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
                    env_level_[v] -= relInc;
 8001d10:	edc4 ba1c 	vstr	s23, [r4, #112]	@ 0x70
 8001d14:	ee6b baa7 	vmul.f32	s23, s23, s15
            out = sinf(phase_);
 8001d18:	ed94 ca07 	vldr	s24, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f43f aaef 	beq.w	8001300 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8a4>
                      ? phi
 8001d22:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 8002050 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001d26:	eddf 7acb 	vldr	s15, [pc, #812]	@ 8002054 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001d2a:	eeb4 cac7 	vcmpe.f32	s24, s14
            float phi = phase_ * kInvPi;
 8001d2e:	ee6c 7a27 	vmul.f32	s15, s24, s15
                      ? phi
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	f2c0 8224 	blt.w	8002182 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1726>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001d3a:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8002058 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15fc>
 8001d3e:	eeb4 cac7 	vcmpe.f32	s24, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	f140 82b9 	bpl.w	80022bc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1860>
 8001d4a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001d4e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001d56:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001d5a:	f7ff bad5 	b.w	8001308 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
                    env_level_[v] -= kDecayInc;
 8001d5e:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] <= kSustain)
 8001d62:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800205c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1600>
 8001d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	f200 8144 	bhi.w	8001ffa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x159e>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001d72:	4bb4      	ldr	r3, [pc, #720]	@ (8002044 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001d74:	eddf bab4 	vldr	s23, [pc, #720]	@ 8002048 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001d78:	6723      	str	r3, [r4, #112]	@ 0x70
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001d80:	f7ff bab8 	b.w	80012f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
                    env_level_[v] -= relInc;
 8001d84:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= 0.0f)
 8001d88:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001d8a:	ee39 9a4b 	vsub.f32	s18, s18, s22
                    if (env_level_[v] <= 0.0f)
 8001d8e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	f240 8173 	bls.w	8002080 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1624>
 8001d9a:	eddf 7aac 	vldr	s15, [pc, #688]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
        if (waveform_ == Waveform::SINE) {
 8001d9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
                    env_level_[v] -= relInc;
 8001da0:	ed84 9a1f 	vstr	s18, [r4, #124]	@ 0x7c
 8001da4:	ee29 9a27 	vmul.f32	s18, s18, s15
            out = sinf(phase_);
 8001da8:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
        if (waveform_ == Waveform::SINE) {
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f43f ab4d 	beq.w	800144c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f0>
                      ? phi
 8001db2:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002050 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001db6:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 8002054 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001dba:	eef4 9ac7 	vcmpe.f32	s19, s14
            float phi = phase_ * kInvPi;
 8001dbe:	ee69 7aa7 	vmul.f32	s15, s19, s15
                      ? phi
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	f280 81ca 	bge.w	800215e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1702>
            out = tri * 2.0f - 1.0f;
 8001dca:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dce:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001dd2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001dd6:	f7ff bb3d 	b.w	8001454 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
                    env_level_[v] -= kDecayInc;
 8001dda:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= kSustain)
 8001dde:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800205c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1600>
 8001de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	f240 80d1 	bls.w	8001f90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1534>
                    env_level_[v] -= kDecayInc;
 8001dee:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8002060 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8001df2:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001df6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dfa:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001dfe:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
 8001e02:	f7ff bb1d 	b.w	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                      ? phi
 8001e06:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002050 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001e0a:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8002054 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001e0e:	eeb4 9ac7 	vcmpe.f32	s18, s14
            float phi = phase_ * kInvPi;
 8001e12:	ee69 7a27 	vmul.f32	s15, s18, s15
                      ? phi
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	f280 80fe 	bge.w	800201a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15be>
            out = tri * 2.0f - 1.0f;
 8001e1e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e22:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001e26:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001e2a:	f7ff bb70 	b.w	800150e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e2e:	e9dd c602 	ldrd	ip, r6, [sp, #8]
 8001e32:	4a8c      	ldr	r2, [pc, #560]	@ (8002064 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1608>)
            for (int i = 0; i < active_count - 1; i++)
 8001e34:	f1be 0f01 	cmp.w	lr, #1
 8001e38:	9c04      	ldr	r4, [sp, #16]
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e3a:	9b06      	ldr	r3, [sp, #24]
 8001e3c:	eb02 018c 	add.w	r1, r2, ip, lsl #2
 8001e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e44:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8001e48:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001e4c:	f43f ab3b 	beq.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e50:	9b08      	ldr	r3, [sp, #32]
 8001e52:	eb02 018c 	add.w	r1, r2, ip, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001e56:	f1be 0f02 	cmp.w	lr, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e5e:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8001e62:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001e66:	f43f ab2e 	beq.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e6c:	eb02 018c 	add.w	r1, r2, ip, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001e70:	f1be 0f03 	cmp.w	lr, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e78:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8001e7c:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001e80:	f43f ab21 	beq.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e84:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8001e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            for (int i = 0; i < active_count - 1; i++)
 8001e8a:	f1be 0f05 	cmp.w	lr, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e8e:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001e92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001e96:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001e9a:	f47f ab14 	bne.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001ea0:	4a71      	ldr	r2, [pc, #452]	@ (8002068 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x160c>)
 8001ea2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ea6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001eaa:	f7ff bb0c 	b.w	80014c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001eae:	2f00      	cmp	r7, #0
 8001eb0:	f47f ad98 	bne.w	80019e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf88>
                    env_state_[v] = ENV_RELEASE;
 8001eb4:	f04f 0904 	mov.w	r9, #4
 8001eb8:	f884 906e 	strb.w	r9, [r4, #110]	@ 0x6e
 8001ebc:	e592      	b.n	80019e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf88>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001ebe:	f1b9 0f00 	cmp.w	r9, #0
 8001ec2:	f47f ad89 	bne.w	80019d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf7c>
                    env_state_[v] = ENV_RELEASE;
 8001ec6:	f04f 0804 	mov.w	r8, #4
 8001eca:	f884 806d 	strb.w	r8, [r4, #109]	@ 0x6d
 8001ece:	e583      	b.n	80019d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf7c>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001ed0:	f1b8 0f00 	cmp.w	r8, #0
 8001ed4:	f47f ad7a 	bne.w	80019cc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf70>
                    env_state_[v] = ENV_RELEASE;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001ede:	e575      	b.n	80019cc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf70>
                chord_multipliers = minor_chord_multipliers_;
 8001ee0:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8002070 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1614>
 8001ee4:	f7fe bf85 	b.w	8000df2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x396>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8002064 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1608>)
 8001eea:	9906      	ldr	r1, [sp, #24]
 8001eec:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 8001ef0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001ef4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001ef8:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
 8001efc:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f00:	2f01      	cmp	r7, #1
 8001f02:	f43f abf7 	beq.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f06:	9908      	ldr	r1, [sp, #32]
 8001f08:	eb03 0088 	add.w	r0, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f0c:	2f02      	cmp	r7, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f0e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f12:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 8001f16:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f1a:	f43f abeb 	beq.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001f20:	eb03 0088 	add.w	r0, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f24:	2f03      	cmp	r7, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f26:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f2a:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8001f2e:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f32:	f43f abdf 	beq.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f36:	eb03 0388 	add.w	r3, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f3a:	2f05      	cmp	r7, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f3c:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8001f40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001f42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f46:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f4a:	f47f abd3 	bne.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001f50:	4945      	ldr	r1, [pc, #276]	@ (8002068 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x160c>)
 8001f52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f56:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f5a:	f7ff bbcb 	b.w	80016f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
        int active_count = 0;
 8001f5e:	469c      	mov	ip, r3
            if (strum_state_[s] != ENV_IDLE)
 8001f60:	2101      	movs	r1, #1
 8001f62:	e597      	b.n	8001a94 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1038>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001f64:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f68:	eddf ba38 	vldr	s23, [pc, #224]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001f6c:	6723      	str	r3, [r4, #112]	@ 0x70
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001f74:	f7ff b9be 	b.w	80012f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
                    env_level_[v] += kAttackInc;
 8001f78:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800206c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1610>
 8001f7c:	ed9f 9a33 	vldr	s18, [pc, #204]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f84:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001f88:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
 8001f8c:	f7ff ba58 	b.w	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001f90:	4a2c      	ldr	r2, [pc, #176]	@ (8002044 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001f92:	2303      	movs	r3, #3
 8001f94:	ed9f 9a2c 	vldr	s18, [pc, #176]	@ 8002048 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001f98:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8001f9a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8001f9e:	f7ff ba4f 	b.w	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001fa2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fa6:	ed9f 9a29 	vldr	s18, [pc, #164]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001faa:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001fac:	2302      	movs	r3, #2
 8001fae:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001fb2:	f7ff ba11 	b.w	80013d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                    env_level_[v] -= kDecayInc;
 8001fb6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002060 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8001fba:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fc2:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001fc6:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
 8001fca:	f7ff ba05 	b.w	80013d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001fce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fd2:	ed9f aa1e 	vldr	s20, [pc, #120]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001fd6:	6763      	str	r3, [r4, #116]	@ 0x74
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8001fde:	f7ff b9c2 	b.w	8001366 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
                    env_level_[v] -= kDecayInc;
 8001fe2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002060 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8001fe6:	ed9f aa19 	vldr	s20, [pc, #100]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001fea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fee:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8001ff2:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
 8001ff6:	f7ff b9b6 	b.w	8001366 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 8001ffa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002060 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8001ffe:	eddf ba13 	vldr	s23, [pc, #76]	@ 800204c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8002002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002006:	ee67 baab 	vmul.f32	s23, s15, s23
 800200a:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
 800200e:	f7ff b971 	b.w	80012f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
 8002012:	edd4 7a04 	vldr	s15, [r4, #16]
 8002016:	f7fe be98 	b.w	8000d4a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2ee>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800201a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002058 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15fc>
 800201e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	f140 8135 	bpl.w	8002294 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1838>
 800202a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 800202e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002032:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8002036:	eea7 0a87 	vfma.f32	s0, s15, s14
 800203a:	f7ff ba68 	b.w	800150e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
        int active_count = 0;
 800203e:	46c8      	mov	r8, r9
 8002040:	f7fe bff3 	b.w	800102a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5ce>
 8002044:	3f333333 	.word	0x3f333333
 8002048:	3c656041 	.word	0x3c656041
 800204c:	3ca3d70a 	.word	0x3ca3d70a
 8002050:	40490fdb 	.word	0x40490fdb
 8002054:	3ea2f983 	.word	0x3ea2f983
 8002058:	40c90fdb 	.word	0x40c90fdb
 800205c:	3f334bc6 	.word	0x3f334bc6
 8002060:	39c49ba6 	.word	0x39c49ba6
 8002064:	0800c414 	.word	0x0800c414
 8002068:	3f666666 	.word	0x3f666666
 800206c:	3b4ccccd 	.word	0x3b4ccccd
 8002070:	0800c380 	.word	0x0800c380
 8002074:	3f9837ef 	.word	0x3f9837ef
 8002078:	3fb504f7 	.word	0x3fb504f7
 800207c:	401837ef 	.word	0x401837ef
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8002080:	2200      	movs	r2, #0
 8002082:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002084:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
            if (env_state_[v] != ENV_IDLE)
 8002088:	f7ff b9f3 	b.w	8001472 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa16>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 800208c:	6723      	str	r3, [r4, #112]	@ 0x70
 800208e:	2300      	movs	r3, #0
 8002090:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (env_state_[v] != ENV_IDLE)
 8002094:	e45d      	b.n	8001952 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xef6>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8002096:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002098:	2300      	movs	r3, #0
 800209a:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (env_state_[v] != ENV_IDLE)
 800209e:	f7ff b9b4 	b.w	800140a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9ae>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 80020a2:	6763      	str	r3, [r4, #116]	@ 0x74
 80020a4:	2300      	movs	r3, #0
 80020a6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (env_state_[v] != ENV_IDLE)
 80020aa:	f7ff b975 	b.w	8001398 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x93c>
            for (int i = 0; i < active_count - 1; i++)
 80020ae:	2301      	movs	r3, #1
 80020b0:	e556      	b.n	8001b60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 80020b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80020b4:	e57d      	b.n	8001bb2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
            if (strum_state_[s] != ENV_IDLE)
 80020b6:	f1b9 0f00 	cmp.w	r9, #0
 80020ba:	d005      	beq.n	80020c8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x166c>
                strum_target_[s] = note * (1 << oct);
 80020bc:	ed91 7a00 	vldr	s14, [r1]
 80020c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c4:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80020c8:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	b14b      	cbz	r3, 80020e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1688>
                strum_target_[s] = note * (1 << oct);
 80020d0:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8002074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1618>
 80020d4:	edd1 6a00 	vldr	s13, [r1]
 80020d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80020e0:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 80020e4:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 80020e8:	9303      	str	r3, [sp, #12]
 80020ea:	b14b      	cbz	r3, 8002100 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16a4>
                strum_target_[s] = note * (1 << oct);
 80020ec:	ed1f 7a1e 	vldr	s14, [pc, #-120]	@ 8002078 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x161c>
 80020f0:	edd1 6a00 	vldr	s13, [r1]
 80020f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80020fc:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8002100:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8002104:	f1bb 0f00 	cmp.w	fp, #0
 8002108:	d007      	beq.n	800211a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16be>
                strum_target_[s] = note * (1 << oct);
 800210a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800210e:	edd1 6a00 	vldr	s13, [r1]
 8002112:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002116:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800211a:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800211e:	f1ba 0f00 	cmp.w	sl, #0
 8002122:	d007      	beq.n	8002134 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16d8>
                strum_target_[s] = note * (1 << oct);
 8002124:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002128:	edd1 6a00 	vldr	s13, [r1]
 800212c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002130:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8002134:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f43e af6a 	beq.w	8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 8002140:	ed5f 6a32 	vldr	s13, [pc, #-200]	@ 800207c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1620>
 8002144:	ed91 7a00 	vldr	s14, [r1]
 8002148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 8002154:	f7fe bf5e 	b.w	8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                switch (chord_type) {
 8002158:	4e9f      	ldr	r6, [pc, #636]	@ (80023d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x197c>)
 800215a:	f7fe bed2 	b.w	8000f02 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x4a6>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800215e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80023dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1980>
 8002162:	eef4 9ac7 	vcmpe.f32	s19, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	f140 809b 	bpl.w	80022a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1848>
 800216e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8002172:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 800217a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800217e:	f7ff b969 	b.w	8001454 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
 8002182:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002186:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800218a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800218e:	f7ff b8bb 	b.w	8001308 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
 8002192:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002196:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800219a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800219e:	f7ff b8ec 	b.w	800137a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
 80021a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021a6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80021aa:	eea7 0a87 	vfma.f32	s0, s15, s14
 80021ae:	f7ff b91d 	b.w	80013ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
        else if (minor7 && !major7)
 80021b2:	9f01      	ldr	r7, [sp, #4]
 80021b4:	2f01      	cmp	r7, #1
 80021b6:	f000 8085 	beq.w	80022c4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1868>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	f000 8082 	beq.w	80022c4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1868>
            target_freq_[3] = root_freq * kMinor7Ratio;
 80021c0:	eddf 6a87 	vldr	s13, [pc, #540]	@ 80023e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1984>
 80021c4:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 80021c8:	f7ff baf7 	b.w	80017ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd5e>
            for (int i = 0; i < active_count - 1; i++)
 80021cc:	2302      	movs	r3, #2
 80021ce:	e4c7      	b.n	8001b60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 80021d0:	2301      	movs	r3, #1
 80021d2:	f7fe bf91 	b.w	80010f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
 80021d6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80021d8:	f7fe bfdf 	b.w	800119a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
        else
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 80021dc:	edde 6a03 	vldr	s13, [lr, #12]
 80021e0:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 80021e4:	f7fe be1f 	b.w	8000e26 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3ca>
            for (int i = 0; i < active_count - 1; i++)
 80021e8:	2303      	movs	r3, #3
 80021ea:	e4b9      	b.n	8001b60 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 80021ec:	2302      	movs	r3, #2
 80021ee:	f7fe bf83 	b.w	80010f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
            if (strum_state_[s] != ENV_IDLE)
 80021f2:	f1b9 0f00 	cmp.w	r9, #0
 80021f6:	d005      	beq.n	8002204 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17a8>
                strum_target_[s] = note * (1 << oct);
 80021f8:	ed91 7a00 	vldr	s14, [r1]
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8002204:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	b14b      	cbz	r3, 8002220 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17c4>
                strum_target_[s] = note * (1 << oct);
 800220c:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80023e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 8002210:	ed91 7a00 	vldr	s14, [r1]
 8002214:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002218:	ee27 7a26 	vmul.f32	s14, s14, s13
 800221c:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002220:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002224:	9303      	str	r3, [sp, #12]
 8002226:	b14b      	cbz	r3, 800223c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17e0>
                strum_target_[s] = note * (1 << oct);
 8002228:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80023e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x198c>
 800222c:	ed91 7a00 	vldr	s14, [r1]
 8002230:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002234:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002238:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 800223c:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8002240:	f1bb 0f00 	cmp.w	fp, #0
 8002244:	d007      	beq.n	8002256 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17fa>
                strum_target_[s] = note * (1 << oct);
 8002246:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800224a:	ed91 7a00 	vldr	s14, [r1]
 800224e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002252:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8002256:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800225a:	f1ba 0f00 	cmp.w	sl, #0
 800225e:	d007      	beq.n	8002270 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1814>
                strum_target_[s] = note * (1 << oct);
 8002260:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002264:	ed91 7a00 	vldr	s14, [r1]
 8002268:	ee27 7a26 	vmul.f32	s14, s14, s13
 800226c:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8002270:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8002274:	9304      	str	r3, [sp, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f43e aecc 	beq.w	8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 800227c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80023ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1990>
 8002280:	edd1 6a00 	vldr	s13, [r1]
 8002284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228c:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 8002290:	f7fe bec0 	b.w	8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
 8002294:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002298:	f7ff b939 	b.w	800150e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
                chord_multipliers = minor_chord_multipliers_;
 800229c:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80023d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x197c>
 80022a0:	f7ff ba6f 	b.w	8001782 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd26>
 80022a4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80022a8:	f7ff b8d4 	b.w	8001454 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80022ac:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 80022b0:	f7ff b863 	b.w	800137a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80022b4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 80022b8:	f7ff b898 	b.w	80013ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80022bc:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 80022c0:	f7ff b822 	b.w	8001308 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 80022c4:	edd9 6a03 	vldr	s13, [r9, #12]
 80022c8:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 80022cc:	f7ff ba75 	b.w	80017ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd5e>
            for (int i = 0; i < active_count - 1; i++)
 80022d0:	2303      	movs	r3, #3
 80022d2:	f7fe bf11 	b.w	80010f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
            if (strum_state_[s] != ENV_IDLE)
 80022d6:	f1b9 0f00 	cmp.w	r9, #0
 80022da:	d005      	beq.n	80022e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x188c>
                strum_target_[s] = note * (1 << oct);
 80022dc:	ed91 7a00 	vldr	s14, [r1]
 80022e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e4:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80022e8:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 80022ec:	9702      	str	r7, [sp, #8]
 80022ee:	b14f      	cbz	r7, 8002304 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18a8>
                strum_target_[s] = note * (1 << oct);
 80022f0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80023e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 80022f4:	edd1 6a00 	vldr	s13, [r1]
 80022f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002300:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002304:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 8002308:	9703      	str	r7, [sp, #12]
 800230a:	b14f      	cbz	r7, 8002320 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
                strum_target_[s] = note * (1 << oct);
 800230c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80023f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1994>
 8002310:	edd1 6a00 	vldr	s13, [r1]
 8002314:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002318:	ee27 7a26 	vmul.f32	s14, s14, s13
 800231c:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8002320:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8002324:	f1bb 0f00 	cmp.w	fp, #0
 8002328:	d007      	beq.n	800233a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18de>
                strum_target_[s] = note * (1 << oct);
 800232a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800232e:	edd1 6a00 	vldr	s13, [r1]
 8002332:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002336:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800233a:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800233e:	f1ba 0f00 	cmp.w	sl, #0
 8002342:	d007      	beq.n	8002354 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18f8>
                strum_target_[s] = note * (1 << oct);
 8002344:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002348:	edd1 6a00 	vldr	s13, [r1]
 800234c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002350:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8002354:	f894 7101 	ldrb.w	r7, [r4, #257]	@ 0x101
 8002358:	9704      	str	r7, [sp, #16]
 800235a:	2f00      	cmp	r7, #0
 800235c:	f43e ad0b 	beq.w	8000d76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                strum_target_[s] = note * (1 << oct);
 8002360:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80023ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1990>
 8002364:	ed91 7a00 	vldr	s14, [r1]
 8002368:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800236c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002370:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
        if (!in_base_freq_mode_) {
 8002374:	f7fe bcff 	b.w	8000d76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
            if (strum_state_[s] != ENV_IDLE)
 8002378:	f1b9 0f00 	cmp.w	r9, #0
 800237c:	d005      	beq.n	800238a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x192e>
                strum_target_[s] = note * (1 << oct);
 800237e:	ed91 7a00 	vldr	s14, [r1]
 8002382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002386:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 800238a:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 800238e:	9702      	str	r7, [sp, #8]
 8002390:	b14f      	cbz	r7, 80023a6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x194a>
                strum_target_[s] = note * (1 << oct);
 8002392:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80023e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 8002396:	edd1 6a00 	vldr	s13, [r1]
 800239a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800239e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023a2:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 80023a6:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 80023aa:	9703      	str	r7, [sp, #12]
 80023ac:	2f00      	cmp	r7, #0
 80023ae:	d0b7      	beq.n	8002320 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
                strum_target_[s] = note * (1 << oct);
 80023b0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80023e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x198c>
 80023b4:	edd1 6a00 	vldr	s13, [r1]
 80023b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023c0:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
 80023c4:	e7ac      	b.n	8002320 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
 80023c6:	edd4 ba1c 	vldr	s23, [r4, #112]	@ 0x70
 80023ca:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80023f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1998>
 80023ce:	ee6b baa7 	vmul.f32	s23, s23, s15
 80023d2:	f7fe bf8f 	b.w	80012f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
 80023d6:	bf00      	nop
 80023d8:	0800c380 	.word	0x0800c380
 80023dc:	40c90fdb 	.word	0x40c90fdb
 80023e0:	3fe411ed 	.word	0x3fe411ed
 80023e4:	3f9837ef 	.word	0x3f9837ef
 80023e8:	3fbfc886 	.word	0x3fbfc886
 80023ec:	401837ef 	.word	0x401837ef
 80023f0:	3fb504f7 	.word	0x3fb504f7
 80023f4:	3ca3d70a 	.word	0x3ca3d70a

080023f8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            // The actual startup transition happens in main() after system wakeup
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 80023f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
 80023fc:	f8df e3dc 	ldr.w	lr, [pc, #988]	@ 80027dc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e4>
 8002400:	460e      	mov	r6, r1
    {
 8002402:	4688      	mov	r8, r1
 8002404:	4684      	mov	ip, r0
        io_.human.in.pot = pot;
 8002406:	4674      	mov	r4, lr

        AudioOutput audio_out = {};
 8002408:	2700      	movs	r7, #0
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 800240a:	f8df 93d4 	ldr.w	r9, [pc, #980]	@ 80027e0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e8>
        io_.human.in.pot = pot;
 800240e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    {
 8002410:	ed2d 8b10 	vpush	{d8-d15}
        io_.human.in.pot = pot;
 8002414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    {
 8002416:	b091      	sub	sp, #68	@ 0x44
        io_.human.in.pot = pot;
 8002418:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        AudioOutput audio_out = {};
 800241c:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 8002420:	970c      	str	r7, [sp, #48]	@ 0x30
 8002422:	ad0a      	add	r5, sp, #40	@ 0x28
        io_.human.in.pot = pot;
 8002424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002428:	f899 3000 	ldrb.w	r3, [r9]
 800242c:	f3bf 8f5b 	dmb	ish
        State cur = state_.load(std::memory_order_acquire);

        if (cur == STATE_SYNTH)
 8002430:	2b01      	cmp	r3, #1
 8002432:	f000 8218 	beq.w	8002866 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46e>
                synth_buttons,
                chord_pot, hold, last_strum_idx, strum_idx_changed,
                mode, seventh, minor_seventh);
        }

        if (cur == STATE_STARTUP || cur == STATE_ENDING)
 8002436:	b2dc      	uxtb	r4, r3
 8002438:	f1a4 030b 	sub.w	r3, r4, #11
 800243c:	2b01      	cmp	r3, #1
 800243e:	d862      	bhi.n	8002506 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x10e>
        }

        // Process audio samples just like SynthEngine
        void Process(float (&block)[kAudioOSFactor])
        {
            if (!is_active_)
 8002440:	4cdc      	ldr	r4, [pc, #880]	@ (80027b4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3bc>)
 8002442:	7b23      	ldrb	r3, [r4, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8239 	beq.w	80028bc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4c4>
                }
                return;
            }

            // Update note timer and advance to next note if needed
            note_timer_++;
 800244a:	6966      	ldr	r6, [r4, #20]
 800244c:	3601      	adds	r6, #1
            if (note_timer_ >= kNoteDuration)
 800244e:	f5b6 6ffa 	cmp.w	r6, #2000	@ 0x7d0
            note_timer_++;
 8002452:	6166      	str	r6, [r4, #20]
            if (note_timer_ >= kNoteDuration)
 8002454:	f2c0 8381 	blt.w	8002b5a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x762>
            {
                note_timer_ = 0;
                current_note_++;
 8002458:	6923      	ldr	r3, [r4, #16]

                // Check if we've reached the end of the jingle
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 800245a:	7b60      	ldrb	r0, [r4, #13]
                current_note_++;
 800245c:	3301      	adds	r3, #1
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 800245e:	4ad6      	ldr	r2, [pc, #856]	@ (80027b8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c0>)
 8002460:	49d6      	ldr	r1, [pc, #856]	@ (80027bc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c4>)
                note_timer_ = 0;
 8002462:	6167      	str	r7, [r4, #20]
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 8002464:	2800      	cmp	r0, #0
 8002466:	bf18      	it	ne
 8002468:	460a      	movne	r2, r1
                int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

                if (current_note_ >= jingle_length)
 800246a:	2b03      	cmp	r3, #3
                current_note_++;
 800246c:	6123      	str	r3, [r4, #16]
                if (current_note_ >= jingle_length)
 800246e:	f300 8541 	bgt.w	8002ef4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xafc>
            const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
            int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

            if (current_note_ < jingle_length)
            {
                voice_.SetFrequency(current_jingle[current_note_]);
 8002472:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        phase_inc_ = freq * kPhaseFactor;
 8002476:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 80027c0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c8>
            }
            else
            {
                voice_.SetFrequency(0.0f);
            }
        }
 800247a:	463e      	mov	r6, r7
 800247c:	edd2 7a00 	vldr	s15, [r2]
 8002480:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002484:	ed84 8a01 	vstr	s16, [r4, #4]
        if (waveform_ == Waveform::SINE) {
 8002488:	68a3      	ldr	r3, [r4, #8]
            out = sinf(phase_);
 800248a:	edd4 8a00 	vldr	s17, [r4]
        if (waveform_ == Waveform::SINE) {
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 8331 	bne.w	8002af6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6fe>
            out = sinf(phase_);
 8002494:	eeb0 0a68 	vmov.f32	s0, s17
 8002498:	f007 ff02 	bl	800a2a0 <sinf>
 800249c:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 80027c4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3cc>
 80024a0:	ee20 0a27 	vmul.f32	s0, s0, s15
        phase_ += phase_inc_;
 80024a4:	ee78 7a28 	vadd.f32	s15, s16, s17
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 80024a8:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 80027c8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d0>
 80024ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	bfa8      	it	ge
 80024b6:	ee77 7ac7 	vsubge.f32	s15, s15, s14
            if (note_timer_ < kFadeInSamples)
 80024ba:	f5b6 7fa0 	cmp.w	r6, #320	@ 0x140
        phase_ += phase_inc_;
 80024be:	edc4 7a00 	vstr	s15, [r4]
 80024c2:	f280 8339 	bge.w	8002b38 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x740>
                envelope = float(note_timer_) / float(kFadeInSamples);
 80024c6:	ee07 6a90 	vmov	s15, r6
 80024ca:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 80027cc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d4>
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 80024d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80024da:	f008 f943 	bl	800a764 <tanhf>
      if (__b < __a)
 80024de:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
            sample *= kAudioOSFactor * kAudioOutputLevel;
 80024e2:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80024e6:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80027d0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d8>
 80024ea:	ae0d      	add	r6, sp, #52	@ 0x34
 80024ec:	fec0 7a67 	vminnm.f32	s15, s0, s15
 80024f0:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
                block[i] = sample;
 80024f8:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 80024fc:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 8002500:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
            jingle_engine_.Process(audio_out[AUDIO_OUT_LINE]);
        } else if (cur == STATE_PLAY) {
            playback_.Process(audio_out[AUDIO_OUT_LINE], true, false, pot);
        }

        if (cur == STATE_RECORD)
 8002504:	e138      	b.n	8002778 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
        } else if (cur == STATE_PLAY) {
 8002506:	2c03      	cmp	r4, #3
 8002508:	f000 81e1 	beq.w	80028ce <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4d6>
        if (cur == STATE_RECORD)
 800250c:	2c02      	cmp	r4, #2
 800250e:	f040 8132 	bne.w	8002776 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x37e>
        {
            AudioInputID id = io_.human.in.detect[DETECT_LINE_IN] ?
                AUDIO_IN_LINE : AUDIO_IN_MIC;
            float pitch = 1;//(1-io_.human.in.pot[POT_1]) * 2 - 1;
            recording_.Process(audio_in[id], pitch);
 8002512:	f89e 102a 	ldrb.w	r1, [lr, #42]	@ 0x2a
        }
    }

    T Process(T in)
    {
        for (int n = 0; n < num_sections_; n++)
 8002516:	4baf      	ldr	r3, [pc, #700]	@ (80027d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3dc>)
 8002518:	4249      	negs	r1, r1
 800251a:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 800251e:	f001 010c 	and.w	r1, r1, #12
            out += sections_[n].b[0] * x_[n][0];
            out += sections_[n].b[1] * x_[n][1];
            out += sections_[n].b[2] * x_[n][2];

            // Subtract y state
            out -= sections_[n].a[0] * x_[n+1][0];
 8002522:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002526:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800252a:	f101 020c 	add.w	r2, r1, #12
 800252e:	4461      	add	r1, ip
 8002530:	eeb1 6a46 	vneg.f32	s12, s12
            out += sections_[n].b[0] * x_[n][0];
 8002534:	edd3 2a26 	vldr	s5, [r3, #152]	@ 0x98
 8002538:	4494      	add	ip, r2
            in = out;
        }

        // Shift final section x state
        x_[num_sections_][2] = x_[num_sections_][1];
 800253a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800253e:	eef1 6a66 	vneg.f32	s13, s13
            out += sections_[n].b[1] * x_[n][1];
 8002542:	ed93 3a27 	vldr	s6, [r3, #156]	@ 0x9c
            out += sections_[n].b[2] * x_[n][2];
 8002546:	edd3 3a28 	vldr	s7, [r3, #160]	@ 0xa0
        x_[num_sections_][2] = x_[num_sections_][1];
 800254a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            out -= sections_[n].a[0] * x_[n+1][0];
 800254e:	ed93 4a29 	vldr	s8, [r3, #164]	@ 0xa4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002552:	edd3 4a2a 	vldr	s9, [r3, #168]	@ 0xa8
            out += sections_[n].b[0] * x_[n][0];
 8002556:	ed93 1a2b 	vldr	s2, [r3, #172]	@ 0xac
            out += sections_[n].b[1] * x_[n][1];
 800255a:	ed93 5a2c 	vldr	s10, [r3, #176]	@ 0xb0
            out += sections_[n].b[2] * x_[n][2];
 800255e:	edd3 5a2d 	vldr	s11, [r3, #180]	@ 0xb4
            out -= sections_[n].a[0] * x_[n+1][0];
 8002562:	edd3 1a2e 	vldr	s3, [r3, #184]	@ 0xb8
            out -= sections_[n].a[1] * x_[n+1][1];
 8002566:	ed93 2a2f 	vldr	s4, [r3, #188]	@ 0xbc
            out += sections_[n].b[0] * x_[n][0];
 800256a:	ed93 9a30 	vldr	s18, [r3, #192]	@ 0xc0
            out += sections_[n].b[1] * x_[n][1];
 800256e:	edd3 8a31 	vldr	s17, [r3, #196]	@ 0xc4
            out += sections_[n].b[2] * x_[n][2];
 8002572:	ed93 8a32 	vldr	s16, [r3, #200]	@ 0xc8
            out -= sections_[n].a[0] * x_[n+1][0];
 8002576:	ed93 0a33 	vldr	s0, [r3, #204]	@ 0xcc
            out -= sections_[n].a[1] * x_[n+1][1];
 800257a:	edd3 0a34 	vldr	s1, [r3, #208]	@ 0xd0
            out += sections_[n].b[0] * x_[n][0];
 800257e:	edd3 ba35 	vldr	s23, [r3, #212]	@ 0xd4
            out += sections_[n].b[1] * x_[n][1];
 8002582:	ed93 ba36 	vldr	s22, [r3, #216]	@ 0xd8
            out += sections_[n].b[2] * x_[n][2];
 8002586:	edd3 aa37 	vldr	s21, [r3, #220]	@ 0xdc
            out -= sections_[n].a[0] * x_[n+1][0];
 800258a:	ed93 aa38 	vldr	s20, [r3, #224]	@ 0xe0
            out -= sections_[n].a[1] * x_[n+1][1];
 800258e:	edd3 9a39 	vldr	s19, [r3, #228]	@ 0xe4
            out += sections_[n].b[0] * x_[n][0];
 8002592:	ed93 da3a 	vldr	s26, [r3, #232]	@ 0xe8
            out += sections_[n].b[1] * x_[n][1];
 8002596:	edd3 ca3b 	vldr	s25, [r3, #236]	@ 0xec
            out += sections_[n].b[2] * x_[n][2];
 800259a:	ed93 ca3c 	vldr	s24, [r3, #240]	@ 0xf0
        for (int n = 0; n < num_sections_; n++)
 800259e:	2800      	cmp	r0, #0
        float ratio = std::exp2(pitch);
        float sample = 0;

        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            sample = aa_filter_.Process(block[i]);
 80025a0:	ecf1 7a01 	vldmia	r1!, {s15}
 80025a4:	dd79      	ble.n	800269a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
 80025a6:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 80025aa:	2801      	cmp	r0, #1
 80025ac:	edd3 da3f 	vldr	s27, [r3, #252]	@ 0xfc
            x_[n][2] = x_[n][1];
 80025b0:	ed83 7a41 	vstr	s14, [r3, #260]	@ 0x104
            out += sections_[n].b[2] * x_[n][2];
 80025b4:	ee23 7a87 	vmul.f32	s14, s7, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 80025b8:	ed93 ea42 	vldr	s28, [r3, #264]	@ 0x108
            out -= sections_[n].a[1] * x_[n+1][1];
 80025bc:	edd3 ea43 	vldr	s29, [r3, #268]	@ 0x10c
 80025c0:	eea3 7a2d 	vfma.f32	s14, s6, s27
            x_[n][1] = x_[n][0];
 80025c4:	edc3 da40 	vstr	s27, [r3, #256]	@ 0x100
            out += sections_[n].b[2] * x_[n][2];
 80025c8:	ee65 daae 	vmul.f32	s27, s11, s29
            x_[n][0] = in;
 80025cc:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
 80025d0:	eee5 da0e 	vfma.f32	s27, s10, s28
 80025d4:	eeae 7a44 	vfms.f32	s14, s28, s8
 80025d8:	eeae 7ae4 	vfms.f32	s14, s29, s9
            out -= sections_[n].a[1] * x_[n+1][1];
 80025dc:	eea7 7aa2 	vfma.f32	s14, s15, s5
 80025e0:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 80025e4:	d059      	beq.n	800269a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][1] = x_[n][0];
 80025e6:	ed83 ea43 	vstr	s28, [r3, #268]	@ 0x10c
        for (int n = 0; n < num_sections_; n++)
 80025ea:	2802      	cmp	r0, #2
            out -= sections_[n].a[0] * x_[n+1][0];
 80025ec:	ed93 ea45 	vldr	s28, [r3, #276]	@ 0x114
            x_[n][0] = in;
 80025f0:	ed83 7a42 	vstr	s14, [r3, #264]	@ 0x108
 80025f4:	eeee da61 	vfms.f32	s27, s28, s3
            out -= sections_[n].a[1] * x_[n+1][1];
 80025f8:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
            x_[n][2] = x_[n][1];
 80025fc:	edc3 ea44 	vstr	s29, [r3, #272]	@ 0x110
 8002600:	eee7 da42 	vfms.f32	s27, s14, s4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002604:	eee1 da27 	vfma.f32	s27, s2, s15
 8002608:	eef0 7a6d 	vmov.f32	s15, s27
        for (int n = 0; n < num_sections_; n++)
 800260c:	d045      	beq.n	800269a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 800260e:	ed83 7a47 	vstr	s14, [r3, #284]	@ 0x11c
            out += sections_[n].b[2] * x_[n][2];
 8002612:	ee28 7a07 	vmul.f32	s14, s16, s14
            x_[n][1] = x_[n][0];
 8002616:	ed83 ea46 	vstr	s28, [r3, #280]	@ 0x118
        for (int n = 0; n < num_sections_; n++)
 800261a:	2803      	cmp	r0, #3
            x_[n][0] = in;
 800261c:	edc3 da45 	vstr	s27, [r3, #276]	@ 0x114
 8002620:	eea8 7a8e 	vfma.f32	s14, s17, s28
            out -= sections_[n].a[0] * x_[n+1][0];
 8002624:	ed93 ea48 	vldr	s28, [r3, #288]	@ 0x120
            out -= sections_[n].a[1] * x_[n+1][1];
 8002628:	edd3 da49 	vldr	s27, [r3, #292]	@ 0x124
 800262c:	eeae 7a40 	vfms.f32	s14, s28, s0
 8002630:	eead 7ae0 	vfms.f32	s14, s27, s1
 8002634:	eea9 7a27 	vfma.f32	s14, s18, s15
 8002638:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 800263c:	d02d      	beq.n	800269a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 800263e:	edc3 da4a 	vstr	s27, [r3, #296]	@ 0x128
            out += sections_[n].b[2] * x_[n][2];
 8002642:	ee6a daad 	vmul.f32	s27, s21, s27
            x_[n][1] = x_[n][0];
 8002646:	ed83 ea49 	vstr	s28, [r3, #292]	@ 0x124
        for (int n = 0; n < num_sections_; n++)
 800264a:	2804      	cmp	r0, #4
            x_[n][0] = in;
 800264c:	ed83 7a48 	vstr	s14, [r3, #288]	@ 0x120
 8002650:	eeeb da0e 	vfma.f32	s27, s22, s28
            out -= sections_[n].a[0] * x_[n+1][0];
 8002654:	ed93 ea4b 	vldr	s28, [r3, #300]	@ 0x12c
            out -= sections_[n].a[1] * x_[n+1][1];
 8002658:	ed93 7a4c 	vldr	s14, [r3, #304]	@ 0x130
 800265c:	eeee da4a 	vfms.f32	s27, s28, s20
 8002660:	eee7 da69 	vfms.f32	s27, s14, s19
 8002664:	eeeb daa7 	vfma.f32	s27, s23, s15
 8002668:	eef0 7a6d 	vmov.f32	s15, s27
        for (int n = 0; n < num_sections_; n++)
 800266c:	d015      	beq.n	800269a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 800266e:	ed83 7a4d 	vstr	s14, [r3, #308]	@ 0x134
            out += sections_[n].b[2] * x_[n][2];
 8002672:	ee2c 7a07 	vmul.f32	s14, s24, s14
            x_[n][0] = in;
 8002676:	edc3 da4b 	vstr	s27, [r3, #300]	@ 0x12c
 800267a:	edd3 da4e 	vldr	s27, [r3, #312]	@ 0x138
 800267e:	eeac 7a8e 	vfma.f32	s14, s25, s28
            x_[n][1] = x_[n][0];
 8002682:	ed83 ea4c 	vstr	s28, [r3, #304]	@ 0x130
 8002686:	eead 7a86 	vfma.f32	s14, s27, s12
 800268a:	edd3 da4f 	vldr	s27, [r3, #316]	@ 0x13c
 800268e:	eead 7aa6 	vfma.f32	s14, s27, s13
            out -= sections_[n].a[1] * x_[n+1][1];
 8002692:	eead 7a27 	vfma.f32	s14, s26, s15
 8002696:	eef0 7a47 	vmov.f32	s15, s14
        x_[num_sections_][2] = x_[num_sections_][1];
 800269a:	f8d2 6100 	ldr.w	r6, [r2, #256]	@ 0x100
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
 800269e:	4561      	cmp	r1, ip
        x_[num_sections_][1] = x_[num_sections_][0];
 80026a0:	f8d2 40fc 	ldr.w	r4, [r2, #252]	@ 0xfc
        x_[num_sections_][2] = x_[num_sections_][1];
 80026a4:	f8c2 6104 	str.w	r6, [r2, #260]	@ 0x104
        x_[num_sections_][1] = x_[num_sections_][0];
 80026a8:	f8c2 4100 	str.w	r4, [r2, #256]	@ 0x100
        x_[num_sections_][0] = in;
 80026ac:	edc2 7a3f 	vstr	s15, [r2, #252]	@ 0xfc
 80026b0:	f47f af75 	bne.w	800259e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1a6>

    void Push(float sample, float ratio)
    {
        float speed = 1 / ratio;

        while (input_phase_ <= 1)
 80026b4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80026b8:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 80026bc:	4e46      	ldr	r6, [pc, #280]	@ (80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e0>)
 80026be:	eef4 6ae5 	vcmpe.f32	s13, s11
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	f200 808d 	bhi.w	80027e4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ec>
            if (!output_.full())
            {
                output_.Push(std::lerp(history_, sample, input_phase_));
            }

            input_phase_ += speed;
 80026ca:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80026ce:	f1a6 0c04 	sub.w	ip, r6, #4
 80026d2:	e00a      	b.n	80026ea <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f2>
 80026d4:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
        while (input_phase_ <= 1)
 80026d8:	eeb4 7ac6 	vcmpe.f32	s14, s12
            input_phase_ += speed;
 80026dc:	ee77 6a06 	vadd.f32	s13, s14, s12
        while (input_phase_ <= 1)
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            input_phase_ += speed;
 80026e4:	edc3 6a23 	vstr	s13, [r3, #140]	@ 0x8c
        while (input_phase_ <= 1)
 80026e8:	d87e      	bhi.n	80027e8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3f0>
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80026ea:	6832      	ldr	r2, [r6, #0]
 80026ec:	f8dc 1000 	ldr.w	r1, [ip]
 80026f0:	f3bf 8f5b 	dmb	ish

    bool full(void)
    {
        uint32_t tail = tail_.load(std::memory_order_relaxed);
        uint32_t head = head_.load(std::memory_order_acquire);
        return tail - head >= size;
 80026f4:	1a52      	subs	r2, r2, r1
            if (!output_.full())
 80026f6:	2a1f      	cmp	r2, #31
 80026f8:	d8ec      	bhi.n	80026d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
                output_.Push(std::lerp(history_, sample, input_phase_));
 80026fa:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 80026fe:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c

  template<typename _Fp>
    constexpr _Fp
    __lerp(_Fp __a, _Fp __b, _Fp __t) noexcept
    {
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 8002702:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270e:	d942      	bls.n	8002796 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x39e>
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d947      	bls.n	80027a6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ae>
	return __t * __b + (1 - __t) * __a;

      if (__t == 1)
 8002716:	eef4 6a65 	vcmp.f32	s13, s11
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	f000 80d3 	beq.w	80028c8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4d0>
	return __b;                        // exact

      // Exact at __t=0, monotonic except near __t=1,
      // bounded, determinate, and consistent:
      const _Fp __x = __a + __t * (__b - __a);
      return (__t > 1) == (__b > __a)
 8002722:	eef4 6ae5 	vcmpe.f32	s13, s11
      const _Fp __x = __a + __t * (__b - __a);
 8002726:	ee37 5ac7 	vsub.f32	s10, s15, s14
      return (__t > 1) == (__b > __a)
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	eeb4 7ae7 	vcmpe.f32	s14, s15
      const _Fp __x = __a + __t * (__b - __a);
 8002732:	eea6 7a85 	vfma.f32	s14, s13, s10
      return (__t > 1) == (__b > __a)
 8002736:	bfcc      	ite	gt
 8002738:	2101      	movgt	r1, #1
 800273a:	2100      	movle	r1, #0
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	? (__b < __x ? __x : __b)
 8002740:	bf4c      	ite	mi
 8002742:	2201      	movmi	r2, #1
 8002744:	2200      	movpl	r2, #0
 8002746:	4291      	cmp	r1, r2
 8002748:	f000 81d2 	beq.w	8002af0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6f8>
 800274c:	fe87 7a67 	vminnm.f32	s14, s14, s15
 8002750:	6832      	ldr	r2, [r6, #0]
 8002752:	f8dc 1000 	ldr.w	r1, [ip]
 8002756:	f3bf 8f5b 	dmb	ish
    bool Push(T* buffer, uint32_t length)
    {
        uint32_t tail = tail_.load(std::memory_order_relaxed);
        uint32_t head = head_.load(std::memory_order_acquire);

        if (tail - head > size - length)
 800275a:	1a51      	subs	r1, r2, r1
 800275c:	291f      	cmp	r1, #31
 800275e:	d8b9      	bhi.n	80026d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
            return false;
        }

        for (uint32_t i = 0; i < length; i++)
        {
            data_[(tail + i) % size] = buffer[i];
 8002760:	f002 011f 	and.w	r1, r2, #31
        }

        tail_.store(tail + length, std::memory_order_release);
 8002764:	3201      	adds	r2, #1
            data_[(tail + i) % size] = buffer[i];
 8002766:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800276a:	ed81 7a03 	vstr	s14, [r1, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 800276e:	f3bf 8f5b 	dmb	ish
 8002772:	6032      	str	r2, [r6, #0]
        return true;
 8002774:	e7ae      	b.n	80026d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
 8002776:	ae0d      	add	r6, sp, #52	@ 0x34
        }

        return audio_out;
 8002778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800277c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8002780:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 8002784:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 8002788:	ed9d 1a0f 	vldr	s2, [sp, #60]	@ 0x3c
    }
 800278c:	b011      	add	sp, #68	@ 0x44
 800278e:	ecbd 8b10 	vpop	{d8-d15}
 8002792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	da04      	bge.n	80027a6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ae>
 800279c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d1b7      	bne.n	8002716 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31e>
	return __t * __b + (1 - __t) * __a;
 80027a6:	ee35 5ae6 	vsub.f32	s10, s11, s13
 80027aa:	ee25 7a07 	vmul.f32	s14, s10, s14
 80027ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80027b2:	e7cd      	b.n	8002750 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
 80027b4:	20010910 	.word	0x20010910
 80027b8:	0800c310 	.word	0x0800c310
 80027bc:	0800c320 	.word	0x0800c320
 80027c0:	39cde32e 	.word	0x39cde32e
 80027c4:	3d75c28f 	.word	0x3d75c28f
 80027c8:	40c90fdb 	.word	0x40c90fdb
 80027cc:	3b4ccccd 	.word	0x3b4ccccd
 80027d0:	40366666 	.word	0x40366666
 80027d4:	20010748 	.word	0x20010748
 80027d8:	20010750 	.word	0x20010750
 80027dc:	20000554 	.word	0x20000554
 80027e0:	200108ec 	.word	0x200108ec
 80027e4:	f1a6 0c04 	sub.w	ip, r6, #4
        }

        input_phase_ -= 1;
 80027e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
        history_ = sample;
 80027ec:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
        input_phase_ -= 1;
 80027f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80027f4:	edc3 6a23 	vstr	s13, [r3, #140]	@ 0x8c
	return __atomic_load_n(&_M_i, int(__m));
 80027f8:	f8dc 2000 	ldr.w	r2, [ip]
 80027fc:	6831      	ldr	r1, [r6, #0]
 80027fe:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8002802:	428a      	cmp	r2, r1
 8002804:	d0b7      	beq.n	8002776 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x37e>
        {
            return false;
        }

        item = data_[head % size];
 8002806:	f002 011f 	and.w	r1, r2, #31
        head_.store(head + 1, std::memory_order_release);
 800280a:	3201      	adds	r2, #1
        item = data_[head % size];
 800280c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002810:	edd1 7a03 	vldr	s15, [r1, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8002814:	f3bf 8f5b 	dmb	ish
 8002818:	f8cc 2000 	str.w	r2, [ip]

        resampler_.Push(sample, ratio);

        while (resampler_.Pop(sample))
        {
            memory_.Append(sample);
 800281c:	681f      	ldr	r7, [r3, #0]
        return audio_info_.size / sizeof(T);
    }

    void Append(T item)
    {
        if (buffer_index_ < buffer_chain_.length())
 800281e:	693a      	ldr	r2, [r7, #16]
        return total_size_;
    }

    uint32_t length(void)
    {
        return total_size_ / sizeof(T);
 8002820:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002822:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
 8002826:	d2e7      	bcs.n	80027f8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x400>
        {
            buffer_chain_[buffer_index_++] = item;
 8002828:	1c51      	adds	r1, r2, #1
        for (uint32_t i = 0; i < num_links_; i++)
 800282a:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 800282e:	6139      	str	r1, [r7, #16]
 8002830:	f1be 0f00 	cmp.w	lr, #0
 8002834:	d015      	beq.n	8002862 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46a>
 8002836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002838:	2000      	movs	r0, #0
 800283a:	e005      	b.n	8002848 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
 800283c:	4586      	cmp	lr, r0
            index -= chain_[i].length;
 800283e:	eba2 0204 	sub.w	r2, r2, r4
        for (uint32_t i = 0; i < num_links_; i++)
 8002842:	f101 010c 	add.w	r1, r1, #12
 8002846:	d00c      	beq.n	8002862 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46a>
            if (index < chain_[i].length)
 8002848:	684c      	ldr	r4, [r1, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 800284a:	3001      	adds	r0, #1
            if (index < chain_[i].length)
 800284c:	4294      	cmp	r4, r2
 800284e:	d9f5      	bls.n	800283c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x444>
                return chain_[i].buffer[index];
 8002850:	680f      	ldr	r7, [r1, #0]
 8002852:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8002856:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 800285a:	ee17 2a90 	vmov	r2, s15
 800285e:	803a      	strh	r2, [r7, #0]
 8002860:	e7ca      	b.n	80027f8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x400>
        return dummy_;
 8002862:	3748      	adds	r7, #72	@ 0x48
 8002864:	e7f7      	b.n	8002856 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x45e>
            synth_engine_.Process(
 8002866:	f89e 3026 	ldrb.w	r3, [lr, #38]	@ 0x26
 800286a:	ae0d      	add	r6, sp, #52	@ 0x34
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 800286c:	4abc      	ldr	r2, [pc, #752]	@ (8002b60 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x768>)
 800286e:	4629      	mov	r1, r5
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	4bbc      	ldr	r3, [pc, #752]	@ (8002b64 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x76c>)
 8002874:	edd8 0a00 	vldr	s1, [r8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	ed98 0a04 	vldr	s0, [r8, #16]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	4bb9      	ldr	r3, [pc, #740]	@ (8002b68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x770>)
 8002882:	48ba      	ldr	r0, [pc, #744]	@ (8002b6c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x774>)
 8002884:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8002888:	6814      	ldr	r4, [r2, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f004 0401 	and.w	r4, r4, #1
                synth_buttons[i] = buttons[i].is_high();
 8002890:	f364 0707 	bfi	r7, r4, #0, #8
 8002894:	6854      	ldr	r4, [r2, #4]
 8002896:	f004 0401 	and.w	r4, r4, #1
 800289a:	f364 270f 	bfi	r7, r4, #8, #8
 800289e:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
 80028a2:	f004 0401 	and.w	r4, r4, #1
 80028a6:	f002 0201 	and.w	r2, r2, #1
 80028aa:	f364 4717 	bfi	r7, r4, #16, #8
 80028ae:	f362 671f 	bfi	r7, r2, #24, #8
            synth_engine_.Process(
 80028b2:	4632      	mov	r2, r6
                synth_buttons[i] = buttons[i].is_high();
 80028b4:	970d      	str	r7, [sp, #52]	@ 0x34
            synth_engine_.Process(
 80028b6:	f7fe f8d1 	bl	8000a5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)>
        } else if (cur == STATE_PLAY) {
 80028ba:	e75d      	b.n	8002778 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
                    block[i] = 0.0f;
 80028bc:	2300      	movs	r3, #0
 80028be:	ae0d      	add	r6, sp, #52	@ 0x34
 80028c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80028c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80028c4:	930c      	str	r3, [sp, #48]	@ 0x30
        if (cur == STATE_RECORD)
 80028c6:	e757      	b.n	8002778 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
	return __b;                        // exact
 80028c8:	eeb0 7a67 	vmov.f32	s14, s15
 80028cc:	e740      	b.n	8002750 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
        }
        void Process(float (&block)[kAudioOSFactor], bool loop, bool reverse,
                     const PotInput &pot)
        {
            float pitch;
            if (state_ != STATE_SCRUBBING)
 80028ce:	4ea8      	ldr	r6, [pc, #672]	@ (8002b70 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x778>)
 80028d0:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	f000 815b 	beq.w	8002b90 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x798>
            {
                pitch = (1 - pot[kPotPitch]) * 2 - 1; // pot values reversed due to wiring change
 80028da:	edd8 7a00 	vldr	s15, [r8]
                pitch = 1.0;
            }
            float speed = std::exp2(pitch);
            float sample = 0;

            if (state_ == STATE_STOPPED)
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 837e 	bne.w	8002fe0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbe8>
            {
                if (cue_play_)
 80028e4:	f896 2031 	ldrb.w	r2, [r6, #49]	@ 0x31
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	f040 8236 	bne.w	8002d5a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x962>
 80028ee:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 8002b8c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
 80028f2:	4ca0      	ldr	r4, [pc, #640]	@ (8002b74 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x77c>)
        for (int n = 0; n < num_sections_; n++)
 80028f4:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
            out -= sections_[n].a[1] * x_[n+1][1];
 80028f8:	f04f 0c00 	mov.w	ip, #0
            out -= sections_[n].a[0] * x_[n+1][0];
 80028fc:	ed94 5a5d 	vldr	s10, [r4, #372]	@ 0x174
 8002900:	46ae      	mov	lr, r5
            out -= sections_[n].a[1] * x_[n+1][1];
 8002902:	edd4 5a5e 	vldr	s11, [r4, #376]	@ 0x178
        x_[num_sections_][2] = x_[num_sections_][1];
 8002906:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800290a:	eeb1 5a45 	vneg.f32	s10, s10
            out += sections_[n].b[2] * x_[n][2];
 800290e:	ed94 7a5c 	vldr	s14, [r4, #368]	@ 0x170
 8002912:	eef1 5a65 	vneg.f32	s11, s11
            out += sections_[n].b[0] * x_[n][0];
 8002916:	edd4 2a46 	vldr	s5, [r4, #280]	@ 0x118
            out += sections_[n].b[1] * x_[n][1];
 800291a:	ed94 3a47 	vldr	s6, [r4, #284]	@ 0x11c
        x_[num_sections_][2] = x_[num_sections_][1];
 800291e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            out += sections_[n].b[2] * x_[n][2];
 8002922:	edd4 3a48 	vldr	s7, [r4, #288]	@ 0x120
            out -= sections_[n].a[1] * x_[n+1][1];
 8002926:	46e1      	mov	r9, ip
            out -= sections_[n].a[0] * x_[n+1][0];
 8002928:	ed94 4a49 	vldr	s8, [r4, #292]	@ 0x124
            out -= sections_[n].a[1] * x_[n+1][1];
 800292c:	46e3      	mov	fp, ip
 800292e:	edd4 4a4a 	vldr	s9, [r4, #296]	@ 0x128
 8002932:	4660      	mov	r0, ip
            out += sections_[n].b[0] * x_[n][0];
 8002934:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
            }

            // sample = main_filter_.Process(sample); //main filter, used to boost output in certain frequency ranges for different units (vocal, kalimba, etc.)
            sample *= kAudioOSFactor * kAudioOutputLevel;

            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8002938:	4661      	mov	r1, ip
            out += sections_[n].b[1] * x_[n][1];
 800293a:	edd4 0a4c 	vldr	s1, [r4, #304]	@ 0x130
            out -= sections_[n].a[1] * x_[n+1][1];
 800293e:	46e2      	mov	sl, ip
            out += sections_[n].b[2] * x_[n][2];
 8002940:	ed94 1a4d 	vldr	s2, [r4, #308]	@ 0x134
 8002944:	005f      	lsls	r7, r3, #1
            out -= sections_[n].a[0] * x_[n+1][0];
 8002946:	edd4 1a4e 	vldr	s3, [r4, #312]	@ 0x138
            out -= sections_[n].a[1] * x_[n+1][1];
 800294a:	ed94 2a4f 	vldr	s4, [r4, #316]	@ 0x13c
            out += sections_[n].b[0] * x_[n][0];
 800294e:	ed94 ca50 	vldr	s24, [r4, #320]	@ 0x140
            out += sections_[n].b[1] * x_[n][1];
 8002952:	edd4 ba51 	vldr	s23, [r4, #324]	@ 0x144
            out += sections_[n].b[2] * x_[n][2];
 8002956:	ed94 ba52 	vldr	s22, [r4, #328]	@ 0x148
            out -= sections_[n].a[0] * x_[n+1][0];
 800295a:	edd4 aa53 	vldr	s21, [r4, #332]	@ 0x14c
            out -= sections_[n].a[1] * x_[n+1][1];
 800295e:	ed94 aa54 	vldr	s20, [r4, #336]	@ 0x150
            out += sections_[n].b[0] * x_[n][0];
 8002962:	edd4 ea55 	vldr	s29, [r4, #340]	@ 0x154
            out += sections_[n].b[1] * x_[n][1];
 8002966:	ed94 ea56 	vldr	s28, [r4, #344]	@ 0x158
            out += sections_[n].b[2] * x_[n][2];
 800296a:	edd4 da57 	vldr	s27, [r4, #348]	@ 0x15c
            out -= sections_[n].a[0] * x_[n+1][0];
 800296e:	ed94 da58 	vldr	s26, [r4, #352]	@ 0x160
            out -= sections_[n].a[1] * x_[n+1][1];
 8002972:	edd4 ca59 	vldr	s25, [r4, #356]	@ 0x164
            out += sections_[n].b[0] * x_[n][0];
 8002976:	edd4 fa5a 	vldr	s31, [r4, #360]	@ 0x168
            out += sections_[n].b[1] * x_[n][1];
 800297a:	ed94 fa5b 	vldr	s30, [r4, #364]	@ 0x16c
            out += sections_[n].b[2] * x_[n][2];
 800297e:	ed8d 7a04 	vstr	s14, [sp, #16]
        for (int n = 0; n < num_sections_; n++)
 8002982:	2b00      	cmp	r3, #0
 8002984:	f340 8084 	ble.w	8002a90 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x698>
 8002988:	ed94 8a60 	vldr	s16, [r4, #384]	@ 0x180
 800298c:	2b01      	cmp	r3, #1
 800298e:	edd4 6a5f 	vldr	s13, [r4, #380]	@ 0x17c
            out += sections_[n].b[2] * x_[n][2];
 8002992:	ee23 7a88 	vmul.f32	s14, s7, s16
            out -= sections_[n].a[0] * x_[n+1][0];
 8002996:	ed94 6a62 	vldr	s12, [r4, #392]	@ 0x188
            x_[n][1] = x_[n][0];
 800299a:	edc4 6a60 	vstr	s13, [r4, #384]	@ 0x180
            x_[n][0] = in;
 800299e:	edc4 7a5f 	vstr	s15, [r4, #380]	@ 0x17c
 80029a2:	eea3 7a26 	vfma.f32	s14, s6, s13
            out -= sections_[n].a[1] * x_[n+1][1];
 80029a6:	edd4 6a63 	vldr	s13, [r4, #396]	@ 0x18c
 80029aa:	eea6 7a44 	vfms.f32	s14, s12, s8
 80029ae:	eea6 7ae4 	vfms.f32	s14, s13, s9
 80029b2:	eea7 7aa2 	vfma.f32	s14, s15, s5
 80029b6:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 80029ba:	f000 828f 	beq.w	8002edc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xae4>
            x_[n][0] = in;
 80029be:	ed84 7a62 	vstr	s14, [r4, #392]	@ 0x188
            out += sections_[n].b[2] * x_[n][2];
 80029c2:	ee21 7a26 	vmul.f32	s14, s2, s13
            x_[n][1] = x_[n][0];
 80029c6:	ed84 6a63 	vstr	s12, [r4, #396]	@ 0x18c
        for (int n = 0; n < num_sections_; n++)
 80029ca:	2b02      	cmp	r3, #2
            out -= sections_[n].a[1] * x_[n+1][1];
 80029cc:	edd4 8a66 	vldr	s17, [r4, #408]	@ 0x198
 80029d0:	eea0 7a86 	vfma.f32	s14, s1, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 80029d4:	ed94 6a65 	vldr	s12, [r4, #404]	@ 0x194
 80029d8:	eea6 7a61 	vfms.f32	s14, s12, s3
 80029dc:	eea8 7ac2 	vfms.f32	s14, s17, s4
            out -= sections_[n].a[1] * x_[n+1][1];
 80029e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80029e4:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 80029e8:	f000 827b 	beq.w	8002ee2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xaea>
            x_[n][0] = in;
 80029ec:	ed84 7a65 	vstr	s14, [r4, #404]	@ 0x194
            out += sections_[n].b[2] * x_[n][2];
 80029f0:	ee2b 7a28 	vmul.f32	s14, s22, s17
            x_[n][1] = x_[n][0];
 80029f4:	ed84 6a66 	vstr	s12, [r4, #408]	@ 0x198
        for (int n = 0; n < num_sections_; n++)
 80029f8:	2b03      	cmp	r3, #3
            out -= sections_[n].a[1] * x_[n+1][1];
 80029fa:	ed94 9a69 	vldr	s18, [r4, #420]	@ 0x1a4
 80029fe:	eeab 7a86 	vfma.f32	s14, s23, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 8002a02:	ed94 6a68 	vldr	s12, [r4, #416]	@ 0x1a0
 8002a06:	eea6 7a6a 	vfms.f32	s14, s12, s21
 8002a0a:	eea9 7a4a 	vfms.f32	s14, s18, s20
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a0e:	eeac 7a27 	vfma.f32	s14, s24, s15
 8002a12:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8002a16:	f000 8267 	beq.w	8002ee8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xaf0>
            out += sections_[n].b[2] * x_[n][2];
 8002a1a:	ee6d 9a89 	vmul.f32	s19, s27, s18
            x_[n][1] = x_[n][0];
 8002a1e:	ed84 6a69 	vstr	s12, [r4, #420]	@ 0x1a4
            x_[n][0] = in;
 8002a22:	ed84 7a68 	vstr	s14, [r4, #416]	@ 0x1a0
        for (int n = 0; n < num_sections_; n++)
 8002a26:	2b04      	cmp	r3, #4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a28:	ed94 7a6c 	vldr	s14, [r4, #432]	@ 0x1b0
 8002a2c:	eeee 9a06 	vfma.f32	s19, s28, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 8002a30:	ed94 6a6b 	vldr	s12, [r4, #428]	@ 0x1ac
 8002a34:	eee6 9a4d 	vfms.f32	s19, s12, s26
 8002a38:	eee7 9a6c 	vfms.f32	s19, s14, s25
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a3c:	eeee 9aa7 	vfma.f32	s19, s29, s15
 8002a40:	eef0 7a69 	vmov.f32	s15, s19
        for (int n = 0; n < num_sections_; n++)
 8002a44:	f000 82bb 	beq.w	8002fbe <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbc6>
            x_[n][0] = in;
 8002a48:	edc4 9a6b 	vstr	s19, [r4, #428]	@ 0x1ac
            x_[n][2] = x_[n][1];
 8002a4c:	eef0 9a49 	vmov.f32	s19, s18
 8002a50:	eeb0 9a68 	vmov.f32	s18, s17
            out += sections_[n].b[2] * x_[n][2];
 8002a54:	eddd 8a04 	vldr	s17, [sp, #16]
            x_[n][2] = x_[n][1];
 8002a58:	ed8d 7a05 	vstr	s14, [sp, #20]
 8002a5c:	2001      	movs	r0, #1
            out += sections_[n].b[2] * x_[n][2];
 8002a5e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8002a62:	ed94 7a6e 	vldr	s14, [r4, #440]	@ 0x1b8
 8002a66:	4682      	mov	sl, r0
 8002a68:	4683      	mov	fp, r0
 8002a6a:	4684      	mov	ip, r0
            x_[n][1] = x_[n][0];
 8002a6c:	ed84 6a6c 	vstr	s12, [r4, #432]	@ 0x1b0
 8002a70:	eeef 8a06 	vfma.f32	s17, s30, s12
 8002a74:	eee7 8a05 	vfma.f32	s17, s14, s10
 8002a78:	ed94 7a6f 	vldr	s14, [r4, #444]	@ 0x1bc
 8002a7c:	eee5 8a87 	vfma.f32	s17, s11, s14
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a80:	eeef 8aa7 	vfma.f32	s17, s31, s15
 8002a84:	eef0 7a68 	vmov.f32	s15, s17
 8002a88:	eef0 8a66 	vmov.f32	s17, s13
 8002a8c:	f04f 0901 	mov.w	r9, #1
 8002a90:	3101      	adds	r1, #1
        x_[num_sections_][1] = x_[num_sections_][0];
 8002a92:	f8d2 617c 	ldr.w	r6, [r2, #380]	@ 0x17c
        x_[num_sections_][2] = x_[num_sections_][1];
 8002a96:	f8d2 8180 	ldr.w	r8, [r2, #384]	@ 0x180
 8002a9a:	2903      	cmp	r1, #3
            {
                sample = aa_filter_.Process((i == 0) ? sample : 0);
                block[i] = sample;
 8002a9c:	ecee 7a01 	vstmia	lr!, {s15}
        x_[num_sections_][0] = in;
 8002aa0:	edc2 7a5f 	vstr	s15, [r2, #380]	@ 0x17c
        x_[num_sections_][1] = x_[num_sections_][0];
 8002aa4:	f8c2 6180 	str.w	r6, [r2, #384]	@ 0x180
 8002aa8:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8002b8c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8002aac:	f47f af69 	bne.w	8002982 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x58a>
 8002ab0:	b108      	cbz	r0, 8002ab6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6be>
 8002ab2:	edc4 9a6a 	vstr	s19, [r4, #424]	@ 0x1a8
 8002ab6:	f1ba 0f00 	cmp.w	sl, #0
 8002aba:	d001      	beq.n	8002ac0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6c8>
 8002abc:	ed84 9a67 	vstr	s18, [r4, #412]	@ 0x19c
 8002ac0:	f1bb 0f00 	cmp.w	fp, #0
 8002ac4:	d001      	beq.n	8002aca <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6d2>
 8002ac6:	edc4 8a64 	vstr	s17, [r4, #400]	@ 0x190
 8002aca:	f1b9 0f00 	cmp.w	r9, #0
 8002ace:	d001      	beq.n	8002ad4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6dc>
 8002ad0:	ed84 8a61 	vstr	s16, [r4, #388]	@ 0x184
 8002ad4:	f1bc 0f00 	cmp.w	ip, #0
 8002ad8:	d003      	beq.n	8002ae2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ea>
 8002ada:	eddd 7a05 	vldr	s15, [sp, #20]
 8002ade:	edc4 7a6d 	vstr	s15, [r4, #436]	@ 0x1b4
 8002ae2:	443b      	add	r3, r7
 8002ae4:	ae0d      	add	r6, sp, #52	@ 0x34
 8002ae6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002aea:	f8c3 8184 	str.w	r8, [r3, #388]	@ 0x184
 8002aee:	e643      	b.n	8002778 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
	? (__b < __x ? __x : __b)
 8002af0:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8002af4:	e62c      	b.n	8002750 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
                      ? phi
 8002af6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002b78 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x780>
            float phi = phase_ * kInvPi;
 8002afa:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8002b7c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x784>
                      ? phi
 8002afe:	eef4 8ac7 	vcmpe.f32	s17, s14
            float phi = phase_ * kInvPi;
 8002b02:	ee68 7aa7 	vmul.f32	s15, s17, s15
                      ? phi
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	f2c0 812d 	blt.w	8002d68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x970>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002b0e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002b80 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x788>
 8002b12:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	f140 82c0 	bpl.w	800309e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xca6>
 8002b1e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002b22:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002b84 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x78c>
            out = tri * 2.0f - 1.0f;
 8002b26:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8002b2e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002b32:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002b36:	e4b5      	b.n	80024a4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
            else if (note_timer_ > kNoteDuration - kFadeOutSamples)
 8002b38:	f5b6 6fd2 	cmp.w	r6, #1680	@ 0x690
 8002b3c:	f77f accd 	ble.w	80024da <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe2>
                envelope = float(kNoteDuration - note_timer_) / float(kFadeOutSamples);
 8002b40:	f5c6 63fa 	rsb	r3, r6, #2000	@ 0x7d0
 8002b44:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002b88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x790>
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b50:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 8002b54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002b58:	e4bf      	b.n	80024da <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe2>
        phase_ += phase_inc_;
 8002b5a:	ed94 8a01 	vldr	s16, [r4, #4]
 8002b5e:	e493      	b.n	8002488 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x90>
 8002b60:	200108f0 	.word	0x200108f0
 8002b64:	20000420 	.word	0x20000420
 8002b68:	20000424 	.word	0x20000424
 8002b6c:	20010928 	.word	0x20010928
 8002b70:	20000580 	.word	0x20000580
 8002b74:	20010580 	.word	0x20010580
 8002b78:	40490fdb 	.word	0x40490fdb
 8002b7c:	3ea2f983 	.word	0x3ea2f983
 8002b80:	40c90fdb 	.word	0x40c90fdb
 8002b84:	3d75c28f 	.word	0x3d75c28f
 8002b88:	3b4ccccd 	.word	0x3b4ccccd
 8002b8c:	00000000 	.word	0x00000000
  { return __builtin_exp2f(__x); }
 8002b90:	eeb0 ca00 	vmov.f32	s24, #0	@ 0x40000000  2.0
                if (cue_stop_)
 8002b94:	f896 2032 	ldrb.w	r2, [r6, #50]	@ 0x32
        }
    }

    void Stop(void)
    {
        if (state_ == STATE_PLAYING)
 8002b98:	7e33      	ldrb	r3, [r6, #24]
 8002b9a:	b142      	cbz	r2, 8002bae <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7b6>
                    state_ = STATE_STOPPING;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
 8002ba4:	f000 8282 	beq.w	80030ac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcb4>
                    cue_stop_ = false;
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f886 2032 	strb.w	r2, [r6, #50]	@ 0x32
         previous_knob_value_ = current_knob_value;
     }
    
    float Process(float speed, bool loop, bool reverse)
    {
        uint32_t length = memory_.length();
 8002bae:	f8d6 a010 	ldr.w	sl, [r6, #16]
        float sample = 0;
        float prev_position = position_;

        
        if (state_ == STATE_STARTING)
 8002bb2:	2b02      	cmp	r3, #2
        return audio_info_.size / sizeof(T);
 8002bb4:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002bb8:	f000 80e2 	beq.w	8002d80 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x988>
        {
            position_ = reverse ? length - 1 : 0;
            state_ = STATE_PLAYING;
        }

        if (state_ != STATE_STOPPED)
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 82d0 	bne.w	8003162 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd6a>
        float sample = 0;
 8002bc2:	ed1f aa0e 	vldr	s20, [pc, #-56]	@ 8002b8c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
                    state_ = STATE_STOPPING;
 8002bc6:	2301      	movs	r3, #1
        return envelope_;
    }

    float level(void)
    {
        return envelope_;
 8002bc8:	4cdd      	ldr	r4, [pc, #884]	@ (8002f40 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb48>)
 8002bca:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
                        if (cue_play_)
 8002bce:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 8002bd2:	edd4 aa1b 	vldr	s21, [r4, #108]	@ 0x6c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 82aa 	beq.w	8003130 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd38>
            state_ = STATE_STARTING;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	7633      	strb	r3, [r6, #24]
                            state_ = STATE_PLAYING;
 8002be0:	8633      	strh	r3, [r6, #48]	@ 0x30
        history_ = initial_value;
    }

    float Process(float input)
    {
        history_ += factor_ * (input - history_);
 8002be2:	ed94 7a1d 	vldr	s14, [r4, #116]	@ 0x74
                    float delay = pot[kPotDelayTime];
 8002be6:	edd8 6a01 	vldr	s13, [r8, #4]
 8002bea:	eeb0 6a47 	vmov.f32	s12, s14
 8002bee:	edd4 5a1c 	vldr	s11, [r4, #112]	@ 0x70

    float Process(float input, float delay, float feedback)
    {
        delay *= delay;
        delay = delay_time_lpf_.Process(delay);
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002bf2:	eddf 7ad4 	vldr	s15, [pc, #848]	@ 8002f44 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4c>
                    float feedback = pot[kPotDelayFeedback];
 8002bf6:	ed98 5a02 	vldr	s10, [r8, #8]
 8002bfa:	ee96 6aa6 	vfnms.f32	s12, s13, s13
    OnePoleLowpass delay_time_lpf_;
    float interpolator_history_;

    uint32_t ReadIndex(uint32_t offset)
    {
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002bfe:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8002c00:	eea5 7a86 	vfma.f32	s14, s11, s12
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c08:	ed84 7a1d 	vstr	s14, [r4, #116]	@ 0x74
      if (__a < __b)
 8002c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	f100 81db 	bmi.w	8002fce <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbd6>
 8002c18:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8002f48 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb50>
      if (__b < __a)
 8002c1c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        float delay_samples = time * kAudioSampleRate;
 8002c20:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 8002f4c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb54>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c28:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        float delay_samples = time * kAudioSampleRate;
 8002c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 8002c30:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8002c34:	eef6 5ae7 	vrintz.f32	s11, s15
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002c38:	ee37 7a86 	vadd.f32	s14, s15, s12
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8002c3c:	ee77 4ae5 	vsub.f32	s9, s15, s11
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 8002c40:	ee16 2a90 	vmov	r2, s13
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002c44:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    }

    float AllpassInterpolator(float a, float b, float t)
    {
        if (t == 0)
 8002c48:	eef5 4a40 	vcmp.f32	s9, #0.0
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002c4c:	1aba      	subs	r2, r7, r2
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002c4e:	ee17 3a10 	vmov	r3, s14
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002c52:	f3c2 020d 	ubfx	r2, r2, #0, #14
        if (t == 0)
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002c5a:	eba7 0303 	sub.w	r3, r7, r3
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002c5e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002c62:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002c66:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
        if (t == 0)
 8002c6a:	d00d      	beq.n	8002c88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x890>
        {
            interpolator_history_ = a;
        }
        else
        {
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 8002c6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c70:	ed94 7a1e 	vldr	s14, [r4, #120]	@ 0x78
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 8002c78:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002c7c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002c80:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002c84:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
        output = std::clamp<float>(input + output * feedback, -2, 2);
 8002c8c:	eddf 4ab6 	vldr	s9, [pc, #728]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002c90:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
        follower_.Reset();
    }

    float Process(float in)
    {
        float envelope = follower_.Process(in * pregain_);
 8002c94:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 8002c98:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
        if (in >= envelope_)
 8002c9c:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8002ca0:	fe85 7a47 	vminnm.f32	s14, s10, s14
 8002ca4:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
 8002ca8:	eea7 aa26 	vfma.f32	s20, s14, s13
 8002cac:	edc4 6a1e 	vstr	s13, [r4, #120]	@ 0x78
 8002cb0:	fe8a aa65 	vminnm.f32	s20, s20, s11
 8002cb4:	fe8a aa06 	vmaxnm.f32	s20, s20, s12
 8002cb8:	ee6a 7a27 	vmul.f32	s15, s20, s15
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002cbc:	eef0 7ae7 	vabs.f32	s15, s15
 8002cc0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	f2c0 8172 	blt.w	8002fb0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb8>
            envelope_ += attack_rate_ * (in - envelope_);
 8002ccc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002cd0:	ed94 7a12 	vldr	s14, [r4, #72]	@ 0x48
            hold_count_ = 0;
 8002cd4:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8002cd6:	eea7 0a27 	vfma.f32	s0, s14, s15
            hold_count_ = 0;
 8002cda:	6563      	str	r3, [r4, #84]	@ 0x54
            envelope_ += attack_rate_ * (in - envelope_);
 8002cdc:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
  { return __builtin_log10f(__x); }
 8002ce0:	f007 fd0a 	bl	800a6f8 <log10f>
        float sense = 20 * std::log10(envelope);
 8002ce4:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
        // h11 = t^3 - t^2
        // We multiply h01 by A = ratio * softness to provide the step from 0
        // to A. We multiply h11 by 2A to make the ending slope equal to ratio.
        // Then, the sum of the terms reduces to A*t^2.

        if (db > softness_)
 8002ce8:	ed94 7a10 	vldr	s14, [r4, #64]	@ 0x40
        {
            return ratio_ * db;
 8002cec:	edd4 6a0f 	vldr	s13, [r4, #60]	@ 0x3c
        float sense = 20 * std::log10(envelope);
 8002cf0:	ee60 7a27 	vmul.f32	s15, s0, s15
        if (db > softness_)
 8002cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfc:	f340 8109 	ble.w	8002f12 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb1a>
            return ratio_ * db;
 8002d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
  { return __builtin_powf(__x, __y); }
 8002d04:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8002f50 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb58>
 8002d08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d0c:	f007 f9ee 	bl	800a0ec <expf>
        output *= 0.5;
 8002d10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return in * std::pow(10.0, gain / 20);
 8002d14:	ee2a 7a00 	vmul.f32	s14, s20, s0
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d18:	1c7b      	adds	r3, r7, #1
        buffer_[write_head_] = compressor_.Process(output);
 8002d1a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
        output *= 0.5;
 8002d1e:	ee6a 7a27 	vmul.f32	s15, s20, s15
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d22:	f3c3 030d 	ubfx	r3, r3, #0, #14
        buffer_[write_head_] = compressor_.Process(output);
 8002d26:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d2c:	eeb0 7ae7 	vabs.f32	s14, s15
        if (in >= envelope_)
 8002d30:	eeb4 7aea 	vcmpe.f32	s14, s21
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	f2c0 80e3 	blt.w	8002f02 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb0a>
            envelope_ += attack_rate_ * (in - envelope_);
 8002d3c:	ee37 7a6a 	vsub.f32	s14, s14, s21
 8002d40:	edd4 6a17 	vldr	s13, [r4, #92]	@ 0x5c
            hold_count_ = 0;
 8002d44:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8002d46:	eee6 aa87 	vfma.f32	s21, s13, s14
            hold_count_ = 0;
 8002d4a:	66a3      	str	r3, [r4, #104]	@ 0x68
            envelope_ += attack_rate_ * (in - envelope_);
 8002d4c:	edc4 aa1b 	vstr	s21, [r4, #108]	@ 0x6c
            sample *= kAudioOSFactor * kAudioOutputLevel;
 8002d50:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002f54 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb5c>
 8002d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d58:	e5cc      	b.n	80028f4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4fc>
 8002d5a:	2202      	movs	r2, #2
                    cue_play_ = false;
 8002d5c:	f8a6 3031 	strh.w	r3, [r6, #49]	@ 0x31
 8002d60:	7632      	strb	r2, [r6, #24]
                    state_ = STATE_PLAYING;
 8002d62:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
 8002d66:	e5c2      	b.n	80028ee <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4f6>
            out = tri * 2.0f - 1.0f;
 8002d68:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d6c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002f58 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb60>
 8002d70:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002d74:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8002d78:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002d7c:	f7ff bb92 	b.w	80024a4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
            position_ = reverse ? length - 1 : 0;
 8002d80:	eddf 7a79 	vldr	s15, [pc, #484]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
            state_ = STATE_PLAYING;
 8002d84:	2303      	movs	r3, #3
 8002d86:	2701      	movs	r7, #1
 8002d88:	eef0 6a67 	vmov.f32	s13, s15
 8002d8c:	7633      	strb	r3, [r6, #24]
 8002d8e:	eeb0 ba67 	vmov.f32	s22, s15
 8002d92:	2300      	movs	r3, #0
            position_ = reverse ? length - 1 : 0;
 8002d94:	edc6 7a05 	vstr	s15, [r6, #20]
        for (uint32_t i = 0; i < num_links_; i++)
 8002d98:	f8da e03c 	ldr.w	lr, [sl, #60]	@ 0x3c
 8002d9c:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8002da0:	f1be 0f00 	cmp.w	lr, #0
 8002da4:	f000 81d1 	beq.w	800314a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd52>
 8002da8:	f8da c040 	ldr.w	ip, [sl, #64]	@ 0x40
 8002dac:	2100      	movs	r1, #0
            if (index < chain_[i].length)
 8002dae:	4662      	mov	r2, ip
 8002db0:	e006      	b.n	8002dc0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c8>
        for (uint32_t i = 0; i < num_links_; i++)
 8002db2:	4571      	cmp	r1, lr
            index -= chain_[i].length;
 8002db4:	eba3 0300 	sub.w	r3, r3, r0
        for (uint32_t i = 0; i < num_links_; i++)
 8002db8:	f102 020c 	add.w	r2, r2, #12
 8002dbc:	f000 8173 	beq.w	80030a6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcae>
            if (index < chain_[i].length)
 8002dc0:	6850      	ldr	r0, [r2, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 8002dc2:	3101      	adds	r1, #1
            if (index < chain_[i].length)
 8002dc4:	4298      	cmp	r0, r3
 8002dc6:	d9f4      	bls.n	8002db2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9ba>
                return chain_[i].buffer[index];
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        {
            uint32_t index_a = position_;
            uint32_t index_b = index_a + 1;
            float sample_a = memory_[index_a];
 8002dce:	881b      	ldrh	r3, [r3, #0]
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8002dd0:	45b9      	cmp	r9, r7
            float sample_a = memory_[index_a];
 8002dd2:	ee07 3a10 	vmov	s14, r3
 8002dd6:	eeb2 7a47 	vcvtb.f32.f16	s14, s14
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8002dda:	f200 8122 	bhi.w	8003022 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc2a>
 8002dde:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
	return __t * __b + (1 - __t) * __a;
 8002de2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002de6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002dea:	ee77 7acb 	vsub.f32	s15, s15, s22
 8002dee:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002df2:	eeb0 aa66 	vmov.f32	s20, s13
            sample = std::lerp(sample_a, sample_b, frac);

            bool fade_in = (position_ < kFadeDuration);
            bool fade_out = (length - 1 - position_ < kFadeDuration);
    
            if (fade_in)
 8002df6:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8002f5c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb64>
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002dfa:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
            if (fade_in)
 8002dfe:	eeb4 bae7 	vcmpe.f32	s22, s15
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002e02:	ee0a 3a90 	vmov	s21, r3
 8002e06:	eef8 aa6a 	vcvt.f32.u32	s21, s21
            if (fade_in)
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002e0e:	ee7a bacb 	vsub.f32	s23, s21, s22
            if (fade_in)
 8002e12:	d517      	bpl.n	8002e44 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa4c>
            {
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e14:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8002f64 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
      if (__a < __b)
 8002e18:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002e1c:	ee6b 7a27 	vmul.f32	s15, s22, s15
    static constexpr float sensitivity_factor = 180.0f;

    float FadeCurve(float tau)
    {
        tau = std::clamp<float>(tau, 0, 1);
        return 0.5 * (1 - std::cos(kPi * tau));
 8002e20:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8002f6c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002e24:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
  { return __builtin_cosf(__x); }
 8002e28:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e2c:	f007 fb28 	bl	800a480 <cosf>
 8002e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return 0.5 * (1 - std::cos(kPi * tau));
 8002e38:	ee37 7a40 	vsub.f32	s14, s14, s0
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e3c:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8002e40:	ee27 aa27 	vmul.f32	s20, s14, s15
            if (fade_out)
 8002e44:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8002f5c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb64>
 8002e48:	eef4 bae7 	vcmpe.f32	s23, s15
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	d517      	bpl.n	8002e82 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa8a>
                sample *= FadeCurve((length - 1 - position_) / kFadeDuration);
 8002e52:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002f64 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
 8002e56:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002e5a:	ee6b ba87 	vmul.f32	s23, s23, s14
        return 0.5 * (1 - std::cos(kPi * tau));
 8002e5e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002f6c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002e62:	fecb baa7 	vmaxnm.f32	s23, s23, s15
 8002e66:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8002e6a:	f007 fb09 	bl	800a480 <cosf>
 8002e6e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e76:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8002e7a:	ee37 7a40 	vsub.f32	s14, s14, s0
                sample *= FadeCurve((length - 1 - position_) / kFadeDuration);
 8002e7e:	ee27 aa27 	vmul.f32	s20, s14, s15
            if (position_ >= length)
 8002e82:	ee07 9a90 	vmov	s15, r9
            if(state_ != STATE_SCRUBBING){
 8002e86:	2c04      	cmp	r4, #4
            if (position_ >= length)
 8002e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            if(state_ != STATE_SCRUBBING){
 8002e8c:	f000 8128 	beq.w	80030e0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xce8>
                position_ += (reverse ? -speed : speed) * speed_multiplier_;
 8002e90:	eef0 7a4b 	vmov.f32	s15, s22
 8002e94:	edd6 6a07 	vldr	s13, [r6, #28]
 8002e98:	eee6 7a8c 	vfma.f32	s15, s13, s24
            if (position_ >= length)
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	f280 8119 	bge.w	80030da <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xce2>
            else if (position_ < 0)
 8002ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	bf58      	it	pl
 8002eb2:	eef0 aa67 	vmovpl.f32	s21, s15
            if (state_ == STATE_STOPPING)
 8002eb6:	2c01      	cmp	r4, #1
                    position_ = length - 1;
 8002eb8:	edc6 aa05 	vstr	s21, [r6, #20]
            if (state_ == STATE_STOPPING)
 8002ebc:	d174      	bne.n	8002fa8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                fade_out_ += 1 / kFadeDuration;
 8002ebe:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
                if (fade_out_ >= 1)
 8002ec2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002f60 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb68>
 8002ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	db4f      	blt.n	8002f70 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb78>
                    fade_out_ = 1;
 8002ed0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
                    state_ = STATE_STOPPED;
 8002ed4:	2200      	movs	r2, #0
                    fade_out_ = 1;
 8002ed6:	6273      	str	r3, [r6, #36]	@ 0x24
                    state_ = STATE_STOPPED;
 8002ed8:	7632      	strb	r2, [r6, #24]
 8002eda:	e674      	b.n	8002bc6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ce>
        for (int n = 0; n < num_sections_; n++)
 8002edc:	eef0 6a68 	vmov.f32	s13, s17
 8002ee0:	e5d2      	b.n	8002a88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
 8002ee2:	f04f 0b01 	mov.w	fp, #1
 8002ee6:	e5cf      	b.n	8002a88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
 8002ee8:	f04f 0a01 	mov.w	sl, #1
            x_[n][2] = x_[n][1];
 8002eec:	eeb0 9a68 	vmov.f32	s18, s17
        for (int n = 0; n < num_sections_; n++)
 8002ef0:	46d3      	mov	fp, sl
 8002ef2:	e5c9      	b.n	8002a88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
                        block[i] = 0.0f;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	ae0d      	add	r6, sp, #52	@ 0x34
                    is_active_ = false;
 8002ef8:	7327      	strb	r7, [r4, #12]
                        block[i] = 0.0f;
 8002efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8002efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002efe:	930c      	str	r3, [sp, #48]	@ 0x30
 8002f00:	e43a      	b.n	8002778 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
        else if (hold_count_ < hold_samples_)
 8002f02:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	@ 0x64
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f080 8082 	bcs.w	8003010 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc18>
            hold_count_++;
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002f10:	e71e      	b.n	8002d50 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x958>
        }
        else
        {
            float t = std::max<float>(db * t_scaler_ + 0.5, 0);
 8002f12:	edd4 5a11 	vldr	s11, [r4, #68]	@ 0x44
 8002f16:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8002f1a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f1e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	f100 80e3 	bmi.w	80030f0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcf8>
 8002f2a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002f2e:	ee77 7a86 	vadd.f32	s15, s15, s12
            return ratio_ * softness_ * t * t;
 8002f32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3e:	e6e1      	b.n	8002d04 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x90c>
 8002f40:	20010580 	.word	0x20010580
 8002f44:	3f666666 	.word	0x3f666666
 8002f48:	3dcccccd 	.word	0x3dcccccd
 8002f4c:	467a0000 	.word	0x467a0000
 8002f50:	3debc8e3 	.word	0x3debc8e3
 8002f54:	40366666 	.word	0x40366666
 8002f58:	3d75c28f 	.word	0x3d75c28f
 8002f5c:	43a00000 	.word	0x43a00000
 8002f60:	3f7f3333 	.word	0x3f7f3333
 8002f64:	3b4ccccd 	.word	0x3b4ccccd
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40490fdb 	.word	0x40490fdb
                fade_out_ += 1 / kFadeDuration;
 8002f70:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8002f64 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
      if (__b < __a)
 8002f74:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
        return 0.5 * (1 - std::cos(kPi * tau));
 8002f78:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8002f68 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
                fade_out_ += 1 / kFadeDuration;
 8002f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
        return 0.5 * (1 - std::cos(kPi * tau));
 8002f80:	ed1f 0a06 	vldr	s0, [pc, #-24]	@ 8002f6c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002f84:	fe87 7aea 	vminnm.f32	s14, s15, s21
 8002f88:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
 8002f8c:	ee27 0a00 	vmul.f32	s0, s14, s0
                fade_out_ += 1 / kFadeDuration;
 8002f90:	edc6 7a09 	vstr	s15, [r6, #36]	@ 0x24
 8002f94:	f007 fa74 	bl	800a480 <cosf>
 8002f98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return 0.5 * (1 - std::cos(kPi * tau));
 8002f9c:	ee7a aac0 	vsub.f32	s21, s21, s0
 8002fa0:	ee6a 7a27 	vmul.f32	s15, s20, s15
                sample *= FadeCurve(fade_out_);
 8002fa4:	ee2a aaa7 	vmul.f32	s20, s21, s15
        return envelope_;
 8002fa8:	4c6f      	ldr	r4, [pc, #444]	@ (8003168 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd70>)
 8002faa:	edd4 aa1b 	vldr	s21, [r4, #108]	@ 0x6c
 8002fae:	e618      	b.n	8002be2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ea>
        else if (hold_count_ < hold_samples_)
 8002fb0:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	@ 0x50
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d222      	bcs.n	8002ffe <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc06>
            hold_count_++;
 8002fb8:	3301      	adds	r3, #1
 8002fba:	6563      	str	r3, [r4, #84]	@ 0x54
 8002fbc:	e690      	b.n	8002ce0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8e8>
 8002fbe:	2001      	movs	r0, #1
            x_[n][2] = x_[n][1];
 8002fc0:	eef0 9a49 	vmov.f32	s19, s18
 8002fc4:	eeb0 9a68 	vmov.f32	s18, s17
        for (int n = 0; n < num_sections_; n++)
 8002fc8:	4682      	mov	sl, r0
 8002fca:	4683      	mov	fp, r0
 8002fcc:	e55c      	b.n	8002a88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002fce:	f5a7 63c8 	sub.w	r3, r7, #1600	@ 0x640
 8002fd2:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002fd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002fda:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
        if (t == 0)
 8002fde:	e653      	b.n	8002c88 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x890>
                pitch = (1 - pot[kPotPitch]) * 2 - 1; // pot values reversed due to wiring change
 8002fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fe4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fe8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
  { return __builtin_exp2f(__x); }
 8002ff0:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8002ff4:	f007 f8ec 	bl	800a1d0 <exp2f>
 8002ff8:	eeb0 ca40 	vmov.f32	s24, s0
 8002ffc:	e5ca      	b.n	8002b94 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x79c>
            envelope_ += decay_rate_ * (in - envelope_);
 8002ffe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003002:	ed94 7a13 	vldr	s14, [r4, #76]	@ 0x4c
 8003006:	eea7 0a27 	vfma.f32	s0, s14, s15
 800300a:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
 800300e:	e667      	b.n	8002ce0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8e8>
 8003010:	ee37 7a6a 	vsub.f32	s14, s14, s21
 8003014:	edd4 6a18 	vldr	s13, [r4, #96]	@ 0x60
 8003018:	eee6 aa87 	vfma.f32	s21, s13, s14
 800301c:	edc4 aa1b 	vstr	s21, [r4, #108]	@ 0x6c
 8003020:	e696      	b.n	8002d50 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x958>
        for (uint32_t i = 0; i < num_links_; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	e005      	b.n	8003032 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc3a>
 8003026:	4573      	cmp	r3, lr
            index -= chain_[i].length;
 8003028:	eba7 0702 	sub.w	r7, r7, r2
        for (uint32_t i = 0; i < num_links_; i++)
 800302c:	f10c 0c0c 	add.w	ip, ip, #12
 8003030:	d061      	beq.n	80030f6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcfe>
            if (index < chain_[i].length)
 8003032:	f8dc 2004 	ldr.w	r2, [ip, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 8003036:	3301      	adds	r3, #1
            if (index < chain_[i].length)
 8003038:	42ba      	cmp	r2, r7
 800303a:	d9f4      	bls.n	8003026 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc2e>
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 800303c:	f8dc 3000 	ldr.w	r3, [ip]
 8003040:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8003044:	ee0a 3a10 	vmov	s20, r3
 8003048:	eeb2 aa4a 	vcvtb.f32.f16	s20, s20
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 800304c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d956      	bls.n	8003104 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd0c>
 8003056:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	d95b      	bls.n	8003118 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd20>
      if (__t == 1)
 8003060:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003064:	eef4 6a67 	vcmp.f32	s13, s15
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	f43f aec3 	beq.w	8002df6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
      return (__t > 1) == (__b > __a)
 8003070:	eef4 6ae7 	vcmpe.f32	s13, s15
      const _Fp __x = __a + __t * (__b - __a);
 8003074:	ee7a 7a47 	vsub.f32	s15, s20, s14
      return (__t > 1) == (__b > __a)
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	eeb4 7aca 	vcmpe.f32	s14, s20
      const _Fp __x = __a + __t * (__b - __a);
 8003080:	eea7 7aa6 	vfma.f32	s14, s15, s13
      return (__t > 1) == (__b > __a)
 8003084:	bfcc      	ite	gt
 8003086:	2201      	movgt	r2, #1
 8003088:	2200      	movle	r2, #0
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	? (__b < __x ? __x : __b)
 800308e:	bf4c      	ite	mi
 8003090:	2301      	movmi	r3, #1
 8003092:	2300      	movpl	r3, #0
 8003094:	429a      	cmp	r2, r3
 8003096:	d055      	beq.n	8003144 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd4c>
 8003098:	fe8a aa47 	vminnm.f32	s20, s20, s14
 800309c:	e6ab      	b.n	8002df6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
 800309e:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800316c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd74>
 80030a2:	f7ff b9ff 	b.w	80024a4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
        return dummy_;
 80030a6:	f10a 0348 	add.w	r3, sl, #72	@ 0x48
 80030aa:	e690      	b.n	8002dce <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d6>
            fade_out_ = 0;
 80030ac:	2300      	movs	r3, #0
        uint32_t length = memory_.length();
 80030ae:	f8d6 a010 	ldr.w	sl, [r6, #16]
 80030b2:	4614      	mov	r4, r2
            state_ = STATE_STOPPING;
 80030b4:	7632      	strb	r2, [r6, #24]
            fade_out_ = 0;
 80030b6:	6273      	str	r3, [r6, #36]	@ 0x24
                    cue_stop_ = false;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8da 2018 	ldr.w	r2, [sl, #24]
 80030be:	f886 3032 	strb.w	r3, [r6, #50]	@ 0x32
            uint32_t index_a = position_;
 80030c2:	ed96 ba05 	vldr	s22, [r6, #20]
 80030c6:	eebc 7acb 	vcvt.u32.f32	s14, s22
            float frac = position_ - index_a;
 80030ca:	eef6 7acb 	vrintz.f32	s15, s22
 80030ce:	ee7b 6a67 	vsub.f32	s13, s22, s15
            uint32_t index_a = position_;
 80030d2:	ee17 3a10 	vmov	r3, s14
            uint32_t index_b = index_a + 1;
 80030d6:	1c5f      	adds	r7, r3, #1
 80030d8:	e65e      	b.n	8002d98 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9a0>
 80030da:	eddf aa25 	vldr	s21, [pc, #148]	@ 8003170 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd78>
 80030de:	e6ea      	b.n	8002eb6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xabe>
            if (position_ >= length)
 80030e0:	eeb4 bac7 	vcmpe.f32	s22, s14
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	db19      	blt.n	800311e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd26>
                    position_ = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	6173      	str	r3, [r6, #20]
 80030ee:	e75b      	b.n	8002fa8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
 80030f0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8003170 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd78>
 80030f4:	e71f      	b.n	8002f36 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb3e>
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 80030f6:	f8ba 3048 	ldrh.w	r3, [sl, #72]	@ 0x48
 80030fa:	ee0a 3a10 	vmov	s20, r3
 80030fe:	eeb2 aa4a 	vcvtb.f32.f16	s20, s20
 8003102:	e7a3      	b.n	800304c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc54>
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 8003104:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	d004      	beq.n	8003118 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd20>
 800310e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	dba3      	blt.n	8003060 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc68>
	return __t * __b + (1 - __t) * __a;
 8003118:	ee66 6a8a 	vmul.f32	s13, s13, s20
 800311c:	e661      	b.n	8002de2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9ea>
            else if (position_ < 0)
 800311e:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	f57f af3f 	bpl.w	8002fa8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                    position_ = length - 1;
 800312a:	edc6 aa05 	vstr	s21, [r6, #20]
 800312e:	e73b      	b.n	8002fa8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                        else if (delay_is_quiet)
 8003130:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8003174 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd7c>
 8003134:	eef4 aae7 	vcmpe.f32	s21, s15
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                            state_ = STATE_STOPPED;
 800313c:	bf98      	it	ls
 800313e:	f886 3030 	strbls.w	r3, [r6, #48]	@ 0x30
 8003142:	e54e      	b.n	8002be2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ea>
	? (__b < __x ? __x : __b)
 8003144:	fe8a aa07 	vmaxnm.f32	s20, s20, s14
 8003148:	e655      	b.n	8002df6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
            float sample_a = memory_[index_a];
 800314a:	f8ba 3048 	ldrh.w	r3, [sl, #72]	@ 0x48
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 800314e:	45b9      	cmp	r9, r7
            float sample_a = memory_[index_a];
 8003150:	ee07 3a10 	vmov	s14, r3
 8003154:	eeb2 7a47 	vcvtb.f32.f16	s14, s14
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8003158:	f67f ae41 	bls.w	8002dde <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9e6>
 800315c:	eeb0 aa47 	vmov.f32	s20, s14
 8003160:	e774      	b.n	800304c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc54>
 8003162:	461c      	mov	r4, r3
 8003164:	e7ad      	b.n	80030c2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcca>
 8003166:	bf00      	nop
 8003168:	20010580 	.word	0x20010580
 800316c:	bd75c28f 	.word	0xbd75c28f
 8003170:	00000000 	.word	0x00000000
 8003174:	3a83126f 	.word	0x3a83126f

08003178 <recorder::Transition(recorder::State)>:
    {
 8003178:	b510      	push	{r4, lr}
 800317a:	4604      	mov	r4, r0
        printf("State: ");
 800317c:	4823      	ldr	r0, [pc, #140]	@ (800320c <recorder::Transition(recorder::State)+0x94>)
 800317e:	f007 feff 	bl	800af80 <iprintf>
        switch (new_state)
 8003182:	2c0c      	cmp	r4, #12
 8003184:	d80b      	bhi.n	800319e <recorder::Transition(recorder::State)+0x26>
 8003186:	e8df f004 	tbb	[pc, r4]
 800318a:	1915      	.short	0x1915
 800318c:	2925211d 	.word	0x2925211d
 8003190:	3935312d 	.word	0x3935312d
 8003194:	073d      	.short	0x073d
 8003196:	11          	.byte	0x11
 8003197:	00          	.byte	0x00
            printf("STARTUP\n");
 8003198:	481d      	ldr	r0, [pc, #116]	@ (8003210 <recorder::Transition(recorder::State)+0x98>)
 800319a:	f007 ff59 	bl	800b050 <puts>
	__atomic_store(std::__addressof(_M_i),
 800319e:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <recorder::Transition(recorder::State)+0x9c>)
 80031a0:	f3bf 8f5b 	dmb	ish
 80031a4:	701c      	strb	r4, [r3, #0]
 80031a6:	f3bf 8f5b 	dmb	ish
    }
 80031aa:	bd10      	pop	{r4, pc}
            printf("ENDING\n");
 80031ac:	481a      	ldr	r0, [pc, #104]	@ (8003218 <recorder::Transition(recorder::State)+0xa0>)
 80031ae:	f007 ff4f 	bl	800b050 <puts>
            break;
 80031b2:	e7f4      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("IDLE\n");
 80031b4:	4819      	ldr	r0, [pc, #100]	@ (800321c <recorder::Transition(recorder::State)+0xa4>)
 80031b6:	f007 ff4b 	bl	800b050 <puts>
            break;
 80031ba:	e7f0      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("SYNTH\n");
 80031bc:	4818      	ldr	r0, [pc, #96]	@ (8003220 <recorder::Transition(recorder::State)+0xa8>)
 80031be:	f007 ff47 	bl	800b050 <puts>
            break;
 80031c2:	e7ec      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("RECORD\n");
 80031c4:	4817      	ldr	r0, [pc, #92]	@ (8003224 <recorder::Transition(recorder::State)+0xac>)
 80031c6:	f007 ff43 	bl	800b050 <puts>
            break;
 80031ca:	e7e8      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("PLAY\n");
 80031cc:	4816      	ldr	r0, [pc, #88]	@ (8003228 <recorder::Transition(recorder::State)+0xb0>)
 80031ce:	f007 ff3f 	bl	800b050 <puts>
            break;
 80031d2:	e7e4      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("STOP\n");
 80031d4:	4815      	ldr	r0, [pc, #84]	@ (800322c <recorder::Transition(recorder::State)+0xb4>)
 80031d6:	f007 ff3b 	bl	800b050 <puts>
            break;
 80031da:	e7e0      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("SAVE\n");
 80031dc:	4814      	ldr	r0, [pc, #80]	@ (8003230 <recorder::Transition(recorder::State)+0xb8>)
 80031de:	f007 ff37 	bl	800b050 <puts>
            break;
 80031e2:	e7dc      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("ERASE\n");
 80031e4:	4813      	ldr	r0, [pc, #76]	@ (8003234 <recorder::Transition(recorder::State)+0xbc>)
 80031e6:	f007 ff33 	bl	800b050 <puts>
            break;
 80031ea:	e7d8      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("BEGIN_WRITE\n");
 80031ec:	4812      	ldr	r0, [pc, #72]	@ (8003238 <recorder::Transition(recorder::State)+0xc0>)
 80031ee:	f007 ff2f 	bl	800b050 <puts>
            break;
 80031f2:	e7d4      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("WRITE\n");
 80031f4:	4811      	ldr	r0, [pc, #68]	@ (800323c <recorder::Transition(recorder::State)+0xc4>)
 80031f6:	f007 ff2b 	bl	800b050 <puts>
            break;
 80031fa:	e7d0      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("COMMIT\n");
 80031fc:	4810      	ldr	r0, [pc, #64]	@ (8003240 <recorder::Transition(recorder::State)+0xc8>)
 80031fe:	f007 ff27 	bl	800b050 <puts>
            break;
 8003202:	e7cc      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
            printf("STANDBY\n");
 8003204:	480f      	ldr	r0, [pc, #60]	@ (8003244 <recorder::Transition(recorder::State)+0xcc>)
 8003206:	f007 ff23 	bl	800b050 <puts>
            break;
 800320a:	e7c8      	b.n	800319e <recorder::Transition(recorder::State)+0x26>
 800320c:	0800c058 	.word	0x0800c058
 8003210:	0800c0bc 	.word	0x0800c0bc
 8003214:	200108ec 	.word	0x200108ec
 8003218:	0800c0c4 	.word	0x0800c0c4
 800321c:	0800c060 	.word	0x0800c060
 8003220:	0800c068 	.word	0x0800c068
 8003224:	0800c070 	.word	0x0800c070
 8003228:	0800c078 	.word	0x0800c078
 800322c:	0800c080 	.word	0x0800c080
 8003230:	0800c088 	.word	0x0800c088
 8003234:	0800c090 	.word	0x0800c090
 8003238:	0800c098 	.word	0x0800c098
 800323c:	0800c0a4 	.word	0x0800c0a4
 8003240:	0800c0ac 	.word	0x0800c0ac
 8003244:	0800c0b4 	.word	0x0800c0b4

08003248 <recorder::checkRecordPlayback(bool, bool)>:
    bool checkRecordPlayback(bool record, bool playback) {
 8003248:	b538      	push	{r3, r4, r5, lr}
        if (record)
 800324a:	4604      	mov	r4, r0
 800324c:	b918      	cbnz	r0, 8003256 <recorder::checkRecordPlayback(bool, bool)+0xe>
        else if (playback) 
 800324e:	4608      	mov	r0, r1
 8003250:	2900      	cmp	r1, #0
 8003252:	d166      	bne.n	8003322 <recorder::checkRecordPlayback(bool, bool)+0xda>
    }
 8003254:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(&_M_i, int(__m));
 8003256:	4987      	ldr	r1, [pc, #540]	@ (8003474 <recorder::checkRecordPlayback(bool, bool)+0x22c>)
        input_phase_ = 1;
 8003258:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
        history_ = 0;
 800325c:	2200      	movs	r2, #0
 800325e:	680c      	ldr	r4, [r1, #0]
        input_phase_ = 1;
 8003260:	f1a1 0308 	sub.w	r3, r1, #8
 8003264:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, int(__m));
 8003268:	f3bf 8f5b 	dmb	ish
 800326c:	f841 4c04 	str.w	r4, [r1, #-4]
        for (int n = 0; n < num_sections_; n++)
 8003270:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8003274:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
 8003278:	2900      	cmp	r1, #0
        history_ = 0;
 800327a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800327e:	dd2d      	ble.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
 8003280:	2901      	cmp	r1, #1
            x_[n][0] = 0;
 8003282:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            x_[n][1] = 0;
 8003286:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            x_[n][2] = 0;
 800328a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        for (int n = 0; n < num_sections_; n++)
 800328e:	d025      	beq.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
 8003290:	2902      	cmp	r1, #2
            x_[n][0] = 0;
 8003292:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 8003296:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 800329a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        for (int n = 0; n < num_sections_; n++)
 800329e:	d01d      	beq.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
 80032a0:	2903      	cmp	r1, #3
            x_[n][0] = 0;
 80032a2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 80032a6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 80032aa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        for (int n = 0; n < num_sections_; n++)
 80032ae:	d015      	beq.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
 80032b0:	2904      	cmp	r1, #4
            x_[n][0] = 0;
 80032b2:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 80032b6:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 80032ba:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        for (int n = 0; n < num_sections_; n++)
 80032be:	d00d      	beq.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
 80032c0:	2905      	cmp	r1, #5
            x_[n][0] = 0;
 80032c2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 80032c6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 80032ca:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        for (int n = 0; n < num_sections_; n++)
 80032ce:	d005      	beq.n	80032dc <recorder::checkRecordPlayback(bool, bool)+0x94>
            x_[n][0] = 0;
 80032d0:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
            x_[n][1] = 0;
 80032d4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            x_[n][2] = 0;
 80032d8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        x_[num_sections_][0] = 0;
 80032dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
            if (state_ == STATE_STOPPED)
 80032e0:	4c65      	ldr	r4, [pc, #404]	@ (8003478 <recorder::checkRecordPlayback(bool, bool)+0x230>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80032e8:	f894 1160 	ldrb.w	r1, [r4, #352]	@ 0x160
 80032ec:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
        x_[num_sections_][1] = 0;
 80032f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        x_[num_sections_][2] = 0;
 80032f4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 80032f8:	2900      	cmp	r1, #0
 80032fa:	f000 8097 	beq.w	800342c <recorder::checkRecordPlayback(bool, bool)+0x1e4>
        buffer_index_ = 0;
 80032fe:	4b5f      	ldr	r3, [pc, #380]	@ (800347c <recorder::checkRecordPlayback(bool, bool)+0x234>)
 8003300:	2200      	movs	r2, #0
        printf("State: ");
 8003302:	485f      	ldr	r0, [pc, #380]	@ (8003480 <recorder::checkRecordPlayback(bool, bool)+0x238>)
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	f007 fe3b 	bl	800af80 <iprintf>
            printf("RECORD\n");
 800330a:	485e      	ldr	r0, [pc, #376]	@ (8003484 <recorder::checkRecordPlayback(bool, bool)+0x23c>)
 800330c:	f007 fea0 	bl	800b050 <puts>
 8003310:	4b5d      	ldr	r3, [pc, #372]	@ (8003488 <recorder::checkRecordPlayback(bool, bool)+0x240>)
 8003312:	2202      	movs	r2, #2
 8003314:	f3bf 8f5b 	dmb	ish
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	f3bf 8f5b 	dmb	ish
            return true;
 800331e:	2001      	movs	r0, #1
    }
 8003320:	bd38      	pop	{r3, r4, r5, pc}
            state_ = STATE_STOPPED;
 8003322:	4d5a      	ldr	r5, [pc, #360]	@ (800348c <recorder::checkRecordPlayback(bool, bool)+0x244>)
            buffer_[i] = 0;
 8003324:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003328:	4621      	mov	r1, r4
 800332a:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 800332e:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
            cue_play_ = false;
 8003332:	f8a5 4031 	strh.w	r4, [r5, #49]	@ 0x31
        state_ = STATE_STOPPED;
 8003336:	762c      	strb	r4, [r5, #24]
 8003338:	f007 febd 	bl	800b0b6 <memset>
        write_head_ = 0;
 800333c:	f505 3380 	add.w	r3, r5, #65536	@ 0x10000
        envelope_ = 0;
 8003340:	2200      	movs	r2, #0
        for (int n = 0; n < num_sections_; n++)
 8003342:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003346:	635c      	str	r4, [r3, #52]	@ 0x34
 8003348:	2900      	cmp	r1, #0
        hold_count_ = 0;
 800334a:	655c      	str	r4, [r3, #84]	@ 0x54
        envelope_ = 0;
 800334c:	659a      	str	r2, [r3, #88]	@ 0x58
        hold_count_ = 0;
 800334e:	669c      	str	r4, [r3, #104]	@ 0x68
        envelope_ = 0;
 8003350:	66da      	str	r2, [r3, #108]	@ 0x6c
        history_ = initial_value;
 8003352:	675a      	str	r2, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 8003354:	679a      	str	r2, [r3, #120]	@ 0x78
 8003356:	dd2d      	ble.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
 8003358:	2901      	cmp	r1, #1
            x_[n][0] = 0;
 800335a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 800335e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 8003362:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        for (int n = 0; n < num_sections_; n++)
 8003366:	d025      	beq.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
 8003368:	2902      	cmp	r1, #2
            x_[n][0] = 0;
 800336a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 800336e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 8003372:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        for (int n = 0; n < num_sections_; n++)
 8003376:	d01d      	beq.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
 8003378:	2903      	cmp	r1, #3
            x_[n][0] = 0;
 800337a:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 800337e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 8003382:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
        for (int n = 0; n < num_sections_; n++)
 8003386:	d015      	beq.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
 8003388:	2904      	cmp	r1, #4
            x_[n][0] = 0;
 800338a:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
            x_[n][1] = 0;
 800338e:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
            x_[n][2] = 0;
 8003392:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
        for (int n = 0; n < num_sections_; n++)
 8003396:	d00d      	beq.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
 8003398:	2905      	cmp	r1, #5
            x_[n][0] = 0;
 800339a:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
            x_[n][1] = 0;
 800339e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
            x_[n][2] = 0;
 80033a2:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
        for (int n = 0; n < num_sections_; n++)
 80033a6:	d005      	beq.n	80033b4 <recorder::checkRecordPlayback(bool, bool)+0x16c>
            x_[n][0] = 0;
 80033a8:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            x_[n][1] = 0;
 80033ac:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
            x_[n][2] = 0;
 80033b0:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
        x_[num_sections_][0] = 0;
 80033b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80033b8:	2200      	movs	r2, #0
 80033ba:	4c2f      	ldr	r4, [pc, #188]	@ (8003478 <recorder::checkRecordPlayback(bool, bool)+0x230>)
 80033bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
            cue_play_ = true;
 80033c0:	2101      	movs	r1, #1
 80033c2:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        x_[num_sections_][1] = 0;
 80033c6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        x_[num_sections_][2] = 0;
 80033ca:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 80033ce:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 80033d2:	f885 1031 	strb.w	r1, [r5, #49]	@ 0x31
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d140      	bne.n	800345c <recorder::checkRecordPlayback(bool, bool)+0x214>
                fade_position_ = 0;
 80033da:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80033de:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80033e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003490 <recorder::checkRecordPlayback(bool, bool)+0x248>)
 80033e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033e8:	482a      	ldr	r0, [pc, #168]	@ (8003494 <recorder::checkRecordPlayback(bool, bool)+0x24c>)
                state_ = STATE_STARTING;
 80033ea:	f8a4 1160 	strh.w	r1, [r4, #352]	@ 0x160
 80033ee:	6185      	str	r5, [r0, #24]
                dac_.Start();
 80033f0:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 80033f4:	619a      	str	r2, [r3, #24]
 80033f6:	f003 fab7 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 80033fa:	1d20      	adds	r0, r4, #4
 80033fc:	f002 ffb4 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8003400:	4620      	mov	r0, r4
 8003402:	f003 fa9d 	bl	8006940 <recorder::Analog::StartTimer()>
        buffer_index_ = 0;
 8003406:	2300      	movs	r3, #0
            playback_timeout_ = 0;
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <recorder::checkRecordPlayback(bool, bool)+0x250>)
 800340a:	491c      	ldr	r1, [pc, #112]	@ (800347c <recorder::checkRecordPlayback(bool, bool)+0x234>)
        printf("State: ");
 800340c:	481c      	ldr	r0, [pc, #112]	@ (8003480 <recorder::checkRecordPlayback(bool, bool)+0x238>)
            playback_timeout_ = 0;
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	610b      	str	r3, [r1, #16]
        printf("State: ");
 8003412:	f007 fdb5 	bl	800af80 <iprintf>
            printf("PLAY\n");
 8003416:	4821      	ldr	r0, [pc, #132]	@ (800349c <recorder::checkRecordPlayback(bool, bool)+0x254>)
 8003418:	f007 fe1a 	bl	800b050 <puts>
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <recorder::checkRecordPlayback(bool, bool)+0x240>)
 800341e:	2203      	movs	r2, #3
 8003420:	f3bf 8f5b 	dmb	ish
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	f3bf 8f5b 	dmb	ish
    }
 800342a:	e778      	b.n	800331e <recorder::checkRecordPlayback(bool, bool)+0xd6>
 800342c:	4819      	ldr	r0, [pc, #100]	@ (8003494 <recorder::checkRecordPlayback(bool, bool)+0x24c>)
 800342e:	f44f 7500 	mov.w	r5, #512	@ 0x200
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <recorder::checkRecordPlayback(bool, bool)+0x248>)
                state_ = STATE_STARTING;
 8003434:	2101      	movs	r1, #1
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003436:	6185      	str	r5, [r0, #24]
                dac_.Start();
 8003438:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
                fade_position_ = 0;
 800343c:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
                state_ = STATE_STARTING;
 8003444:	f8a4 1160 	strh.w	r1, [r4, #352]	@ 0x160
 8003448:	619a      	str	r2, [r3, #24]
                dac_.Start();
 800344a:	f003 fa8d 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 800344e:	1d20      	adds	r0, r4, #4
 8003450:	f002 ff8a 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8003454:	4620      	mov	r0, r4
 8003456:	f003 fa73 	bl	8006940 <recorder::Analog::StartTimer()>
 800345a:	e750      	b.n	80032fe <recorder::checkRecordPlayback(bool, bool)+0xb6>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800345c:	2b02      	cmp	r3, #2
 800345e:	d1d2      	bne.n	8003406 <recorder::checkRecordPlayback(bool, bool)+0x1be>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003460:	490c      	ldr	r1, [pc, #48]	@ (8003494 <recorder::checkRecordPlayback(bool, bool)+0x24c>)
 8003462:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <recorder::checkRecordPlayback(bool, bool)+0x248>)
 8003468:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800346c:	6188      	str	r0, [r1, #24]
 800346e:	619a      	str	r2, [r3, #24]
    }
 8003470:	e7c9      	b.n	8003406 <recorder::checkRecordPlayback(bool, bool)+0x1be>
 8003472:	bf00      	nop
 8003474:	20010750 	.word	0x20010750
 8003478:	20010c40 	.word	0x20010c40
 800347c:	2001088c 	.word	0x2001088c
 8003480:	0800c058 	.word	0x0800c058
 8003484:	0800c070 	.word	0x0800c070
 8003488:	200108ec 	.word	0x200108ec
 800348c:	20000580 	.word	0x20000580
 8003490:	58020400 	.word	0x58020400
 8003494:	58021800 	.word	0x58021800
 8003498:	200108e4 	.word	0x200108e4
 800349c:	0800c078 	.word	0x0800c078

080034a0 <recorder::StateMachine(bool)>:
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80034a0:	4bcf      	ldr	r3, [pc, #828]	@ (80037e0 <recorder::StateMachine(bool)+0x340>)
 80034a2:	e9d3 2100 	ldrd	r2, r1, [r3]
    {
 80034a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034aa:	6912      	ldr	r2, [r2, #16]
 80034ac:	b085      	sub	sp, #20

        if (invert_)
 80034ae:	7a1c      	ldrb	r4, [r3, #8]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80034b0:	40ca      	lsrs	r2, r1
        if (invert_)
 80034b2:	4054      	eors	r4, r2
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 80034b4:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 80034b8:	f004 0401 	and.w	r4, r4, #1
 80034bc:	42a2      	cmp	r2, r4
 80034be:	f000 820e 	beq.w	80038de <recorder::StateMachine(bool)+0x43e>
        {
            count_ = 0;
 80034c2:	2200      	movs	r2, #0
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 80034c4:	f893 508d 	ldrb.w	r5, [r3, #141]	@ 0x8d
            count_ = 0;
 80034c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80034cc:	4ac5      	ldr	r2, [pc, #788]	@ (80037e4 <recorder::StateMachine(bool)+0x344>)
 80034ce:	7d19      	ldrb	r1, [r3, #20]
 80034d0:	f882 5020 	strb.w	r5, [r2, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80034d4:	e9d3 7603 	ldrd	r7, r6, [r3, #12]
 80034d8:	693d      	ldr	r5, [r7, #16]
        history_ = in;
 80034da:	f883 408c 	strb.w	r4, [r3, #140]	@ 0x8c
 80034de:	fa25 f406 	lsr.w	r4, r5, r6
        if (in != history_)
 80034e2:	f893 5098 	ldrb.w	r5, [r3, #152]	@ 0x98
        if (invert_)
 80034e6:	4061      	eors	r1, r4
 80034e8:	f001 0101 	and.w	r1, r1, #1
 80034ec:	428d      	cmp	r5, r1
 80034ee:	f000 81e3 	beq.w	80038b8 <recorder::StateMachine(bool)+0x418>
            count_ = 0;
 80034f2:	2400      	movs	r4, #0
 80034f4:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
        return state_;
 80034f8:	f893 4099 	ldrb.w	r4, [r3, #153]	@ 0x99
 80034fc:	f882 4021 	strb.w	r4, [r2, #33]	@ 0x21
        history_ = in;
 8003500:	f883 1098 	strb.w	r1, [r3, #152]	@ 0x98
 8003504:	f893 1020 	ldrb.w	r1, [r3, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003508:	e9d3 6506 	ldrd	r6, r5, [r3, #24]
 800350c:	6934      	ldr	r4, [r6, #16]
        if (in != history_)
 800350e:	f893 60a4 	ldrb.w	r6, [r3, #164]	@ 0xa4
 8003512:	40ec      	lsrs	r4, r5
        if (invert_)
 8003514:	4061      	eors	r1, r4
 8003516:	f001 0101 	and.w	r1, r1, #1
 800351a:	428e      	cmp	r6, r1
 800351c:	f000 81b9 	beq.w	8003892 <recorder::StateMachine(bool)+0x3f2>
            count_ = 0;
 8003520:	2400      	movs	r4, #0
 8003522:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
        return state_;
 8003526:	f893 40a5 	ldrb.w	r4, [r3, #165]	@ 0xa5
 800352a:	f882 4022 	strb.w	r4, [r2, #34]	@ 0x22
        history_ = in;
 800352e:	f883 10a4 	strb.w	r1, [r3, #164]	@ 0xa4
 8003532:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003536:	e9d3 6509 	ldrd	r6, r5, [r3, #36]	@ 0x24
 800353a:	6934      	ldr	r4, [r6, #16]
        if (in != history_)
 800353c:	f893 60b0 	ldrb.w	r6, [r3, #176]	@ 0xb0
 8003540:	40ec      	lsrs	r4, r5
        if (invert_)
 8003542:	4061      	eors	r1, r4
 8003544:	f001 0101 	and.w	r1, r1, #1
 8003548:	428e      	cmp	r6, r1
 800354a:	f000 818f 	beq.w	800386c <recorder::StateMachine(bool)+0x3cc>
            count_ = 0;
 800354e:	2400      	movs	r4, #0
 8003550:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
        return state_;
 8003554:	f893 40b1 	ldrb.w	r4, [r3, #177]	@ 0xb1
 8003558:	f882 4023 	strb.w	r4, [r2, #35]	@ 0x23
        history_ = in;
 800355c:	f883 10b0 	strb.w	r1, [r3, #176]	@ 0xb0
 8003560:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003564:	e9d3 650c 	ldrd	r6, r5, [r3, #48]	@ 0x30
 8003568:	6934      	ldr	r4, [r6, #16]
        if (in != history_)
 800356a:	f893 60bc 	ldrb.w	r6, [r3, #188]	@ 0xbc
 800356e:	40ec      	lsrs	r4, r5
        if (invert_)
 8003570:	4061      	eors	r1, r4
 8003572:	f001 0101 	and.w	r1, r1, #1
 8003576:	428e      	cmp	r6, r1
 8003578:	f000 8165 	beq.w	8003846 <recorder::StateMachine(bool)+0x3a6>
            count_ = 0;
 800357c:	2400      	movs	r4, #0
 800357e:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
        return state_;
 8003582:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
 8003586:	f882 4024 	strb.w	r4, [r2, #36]	@ 0x24
        history_ = in;
 800358a:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
 800358e:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003592:	e9d3 650f 	ldrd	r6, r5, [r3, #60]	@ 0x3c
 8003596:	6934      	ldr	r4, [r6, #16]
        if (in != history_)
 8003598:	f893 60c8 	ldrb.w	r6, [r3, #200]	@ 0xc8
 800359c:	40ec      	lsrs	r4, r5
        if (invert_)
 800359e:	4061      	eors	r1, r4
 80035a0:	f001 0101 	and.w	r1, r1, #1
 80035a4:	428e      	cmp	r6, r1
 80035a6:	f000 813b 	beq.w	8003820 <recorder::StateMachine(bool)+0x380>
            count_ = 0;
 80035aa:	2400      	movs	r4, #0
        return state_;
 80035ac:	f893 c0c9 	ldrb.w	ip, [r3, #201]	@ 0xc9
            count_ = 0;
 80035b0:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
        history_ = in;
 80035b4:	f883 10c8 	strb.w	r1, [r3, #200]	@ 0xc8
 80035b8:	f893 1050 	ldrb.w	r1, [r3, #80]	@ 0x50
 80035bc:	f882 c025 	strb.w	ip, [r2, #37]	@ 0x25
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80035c0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 80035c4:	6924      	ldr	r4, [r4, #16]
 80035c6:	40ec      	lsrs	r4, r5
        if (in != history_)
 80035c8:	f893 50d4 	ldrb.w	r5, [r3, #212]	@ 0xd4
        if (invert_)
 80035cc:	4061      	eors	r1, r4
 80035ce:	f001 0101 	and.w	r1, r1, #1
 80035d2:	428d      	cmp	r5, r1
 80035d4:	f000 80f0 	beq.w	80037b8 <recorder::StateMachine(bool)+0x318>
            count_ = 0;
 80035d8:	2400      	movs	r4, #0
        return state_;
 80035da:	f893 60d5 	ldrb.w	r6, [r3, #213]	@ 0xd5
            count_ = 0;
 80035de:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80035e2:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
        history_ = in;
 80035e4:	f883 10d4 	strb.w	r1, [r3, #212]	@ 0xd4
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80035e8:	6924      	ldr	r4, [r4, #16]
 80035ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80035ec:	f882 6026 	strb.w	r6, [r2, #38]	@ 0x26
 80035f0:	40cc      	lsrs	r4, r1
        if (invert_)
 80035f2:	f893 105c 	ldrb.w	r1, [r3, #92]	@ 0x5c
 80035f6:	4061      	eors	r1, r4
        if (in != history_)
 80035f8:	f893 40e0 	ldrb.w	r4, [r3, #224]	@ 0xe0
 80035fc:	f001 0101 	and.w	r1, r1, #1
 8003600:	428c      	cmp	r4, r1
 8003602:	f000 80c6 	beq.w	8003792 <recorder::StateMachine(bool)+0x2f2>
            count_ = 0;
 8003606:	2400      	movs	r4, #0
 8003608:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
        return state_;
 800360c:	f893 40e1 	ldrb.w	r4, [r3, #225]	@ 0xe1
        history_ = in;
 8003610:	f883 10e0 	strb.w	r1, [r3, #224]	@ 0xe0
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8003614:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003616:	f882 4027 	strb.w	r4, [r2, #39]	@ 0x27
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800361a:	6909      	ldr	r1, [r1, #16]
 800361c:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800361e:	40e1      	lsrs	r1, r4
        if (invert_)
 8003620:	f893 4068 	ldrb.w	r4, [r3, #104]	@ 0x68
 8003624:	404c      	eors	r4, r1
        if (in != history_)
 8003626:	f893 10ec 	ldrb.w	r1, [r3, #236]	@ 0xec
 800362a:	f004 0401 	and.w	r4, r4, #1
 800362e:	42a1      	cmp	r1, r4
 8003630:	f000 809c 	beq.w	800376c <recorder::StateMachine(bool)+0x2cc>
            count_ = 0;
 8003634:	2100      	movs	r1, #0
        return state_;
 8003636:	f893 70ed 	ldrb.w	r7, [r3, #237]	@ 0xed
            count_ = 0;
 800363a:	f8c3 10e8 	str.w	r1, [r3, #232]	@ 0xe8
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 800363e:	edd2 7a01 	vldr	s15, [r2, #4]
            }
            else
            {
                in.sw[i] = false;
 8003642:	f04f 0e00 	mov.w	lr, #0
 8003646:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80037e8 <recorder::StateMachine(bool)+0x348>
                in.sw[i] = db_[i].Process(sw_[i].Read());
 800364a:	f882 7028 	strb.w	r7, [r2, #40]	@ 0x28
 800364e:	ee67 7a87 	vmul.f32	s15, s15, s14
        history_ = (history_ << kShift) | level;
 8003652:	4f66      	ldr	r7, [pc, #408]	@ (80037ec <recorder::StateMachine(bool)+0x34c>)
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003654:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800381c <recorder::StateMachine(bool)+0x37c>
        history_ = in;
 8003658:	f883 40ec 	strb.w	r4, [r3, #236]	@ 0xec
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 800365c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003660:	683c      	ldr	r4, [r7, #0]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003662:	4963      	ldr	r1, [pc, #396]	@ (80037f0 <recorder::StateMachine(bool)+0x350>)
 8003664:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003668:	f8d8 4000 	ldr.w	r4, [r8]
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 800366c:	ee17 3a90 	vmov	r3, s15
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003670:	f891 9000 	ldrb.w	r9, [r1]
 8003674:	4d5f      	ldr	r5, [pc, #380]	@ (80037f4 <recorder::StateMachine(bool)+0x354>)
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003676:	1ae3      	subs	r3, r4, r3
                in.sw[i] = false;
 8003678:	f882 e029 	strb.w	lr, [r2, #41]	@ 0x29
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 800367c:	f882 e02a 	strb.w	lr, [r2, #42]	@ 0x2a
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003680:	eb02 0e09 	add.w	lr, r2, r9
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003684:	bf18      	it	ne
 8003686:	2301      	movne	r3, #1
 8003688:	603e      	str	r6, [r7, #0]
 800368a:	4e5b      	ldr	r6, [pc, #364]	@ (80037f8 <recorder::StateMachine(bool)+0x358>)
 800368c:	f89e e020 	ldrb.w	lr, [lr, #32]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003690:	784c      	ldrb	r4, [r1, #1]
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003692:	7033      	strb	r3, [r6, #0]
 8003694:	682b      	ldr	r3, [r5, #0]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003696:	4414      	add	r4, r2
        last_strum_idx = strum_idx;
 8003698:	edc8 7a00 	vstr	s15, [r8]
 800369c:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
 80036a0:	f894 e020 	ldrb.w	lr, [r4, #32]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 80036a4:	788c      	ldrb	r4, [r1, #2]
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	686b      	ldr	r3, [r5, #4]
 80036aa:	f891 8003 	ldrb.w	r8, [r1, #3]
 80036ae:	1911      	adds	r1, r2, r4
 80036b0:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80036b4:	4c51      	ldr	r4, [pc, #324]	@ (80037fc <recorder::StateMachine(bool)+0x35c>)
 80036b6:	f891 1020 	ldrb.w	r1, [r1, #32]
 80036ba:	4442      	add	r2, r8
 80036bc:	606b      	str	r3, [r5, #4]
 80036be:	68ab      	ldr	r3, [r5, #8]
 80036c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80036c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80036c8:	68eb      	ldr	r3, [r5, #12]
 80036ca:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80036ce:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80036d2:	7823      	ldrb	r3, [r4, #0]
        if (cur == STATE_STARTUP)
 80036d4:	2b0b      	cmp	r3, #11
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	f000 8114 	beq.w	8003904 <recorder::StateMachine(bool)+0x464>
        else if (cur == STATE_ENDING)
 80036dc:	2a0c      	cmp	r2, #12
 80036de:	f000 8139 	beq.w	8003954 <recorder::StateMachine(bool)+0x4b4>
        if (standby)
 80036e2:	b970      	cbnz	r0, 8003702 <recorder::StateMachine(bool)+0x262>
        if (cur == STATE_IDLE)
 80036e4:	2a0a      	cmp	r2, #10
 80036e6:	d83e      	bhi.n	8003766 <recorder::StateMachine(bool)+0x2c6>
 80036e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036ec:	01ba02fc 	.word	0x01ba02fc
 80036f0:	02dd0262 	.word	0x02dd0262
 80036f4:	04e902f5 	.word	0x04e902f5
 80036f8:	04bc0440 	.word	0x04bc0440
 80036fc:	032a0148 	.word	0x032a0148
 8003700:	0423      	.short	0x0423
            if (state_ == STATE_STOPPED)
 8003702:	4d3f      	ldr	r5, [pc, #252]	@ (8003800 <recorder::StateMachine(bool)+0x360>)
 8003704:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 8117 	bne.w	800393c <recorder::StateMachine(bool)+0x49c>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800370e:	493d      	ldr	r1, [pc, #244]	@ (8003804 <recorder::StateMachine(bool)+0x364>)
 8003710:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8003714:	2200      	movs	r2, #0
 8003716:	4b3c      	ldr	r3, [pc, #240]	@ (8003808 <recorder::StateMachine(bool)+0x368>)
 8003718:	6188      	str	r0, [r1, #24]
                dac_.Start();
 800371a:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 800371e:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8003722:	2201      	movs	r2, #1
 8003724:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 8003728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800372c:	619a      	str	r2, [r3, #24]
                dac_.Start();
 800372e:	f003 f91b 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 8003732:	1d28      	adds	r0, r5, #4
 8003734:	f002 fe18 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8003738:	4628      	mov	r0, r5
 800373a:	f003 f901 	bl	8006940 <recorder::Analog::StartTimer()>
            is_active_ = true;
 800373e:	4b33      	ldr	r3, [pc, #204]	@ (800380c <recorder::StateMachine(bool)+0x36c>)
 8003740:	2001      	movs	r0, #1
            current_note_ = 0;
 8003742:	2200      	movs	r2, #0
        phase_inc_ = freq * kPhaseFactor;
 8003744:	4932      	ldr	r1, [pc, #200]	@ (8003810 <recorder::StateMachine(bool)+0x370>)
            is_active_ = true;
 8003746:	8198      	strh	r0, [r3, #12]
        printf("State: ");
 8003748:	4832      	ldr	r0, [pc, #200]	@ (8003814 <recorder::StateMachine(bool)+0x374>)
 800374a:	6059      	str	r1, [r3, #4]
            note_timer_ = 0;
 800374c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8003750:	f007 fc16 	bl	800af80 <iprintf>
            printf("ENDING\n");
 8003754:	4830      	ldr	r0, [pc, #192]	@ (8003818 <recorder::StateMachine(bool)+0x378>)
 8003756:	f007 fc7b 	bl	800b050 <puts>
	__atomic_store(std::__addressof(_M_i),
 800375a:	230c      	movs	r3, #12
 800375c:	f3bf 8f5b 	dmb	ish
 8003760:	7023      	strb	r3, [r4, #0]
 8003762:	f3bf 8f5b 	dmb	ish
    }
 8003766:	b005      	add	sp, #20
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (in != state_)
 800376c:	f893 70ed 	ldrb.w	r7, [r3, #237]	@ 0xed
 8003770:	42bc      	cmp	r4, r7
 8003772:	f43f af64 	beq.w	800363e <recorder::StateMachine(bool)+0x19e>
            if (++count_ == duration_)
 8003776:	f8d3 50e8 	ldr.w	r5, [r3, #232]	@ 0xe8
 800377a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800377e:	3501      	adds	r5, #1
 8003780:	42a9      	cmp	r1, r5
 8003782:	f8c3 50e8 	str.w	r5, [r3, #232]	@ 0xe8
 8003786:	f47f af5a 	bne.w	800363e <recorder::StateMachine(bool)+0x19e>
                in.sw[i] = db_[i].Process(sw_[i].Read());
 800378a:	4627      	mov	r7, r4
                state_ = in;
 800378c:	f883 40ed 	strb.w	r4, [r3, #237]	@ 0xed
 8003790:	e755      	b.n	800363e <recorder::StateMachine(bool)+0x19e>
        else if (in != state_)
 8003792:	f893 40e1 	ldrb.w	r4, [r3, #225]	@ 0xe1
 8003796:	42a1      	cmp	r1, r4
 8003798:	f43f af3a 	beq.w	8003610 <recorder::StateMachine(bool)+0x170>
            if (++count_ == duration_)
 800379c:	f8d3 70dc 	ldr.w	r7, [r3, #220]	@ 0xdc
 80037a0:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 80037a4:	3701      	adds	r7, #1
 80037a6:	42af      	cmp	r7, r5
 80037a8:	f8c3 70dc 	str.w	r7, [r3, #220]	@ 0xdc
 80037ac:	f47f af30 	bne.w	8003610 <recorder::StateMachine(bool)+0x170>
 80037b0:	460c      	mov	r4, r1
                state_ = in;
 80037b2:	f883 10e1 	strb.w	r1, [r3, #225]	@ 0xe1
 80037b6:	e72b      	b.n	8003610 <recorder::StateMachine(bool)+0x170>
        else if (in != state_)
 80037b8:	f893 60d5 	ldrb.w	r6, [r3, #213]	@ 0xd5
 80037bc:	42b1      	cmp	r1, r6
 80037be:	f43f af10 	beq.w	80035e2 <recorder::StateMachine(bool)+0x142>
            if (++count_ == duration_)
 80037c2:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 80037c6:	f8d3 50cc 	ldr.w	r5, [r3, #204]	@ 0xcc
 80037ca:	3401      	adds	r4, #1
 80037cc:	42ac      	cmp	r4, r5
 80037ce:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
 80037d2:	f47f af06 	bne.w	80035e2 <recorder::StateMachine(bool)+0x142>
 80037d6:	460e      	mov	r6, r1
                state_ = in;
 80037d8:	f883 10d5 	strb.w	r1, [r3, #213]	@ 0xd5
 80037dc:	e701      	b.n	80035e2 <recorder::StateMachine(bool)+0x142>
 80037de:	bf00      	nop
 80037e0:	20010b38 	.word	0x20010b38
 80037e4:	20000554 	.word	0x20000554
 80037e8:	40bfae14 	.word	0x40bfae14
 80037ec:	200108e0 	.word	0x200108e0
 80037f0:	20000024 	.word	0x20000024
 80037f4:	200108f0 	.word	0x200108f0
 80037f8:	20000420 	.word	0x20000420
 80037fc:	200108ec 	.word	0x200108ec
 8003800:	20010c40 	.word	0x20010c40
 8003804:	58021800 	.word	0x58021800
 8003808:	58020400 	.word	0x58020400
 800380c:	20010910 	.word	0x20010910
 8003810:	3e6c2ad7 	.word	0x3e6c2ad7
 8003814:	0800c058 	.word	0x0800c058
 8003818:	0800c0c4 	.word	0x0800c0c4
 800381c:	20000424 	.word	0x20000424
        else if (in != state_)
 8003820:	f893 c0c9 	ldrb.w	ip, [r3, #201]	@ 0xc9
 8003824:	4561      	cmp	r1, ip
 8003826:	f43f aec5 	beq.w	80035b4 <recorder::StateMachine(bool)+0x114>
            if (++count_ == duration_)
 800382a:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
 800382e:	f8d3 50c0 	ldr.w	r5, [r3, #192]	@ 0xc0
 8003832:	3401      	adds	r4, #1
 8003834:	42ac      	cmp	r4, r5
 8003836:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
 800383a:	f47f aebb 	bne.w	80035b4 <recorder::StateMachine(bool)+0x114>
 800383e:	468c      	mov	ip, r1
                state_ = in;
 8003840:	f883 10c9 	strb.w	r1, [r3, #201]	@ 0xc9
 8003844:	e6b6      	b.n	80035b4 <recorder::StateMachine(bool)+0x114>
        else if (in != state_)
 8003846:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
 800384a:	42a1      	cmp	r1, r4
 800384c:	f43f ae9b 	beq.w	8003586 <recorder::StateMachine(bool)+0xe6>
            if (++count_ == duration_)
 8003850:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8003854:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 8003858:	3501      	adds	r5, #1
 800385a:	42b5      	cmp	r5, r6
 800385c:	f8c3 50b8 	str.w	r5, [r3, #184]	@ 0xb8
 8003860:	f47f ae91 	bne.w	8003586 <recorder::StateMachine(bool)+0xe6>
 8003864:	460c      	mov	r4, r1
                state_ = in;
 8003866:	f883 10bd 	strb.w	r1, [r3, #189]	@ 0xbd
 800386a:	e68c      	b.n	8003586 <recorder::StateMachine(bool)+0xe6>
        else if (in != state_)
 800386c:	f893 40b1 	ldrb.w	r4, [r3, #177]	@ 0xb1
 8003870:	42a1      	cmp	r1, r4
 8003872:	f43f ae71 	beq.w	8003558 <recorder::StateMachine(bool)+0xb8>
            if (++count_ == duration_)
 8003876:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 800387a:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 800387e:	3501      	adds	r5, #1
 8003880:	42b5      	cmp	r5, r6
 8003882:	f8c3 50ac 	str.w	r5, [r3, #172]	@ 0xac
 8003886:	f47f ae67 	bne.w	8003558 <recorder::StateMachine(bool)+0xb8>
 800388a:	460c      	mov	r4, r1
                state_ = in;
 800388c:	f883 10b1 	strb.w	r1, [r3, #177]	@ 0xb1
 8003890:	e662      	b.n	8003558 <recorder::StateMachine(bool)+0xb8>
        else if (in != state_)
 8003892:	f893 40a5 	ldrb.w	r4, [r3, #165]	@ 0xa5
 8003896:	42a1      	cmp	r1, r4
 8003898:	f43f ae47 	beq.w	800352a <recorder::StateMachine(bool)+0x8a>
            if (++count_ == duration_)
 800389c:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 80038a0:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 80038a4:	3501      	adds	r5, #1
 80038a6:	42b5      	cmp	r5, r6
 80038a8:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
 80038ac:	f47f ae3d 	bne.w	800352a <recorder::StateMachine(bool)+0x8a>
 80038b0:	460c      	mov	r4, r1
                state_ = in;
 80038b2:	f883 10a5 	strb.w	r1, [r3, #165]	@ 0xa5
 80038b6:	e638      	b.n	800352a <recorder::StateMachine(bool)+0x8a>
        else if (in != state_)
 80038b8:	f893 4099 	ldrb.w	r4, [r3, #153]	@ 0x99
 80038bc:	42a1      	cmp	r1, r4
 80038be:	f43f ae1d 	beq.w	80034fc <recorder::StateMachine(bool)+0x5c>
            if (++count_ == duration_)
 80038c2:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
 80038c6:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
 80038ca:	3501      	adds	r5, #1
 80038cc:	42b5      	cmp	r5, r6
 80038ce:	f8c3 5094 	str.w	r5, [r3, #148]	@ 0x94
 80038d2:	f47f ae13 	bne.w	80034fc <recorder::StateMachine(bool)+0x5c>
 80038d6:	460c      	mov	r4, r1
                state_ = in;
 80038d8:	f883 1099 	strb.w	r1, [r3, #153]	@ 0x99
 80038dc:	e60e      	b.n	80034fc <recorder::StateMachine(bool)+0x5c>
        else if (in != state_)
 80038de:	f893 508d 	ldrb.w	r5, [r3, #141]	@ 0x8d
 80038e2:	42ac      	cmp	r4, r5
 80038e4:	f43f adf2 	beq.w	80034cc <recorder::StateMachine(bool)+0x2c>
            if (++count_ == duration_)
 80038e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038ec:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80038f0:	3201      	adds	r2, #1
 80038f2:	428a      	cmp	r2, r1
 80038f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80038f8:	f47f ade8 	bne.w	80034cc <recorder::StateMachine(bool)+0x2c>
 80038fc:	4625      	mov	r5, r4
                state_ = in;
 80038fe:	f883 408d 	strb.w	r4, [r3, #141]	@ 0x8d
 8003902:	e5e3      	b.n	80034cc <recorder::StateMachine(bool)+0x2c>
            return is_active_;
 8003904:	4b96      	ldr	r3, [pc, #600]	@ (8003b60 <recorder::StateMachine(bool)+0x6c0>)
            if (!jingle_engine_.JingleActive())
 8003906:	7b1d      	ldrb	r5, [r3, #12]
 8003908:	2d00      	cmp	r5, #0
 800390a:	f47f af2c 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 800390e:	4b95      	ldr	r3, [pc, #596]	@ (8003b64 <recorder::StateMachine(bool)+0x6c4>)
 8003910:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8003914:	4a94      	ldr	r2, [pc, #592]	@ (8003b68 <recorder::StateMachine(bool)+0x6c8>)
 8003916:	6199      	str	r1, [r3, #24]
 8003918:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
                synth_inactive_ = true;   // Set the inactive flag
 800391c:	4b93      	ldr	r3, [pc, #588]	@ (8003b6c <recorder::StateMachine(bool)+0x6cc>)
 800391e:	6191      	str	r1, [r2, #24]
 8003920:	2201      	movs	r2, #1
        printf("State: ");
 8003922:	4893      	ldr	r0, [pc, #588]	@ (8003b70 <recorder::StateMachine(bool)+0x6d0>)
                synth_inactive_ = true;   // Set the inactive flag
 8003924:	701a      	strb	r2, [r3, #0]
        printf("State: ");
 8003926:	f007 fb2b 	bl	800af80 <iprintf>
            printf("IDLE\n");
 800392a:	4892      	ldr	r0, [pc, #584]	@ (8003b74 <recorder::StateMachine(bool)+0x6d4>)
 800392c:	f007 fb90 	bl	800b050 <puts>
 8003930:	f3bf 8f5b 	dmb	ish
 8003934:	7025      	strb	r5, [r4, #0]
 8003936:	f3bf 8f5b 	dmb	ish
    }
 800393a:	e714      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800393c:	2b02      	cmp	r3, #2
 800393e:	f47f aefe 	bne.w	800373e <recorder::StateMachine(bool)+0x29e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003942:	4989      	ldr	r1, [pc, #548]	@ (8003b68 <recorder::StateMachine(bool)+0x6c8>)
 8003944:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003948:	4b86      	ldr	r3, [pc, #536]	@ (8003b64 <recorder::StateMachine(bool)+0x6c4>)
 800394a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800394e:	6188      	str	r0, [r1, #24]
 8003950:	619a      	str	r2, [r3, #24]
    }
 8003952:	e6f4      	b.n	800373e <recorder::StateMachine(bool)+0x29e>
 8003954:	4b82      	ldr	r3, [pc, #520]	@ (8003b60 <recorder::StateMachine(bool)+0x6c0>)
            if (!jingle_engine_.JingleActive())
 8003956:	7b1b      	ldrb	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af04 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        printf("State: ");
 800395e:	4884      	ldr	r0, [pc, #528]	@ (8003b70 <recorder::StateMachine(bool)+0x6d0>)
 8003960:	f007 fb0e 	bl	800af80 <iprintf>
            printf("STANDBY\n");
 8003964:	4884      	ldr	r0, [pc, #528]	@ (8003b78 <recorder::StateMachine(bool)+0x6d8>)
 8003966:	f007 fb73 	bl	800b050 <puts>
 800396a:	230a      	movs	r3, #10
 800396c:	f3bf 8f5b 	dmb	ish
 8003970:	7023      	strb	r3, [r4, #0]
 8003972:	f3bf 8f5b 	dmb	ish
    }
 8003976:	b005      	add	sp, #20
 8003978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (state_.length == 0)
 800397c:	4e7f      	ldr	r6, [pc, #508]	@ (8003b7c <recorder::StateMachine(bool)+0x6dc>)
 800397e:	6875      	ldr	r5, [r6, #4]
 8003980:	2d00      	cmp	r5, #0
 8003982:	f000 83c0 	beq.w	8004106 <recorder::StateMachine(bool)+0xc66>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003986:	4a7e      	ldr	r2, [pc, #504]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 8003988:	6893      	ldr	r3, [r2, #8]
 800398a:	f013 0320 	ands.w	r3, r3, #32
 800398e:	d1fb      	bne.n	8003988 <recorder::StateMachine(bool)+0x4e8>
        QUADSPI->DLR = 0;
 8003990:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8003992:	4b7c      	ldr	r3, [pc, #496]	@ (8003b84 <recorder::StateMachine(bool)+0x6e4>)
 8003994:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003996:	4a7a      	ldr	r2, [pc, #488]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 8003998:	6893      	ldr	r3, [r2, #8]
 800399a:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 800399e:	d0fb      	beq.n	8003998 <recorder::StateMachine(bool)+0x4f8>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80039a0:	f892 1020 	ldrb.w	r1, [r2, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80039a4:	4a76      	ldr	r2, [pc, #472]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80039a6:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80039a8:	6893      	ldr	r3, [r2, #8]
 80039aa:	0798      	lsls	r0, r3, #30
 80039ac:	d5fc      	bpl.n	80039a8 <recorder::StateMachine(bool)+0x508>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80039ae:	2302      	movs	r3, #2
 80039b0:	60d3      	str	r3, [r2, #12]
        if (write_in_progress())
 80039b2:	07cb      	lsls	r3, r1, #31
 80039b4:	d43d      	bmi.n	8003a32 <recorder::StateMachine(bool)+0x592>
        uint32_t offset_in_page = state_.location % kPageSize;
 80039b6:	f8d6 e000 	ldr.w	lr, [r6]
        PageProgram(state_.bytes, state_.location, len, false);
 80039ba:	68b1      	ldr	r1, [r6, #8]
        uint32_t offset_in_page = state_.location % kPageSize;
 80039bc:	fa5f f08e 	uxtb.w	r0, lr
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80039c0:	4a6f      	ldr	r2, [pc, #444]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
        uint32_t len = std::min(state_.length, kPageSize - offset_in_page);
 80039c2:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80039c6:	42a8      	cmp	r0, r5
 80039c8:	bf28      	it	cs
 80039ca:	4628      	movcs	r0, r5
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80039cc:	6893      	ldr	r3, [r2, #8]
 80039ce:	069d      	lsls	r5, r3, #26
 80039d0:	d4fc      	bmi.n	80039cc <recorder::StateMachine(bool)+0x52c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80039d2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80039d6:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80039d8:	4a69      	ldr	r2, [pc, #420]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 80039da:	6893      	ldr	r3, [r2, #8]
 80039dc:	079b      	lsls	r3, r3, #30
 80039de:	d5fc      	bpl.n	80039da <recorder::StateMachine(bool)+0x53a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80039e0:	2302      	movs	r3, #2
 80039e2:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80039e4:	4a66      	ldr	r2, [pc, #408]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 80039e6:	6893      	ldr	r3, [r2, #8]
 80039e8:	069d      	lsls	r5, r3, #26
 80039ea:	d4fc      	bmi.n	80039e6 <recorder::StateMachine(bool)+0x546>
        QUADSPI->DLR = count - 1;
 80039ec:	1e43      	subs	r3, r0, #1
 80039ee:	180d      	adds	r5, r1, r0
 80039f0:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 80039f2:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <recorder::StateMachine(bool)+0x6e8>)
 80039f4:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 80039f6:	f8c2 e018 	str.w	lr, [r2, #24]
            while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 80039fa:	4a61      	ldr	r2, [pc, #388]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 80039fc:	6893      	ldr	r3, [r2, #8]
 80039fe:	075b      	lsls	r3, r3, #29
 8003a00:	d5fc      	bpl.n	80039fc <recorder::StateMachine(bool)+0x55c>
            DataWrite8(*buffer++);
 8003a02:	f811 3b01 	ldrb.w	r3, [r1], #1
        while (count--)
 8003a06:	428d      	cmp	r5, r1
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8003a08:	f882 3020 	strb.w	r3, [r2, #32]
        while (count--)
 8003a0c:	d1f6      	bne.n	80039fc <recorder::StateMachine(bool)+0x55c>
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b80 <recorder::StateMachine(bool)+0x6e0>)
 8003a10:	6893      	ldr	r3, [r2, #8]
 8003a12:	079d      	lsls	r5, r3, #30
 8003a14:	d5fc      	bpl.n	8003a10 <recorder::StateMachine(bool)+0x570>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003a16:	2302      	movs	r3, #2
 8003a18:	60d3      	str	r3, [r2, #12]
        state_.bytes += len;
 8003a1a:	68b3      	ldr	r3, [r6, #8]
 8003a1c:	4403      	add	r3, r0
 8003a1e:	60b3      	str	r3, [r6, #8]
        state_.location += len;
 8003a20:	6833      	ldr	r3, [r6, #0]
 8003a22:	4403      	add	r3, r0
 8003a24:	6033      	str	r3, [r6, #0]
        state_.length -= len;
 8003a26:	6873      	ldr	r3, [r6, #4]
 8003a28:	1a1b      	subs	r3, r3, r0
 8003a2a:	6073      	str	r3, [r6, #4]
        return flash_.BeginWrite(address, link.buffer, write_size);
    }

    bool FinishWrite(void)
    {
        if (flash_.FinishWrite())
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 836a 	beq.w	8004106 <recorder::StateMachine(bool)+0xc66>
            else if (record || play_button_.is_high())
 8003a32:	f1bc 0f00 	cmp.w	ip, #0
 8003a36:	d103      	bne.n	8003a40 <recorder::StateMachine(bool)+0x5a0>
        return history_ & 1;
 8003a38:	683b      	ldr	r3, [r7, #0]
            else if (record || play_button_.is_high())
 8003a3a:	07d8      	lsls	r0, r3, #31
 8003a3c:	f57f ae93 	bpl.w	8003766 <recorder::StateMachine(bool)+0x2c6>
                printf("Save aborted\n");
 8003a40:	4852      	ldr	r0, [pc, #328]	@ (8003b8c <recorder::StateMachine(bool)+0x6ec>)
 8003a42:	f007 fb05 	bl	800b050 <puts>
        printf("State: ");
 8003a46:	484a      	ldr	r0, [pc, #296]	@ (8003b70 <recorder::StateMachine(bool)+0x6d0>)
 8003a48:	f007 fa9a 	bl	800af80 <iprintf>
            printf("IDLE\n");
 8003a4c:	4849      	ldr	r0, [pc, #292]	@ (8003b74 <recorder::StateMachine(bool)+0x6d4>)
 8003a4e:	f007 faff 	bl	800b050 <puts>
 8003a52:	2300      	movs	r3, #0
 8003a54:	f3bf 8f5b 	dmb	ish
 8003a58:	7023      	strb	r3, [r4, #0]
 8003a5a:	f3bf 8f5b 	dmb	ish
    }
 8003a5e:	e682      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
 8003a60:	4b4b      	ldr	r3, [pc, #300]	@ (8003b90 <recorder::StateMachine(bool)+0x6f0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
                button_3_.is_high() || button_4_.is_high() || strum_idx_changed)
 8003a64:	07dc      	lsls	r4, r3, #31
 8003a66:	d40d      	bmi.n	8003a84 <recorder::StateMachine(bool)+0x5e4>
 8003a68:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <recorder::StateMachine(bool)+0x6f4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
            if (button_1_.is_high() || button_2_.is_high() || 
 8003a6c:	07d8      	lsls	r0, r3, #31
 8003a6e:	d409      	bmi.n	8003a84 <recorder::StateMachine(bool)+0x5e4>
 8003a70:	4b49      	ldr	r3, [pc, #292]	@ (8003b98 <recorder::StateMachine(bool)+0x6f8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	07d9      	lsls	r1, r3, #31
 8003a76:	d405      	bmi.n	8003a84 <recorder::StateMachine(bool)+0x5e4>
 8003a78:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <recorder::StateMachine(bool)+0x6fc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
                button_3_.is_high() || button_4_.is_high() || strum_idx_changed)
 8003a7c:	07da      	lsls	r2, r3, #31
 8003a7e:	d401      	bmi.n	8003a84 <recorder::StateMachine(bool)+0x5e4>
 8003a80:	7833      	ldrb	r3, [r6, #0]
 8003a82:	b113      	cbz	r3, 8003a8a <recorder::StateMachine(bool)+0x5ea>
                idle_timeout_ = 0;
 8003a84:	4b46      	ldr	r3, [pc, #280]	@ (8003ba0 <recorder::StateMachine(bool)+0x700>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
            if (synth_inactive_)
 8003a8a:	4c38      	ldr	r4, [pc, #224]	@ (8003b6c <recorder::StateMachine(bool)+0x6cc>)
 8003a8c:	7823      	ldrb	r3, [r4, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d031      	beq.n	8003af6 <recorder::StateMachine(bool)+0x656>
 8003a92:	682b      	ldr	r3, [r5, #0]
                    if (buttons[i].is_high())
 8003a94:	07db      	lsls	r3, r3, #31
 8003a96:	d40c      	bmi.n	8003ab2 <recorder::StateMachine(bool)+0x612>
 8003a98:	686b      	ldr	r3, [r5, #4]
 8003a9a:	07d8      	lsls	r0, r3, #31
 8003a9c:	d409      	bmi.n	8003ab2 <recorder::StateMachine(bool)+0x612>
 8003a9e:	68ab      	ldr	r3, [r5, #8]
 8003aa0:	07d9      	lsls	r1, r3, #31
 8003aa2:	d406      	bmi.n	8003ab2 <recorder::StateMachine(bool)+0x612>
 8003aa4:	68eb      	ldr	r3, [r5, #12]
 8003aa6:	07da      	lsls	r2, r3, #31
 8003aa8:	d403      	bmi.n	8003ab2 <recorder::StateMachine(bool)+0x612>
                if (anyKey || strum_idx_changed)
 8003aaa:	7833      	ldrb	r3, [r6, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 852e 	beq.w	800450e <recorder::StateMachine(bool)+0x106e>
            if (state_ == STATE_STOPPED)
 8003ab2:	4d3c      	ldr	r5, [pc, #240]	@ (8003ba4 <recorder::StateMachine(bool)+0x704>)
 8003ab4:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 846b 	bne.w	8004394 <recorder::StateMachine(bool)+0xef4>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003abe:	492a      	ldr	r1, [pc, #168]	@ (8003b68 <recorder::StateMachine(bool)+0x6c8>)
 8003ac0:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <recorder::StateMachine(bool)+0x6c4>)
 8003ac8:	6188      	str	r0, [r1, #24]
                dac_.Start();
 8003aca:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 8003ace:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 8003ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003adc:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8003ade:	f002 ff43 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 8003ae2:	1d28      	adds	r0, r5, #4
 8003ae4:	f002 fc40 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f002 ff29 	bl	8006940 <recorder::Analog::StartTimer()>
                    synth_inactive_ = false;
 8003aee:	2300      	movs	r3, #0
                    idle_timeout_ = 0; // Reset timeout on activity
 8003af0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <recorder::StateMachine(bool)+0x700>)
                    synth_inactive_ = false;
 8003af2:	7023      	strb	r3, [r4, #0]
                    idle_timeout_ = 0; // Reset timeout on activity
 8003af4:	6013      	str	r3, [r2, #0]
            if (env_state_[v] != ENV_IDLE) return true;
 8003af6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba8 <recorder::StateMachine(bool)+0x708>)
            if (strum_state_[s] != ENV_IDLE) return true;
 8003af8:	f892 006c 	ldrb.w	r0, [r2, #108]	@ 0x6c
 8003afc:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8003b00:	f892 106e 	ldrb.w	r1, [r2, #110]	@ 0x6e
 8003b04:	4303      	orrs	r3, r0
 8003b06:	f892 006f 	ldrb.w	r0, [r2, #111]	@ 0x6f
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	f892 10fc 	ldrb.w	r1, [r2, #252]	@ 0xfc
 8003b10:	4303      	orrs	r3, r0
 8003b12:	f892 00fd 	ldrb.w	r0, [r2, #253]	@ 0xfd
 8003b16:	430b      	orrs	r3, r1
 8003b18:	f892 10fe 	ldrb.w	r1, [r2, #254]	@ 0xfe
 8003b1c:	4303      	orrs	r3, r0
 8003b1e:	f892 00ff 	ldrb.w	r0, [r2, #255]	@ 0xff
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8003b28:	f892 2101 	ldrb.w	r2, [r2, #257]	@ 0x101
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f040 82f2 	bne.w	800411a <recorder::StateMachine(bool)+0xc7a>
                if (++synthReleaseCounter >= 10)
 8003b36:	491d      	ldr	r1, [pc, #116]	@ (8003bac <recorder::StateMachine(bool)+0x70c>)
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	3201      	adds	r2, #1
 8003b3c:	2a09      	cmp	r2, #9
 8003b3e:	600a      	str	r2, [r1, #0]
 8003b40:	f67f ae11 	bls.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003b44:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <recorder::StateMachine(bool)+0x6c4>)
 8003b46:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003b4a:	6190      	str	r0, [r2, #24]
 8003b4c:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8003b50:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003b54:	6190      	str	r0, [r2, #24]
                    synth_inactive_ = true;
 8003b56:	2201      	movs	r2, #1
                    synthReleaseCounter = 0;
 8003b58:	600b      	str	r3, [r1, #0]
                    synth_inactive_ = true;
 8003b5a:	7022      	strb	r2, [r4, #0]
                    synthReleaseCounter = 0;
 8003b5c:	e603      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
 8003b5e:	bf00      	nop
 8003b60:	20010910 	.word	0x20010910
 8003b64:	58020400 	.word	0x58020400
 8003b68:	58021800 	.word	0x58021800
 8003b6c:	20010b34 	.word	0x20010b34
 8003b70:	0800c058 	.word	0x0800c058
 8003b74:	0800c060 	.word	0x0800c060
 8003b78:	0800c0b4 	.word	0x0800c0b4
 8003b7c:	2001088c 	.word	0x2001088c
 8003b80:	52005000 	.word	0x52005000
 8003b84:	05000105 	.word	0x05000105
 8003b88:	01002502 	.word	0x01002502
 8003b8c:	0800c0dc 	.word	0x0800c0dc
 8003b90:	2001090c 	.word	0x2001090c
 8003b94:	20010908 	.word	0x20010908
 8003b98:	20010904 	.word	0x20010904
 8003b9c:	20010900 	.word	0x20010900
 8003ba0:	200108e8 	.word	0x200108e8
 8003ba4:	20010c40 	.word	0x20010c40
 8003ba8:	20010928 	.word	0x20010928
 8003bac:	2000041c 	.word	0x2000041c
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8003d6c <recorder::StateMachine(bool)+0x8cc>)
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	619a      	str	r2, [r3, #24]
            if (!record)
 8003bb6:	f1bc 0f00 	cmp.w	ip, #0
 8003bba:	f47f add4 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>

        void Stop(void)
        {
            if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <recorder::StateMachine(bool)+0x8d0>)
 8003bc0:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
 8003bc4:	2a02      	cmp	r2, #2
 8003bc6:	d102      	bne.n	8003bce <recorder::StateMachine(bool)+0x72e>
            {
                cue_stop_ = true;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
        printf("State: ");
 8003bce:	4869      	ldr	r0, [pc, #420]	@ (8003d74 <recorder::StateMachine(bool)+0x8d4>)
 8003bd0:	f04f 0900 	mov.w	r9, #0
        if (buffer_index_ > min_length)
 8003bd4:	4e68      	ldr	r6, [pc, #416]	@ (8003d78 <recorder::StateMachine(bool)+0x8d8>)
 8003bd6:	f007 f9d3 	bl	800af80 <iprintf>
            printf("IDLE\n");
 8003bda:	4868      	ldr	r0, [pc, #416]	@ (8003d7c <recorder::StateMachine(bool)+0x8dc>)
 8003bdc:	f007 fa38 	bl	800b050 <puts>
 8003be0:	f3bf 8f5b 	dmb	ish
 8003be4:	f884 9000 	strb.w	r9, [r4]
 8003be8:	f3bf 8f5b 	dmb	ish
 8003bec:	6932      	ldr	r2, [r6, #16]
 8003bee:	2aa0      	cmp	r2, #160	@ 0xa0
 8003bf0:	f67f adb9 	bls.w	8003766 <recorder::StateMachine(bool)+0x2c6>
            buffer_index_ -= min_length;
 8003bf4:	3aa0      	subs	r2, #160	@ 0xa0
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
  WRITE_REG(CRCx->INIT, InitCrc);
 8003bf6:	4d62      	ldr	r5, [pc, #392]	@ (8003d80 <recorder::StateMachine(bool)+0x8e0>)
            uint32_t address = audio_info_.address + audio_info_.size;
 8003bf8:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
            buffer_index_ -= min_length;
 8003bfc:	6132      	str	r2, [r6, #16]
            uint32_t address = audio_info_.address + audio_info_.size;
 8003bfe:	185c      	adds	r4, r3, r1
            uint32_t size = buffer_index_ * sizeof(T);
 8003c00:	0053      	lsls	r3, r2, #1
            address += granularity - 1;
 8003c02:	f604 74ff 	addw	r4, r4, #4095	@ 0xfff
 8003c06:	f36f 040b 	bfc	r4, #0, #12
            if (address + size > Flash::kSize)
 8003c0a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
                address = kAudioBufferAddress;
 8003c0e:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c16:	612a      	str	r2, [r5, #16]
 8003c18:	bf88      	it	hi
 8003c1a:	f44f 5400 	movhi.w	r4, #8192	@ 0x2000
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003c1e:	68aa      	ldr	r2, [r5, #8]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	60aa      	str	r2, [r5, #8]
    protected:
        const Link* chain_;
        uint32_t num_ = 0;
    };

    iter begin() {return iter(chain_, 0);}
 8003c26:	e9d6 7b0f 	ldrd	r7, fp, [r6, #60]	@ 0x3c
            for (auto link : buffer_chain_)
 8003c2a:	b39f      	cbz	r7, 8003c94 <recorder::StateMachine(bool)+0x7f4>
 8003c2c:	9603      	str	r6, [sp, #12]
 8003c2e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003c32:	464e      	mov	r6, r9
 8003c34:	f10b 0804 	add.w	r8, fp, #4
 8003c38:	4699      	mov	r9, r3
 8003c3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c3e:	f858 a026 	ldr.w	sl, [r8, r6, lsl #2]
 8003c42:	f85b 4026 	ldr.w	r4, [fp, r6, lsl #2]
                system::ReloadWatchdog();
 8003c46:	f003 fc83 	bl	8007550 <recorder::system::ReloadWatchdog()>
            return length * sizeof(T);
 8003c4a:	ea4f 0c4a 	mov.w	ip, sl, lsl #1
 8003c4e:	45cc      	cmp	ip, r9
 8003c50:	bf28      	it	cs
 8003c52:	46cc      	movcs	ip, r9
        LL_CRC_ResetCRCCalculationUnit(CRC);
    }

    uint32_t Process(const uint8_t* data, uint32_t size)
    {
        while (size >= 4)
 8003c54:	f1bc 0f03 	cmp.w	ip, #3
 8003c58:	f240 8375 	bls.w	8004346 <recorder::StateMachine(bool)+0xea6>
 8003c5c:	f1ac 0204 	sub.w	r2, ip, #4
 8003c60:	f022 0203 	bic.w	r2, r2, #3
 8003c64:	3204      	adds	r2, #4
 8003c66:	4422      	add	r2, r4
        {
            auto word = *reinterpret_cast<const uint32_t*>(data);
 8003c68:	f854 3b04 	ldr.w	r3, [r4], #4
        while (size >= 4)
 8003c6c:	42a2      	cmp	r2, r4
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	d1fa      	bne.n	8003c68 <recorder::StateMachine(bool)+0x7c8>
 8003c72:	f00c 0303 	and.w	r3, ip, #3
            LL_CRC_FeedData32(CRC, word);
            size -= 4;
            data += 4;
        }

        while (size--)
 8003c76:	b11b      	cbz	r3, 8003c80 <recorder::StateMachine(bool)+0x7e0>
        {
            LL_CRC_FeedData8(CRC, *data++);
 8003c78:	7813      	ldrb	r3, [r2, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8003c7a:	702b      	strb	r3, [r5, #0]
 8003c7c:	7853      	ldrb	r3, [r2, #1]
 8003c7e:	702b      	strb	r3, [r5, #0]
                if (total_size == 0)
 8003c80:	ebb9 090c 	subs.w	r9, r9, ip
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	d002      	beq.n	8003c8e <recorder::StateMachine(bool)+0x7ee>
            for (auto link : buffer_chain_)
 8003c88:	3603      	adds	r6, #3
 8003c8a:	42be      	cmp	r6, r7
 8003c8c:	d1d7      	bne.n	8003c3e <recorder::StateMachine(bool)+0x79e>
 8003c8e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8003c92:	9e03      	ldr	r6, [sp, #12]
 8003c94:	4a3a      	ldr	r2, [pc, #232]	@ (8003d80 <recorder::StateMachine(bool)+0x8e0>)
            dirty_ = true;
 8003c96:	2101      	movs	r1, #1
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	7371      	strb	r1, [r6, #13]
        return Process(reinterpret_cast<const uint8_t*>(data), size);
    }

    uint32_t value(void) const
    {
        return ~LL_CRC_ReadData32(CRC);
 8003c9c:	43d2      	mvns	r2, r2
            audio_info_ =
 8003c9e:	e9c6 4305 	strd	r4, r3, [r6, #20]
 8003ca2:	61f2      	str	r2, [r6, #28]
 8003ca4:	e55f      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
 8003ca6:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <recorder::StateMachine(bool)+0x8cc>)
 8003ca8:	2504      	movs	r5, #4
            return state_ == STATE_RUNNING;
 8003caa:	4a31      	ldr	r2, [pc, #196]	@ (8003d70 <recorder::StateMachine(bool)+0x8d0>)
 8003cac:	619d      	str	r5, [r3, #24]
 8003cae:	f892 3160 	ldrb.w	r3, [r2, #352]	@ 0x160
            if (analog_.running())
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	f000 8308 	beq.w	80042c8 <recorder::StateMachine(bool)+0xe28>
            else if (analog_.stopped())
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f47f ad54 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        printf("State: ");
 8003cbe:	482d      	ldr	r0, [pc, #180]	@ (8003d74 <recorder::StateMachine(bool)+0x8d4>)
 8003cc0:	f007 f95e 	bl	800af80 <iprintf>
            printf("STOP\n");
 8003cc4:	482f      	ldr	r0, [pc, #188]	@ (8003d84 <recorder::StateMachine(bool)+0x8e4>)
 8003cc6:	f007 f9c3 	bl	800b050 <puts>
 8003cca:	f3bf 8f5b 	dmb	ish
 8003cce:	7025      	strb	r5, [r4, #0]
 8003cd0:	f3bf 8f5b 	dmb	ish
    }
 8003cd4:	e547      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
 8003cd6:	683d      	ldr	r5, [r7, #0]
            if (play_button_.is_low())
 8003cd8:	f015 0501 	ands.w	r5, r5, #1
 8003cdc:	f47f ad43 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        printf("State: ");
 8003ce0:	4824      	ldr	r0, [pc, #144]	@ (8003d74 <recorder::StateMachine(bool)+0x8d4>)
 8003ce2:	e620      	b.n	8003926 <recorder::StateMachine(bool)+0x486>
 8003ce4:	6839      	ldr	r1, [r7, #0]
            if (checkRecordPlayback(record, play_button_.is_high())) {
 8003ce6:	4660      	mov	r0, ip
 8003ce8:	f001 0101 	and.w	r1, r1, #1
 8003cec:	f7ff faac 	bl	8003248 <recorder::checkRecordPlayback(bool, bool)>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f47f ad38 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
 8003cf6:	682b      	ldr	r3, [r5, #0]
            else if (buttons[0].is_high() || buttons[1].is_high() || buttons[2].is_high() || buttons[3].is_high() || strum_idx_changed)
 8003cf8:	07da      	lsls	r2, r3, #31
 8003cfa:	f100 8213 	bmi.w	8004124 <recorder::StateMachine(bool)+0xc84>
 8003cfe:	686b      	ldr	r3, [r5, #4]
 8003d00:	07db      	lsls	r3, r3, #31
 8003d02:	f100 820f 	bmi.w	8004124 <recorder::StateMachine(bool)+0xc84>
 8003d06:	68ab      	ldr	r3, [r5, #8]
 8003d08:	07df      	lsls	r7, r3, #31
 8003d0a:	f100 820b 	bmi.w	8004124 <recorder::StateMachine(bool)+0xc84>
 8003d0e:	68eb      	ldr	r3, [r5, #12]
 8003d10:	07dd      	lsls	r5, r3, #31
 8003d12:	f100 8207 	bmi.w	8004124 <recorder::StateMachine(bool)+0xc84>
 8003d16:	7831      	ldrb	r1, [r6, #0]
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	f040 8203 	bne.w	8004124 <recorder::StateMachine(bool)+0xc84>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d88 <recorder::StateMachine(bool)+0x8e8>)
            else if (kEnableIdleStandby &&
 8003d20:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003d8c <recorder::StateMachine(bool)+0x8ec>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	ee07 3a10 	vmov	s14, r3
 8003d2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 8003d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	f300 8466 	bgt.w	8004608 <recorder::StateMachine(bool)+0x1168>
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e512      	b.n	8003766 <recorder::StateMachine(bool)+0x2c6>
        }
    }

    bool Save(const T& data)
    {
        if (0 == std::memcmp(&block_.data, &data, sizeof(T)))
 8003d40:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8003d90 <recorder::StateMachine(bool)+0x8f0>
 8003d44:	f8d8 2000 	ldr.w	r2, [r8]
 8003d48:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	f000 8218 	beq.w	8004182 <recorder::StateMachine(bool)+0xce2>
            return true;
        }

        int32_t next_block;

        if (active_block_n_ == -1)
 8003d52:	4e09      	ldr	r6, [pc, #36]	@ (8003d78 <recorder::StateMachine(bool)+0x8d8>)
 8003d54:	f8d6 9030 	ldr.w	r9, [r6, #48]	@ 0x30
 8003d58:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003d5c:	f000 8222 	beq.w	80041a4 <recorder::StateMachine(bool)+0xd04>
        return page_n * kPageSize + block_n * kBlockSize;
    }

    int32_t NextWritableBlock(int32_t current_block_n)
    {
        int32_t next_block_n = current_block_n;
 8003d60:	464f      	mov	r7, r9

        do
        {
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003d62:	f8df b030 	ldr.w	fp, [pc, #48]	@ 8003d94 <recorder::StateMachine(bool)+0x8f4>
 8003d66:	f240 2a22 	movw	sl, #546	@ 0x222
 8003d6a:	e017      	b.n	8003d9c <recorder::StateMachine(bool)+0x8fc>
 8003d6c:	58020800 	.word	0x58020800
 8003d70:	20010c40 	.word	0x20010c40
 8003d74:	0800c058 	.word	0x0800c058
 8003d78:	2001088c 	.word	0x2001088c
 8003d7c:	0800c060 	.word	0x0800c060
 8003d80:	58024c00 	.word	0x58024c00
 8003d84:	0800c080 	.word	0x0800c080
 8003d88:	200108e8 	.word	0x200108e8
 8003d8c:	46ea6000 	.word	0x46ea6000
 8003d90:	200108ac 	.word	0x200108ac
 8003d94:	f00f00f1 	.word	0xf00f00f1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
            {
                break;
            }
        }
        while (next_block_n != current_block_n);
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	b1fb      	cbz	r3, 8003ddc <recorder::StateMachine(bool)+0x93c>
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003d9c:	3701      	adds	r7, #1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003d9e:	220f      	movs	r2, #15
 8003da0:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003da2:	087b      	lsrs	r3, r7, #1
 8003da4:	fbab 1303 	umull	r1, r3, fp, r3
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	fb0a 7713 	mls	r7, sl, r3, r7
        uint32_t page_n = block_n / kBlocksPerPage;
 8003dae:	4b9f      	ldr	r3, [pc, #636]	@ (800402c <recorder::StateMachine(bool)+0xb8c>)
 8003db0:	fba3 1307 	umull	r1, r3, r3, r7
 8003db4:	1af9      	subs	r1, r7, r3
 8003db6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003dba:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 8003dbc:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8003dc0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8003dc4:	1a79      	subs	r1, r7, r1
 8003dc6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003dca:	eb01 3503 	add.w	r5, r1, r3, lsl #12
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003dce:	4629      	mov	r1, r5
 8003dd0:	f7fc fdda 	bl	8000988 <recorder::Flash::Writable(unsigned long, unsigned long)>
        while (next_block_n != current_block_n);
 8003dd4:	45b9      	cmp	r9, r7
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003dd6:	f080 0301 	eor.w	r3, r0, #1
        while (next_block_n != current_block_n);
 8003dda:	d1dd      	bne.n	8003d98 <recorder::StateMachine(bool)+0x8f8>
        sequence_++;
 8003ddc:	6b73      	ldr	r3, [r6, #52]	@ 0x34

        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8003dde:	45b9      	cmp	r9, r7
        sequence_++;
 8003de0:	f103 0301 	add.w	r3, r3, #1
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8003de4:	f000 8212 	beq.w	800420c <recorder::StateMachine(bool)+0xd6c>
        block_.sequence_num = sequence_;
 8003de8:	fa1f fe83 	uxth.w	lr, r3
        if (!nvmem_.Write(location, &block_, kBlockSize))
 8003dec:	f8d6 c038 	ldr.w	ip, [r6, #56]	@ 0x38
        sequence_++;
 8003df0:	6373      	str	r3, [r6, #52]	@ 0x34
        std::memcpy(&block_.data, &data, sizeof(T));
 8003df2:	4a8f      	ldr	r2, [pc, #572]	@ (8004030 <recorder::StateMachine(bool)+0xb90>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003df4:	f44f 7b83 	mov.w	fp, #262	@ 0x106
        active_block_n_ = next_block;
 8003df8:	6337      	str	r7, [r6, #48]	@ 0x30
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003dfa:	2702      	movs	r7, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
        QUADSPI->CCR =
 8003dfe:	f8df 9254 	ldr.w	r9, [pc, #596]	@ 8004054 <recorder::StateMachine(bool)+0xbb4>
        QUADSPI->CCR =
 8003e02:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004060 <recorder::StateMachine(bool)+0xbc0>
        std::memcpy(&block_.data, &data, sizeof(T));
 8003e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e08:	e888 0007 	stmia.w	r8, {r0, r1, r2}
            sum += bytes[i];
 8003e0c:	f896 1020 	ldrb.w	r1, [r6, #32]
 8003e10:	f896 2021 	ldrb.w	r2, [r6, #33]	@ 0x21
        block_.sequence_num = sequence_;
 8003e14:	f8a6 e02c 	strh.w	lr, [r6, #44]	@ 0x2c
            sum += bytes[i];
 8003e18:	440a      	add	r2, r1
 8003e1a:	f896 1022 	ldrb.w	r1, [r6, #34]	@ 0x22
 8003e1e:	4411      	add	r1, r2
 8003e20:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 8003e24:	440a      	add	r2, r1
 8003e26:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
 8003e2a:	4411      	add	r1, r2
 8003e2c:	f896 2025 	ldrb.w	r2, [r6, #37]	@ 0x25
 8003e30:	440a      	add	r2, r1
 8003e32:	f896 1026 	ldrb.w	r1, [r6, #38]	@ 0x26
 8003e36:	4411      	add	r1, r2
 8003e38:	f896 2027 	ldrb.w	r2, [r6, #39]	@ 0x27
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 8003e42:	4411      	add	r1, r2
 8003e44:	f896 2029 	ldrb.w	r2, [r6, #41]	@ 0x29
 8003e48:	440a      	add	r2, r1
 8003e4a:	f896 102a 	ldrb.w	r1, [r6, #42]	@ 0x2a
 8003e4e:	4411      	add	r1, r2
 8003e50:	f896 202b 	ldrb.w	r2, [r6, #43]	@ 0x2b
 8003e54:	440a      	add	r2, r1
 8003e56:	fa52 f28e 	uxtab	r2, r2, lr
 8003e5a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
        block_.checksum = kChecksum - Checksum(block_);
 8003e5e:	43d2      	mvns	r2, r2
 8003e60:	f886 202e 	strb.w	r2, [r6, #46]	@ 0x2e
        state_ =
 8003e64:	220f      	movs	r2, #15
 8003e66:	f8cc 5000 	str.w	r5, [ip]
 8003e6a:	e9cc 2801 	strd	r2, r8, [ip, #4]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	f012 0220 	ands.w	r2, r2, #32
 8003e74:	d1fb      	bne.n	8003e6e <recorder::StateMachine(bool)+0x9ce>
        QUADSPI->DLR = 0;
 8003e76:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 8003e78:	f8c3 9014 	str.w	r9, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	f412 5f7c 	tst.w	r2, #16128	@ 0x3f00
 8003e82:	d0fb      	beq.n	8003e7c <recorder::StateMachine(bool)+0x9dc>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003e84:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003e88:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	0790      	lsls	r0, r2, #30
 8003e8e:	d5fc      	bpl.n	8003e8a <recorder::StateMachine(bool)+0x9ea>
        if (write_in_progress())
 8003e90:	07c9      	lsls	r1, r1, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e92:	60df      	str	r7, [r3, #12]
        if (write_in_progress())
 8003e94:	f100 813b 	bmi.w	800410e <recorder::StateMachine(bool)+0xc6e>
        PageProgram(state_.bytes, state_.location, len, false);
 8003e98:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8003e9c:	e9dc e500 	ldrd	lr, r5, [ip]
        uint32_t offset_in_page = state_.location % kPageSize;
 8003ea0:	fa5f f08e 	uxtb.w	r0, lr
        uint32_t len = std::min(state_.length, kPageSize - offset_in_page);
 8003ea4:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8003ea8:	42a8      	cmp	r0, r5
 8003eaa:	bf28      	it	cs
 8003eac:	4628      	movcs	r0, r5
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d4fc      	bmi.n	8003eae <recorder::StateMachine(bool)+0xa0e>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003eb4:	f8c3 b014 	str.w	fp, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	0792      	lsls	r2, r2, #30
 8003ebc:	d5fc      	bpl.n	8003eb8 <recorder::StateMachine(bool)+0xa18>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ebe:	60df      	str	r7, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	0692      	lsls	r2, r2, #26
 8003ec4:	d4fc      	bmi.n	8003ec0 <recorder::StateMachine(bool)+0xa20>
        QUADSPI->DLR = count - 1;
 8003ec6:	1e42      	subs	r2, r0, #1
 8003ec8:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 8003eca:	f8c3 a014 	str.w	sl, [r3, #20]
        QUADSPI->AR = address;
 8003ece:	f8c3 e018 	str.w	lr, [r3, #24]
        while (count--)
 8003ed2:	b168      	cbz	r0, 8003ef0 <recorder::StateMachine(bool)+0xa50>
 8003ed4:	180d      	adds	r5, r1, r0
            while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	0752      	lsls	r2, r2, #29
 8003eda:	d5fc      	bpl.n	8003ed6 <recorder::StateMachine(bool)+0xa36>
            DataWrite8(*buffer++);
 8003edc:	f811 2b01 	ldrb.w	r2, [r1], #1
        while (count--)
 8003ee0:	428d      	cmp	r5, r1
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8003ee2:	f883 2020 	strb.w	r2, [r3, #32]
        while (count--)
 8003ee6:	d1f6      	bne.n	8003ed6 <recorder::StateMachine(bool)+0xa36>
        state_.bytes += len;
 8003ee8:	f8dc 1008 	ldr.w	r1, [ip, #8]
        state_.length -= len;
 8003eec:	e9dc e500 	ldrd	lr, r5, [ip]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	0792      	lsls	r2, r2, #30
 8003ef4:	d5fc      	bpl.n	8003ef0 <recorder::StateMachine(bool)+0xa50>
        state_.bytes += len;
 8003ef6:	4401      	add	r1, r0
        state_.location += len;
 8003ef8:	eb00 020e 	add.w	r2, r0, lr
        state_.length -= len;
 8003efc:	1a2d      	subs	r5, r5, r0
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003efe:	60df      	str	r7, [r3, #12]
        state_.bytes += len;
 8003f00:	f8cc 1008 	str.w	r1, [ip, #8]
        state_.length -= len;
 8003f04:	e9cc 2500 	strd	r2, r5, [ip]
        while (!FinishWrite());
 8003f08:	2d00      	cmp	r5, #0
 8003f0a:	d1b0      	bne.n	8003e6e <recorder::StateMachine(bool)+0x9ce>
                printf("Save completed\n");
 8003f0c:	484a      	ldr	r0, [pc, #296]	@ (8004038 <recorder::StateMachine(bool)+0xb98>)
 8003f0e:	f007 f89f 	bl	800b050 <puts>
        return save_.Save(audio_info_);
    }

    void PrintInfo(const char* line_prefix)
    {
        printf("%sAddress: 0x%08" PRIX32 "\n", line_prefix, audio_info_.address);
 8003f12:	6972      	ldr	r2, [r6, #20]
 8003f14:	4949      	ldr	r1, [pc, #292]	@ (800403c <recorder::StateMachine(bool)+0xb9c>)
 8003f16:	484a      	ldr	r0, [pc, #296]	@ (8004040 <recorder::StateMachine(bool)+0xba0>)
 8003f18:	f007 f832 	bl	800af80 <iprintf>
        printf("%sSize:    0x%08" PRIX32 "\n", line_prefix, audio_info_.size);
 8003f1c:	69b2      	ldr	r2, [r6, #24]
 8003f1e:	4947      	ldr	r1, [pc, #284]	@ (800403c <recorder::StateMachine(bool)+0xb9c>)
 8003f20:	4848      	ldr	r0, [pc, #288]	@ (8004044 <recorder::StateMachine(bool)+0xba4>)
 8003f22:	f007 f82d 	bl	800af80 <iprintf>
        printf("%sCRC32:   0x%08" PRIX32 "\n", line_prefix, audio_info_.crc32);
 8003f26:	4945      	ldr	r1, [pc, #276]	@ (800403c <recorder::StateMachine(bool)+0xb9c>)
 8003f28:	69f2      	ldr	r2, [r6, #28]
 8003f2a:	4847      	ldr	r0, [pc, #284]	@ (8004048 <recorder::StateMachine(bool)+0xba8>)
 8003f2c:	f007 f828 	bl	800af80 <iprintf>
        printf("State: ");
 8003f30:	e515      	b.n	800395e <recorder::StateMachine(bool)+0x4be>
            system::SerialFlushTx();
 8003f32:	2000      	movs	r0, #0
 8003f34:	f003 fd24 	bl	8007980 <recorder::system::SerialFlushTx(bool)>
            if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8003f38:	4b44      	ldr	r3, [pc, #272]	@ (800404c <recorder::StateMachine(bool)+0xbac>)
 8003f3a:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
 8003f3e:	2a02      	cmp	r2, #2
 8003f40:	d102      	bne.n	8003f48 <recorder::StateMachine(bool)+0xaa8>
                cue_stop_ = true;
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003f48:	493a      	ldr	r1, [pc, #232]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003f4a:	688b      	ldr	r3, [r1, #8]
 8003f4c:	069a      	lsls	r2, r3, #26
 8003f4e:	d4fc      	bmi.n	8003f4a <recorder::StateMachine(bool)+0xaaa>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003f50:	f240 13b9 	movw	r3, #441	@ 0x1b9
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003f54:	4a37      	ldr	r2, [pc, #220]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003f56:	614b      	str	r3, [r1, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003f58:	6893      	ldr	r3, [r2, #8]
 8003f5a:	079b      	lsls	r3, r3, #30
 8003f5c:	d5fc      	bpl.n	8003f58 <recorder::StateMachine(bool)+0xab8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	60d3      	str	r3, [r2, #12]
    }
 8003f62:	b005      	add	sp, #20
 8003f64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            system::Standby();
 8003f68:	f003 bd10 	b.w	800798c <recorder::system::Standby()>
        uint32_t length = state_.length;
 8003f6c:	4e38      	ldr	r6, [pc, #224]	@ (8004050 <recorder::StateMachine(bool)+0xbb0>)
        uint32_t location = state_.location;
 8003f6e:	e9d6 0100 	ldrd	r0, r1, [r6]
        if (length == 0)
 8003f72:	2900      	cmp	r1, #0
 8003f74:	d048      	beq.n	8004008 <recorder::StateMachine(bool)+0xb68>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003f76:	4a2f      	ldr	r2, [pc, #188]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003f78:	6893      	ldr	r3, [r2, #8]
 8003f7a:	f013 0320 	ands.w	r3, r3, #32
 8003f7e:	d1fb      	bne.n	8003f78 <recorder::StateMachine(bool)+0xad8>
        QUADSPI->DLR = 0;
 8003f80:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8003f82:	4b34      	ldr	r3, [pc, #208]	@ (8004054 <recorder::StateMachine(bool)+0xbb4>)
 8003f84:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003f86:	4a2b      	ldr	r2, [pc, #172]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003f88:	6893      	ldr	r3, [r2, #8]
 8003f8a:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8003f8e:	d0fb      	beq.n	8003f88 <recorder::StateMachine(bool)+0xae8>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003f90:	f892 5020 	ldrb.w	r5, [r2, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003f94:	4a27      	ldr	r2, [pc, #156]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003f96:	b2ed      	uxtb	r5, r5
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003f98:	6893      	ldr	r3, [r2, #8]
 8003f9a:	079b      	lsls	r3, r3, #30
 8003f9c:	d5fc      	bpl.n	8003f98 <recorder::StateMachine(bool)+0xaf8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	60d3      	str	r3, [r2, #12]
        if (write_in_progress())
 8003fa2:	07eb      	lsls	r3, r5, #31
 8003fa4:	f53f ad45 	bmi.w	8003a32 <recorder::StateMachine(bool)+0x592>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 8003fa8:	b283      	uxth	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 81ff 	bne.w	80043ae <recorder::StateMachine(bool)+0xf0e>
 8003fb0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003fb4:	f080 8308 	bcs.w	80045c8 <recorder::StateMachine(bool)+0x1128>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8003fb8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003fbc:	f080 8287 	bcs.w	80044ce <recorder::StateMachine(bool)+0x102e>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003fc2:	6893      	ldr	r3, [r2, #8]
 8003fc4:	069b      	lsls	r3, r3, #26
 8003fc6:	d4fc      	bmi.n	8003fc2 <recorder::StateMachine(bool)+0xb22>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003fc8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003fcc:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003fce:	4a19      	ldr	r2, [pc, #100]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003fd0:	6893      	ldr	r3, [r2, #8]
 8003fd2:	079d      	lsls	r5, r3, #30
 8003fd4:	d5fc      	bpl.n	8003fd0 <recorder::StateMachine(bool)+0xb30>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003fda:	4a16      	ldr	r2, [pc, #88]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003fdc:	6893      	ldr	r3, [r2, #8]
 8003fde:	069b      	lsls	r3, r3, #26
 8003fe0:	d4fc      	bmi.n	8003fdc <recorder::StateMachine(bool)+0xb3c>
        QUADSPI->CCR =
 8003fe2:	f242 53d7 	movw	r3, #9687	@ 0x25d7
 8003fe6:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 8003fe8:	6190      	str	r0, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003fea:	4a12      	ldr	r2, [pc, #72]	@ (8004034 <recorder::StateMachine(bool)+0xb94>)
 8003fec:	6893      	ldr	r3, [r2, #8]
 8003fee:	079d      	lsls	r5, r3, #30
 8003ff0:	d5fc      	bpl.n	8003fec <recorder::StateMachine(bool)+0xb4c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ff2:	2302      	movs	r3, #2
            location += kEraseGranularity;
 8003ff4:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
            length -= kEraseGranularity;
 8003ff8:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ffc:	60d3      	str	r3, [r2, #12]
        state_.length = length;
 8003ffe:	e9c6 0100 	strd	r0, r1, [r6]
        if (flash_.FinishErase())
 8004002:	2900      	cmp	r1, #0
 8004004:	f47f ad15 	bne.w	8003a32 <recorder::StateMachine(bool)+0x592>
            chain_iter_ = buffer_chain_.begin();
 8004008:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800400a:	2300      	movs	r3, #0
        printf("State: ");
 800400c:	4812      	ldr	r0, [pc, #72]	@ (8004058 <recorder::StateMachine(bool)+0xbb8>)
 800400e:	64f2      	str	r2, [r6, #76]	@ 0x4c
        iter& operator++() {num_++; return *this;}
 8004010:	6533      	str	r3, [r6, #80]	@ 0x50
 8004012:	f006 ffb5 	bl	800af80 <iprintf>
            printf("BEGIN_WRITE\n");
 8004016:	4811      	ldr	r0, [pc, #68]	@ (800405c <recorder::StateMachine(bool)+0xbbc>)
 8004018:	f007 f81a 	bl	800b050 <puts>
 800401c:	2307      	movs	r3, #7
 800401e:	f3bf 8f5b 	dmb	ish
 8004022:	7023      	strb	r3, [r4, #0]
 8004024:	f3bf 8f5b 	dmb	ish
    }
 8004028:	f7ff bb9d 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
 800402c:	e01e01e1 	.word	0xe01e01e1
 8004030:	200108a0 	.word	0x200108a0
 8004034:	52005000 	.word	0x52005000
 8004038:	0800c0ec 	.word	0x0800c0ec
 800403c:	0800c0fc 	.word	0x0800c0fc
 8004040:	0800c104 	.word	0x0800c104
 8004044:	0800c118 	.word	0x0800c118
 8004048:	0800c12c 	.word	0x0800c12c
 800404c:	20010c40 	.word	0x20010c40
 8004050:	2001088c 	.word	0x2001088c
 8004054:	05000105 	.word	0x05000105
 8004058:	0800c058 	.word	0x0800c058
 800405c:	0800c098 	.word	0x0800c098
 8004060:	01002502 	.word	0x01002502
        bool operator==(iter other) const {return num_ == other.num_;}
 8004064:	4bb9      	ldr	r3, [pc, #740]	@ (800434c <recorder::StateMachine(bool)+0xeac>)
 8004066:	6d19      	ldr	r1, [r3, #80]	@ 0x50
        const Link& operator*() {return chain_[num_];}
 8004068:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800406a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
        bool done = (audio_info_.size <= (*chain_iter_).offset);
 800406e:	6998      	ldr	r0, [r3, #24]
 8004070:	eb06 0782 	add.w	r7, r6, r2, lsl #2
 8004074:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            if (sample_memory_.write_complete())
 8004078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800407a:	68bd      	ldr	r5, [r7, #8]
 800407c:	428a      	cmp	r2, r1
 800407e:	f000 8148 	beq.w	8004312 <recorder::StateMachine(bool)+0xe72>
 8004082:	42a8      	cmp	r0, r5
 8004084:	f240 8145 	bls.w	8004312 <recorder::StateMachine(bool)+0xe72>
            return length * sizeof(T);
 8004088:	687a      	ldr	r2, [r7, #4]
        uint32_t remaining = audio_info_.size - link.offset;
 800408a:	1b40      	subs	r0, r0, r5
        return flash_.BeginWrite(address, link.buffer, write_size);
 800408c:	f856 100c 	ldr.w	r1, [r6, ip]
 8004090:	0052      	lsls	r2, r2, #1
        state_ =
 8004092:	6099      	str	r1, [r3, #8]
 8004094:	4282      	cmp	r2, r0
 8004096:	bf28      	it	cs
 8004098:	4602      	movcs	r2, r0
        printf("State: ");
 800409a:	48ad      	ldr	r0, [pc, #692]	@ (8004350 <recorder::StateMachine(bool)+0xeb0>)
 800409c:	605a      	str	r2, [r3, #4]
        uint32_t address = audio_info_.address + link.offset;
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	442a      	add	r2, r5
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f006 ff6c 	bl	800af80 <iprintf>
            printf("WRITE\n");
 80040a8:	48aa      	ldr	r0, [pc, #680]	@ (8004354 <recorder::StateMachine(bool)+0xeb4>)
 80040aa:	f006 ffd1 	bl	800b050 <puts>
 80040ae:	2308      	movs	r3, #8
 80040b0:	f3bf 8f5b 	dmb	ish
 80040b4:	7023      	strb	r3, [r4, #0]
 80040b6:	f3bf 8f5b 	dmb	ish
    }
 80040ba:	f7ff bb54 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        return dirty_ && audio_info_.size > 0;
 80040be:	4ba3      	ldr	r3, [pc, #652]	@ (800434c <recorder::StateMachine(bool)+0xeac>)
 80040c0:	7b5a      	ldrb	r2, [r3, #13]
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	f43f ac4b 	beq.w	800395e <recorder::StateMachine(bool)+0x4be>
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	2a00      	cmp	r2, #0
 80040cc:	f43f ac47 	beq.w	800395e <recorder::StateMachine(bool)+0x4be>
        return flash_.BeginErase(audio_info_.address, erase_size);
 80040d0:	6958      	ldr	r0, [r3, #20]
        if ((location % kEraseGranularity) || (length % kEraseGranularity))
 80040d2:	f3c0 010b 	ubfx	r1, r0, #0, #12
 80040d6:	2900      	cmp	r1, #0
 80040d8:	f040 81c6 	bne.w	8004468 <recorder::StateMachine(bool)+0xfc8>
        uint32_t erase_size = audio_info_.size + granularity - 1;
 80040dc:	f602 72ff 	addw	r2, r2, #4095	@ 0xfff
        state_ =
 80040e0:	6018      	str	r0, [r3, #0]
        printf("State: ");
 80040e2:	489b      	ldr	r0, [pc, #620]	@ (8004350 <recorder::StateMachine(bool)+0xeb0>)
 80040e4:	f36f 020b 	bfc	r2, #0, #12
 80040e8:	6099      	str	r1, [r3, #8]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	f006 ff48 	bl	800af80 <iprintf>
            printf("ERASE\n");
 80040f0:	4899      	ldr	r0, [pc, #612]	@ (8004358 <recorder::StateMachine(bool)+0xeb8>)
 80040f2:	f006 ffad 	bl	800b050 <puts>
 80040f6:	2306      	movs	r3, #6
 80040f8:	f3bf 8f5b 	dmb	ish
 80040fc:	7023      	strb	r3, [r4, #0]
 80040fe:	f3bf 8f5b 	dmb	ish
    }
 8004102:	f7ff bb30 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        iter& operator++() {num_++; return *this;}
 8004106:	6d33      	ldr	r3, [r6, #80]	@ 0x50
        printf("State: ");
 8004108:	4891      	ldr	r0, [pc, #580]	@ (8004350 <recorder::StateMachine(bool)+0xeb0>)
 800410a:	3301      	adds	r3, #1
 800410c:	e780      	b.n	8004010 <recorder::StateMachine(bool)+0xb70>
        if (state_.length == 0)
 800410e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004112:	2a00      	cmp	r2, #0
 8004114:	f43f aefa 	beq.w	8003f0c <recorder::StateMachine(bool)+0xa6c>
 8004118:	e6a9      	b.n	8003e6e <recorder::StateMachine(bool)+0x9ce>
                synthReleaseCounter = 0;
 800411a:	4b90      	ldr	r3, [pc, #576]	@ (800435c <recorder::StateMachine(bool)+0xebc>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f7ff bb21 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
            if (state_ == STATE_STOPPED)
 8004124:	4d8e      	ldr	r5, [pc, #568]	@ (8004360 <recorder::StateMachine(bool)+0xec0>)
 8004126:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 80ff 	bne.w	800432e <recorder::StateMachine(bool)+0xe8e>
 8004130:	498c      	ldr	r1, [pc, #560]	@ (8004364 <recorder::StateMachine(bool)+0xec4>)
 8004132:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8004136:	2200      	movs	r2, #0
 8004138:	4b8b      	ldr	r3, [pc, #556]	@ (8004368 <recorder::StateMachine(bool)+0xec8>)
 800413a:	6188      	str	r0, [r1, #24]
                dac_.Start();
 800413c:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 8004140:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8004144:	2201      	movs	r2, #1
 8004146:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 800414a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800414e:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8004150:	f002 fc0a 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 8004154:	1d28      	adds	r0, r5, #4
 8004156:	f002 f907 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 800415a:	4628      	mov	r0, r5
 800415c:	f002 fbf0 	bl	8006940 <recorder::Analog::StartTimer()>
                idle_timeout_ = 0; // Reset timeout on activity
 8004160:	4b82      	ldr	r3, [pc, #520]	@ (800436c <recorder::StateMachine(bool)+0xecc>)
 8004162:	2200      	movs	r2, #0
        printf("State: ");
 8004164:	487a      	ldr	r0, [pc, #488]	@ (8004350 <recorder::StateMachine(bool)+0xeb0>)
                idle_timeout_ = 0; // Reset timeout on activity
 8004166:	601a      	str	r2, [r3, #0]
        printf("State: ");
 8004168:	f006 ff0a 	bl	800af80 <iprintf>
            printf("SYNTH\n");
 800416c:	4880      	ldr	r0, [pc, #512]	@ (8004370 <recorder::StateMachine(bool)+0xed0>)
 800416e:	f006 ff6f 	bl	800b050 <puts>
 8004172:	2301      	movs	r3, #1
 8004174:	f3bf 8f5b 	dmb	ish
 8004178:	7023      	strb	r3, [r4, #0]
 800417a:	f3bf 8f5b 	dmb	ish
    }
 800417e:	f7ff baf2 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        if (0 == std::memcmp(&block_.data, &data, sizeof(T)))
 8004182:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004186:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800418a:	429a      	cmp	r2, r3
 800418c:	f47f ade1 	bne.w	8003d52 <recorder::StateMachine(bool)+0x8b2>
 8004190:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8004194:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8004198:	429a      	cmp	r2, r3
 800419a:	f47f adda 	bne.w	8003d52 <recorder::StateMachine(bool)+0x8b2>
 800419e:	f1a8 0620 	sub.w	r6, r8, #32
 80041a2:	e6b3      	b.n	8003f0c <recorder::StateMachine(bool)+0xa6c>
        int32_t next_block_n = current_block_n;
 80041a4:	f240 2721 	movw	r7, #545	@ 0x221
            next_block_n = (next_block_n + 1) % kNumBlocks;
 80041a8:	f8df b1e0 	ldr.w	fp, [pc, #480]	@ 800438c <recorder::StateMachine(bool)+0xeec>
 80041ac:	f240 2a22 	movw	sl, #546	@ 0x222
        uint32_t page_n = block_n / kBlocksPerPage;
 80041b0:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8004374 <recorder::StateMachine(bool)+0xed4>
 80041b4:	e000      	b.n	80041b8 <recorder::StateMachine(bool)+0xd18>
        while (next_block_n != current_block_n);
 80041b6:	b30b      	cbz	r3, 80041fc <recorder::StateMachine(bool)+0xd5c>
            next_block_n = (next_block_n + 1) % kNumBlocks;
 80041b8:	3701      	adds	r7, #1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 80041ba:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
            next_block_n = (next_block_n + 1) % kNumBlocks;
 80041bc:	087b      	lsrs	r3, r7, #1
 80041be:	fbab 2303 	umull	r2, r3, fp, r3
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 80041c2:	220f      	movs	r2, #15
            next_block_n = (next_block_n + 1) % kNumBlocks;
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	fb0a 7713 	mls	r7, sl, r3, r7
        uint32_t page_n = block_n / kBlocksPerPage;
 80041ca:	fba9 1307 	umull	r1, r3, r9, r7
 80041ce:	1af9      	subs	r1, r7, r3
 80041d0:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80041d4:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 80041d6:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 80041da:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80041de:	1a79      	subs	r1, r7, r1
 80041e0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80041e4:	eb01 3503 	add.w	r5, r1, r3, lsl #12
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc fbcd 	bl	8000988 <recorder::Flash::Writable(unsigned long, unsigned long)>
        while (next_block_n != current_block_n);
 80041ee:	f240 2221 	movw	r2, #545	@ 0x221
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 80041f2:	f080 0301 	eor.w	r3, r0, #1
        while (next_block_n != current_block_n);
 80041f6:	4297      	cmp	r7, r2
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	d1dc      	bne.n	80041b6 <recorder::StateMachine(bool)+0xd16>
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 80041fc:	f240 2221 	movw	r2, #545	@ 0x221
        sequence_++;
 8004200:	6b73      	ldr	r3, [r6, #52]	@ 0x34
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8004202:	4297      	cmp	r7, r2
        sequence_++;
 8004204:	f103 0301 	add.w	r3, r3, #1
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8004208:	f47f adee 	bne.w	8003de8 <recorder::StateMachine(bool)+0x948>
            if (active_block_n_ == -1)
 800420c:	6b32      	ldr	r2, [r6, #48]	@ 0x30
                if (!nvmem_.Erase(0, kRegionSize))
 800420e:	f8d6 c038 	ldr.w	ip, [r6, #56]	@ 0x38
            if (active_block_n_ == -1)
 8004212:	1c51      	adds	r1, r2, #1
        sequence_++;
 8004214:	6373      	str	r3, [r6, #52]	@ 0x34
            if (active_block_n_ == -1)
 8004216:	f000 80d5 	beq.w	80043c4 <recorder::StateMachine(bool)+0xf24>
                uint32_t current_page = active_block_n_ / kBlocksPerPage;
 800421a:	4b56      	ldr	r3, [pc, #344]	@ (8004374 <recorder::StateMachine(bool)+0xed4>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800421c:	2002      	movs	r0, #2
        QUADSPI->CCR =
 800421e:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8004390 <recorder::StateMachine(bool)+0xef0>
 8004222:	fba3 1302 	umull	r1, r3, r3, r2
        state_ =
 8004226:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800422a:	1ad2      	subs	r2, r2, r3
 800422c:	f8cc 1004 	str.w	r1, [ip, #4]
 8004230:	eb03 0352 	add.w	r3, r3, r2, lsr #1
                next_block = next_page * kBlocksPerPage;
 8004234:	f240 1211 	movw	r2, #273	@ 0x111
                uint32_t current_page = active_block_n_ / kBlocksPerPage;
 8004238:	0a1b      	lsrs	r3, r3, #8
                uint32_t next_page = (current_page + 1) % kNumPages;
 800423a:	3301      	adds	r3, #1
 800423c:	f003 0501 	and.w	r5, r3, #1
                next_block = next_page * kBlocksPerPage;
 8004240:	f343 0300 	sbfx	r3, r3, #0, #1
                if (!nvmem_.Erase(next_page * kPageSize, kPageSize))
 8004244:	032d      	lsls	r5, r5, #12
                next_block = next_page * kBlocksPerPage;
 8004246:	ea03 0702 	and.w	r7, r3, r2
 800424a:	2300      	movs	r3, #0
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800424c:	4a4a      	ldr	r2, [pc, #296]	@ (8004378 <recorder::StateMachine(bool)+0xed8>)
        state_ =
 800424e:	f8cc 5000 	str.w	r5, [ip]
 8004252:	f8cc 3008 	str.w	r3, [ip, #8]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004256:	6893      	ldr	r3, [r2, #8]
 8004258:	f013 0320 	ands.w	r3, r3, #32
 800425c:	d1fb      	bne.n	8004256 <recorder::StateMachine(bool)+0xdb6>
        QUADSPI->DLR = 0;
 800425e:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8004260:	f8c2 e014 	str.w	lr, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004264:	6893      	ldr	r3, [r2, #8]
 8004266:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 800426a:	d0fb      	beq.n	8004264 <recorder::StateMachine(bool)+0xdc4>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 800426c:	f892 1020 	ldrb.w	r1, [r2, #32]
 8004270:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004272:	6893      	ldr	r3, [r2, #8]
 8004274:	079b      	lsls	r3, r3, #30
 8004276:	d5fc      	bpl.n	8004272 <recorder::StateMachine(bool)+0xdd2>
        if (write_in_progress())
 8004278:	07c9      	lsls	r1, r1, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800427a:	60d0      	str	r0, [r2, #12]
        if (write_in_progress())
 800427c:	d4eb      	bmi.n	8004256 <recorder::StateMachine(bool)+0xdb6>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800427e:	4a3e      	ldr	r2, [pc, #248]	@ (8004378 <recorder::StateMachine(bool)+0xed8>)
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	069b      	lsls	r3, r3, #26
 8004284:	d4fc      	bmi.n	8004280 <recorder::StateMachine(bool)+0xde0>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8004286:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800428a:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800428c:	4a3a      	ldr	r2, [pc, #232]	@ (8004378 <recorder::StateMachine(bool)+0xed8>)
 800428e:	6893      	ldr	r3, [r2, #8]
 8004290:	0798      	lsls	r0, r3, #30
 8004292:	d5fc      	bpl.n	800428e <recorder::StateMachine(bool)+0xdee>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004294:	2302      	movs	r3, #2
 8004296:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004298:	4a37      	ldr	r2, [pc, #220]	@ (8004378 <recorder::StateMachine(bool)+0xed8>)
 800429a:	6893      	ldr	r3, [r2, #8]
 800429c:	0699      	lsls	r1, r3, #26
 800429e:	d4fc      	bmi.n	800429a <recorder::StateMachine(bool)+0xdfa>
        QUADSPI->CCR =
 80042a0:	f242 53d7 	movw	r3, #9687	@ 0x25d7
 80042a4:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 80042a6:	6195      	str	r5, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80042a8:	4a33      	ldr	r2, [pc, #204]	@ (8004378 <recorder::StateMachine(bool)+0xed8>)
 80042aa:	6893      	ldr	r3, [r2, #8]
 80042ac:	079b      	lsls	r3, r3, #30
 80042ae:	d5fc      	bpl.n	80042aa <recorder::StateMachine(bool)+0xe0a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80042b0:	2302      	movs	r3, #2
 80042b2:	60d3      	str	r3, [r2, #12]
        state_.length = length;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8cc 3004 	str.w	r3, [ip, #4]
            location += kEraseGranularity;
 80042ba:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
        state_.location = location;
 80042be:	f8cc 3000 	str.w	r3, [ip]
        block_.sequence_num = sequence_;
 80042c2:	f8b6 e034 	ldrh.w	lr, [r6, #52]	@ 0x34
 80042c6:	e594      	b.n	8003df2 <recorder::StateMachine(bool)+0x952>
                if ((++playback_timeout_ == kPlaybackExpireTime * 1000) ||
 80042c8:	492c      	ldr	r1, [pc, #176]	@ (800437c <recorder::StateMachine(bool)+0xedc>)
 80042ca:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8004380 <recorder::StateMachine(bool)+0xee0>
 80042ce:	680b      	ldr	r3, [r1, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	ee07 3a10 	vmov	s14, r3
 80042d6:	600b      	str	r3, [r1, #0]
 80042d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004384 <recorder::StateMachine(bool)+0xee4>)
 80042da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042de:	eeb4 7a67 	vcmp.f32	s14, s15
 80042e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e6:	d068      	beq.n	80043ba <recorder::StateMachine(bool)+0xf1a>
 80042e8:	6838      	ldr	r0, [r7, #0]
            return state_ == STATE_PLAYING;
 80042ea:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 80042ee:	2801      	cmp	r0, #1
 80042f0:	d007      	beq.n	8004302 <recorder::StateMachine(bool)+0xe62>
                else if (playback_.ended())
 80042f2:	2900      	cmp	r1, #0
 80042f4:	f47f aa37 	bne.w	8003766 <recorder::StateMachine(bool)+0x2c6>
                cue_stop_ = true;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            }
        }
 80042fe:	f7ff ba32 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
                    (play_button_.rising() && playback_.playing()))
 8004302:	2902      	cmp	r1, #2
 8004304:	d059      	beq.n	80043ba <recorder::StateMachine(bool)+0xf1a>
                else if (play_button_.rising() && playback_.stopping())
 8004306:	2901      	cmp	r1, #1
 8004308:	d1f3      	bne.n	80042f2 <recorder::StateMachine(bool)+0xe52>
            cue_play_ = true;
 800430a:	f883 1031 	strb.w	r1, [r3, #49]	@ 0x31
        }
 800430e:	f7ff ba2a 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        printf("State: ");
 8004312:	480f      	ldr	r0, [pc, #60]	@ (8004350 <recorder::StateMachine(bool)+0xeb0>)
 8004314:	f006 fe34 	bl	800af80 <iprintf>
            printf("COMMIT\n");
 8004318:	481b      	ldr	r0, [pc, #108]	@ (8004388 <recorder::StateMachine(bool)+0xee8>)
 800431a:	f006 fe99 	bl	800b050 <puts>
 800431e:	2309      	movs	r3, #9
 8004320:	f3bf 8f5b 	dmb	ish
 8004324:	7023      	strb	r3, [r4, #0]
 8004326:	f3bf 8f5b 	dmb	ish
    }
 800432a:	f7ff ba1c 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800432e:	2b02      	cmp	r3, #2
 8004330:	f47f af16 	bne.w	8004160 <recorder::StateMachine(bool)+0xcc0>
 8004334:	490b      	ldr	r1, [pc, #44]	@ (8004364 <recorder::StateMachine(bool)+0xec4>)
 8004336:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <recorder::StateMachine(bool)+0xec8>)
 800433c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004340:	6188      	str	r0, [r1, #24]
 8004342:	619a      	str	r2, [r3, #24]
    }
 8004344:	e70c      	b.n	8004160 <recorder::StateMachine(bool)+0xcc0>
        while (size >= 4)
 8004346:	4622      	mov	r2, r4
 8004348:	4663      	mov	r3, ip
 800434a:	e494      	b.n	8003c76 <recorder::StateMachine(bool)+0x7d6>
 800434c:	2001088c 	.word	0x2001088c
 8004350:	0800c058 	.word	0x0800c058
 8004354:	0800c0a4 	.word	0x0800c0a4
 8004358:	0800c090 	.word	0x0800c090
 800435c:	2000041c 	.word	0x2000041c
 8004360:	20010c40 	.word	0x20010c40
 8004364:	58021800 	.word	0x58021800
 8004368:	58020400 	.word	0x58020400
 800436c:	200108e8 	.word	0x200108e8
 8004370:	0800c068 	.word	0x0800c068
 8004374:	e01e01e1 	.word	0xe01e01e1
 8004378:	52005000 	.word	0x52005000
 800437c:	200108e4 	.word	0x200108e4
 8004380:	48927c00 	.word	0x48927c00
 8004384:	20000580 	.word	0x20000580
 8004388:	0800c0ac 	.word	0x0800c0ac
 800438c:	f00f00f1 	.word	0xf00f00f1
 8004390:	05000105 	.word	0x05000105
 8004394:	2b02      	cmp	r3, #2
 8004396:	f47f abaa 	bne.w	8003aee <recorder::StateMachine(bool)+0x64e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800439a:	49a6      	ldr	r1, [pc, #664]	@ (8004634 <recorder::StateMachine(bool)+0x1194>)
 800439c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80043a0:	4ba5      	ldr	r3, [pc, #660]	@ (8004638 <recorder::StateMachine(bool)+0x1198>)
 80043a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043a6:	6188      	str	r0, [r1, #24]
 80043a8:	619a      	str	r2, [r3, #24]
    }
 80043aa:	f7ff bba0 	b.w	8003aee <recorder::StateMachine(bool)+0x64e>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 80043ae:	f3c0 030e 	ubfx	r3, r0, #0, #15
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f47f ae04 	bne.w	8003fc0 <recorder::StateMachine(bool)+0xb20>
 80043b8:	e5fe      	b.n	8003fb8 <recorder::StateMachine(bool)+0xb18>
            cue_stop_ = true;
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        }
 80043c0:	f7ff b9d1 	b.w	8003766 <recorder::StateMachine(bool)+0x2c6>
        state_ =
 80043c4:	2100      	movs	r1, #0
 80043c6:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80043ca:	4b9c      	ldr	r3, [pc, #624]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80043cc:	2002      	movs	r0, #2
        QUADSPI->CCR =
 80043ce:	4f9c      	ldr	r7, [pc, #624]	@ (8004640 <recorder::StateMachine(bool)+0x11a0>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80043d0:	f44f 7983 	mov.w	r9, #262	@ 0x106
        QUADSPI->CCR =
 80043d4:	f242 5ed7 	movw	lr, #9687	@ 0x25d7
        state_ =
 80043d8:	f8cc 1000 	str.w	r1, [ip]
 80043dc:	f8cc 1008 	str.w	r1, [ip, #8]
 80043e0:	f8cc 5004 	str.w	r5, [ip, #4]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	f012 0220 	ands.w	r2, r2, #32
 80043ea:	d1fb      	bne.n	80043e4 <recorder::StateMachine(bool)+0xf44>
        QUADSPI->DLR = 0;
 80043ec:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 80043ee:	615f      	str	r7, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	f412 5f7c 	tst.w	r2, #16128	@ 0x3f00
 80043f6:	d0fb      	beq.n	80043f0 <recorder::StateMachine(bool)+0xf50>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80043f8:	f893 a020 	ldrb.w	sl, [r3, #32]
 80043fc:	fa5f fa8a 	uxtb.w	sl, sl
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	0792      	lsls	r2, r2, #30
 8004404:	d5fc      	bpl.n	8004400 <recorder::StateMachine(bool)+0xf60>
        if (write_in_progress())
 8004406:	f01a 0f01 	tst.w	sl, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800440a:	60d8      	str	r0, [r3, #12]
        if (write_in_progress())
 800440c:	d1ea      	bne.n	80043e4 <recorder::StateMachine(bool)+0xf44>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 800440e:	b28a      	uxth	r2, r1
 8004410:	bb2a      	cbnz	r2, 800445e <recorder::StateMachine(bool)+0xfbe>
 8004412:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8004416:	f080 80a9 	bcs.w	800456c <recorder::StateMachine(bool)+0x10cc>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 800441a:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 800441e:	d228      	bcs.n	8004472 <recorder::StateMachine(bool)+0xfd2>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	0692      	lsls	r2, r2, #26
 8004424:	d4fc      	bmi.n	8004420 <recorder::StateMachine(bool)+0xf80>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8004426:	f8c3 9014 	str.w	r9, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	0792      	lsls	r2, r2, #30
 800442e:	d5fc      	bpl.n	800442a <recorder::StateMachine(bool)+0xf8a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004430:	60d8      	str	r0, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	0692      	lsls	r2, r2, #26
 8004436:	d4fc      	bmi.n	8004432 <recorder::StateMachine(bool)+0xf92>
        QUADSPI->CCR =
 8004438:	f8c3 e014 	str.w	lr, [r3, #20]
        QUADSPI->AR = address;
 800443c:	6199      	str	r1, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	0792      	lsls	r2, r2, #30
 8004442:	d5fc      	bpl.n	800443e <recorder::StateMachine(bool)+0xf9e>
            location += kEraseGranularity;
 8004444:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
            length -= kEraseGranularity;
 8004448:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800444c:	60d8      	str	r0, [r3, #12]
        state_.location = location;
 800444e:	e9cc 1500 	strd	r1, r5, [ip]
        while (!FinishErase());
 8004452:	2d00      	cmp	r5, #0
 8004454:	d1c6      	bne.n	80043e4 <recorder::StateMachine(bool)+0xf44>
 8004456:	46ae      	mov	lr, r5
                next_block = 0;
 8004458:	462f      	mov	r7, r5
                sequence_ = 0;
 800445a:	6375      	str	r5, [r6, #52]	@ 0x34
 800445c:	e4c9      	b.n	8003df2 <recorder::StateMachine(bool)+0x952>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 800445e:	f3c1 020e 	ubfx	r2, r1, #0, #15
 8004462:	2a00      	cmp	r2, #0
 8004464:	d1dc      	bne.n	8004420 <recorder::StateMachine(bool)+0xf80>
 8004466:	e7d8      	b.n	800441a <recorder::StateMachine(bool)+0xf7a>
                    printf("Erase failed\n");
 8004468:	4876      	ldr	r0, [pc, #472]	@ (8004644 <recorder::StateMachine(bool)+0x11a4>)
 800446a:	f006 fdf1 	bl	800b050 <puts>
 800446e:	f7ff ba76 	b.w	800395e <recorder::StateMachine(bool)+0x4be>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004472:	4a72      	ldr	r2, [pc, #456]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 8004474:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8004478:	f01a 0f20 	tst.w	sl, #32
 800447c:	d1fa      	bne.n	8004474 <recorder::StateMachine(bool)+0xfd4>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800447e:	f44f 7a83 	mov.w	sl, #262	@ 0x106
 8004482:	f8c2 a014 	str.w	sl, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004486:	4a6d      	ldr	r2, [pc, #436]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 8004488:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800448c:	f01a 0f02 	tst.w	sl, #2
 8004490:	d0fa      	beq.n	8004488 <recorder::StateMachine(bool)+0xfe8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004492:	f04f 0a02 	mov.w	sl, #2
 8004496:	f8c2 a00c 	str.w	sl, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800449a:	4a68      	ldr	r2, [pc, #416]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 800449c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80044a0:	f01a 0f20 	tst.w	sl, #32
 80044a4:	d1fa      	bne.n	800449c <recorder::StateMachine(bool)+0xffc>
        QUADSPI->CCR =
 80044a6:	f242 5a52 	movw	sl, #9554	@ 0x2552
 80044aa:	f8c2 a014 	str.w	sl, [r2, #20]
        QUADSPI->AR = address;
 80044ae:	6191      	str	r1, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80044b0:	4a62      	ldr	r2, [pc, #392]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80044b2:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80044b6:	f01a 0f02 	tst.w	sl, #2
 80044ba:	d0fa      	beq.n	80044b2 <recorder::StateMachine(bool)+0x1012>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044bc:	f04f 0a02 	mov.w	sl, #2
            location += kBlock32Size;
 80044c0:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
            length -= kBlock32Size;
 80044c4:	f5a5 4500 	sub.w	r5, r5, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044c8:	f8c2 a00c 	str.w	sl, [r2, #12]
            length -= kBlock32Size;
 80044cc:	e7bf      	b.n	800444e <recorder::StateMachine(bool)+0xfae>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80044ce:	4b5b      	ldr	r3, [pc, #364]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	0695      	lsls	r5, r2, #26
 80044d4:	d4fc      	bmi.n	80044d0 <recorder::StateMachine(bool)+0x1030>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80044d6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80044da:	615a      	str	r2, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80044dc:	4b57      	ldr	r3, [pc, #348]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	0792      	lsls	r2, r2, #30
 80044e2:	d5fc      	bpl.n	80044de <recorder::StateMachine(bool)+0x103e>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044e4:	2202      	movs	r2, #2
 80044e6:	60da      	str	r2, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80044e8:	4b54      	ldr	r3, [pc, #336]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	0695      	lsls	r5, r2, #26
 80044ee:	d4fc      	bmi.n	80044ea <recorder::StateMachine(bool)+0x104a>
        QUADSPI->CCR =
 80044f0:	f242 5252 	movw	r2, #9554	@ 0x2552
 80044f4:	615a      	str	r2, [r3, #20]
        QUADSPI->AR = address;
 80044f6:	6198      	str	r0, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80044f8:	4b50      	ldr	r3, [pc, #320]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	0792      	lsls	r2, r2, #30
 80044fe:	d5fc      	bpl.n	80044fa <recorder::StateMachine(bool)+0x105a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004500:	2202      	movs	r2, #2
            location += kBlock32Size;
 8004502:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
            length -= kBlock32Size;
 8004506:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800450a:	60da      	str	r2, [r3, #12]
            length -= kBlock32Size;
 800450c:	e577      	b.n	8003ffe <recorder::StateMachine(bool)+0xb5e>
 800450e:	6839      	ldr	r1, [r7, #0]
                else if (checkRecordPlayback(record, play_button_.is_high())) {
 8004510:	4660      	mov	r0, ip
 8004512:	f001 0101 	and.w	r1, r1, #1
 8004516:	f7fe fe97 	bl	8003248 <recorder::checkRecordPlayback(bool, bool)>
 800451a:	2800      	cmp	r0, #0
 800451c:	f47f aaeb 	bne.w	8003af6 <recorder::StateMachine(bool)+0x656>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8004520:	4a49      	ldr	r2, [pc, #292]	@ (8004648 <recorder::StateMachine(bool)+0x11a8>)
                else if (kEnableIdleStandby &&
 8004522:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800464c <recorder::StateMachine(bool)+0x11ac>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	ee07 3a10 	vmov	s14, r3
                else if (kEnableIdleStandby &&
 800452e:	6013      	str	r3, [r2, #0]
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8004530:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                else if (kEnableIdleStandby &&
 8004534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	f77f aadb 	ble.w	8003af6 <recorder::StateMachine(bool)+0x656>
            if (state_ == STATE_STOPPED)
 8004540:	4843      	ldr	r0, [pc, #268]	@ (8004650 <recorder::StateMachine(bool)+0x11b0>)
 8004542:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8088 	bne.w	800465c <recorder::StateMachine(bool)+0x11bc>
 800454c:	2101      	movs	r1, #1
 800454e:	f7fc f901 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
            is_active_ = true;
 8004552:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <recorder::StateMachine(bool)+0x11b4>)
 8004554:	2001      	movs	r0, #1
            current_note_ = 0;
 8004556:	2200      	movs	r2, #0
 8004558:	493f      	ldr	r1, [pc, #252]	@ (8004658 <recorder::StateMachine(bool)+0x11b8>)
            is_active_ = true;
 800455a:	8198      	strh	r0, [r3, #12]
                    Transition(STATE_ENDING);
 800455c:	200c      	movs	r0, #12
 800455e:	6059      	str	r1, [r3, #4]
            note_timer_ = 0;
 8004560:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8004564:	f7fe fe08 	bl	8003178 <recorder::Transition(recorder::State)>
 8004568:	f7ff bac5 	b.w	8003af6 <recorder::StateMachine(bool)+0x656>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800456c:	4a33      	ldr	r2, [pc, #204]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 800456e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8004572:	f01a 0f20 	tst.w	sl, #32
 8004576:	d1fa      	bne.n	800456e <recorder::StateMachine(bool)+0x10ce>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8004578:	f44f 7a83 	mov.w	sl, #262	@ 0x106
 800457c:	f8c2 a014 	str.w	sl, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004580:	4a2e      	ldr	r2, [pc, #184]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 8004582:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8004586:	f01a 0f02 	tst.w	sl, #2
 800458a:	d0fa      	beq.n	8004582 <recorder::StateMachine(bool)+0x10e2>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800458c:	f04f 0a02 	mov.w	sl, #2
 8004590:	f8c2 a00c 	str.w	sl, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004594:	4a29      	ldr	r2, [pc, #164]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 8004596:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800459a:	f01a 0f20 	tst.w	sl, #32
 800459e:	d1fa      	bne.n	8004596 <recorder::StateMachine(bool)+0x10f6>
        QUADSPI->CCR =
 80045a0:	f242 5ad8 	movw	sl, #9688	@ 0x25d8
 80045a4:	f8c2 a014 	str.w	sl, [r2, #20]
        QUADSPI->AR = address;
 80045a8:	6191      	str	r1, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80045aa:	4a24      	ldr	r2, [pc, #144]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80045ac:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80045b0:	f01a 0f02 	tst.w	sl, #2
 80045b4:	d0fa      	beq.n	80045ac <recorder::StateMachine(bool)+0x110c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80045b6:	f04f 0a02 	mov.w	sl, #2
            location += kBlock64Size;
 80045ba:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
            length -= kBlock64Size;
 80045be:	f5a5 3580 	sub.w	r5, r5, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80045c2:	f8c2 a00c 	str.w	sl, [r2, #12]
            length -= kBlock64Size;
 80045c6:	e742      	b.n	800444e <recorder::StateMachine(bool)+0xfae>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80045c8:	4b1c      	ldr	r3, [pc, #112]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	0695      	lsls	r5, r2, #26
 80045ce:	d4fc      	bmi.n	80045ca <recorder::StateMachine(bool)+0x112a>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80045d0:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80045d4:	615a      	str	r2, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80045d6:	4b19      	ldr	r3, [pc, #100]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	0792      	lsls	r2, r2, #30
 80045dc:	d5fc      	bpl.n	80045d8 <recorder::StateMachine(bool)+0x1138>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80045de:	2202      	movs	r2, #2
 80045e0:	60da      	str	r2, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80045e2:	4b16      	ldr	r3, [pc, #88]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	0695      	lsls	r5, r2, #26
 80045e8:	d4fc      	bmi.n	80045e4 <recorder::StateMachine(bool)+0x1144>
        QUADSPI->CCR =
 80045ea:	f242 52d8 	movw	r2, #9688	@ 0x25d8
 80045ee:	615a      	str	r2, [r3, #20]
        QUADSPI->AR = address;
 80045f0:	6198      	str	r0, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <recorder::StateMachine(bool)+0x119c>)
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	0792      	lsls	r2, r2, #30
 80045f8:	d5fc      	bpl.n	80045f4 <recorder::StateMachine(bool)+0x1154>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80045fa:	2202      	movs	r2, #2
            location += kBlock64Size;
 80045fc:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
            length -= kBlock64Size;
 8004600:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004604:	60da      	str	r2, [r3, #12]
            length -= kBlock64Size;
 8004606:	e4fa      	b.n	8003ffe <recorder::StateMachine(bool)+0xb5e>
 8004608:	4811      	ldr	r0, [pc, #68]	@ (8004650 <recorder::StateMachine(bool)+0x11b0>)
                idle_timeout_ = 0;
 800460a:	6011      	str	r1, [r2, #0]
 800460c:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 8004610:	bb83      	cbnz	r3, 8004674 <recorder::StateMachine(bool)+0x11d4>
 8004612:	2101      	movs	r1, #1
 8004614:	f7fc f89e 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
            is_active_ = true;
 8004618:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <recorder::StateMachine(bool)+0x11b4>)
            current_note_ = 0;
 800461a:	2200      	movs	r2, #0
            is_active_ = true;
 800461c:	2401      	movs	r4, #1
 800461e:	490e      	ldr	r1, [pc, #56]	@ (8004658 <recorder::StateMachine(bool)+0x11b8>)
                Transition(STATE_ENDING);
 8004620:	200c      	movs	r0, #12
            current_note_ = 0;
 8004622:	611a      	str	r2, [r3, #16]
            is_active_ = true;
 8004624:	819c      	strh	r4, [r3, #12]
            note_timer_ = 0;
 8004626:	615a      	str	r2, [r3, #20]
 8004628:	6059      	str	r1, [r3, #4]
    }
 800462a:	b005      	add	sp, #20
 800462c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                Transition(STATE_ENDING);
 8004630:	f7fe bda2 	b.w	8003178 <recorder::Transition(recorder::State)>
 8004634:	58021800 	.word	0x58021800
 8004638:	58020400 	.word	0x58020400
 800463c:	52005000 	.word	0x52005000
 8004640:	05000105 	.word	0x05000105
 8004644:	0800c0cc 	.word	0x0800c0cc
 8004648:	200108e8 	.word	0x200108e8
 800464c:	46ea6000 	.word	0x46ea6000
 8004650:	20010c40 	.word	0x20010c40
 8004654:	20010910 	.word	0x20010910
 8004658:	3e6c2ad7 	.word	0x3e6c2ad7
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800465c:	2b02      	cmp	r3, #2
 800465e:	f47f af78 	bne.w	8004552 <recorder::StateMachine(bool)+0x10b2>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004662:	490a      	ldr	r1, [pc, #40]	@ (800468c <recorder::StateMachine(bool)+0x11ec>)
 8004664:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004668:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <recorder::StateMachine(bool)+0x11f0>)
 800466a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800466e:	6188      	str	r0, [r1, #24]
 8004670:	619a      	str	r2, [r3, #24]
    }
 8004672:	e76e      	b.n	8004552 <recorder::StateMachine(bool)+0x10b2>
 8004674:	2b02      	cmp	r3, #2
 8004676:	d1cf      	bne.n	8004618 <recorder::StateMachine(bool)+0x1178>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004678:	4904      	ldr	r1, [pc, #16]	@ (800468c <recorder::StateMachine(bool)+0x11ec>)
 800467a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800467e:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <recorder::StateMachine(bool)+0x11f0>)
 8004680:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004684:	6188      	str	r0, [r1, #24]
 8004686:	619a      	str	r2, [r3, #24]
    }
 8004688:	e7c6      	b.n	8004618 <recorder::StateMachine(bool)+0x1178>
 800468a:	bf00      	nop
 800468c:	58021800 	.word	0x58021800
 8004690:	58020400 	.word	0x58020400

08004694 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>:
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8004694:	f500 3380 	add.w	r3, r0, #65536	@ 0x10000
        position_ = 0;
 8004698:	2200      	movs	r2, #0
        state_ = STATE_STOPPED;
 800469a:	2100      	movs	r1, #0
        t_scaler_ = 0.5 / softness;
 800469c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
        softness_ = softness;
 80046a0:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 80046a4:	eddf 7a81 	vldr	s15, [pc, #516]	@ 80048ac <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x218>
            sections_[n].b[0] = sections[n].b[0];
 80046a8:	ed9f 6a81 	vldr	s12, [pc, #516]	@ 80048b0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x21c>
            buffer_[i] = 0;
 80046ac:	3034      	adds	r0, #52	@ 0x34
        b0_ = (1 - cos(omega)) / 2;
        b1_ = 1 - cos(omega);
        b2_ = (1 - cos(omega)) / 2;

        // Scaling coefficients for unity gain at DC
        b0_ /= a0_;
 80046ae:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80048b4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x220>
        void Init(void)
 80046b2:	b530      	push	{r4, r5, lr}
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 80046b4:	4d80      	ldr	r5, [pc, #512]	@ (80048b8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x224>)
        position_ = 0;
 80046b6:	f840 2c20 	str.w	r2, [r0, #-32]
        fade_out_ = 0;
 80046ba:	f840 2c10 	str.w	r2, [r0, #-16]
        state_ = STATE_STOPPED;
 80046be:	f800 1c1c 	strb.w	r1, [r0, #-28]
 80046c2:	639d      	str	r5, [r3, #56]	@ 0x38
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046c4:	4d7d      	ldr	r5, [pc, #500]	@ (80048bc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x228>)
        ratio_ = 1 / ratio - 1;
 80046c6:	4c7e      	ldr	r4, [pc, #504]	@ (80048c0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x22c>)
 80046c8:	649d      	str	r5, [r3, #72]	@ 0x48
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 80046ca:	4d7e      	ldr	r5, [pc, #504]	@ (80048c4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x230>)
 80046cc:	63dc      	str	r4, [r3, #60]	@ 0x3c
 80046ce:	64dd      	str	r5, [r3, #76]	@ 0x4c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046d0:	f44f 65c8 	mov.w	r5, #1600	@ 0x640
        softness_ = softness;
 80046d4:	f8c3 c040 	str.w	ip, [r3, #64]	@ 0x40
 80046d8:	651d      	str	r5, [r3, #80]	@ 0x50
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046da:	4d7b      	ldr	r5, [pc, #492]	@ (80048c8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x234>)
        envelope_ = 0;
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046de:	65dd      	str	r5, [r3, #92]	@ 0x5c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046e0:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
        envelope_ = 0;
 80046e4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046e6:	665d      	str	r5, [r3, #100]	@ 0x64
        num_sections_ = num_sections;
 80046e8:	2505      	movs	r5, #5
 80046ea:	675a      	str	r2, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 80046ec:	679a      	str	r2, [r3, #120]	@ 0x78
            x_[n][0] = 0;
 80046ee:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 80046f2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 80046f6:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            x_[n][0] = 0;
 80046fa:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 80046fe:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 8004702:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            x_[n][0] = 0;
 8004706:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 800470a:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 800470e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            x_[n][0] = 0;
 8004712:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8004716:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 800471a:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
        hold_count_ = 0;
 800471e:	6559      	str	r1, [r3, #84]	@ 0x54
 8004720:	6699      	str	r1, [r3, #104]	@ 0x68
        write_head_ = 0;
 8004722:	6359      	str	r1, [r3, #52]	@ 0x34
        t_scaler_ = 0.5 / softness;
 8004724:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
        num_sections_ = num_sections;
 8004728:	f8c3 5114 	str.w	r5, [r3, #276]	@ 0x114
            sections_[n].b[0] = sections[n].b[0];
 800472c:	f8c3 c12c 	str.w	ip, [r3, #300]	@ 0x12c
            sections_[n].b[2] = sections[n].b[2];
 8004730:	f8c3 c134 	str.w	ip, [r3, #308]	@ 0x134
            sections_[n].b[0] = sections[n].b[0];
 8004734:	f8c3 c140 	str.w	ip, [r3, #320]	@ 0x140
            sections_[n].b[2] = sections[n].b[2];
 8004738:	f8c3 c148 	str.w	ip, [r3, #328]	@ 0x148
            sections_[n].b[0] = sections[n].b[0];
 800473c:	f8c3 c154 	str.w	ip, [r3, #340]	@ 0x154
            sections_[n].b[2] = sections[n].b[2];
 8004740:	f8c3 c15c 	str.w	ip, [r3, #348]	@ 0x15c
            sections_[n].b[0] = sections[n].b[0];
 8004744:	f8c3 c168 	str.w	ip, [r3, #360]	@ 0x168
            sections_[n].b[2] = sections[n].b[2];
 8004748:	f8c3 c170 	str.w	ip, [r3, #368]	@ 0x170
            sections_[n].b[1] = sections[n].b[1];
 800474c:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 8004914 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x280>
        Q_ = Q;
 8004750:	4c5e      	ldr	r4, [pc, #376]	@ (80048cc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x238>)
 8004752:	f8c3 c11c 	str.w	ip, [r3, #284]	@ 0x11c
            sections_[n].a[0] = sections[n].a[0];
 8004756:	f8df c1c0 	ldr.w	ip, [pc, #448]	@ 8004918 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x284>
            x_[n][1] = 0;
 800475a:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
            sections_[n].a[0] = sections[n].a[0];
 800475e:	f8c3 c124 	str.w	ip, [r3, #292]	@ 0x124
            sections_[n].a[1] = sections[n].a[1];
 8004762:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 800491c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x288>
            x_[n][2] = 0;
 8004766:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
            sections_[n].a[1] = sections[n].a[1];
 800476a:	f8c3 c128 	str.w	ip, [r3, #296]	@ 0x128
            sections_[n].b[1] = sections[n].b[1];
 800476e:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8004920 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x28c>
            x_[n][0] = 0;
 8004772:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
            sections_[n].b[1] = sections[n].b[1];
 8004776:	f8c3 c130 	str.w	ip, [r3, #304]	@ 0x130
            sections_[n].a[0] = sections[n].a[0];
 800477a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8004924 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x290>
            x_[n][1] = 0;
 800477e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
            sections_[n].a[0] = sections[n].a[0];
 8004782:	f8c3 c138 	str.w	ip, [r3, #312]	@ 0x138
            sections_[n].a[1] = sections[n].a[1];
 8004786:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8004928 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x294>
            x_[n][2] = 0;
 800478a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            sections_[n].a[1] = sections[n].a[1];
 800478e:	f8c3 c13c 	str.w	ip, [r3, #316]	@ 0x13c
            sections_[n].b[1] = sections[n].b[1];
 8004792:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800492c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x298>
        x_[num_sections_][0] = 0;
 8004796:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            sections_[n].b[1] = sections[n].b[1];
 800479a:	f8c3 c144 	str.w	ip, [r3, #324]	@ 0x144
            sections_[n].a[0] = sections[n].a[0];
 800479e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8004930 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x29c>
        x_[num_sections_][1] = 0;
 80047a2:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
            sections_[n].a[0] = sections[n].a[0];
 80047a6:	f8c3 c14c 	str.w	ip, [r3, #332]	@ 0x14c
            sections_[n].a[1] = sections[n].a[1];
 80047aa:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8004934 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a0>
        x_[num_sections_][2] = 0;
 80047ae:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
            sections_[n].a[1] = sections[n].a[1];
 80047b2:	f8c3 c150 	str.w	ip, [r3, #336]	@ 0x150
            sections_[n].b[1] = sections[n].b[1];
 80047b6:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8004938 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a4>
            sections_[n].b[0] = sections[n].b[0];
 80047ba:	ed83 6a46 	vstr	s12, [r3, #280]	@ 0x118
            sections_[n].b[1] = sections[n].b[1];
 80047be:	f8c3 c158 	str.w	ip, [r3, #344]	@ 0x158
            sections_[n].a[0] = sections[n].a[0];
 80047c2:	f8df c178 	ldr.w	ip, [pc, #376]	@ 800493c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a8>
            sections_[n].b[2] = sections[n].b[2];
 80047c6:	ed83 6a48 	vstr	s12, [r3, #288]	@ 0x120
            sections_[n].a[0] = sections[n].a[0];
 80047ca:	f8c3 c160 	str.w	ip, [r3, #352]	@ 0x160
            sections_[n].a[1] = sections[n].a[1];
 80047ce:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8004940 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2ac>
        sampleRate_ = sampleRate;
 80047d2:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8004944 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b0>
 80047d6:	f8c3 c164 	str.w	ip, [r3, #356]	@ 0x164
            sections_[n].b[1] = sections[n].b[1];
 80047da:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8004948 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b4>
        a1_ = -2 * cos(omega);
        a2_ = 1 - alpha / A;

        // Scaling coefficients for unity gain at the center frequency
        b0_ /= a0_;
        b1_ /= a0_;
 80047de:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80048d0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x23c>
 80047e2:	f8c3 c16c 	str.w	ip, [r3, #364]	@ 0x16c
            sections_[n].a[0] = sections[n].a[0];
 80047e6:	f8df c164 	ldr.w	ip, [pc, #356]	@ 800494c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b8>
 80047ea:	f8c3 c174 	str.w	ip, [r3, #372]	@ 0x174
            sections_[n].a[1] = sections[n].a[1];
 80047ee:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8004950 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2bc>
 80047f2:	f8c3 c178 	str.w	ip, [r3, #376]	@ 0x178
        Q_ = Q;
 80047f6:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        centerFrequency_ = centerFrequency;
 80047fa:	4c36      	ldr	r4, [pc, #216]	@ (80048d4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x240>)
{
public:
    void Init(float sampleRate, float frequency, float mix)
    {
        sampleRate_ = sampleRate;
        phase_ = 0.0;
 80047fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8004800:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
        gain_ = std::pow(10, gainDB / 20.0); // Convert gain from dB to linear scale
 8004804:	4c34      	ldr	r4, [pc, #208]	@ (80048d8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x244>)
        envelope_ = 0;
 8004806:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800480a:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
        a0_ = 1 + alpha / A;
 800480e:	4c33      	ldr	r4, [pc, #204]	@ (80048dc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x248>)
        b2_ /= a0_;
        a1_ /= a0_;
        a2_ /= a0_;
 8004810:	4a33      	ldr	r2, [pc, #204]	@ (80048e0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x24c>)
        a0_ = 1 + alpha / A;
 8004812:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
        b0_ /= a0_;
 8004816:	4c33      	ldr	r4, [pc, #204]	@ (80048e4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x250>)
        b2_ /= a0_;
 8004818:	f8df c138 	ldr.w	ip, [pc, #312]	@ 8004954 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2c0>
        b0_ /= a0_;
 800481c:	f8c3 40f8 	str.w	r4, [r3, #248]	@ 0xf8
        cutoffFrequency_ = cutoffFrequency;
 8004820:	4c31      	ldr	r4, [pc, #196]	@ (80048e8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x254>)
        a2_ /= a0_;
 8004822:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
            buffer_[i] = 0;
 8004826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800482a:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        a0_ = 1 + alpha;
 800482e:	4c2f      	ldr	r4, [pc, #188]	@ (80048ec <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x258>)
        sampleRate_ = sampleRate;
 8004830:	f8c3 e07c 	str.w	lr, [r3, #124]	@ 0x7c
        a0_ = 1 + alpha;
 8004834:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        b1_ /= a0_;
 8004838:	4c2d      	ldr	r4, [pc, #180]	@ (80048f0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x25c>)
        Q_ = Q;
 800483a:	edc3 6a39 	vstr	s13, [r3, #228]	@ 0xe4
 800483e:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        b2_ /= a0_;
        a1_ /= a0_;
 8004842:	4c2c      	ldr	r4, [pc, #176]	@ (80048f4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x260>)
        b0_ /= a0_;
 8004844:	ed83 7a25 	vstr	s14, [r3, #148]	@ 0x94
        a1_ /= a0_;
 8004848:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        a2_ /= a0_;
 800484c:	4c2a      	ldr	r4, [pc, #168]	@ (80048f8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x264>)
        b2_ /= a0_;
 800484e:	ed83 7a27 	vstr	s14, [r3, #156]	@ 0x9c
        a2_ /= a0_;
 8004852:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 8004856:	4c29      	ldr	r4, [pc, #164]	@ (80048fc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x268>)
        sampleRate_ = sampleRate;
 8004858:	f8c3 e0b0 	str.w	lr, [r3, #176]	@ 0xb0
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 800485c:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
        envFollower_.Init(50, 200, 500, 16000);
    }

    void SetFrequency(float frequency)
    {
        frequency_ = frequency;
 8004860:	4c27      	ldr	r4, [pc, #156]	@ (8004900 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x26c>)
        sampleRate_ = sampleRate;
 8004862:	f8c3 e0dc 	str.w	lr, [r3, #220]	@ 0xdc
 8004866:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
        phaseIncrement_ = frequency_ * twoPiOverSampleRate_;
 800486a:	4c26      	ldr	r4, [pc, #152]	@ (8004904 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x270>)
        hold_count_ = 0;
 800486c:	f8c3 10d4 	str.w	r1, [r3, #212]	@ 0xd4
 8004870:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
    }

    void SetMix(float mix)
    {
        mix_ = mix;
 8004874:	4c24      	ldr	r4, [pc, #144]	@ (8004908 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x274>)
        b1_ /= a0_;
 8004876:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
 800487a:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800487e:	4c23      	ldr	r4, [pc, #140]	@ (800490c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x278>)
        a1_ /= a0_;
 8004880:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
 8004884:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8004888:	4c21      	ldr	r4, [pc, #132]	@ (8004910 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x27c>)
        b2_ /= a0_;
 800488a:	f8c3 c100 	str.w	ip, [r3, #256]	@ 0x100
 800488e:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8004892:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8004896:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            state_ = STATE_STOPPED;
 800489a:	f800 1c04 	strb.w	r1, [r0, #-4]
            cue_play_ = false;
 800489e:	f820 1c03 	strh.w	r1, [r0, #-3]
        }
 80048a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a6:	f006 bc06 	b.w	800b0b6 <memset>
 80048aa:	bf00      	nop
 80048ac:	3a23c800 	.word	0x3a23c800
 80048b0:	3a446737 	.word	0x3a446737
 80048b4:	3c97b968 	.word	0x3c97b968
 80048b8:	3f642905 	.word	0x3f642905
 80048bc:	3c4b8680 	.word	0x3c4b8680
 80048c0:	bd430c20 	.word	0xbd430c20
 80048c4:	39831000 	.word	0x39831000
 80048c8:	3bcc2980 	.word	0x3bcc2980
 80048cc:	41200000 	.word	0x41200000
 80048d0:	bfd87b8b 	.word	0xbfd87b8b
 80048d4:	44610000 	.word	0x44610000
 80048d8:	404a62c2 	.word	0x404a62c2
 80048dc:	3f8e0284 	.word	0x3f8e0284
 80048e0:	3f4d7d3b 	.word	0x3f4d7d3b
 80048e4:	3ff1a63d 	.word	0x3ff1a63d
 80048e8:	442f0000 	.word	0x442f0000
 80048ec:	3f81bcba 	.word	0x3f81bcba
 80048f0:	3d17b968 	.word	0x3d17b968
 80048f4:	bff316de 	.word	0xbff316de
 80048f8:	3f7924e9 	.word	0x3f7924e9
 80048fc:	39cde32e 	.word	0x39cde32e
 8004900:	43c80000 	.word	0x43c80000
 8004904:	3e20d97c 	.word	0x3e20d97c
 8004908:	3f333333 	.word	0x3f333333
 800490c:	3aa3bc00 	.word	0x3aa3bc00
 8004910:	39a3d000 	.word	0x39a3d000
 8004914:	3a85b218 	.word	0x3a85b218
 8004918:	bfbc65fb 	.word	0xbfbc65fb
 800491c:	3f10296d 	.word	0x3f10296d
 8004920:	beade39b 	.word	0xbeade39b
 8004924:	bfb80d8c 	.word	0xbfb80d8c
 8004928:	3f2d1db0 	.word	0x3f2d1db0
 800492c:	bf74e042 	.word	0xbf74e042
 8004930:	bfb33dc4 	.word	0xbfb33dc4
 8004934:	3f4f7eb1 	.word	0x3f4f7eb1
 8004938:	bf954df0 	.word	0xbf954df0
 800493c:	bfb0aec0 	.word	0xbfb0aec0
 8004940:	3f68ba72 	.word	0x3f68ba72
 8004944:	467a0000 	.word	0x467a0000
 8004948:	bf9e3e9d 	.word	0xbf9e3e9d
 800494c:	bfb140a2 	.word	0xbfb140a2
 8004950:	3f793977 	.word	0x3f793977
 8004954:	bdae79fb 	.word	0xbdae79fb

08004958 <recorder::SampleMemory<half>::Init()>:
    void Init(void)
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        dirty_ = false;
 800495c:	2400      	movs	r4, #0
    void Init(void)
 800495e:	b085      	sub	sp, #20
 8004960:	4605      	mov	r5, r0
        dirty_ = false;
 8004962:	7344      	strb	r4, [r0, #13]
        for (uint32_t i = 0; i < kNumBlocks; i++)
 8004964:	46a1      	mov	r9, r4
        buffer_index_ = 0;
 8004966:	6104      	str	r4, [r0, #16]
 8004968:	f105 0b20 	add.w	fp, r5, #32
        flash_.Init();
 800496c:	f002 f916 	bl	8006b9c <recorder::Flash::Init()>
        __HAL_RCC_CRC_CLK_ENABLE();
 8004970:	4aae      	ldr	r2, [pc, #696]	@ (8004c2c <recorder::SampleMemory<half>::Init()+0x2d4>)
  WRITE_REG(CRCx->POL, PolynomCoef);
 8004972:	4baf      	ldr	r3, [pc, #700]	@ (8004c30 <recorder::SampleMemory<half>::Init()+0x2d8>)
 8004974:	f8d2 10e0 	ldr.w	r1, [r2, #224]	@ 0xe0
 8004978:	48ae      	ldr	r0, [pc, #696]	@ (8004c34 <recorder::SampleMemory<half>::Init()+0x2dc>)
 800497a:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800497e:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 8004982:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8004986:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800498a:	9203      	str	r2, [sp, #12]
  WRITE_REG(CRCx->INIT, InitCrc);
 800498c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004990:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8004992:	6158      	str	r0, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8004994:	6899      	ldr	r1, [r3, #8]
 8004996:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800499a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
 80049a2:	6099      	str	r1, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80049a4:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 80049a6:	6899      	ldr	r1, [r3, #8]
 80049a8:	f041 0101 	orr.w	r1, r1, #1
 80049ac:	6099      	str	r1, [r3, #8]
        num_links_ = num_links;
 80049ae:	2303      	movs	r3, #3
        chain_ = chain;
 80049b0:	49a1      	ldr	r1, [pc, #644]	@ (8004c38 <recorder::SampleMemory<half>::Init()+0x2e0>)
        num_links_ = num_links;
 80049b2:	63eb      	str	r3, [r5, #60]	@ 0x3c
            return length * sizeof(T);
 80049b4:	684b      	ldr	r3, [r1, #4]
 80049b6:	6908      	ldr	r0, [r1, #16]
 80049b8:	005b      	lsls	r3, r3, #1
            link.offset = total_size_;
 80049ba:	608c      	str	r4, [r1, #8]
        chain_ = chain;
 80049bc:	6429      	str	r1, [r5, #64]	@ 0x40
            link.offset = total_size_;
 80049be:	614b      	str	r3, [r1, #20]
            total_size_ += link.size();
 80049c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80049c4:	4c9d      	ldr	r4, [pc, #628]	@ (8004c3c <recorder::SampleMemory<half>::Init()+0x2e4>)
            link.offset = total_size_;
 80049c6:	620b      	str	r3, [r1, #32]
            return length * sizeof(T);
 80049c8:	69c9      	ldr	r1, [r1, #28]
 80049ca:	9201      	str	r2, [sp, #4]
            total_size_ += link.size();
 80049cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80049d0:	646b      	str	r3, [r5, #68]	@ 0x44
        uint32_t page_n = block_n / kBlocksPerPage;
 80049d2:	4b9b      	ldr	r3, [pc, #620]	@ (8004c40 <recorder::SampleMemory<half>::Init()+0x2e8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80049d4:	2702      	movs	r7, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 80049d6:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 80049da:	fba3 2309 	umull	r2, r3, r3, r9
        QUADSPI->CCR =
 80049de:	f8df 8264 	ldr.w	r8, [pc, #612]	@ 8004c44 <recorder::SampleMemory<half>::Init()+0x2ec>
 80049e2:	eba9 0203 	sub.w	r2, r9, r3
 80049e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80049ea:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 80049ec:	eb03 1603 	add.w	r6, r3, r3, lsl #4
 80049f0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 80049f4:	eba9 0606 	sub.w	r6, r9, r6
 80049f8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80049fc:	eb06 3603 	add.w	r6, r6, r3, lsl #12
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	f013 0320 	ands.w	r3, r3, #32
 8004a06:	d1fb      	bne.n	8004a00 <recorder::SampleMemory<half>::Init()+0xa8>
        QUADSPI->DLR = 0;
 8004a08:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8004a0a:	f8c4 8014 	str.w	r8, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8004a14:	d0fb      	beq.n	8004a0e <recorder::SampleMemory<half>::Init()+0xb6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004a16:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004a1a:	b2db      	uxtb	r3, r3
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004a1c:	68a2      	ldr	r2, [r4, #8]
 8004a1e:	0792      	lsls	r2, r2, #30
 8004a20:	d5fc      	bpl.n	8004a1c <recorder::SampleMemory<half>::Init()+0xc4>
        while (write_in_progress())
 8004a22:	07db      	lsls	r3, r3, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004a24:	60e7      	str	r7, [r4, #12]
        while (write_in_progress())
 8004a26:	d503      	bpl.n	8004a30 <recorder::SampleMemory<half>::Init()+0xd8>
            system::Delay_ms(1);
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f002 ff93 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004a2e:	e7e7      	b.n	8004a00 <recorder::SampleMemory<half>::Init()+0xa8>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004a30:	4632      	mov	r2, r6
 8004a32:	230f      	movs	r3, #15
 8004a34:	4659      	mov	r1, fp
 8004a36:	4650      	mov	r0, sl
 8004a38:	f002 fa8c 	bl	8006f54 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
            sum += bytes[i];
 8004a3c:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 8004a40:	f895 7020 	ldrb.w	r7, [r5, #32]
 8004a44:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8004a48:	4417      	add	r7, r2
 8004a4a:	f895 6023 	ldrb.w	r6, [r5, #35]	@ 0x23
 8004a4e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8004a52:	443b      	add	r3, r7
 8004a54:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8004a58:	f895 2026 	ldrb.w	r2, [r5, #38]	@ 0x26
 8004a5c:	441e      	add	r6, r3
 8004a5e:	f895 c027 	ldrb.w	ip, [r5, #39]	@ 0x27
 8004a62:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8004a66:	4430      	add	r0, r6
 8004a68:	f895 7029 	ldrb.w	r7, [r5, #41]	@ 0x29
 8004a6c:	f895 602a 	ldrb.w	r6, [r5, #42]	@ 0x2a
 8004a70:	4401      	add	r1, r0
 8004a72:	f895 002b 	ldrb.w	r0, [r5, #43]	@ 0x2b
 8004a76:	440a      	add	r2, r1
 8004a78:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8004a7c:	4494      	add	ip, r2
 8004a7e:	f895 202d 	ldrb.w	r2, [r5, #45]	@ 0x2d
 8004a82:	4463      	add	r3, ip
 8004a84:	441f      	add	r7, r3
 8004a86:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 8004a8a:	443e      	add	r6, r7
 8004a8c:	4430      	add	r0, r6
 8004a8e:	4401      	add	r1, r0
 8004a90:	440a      	add	r2, r1
 8004a92:	4413      	add	r3, r2
            if (LoadBlock(i) && IsValid(block_))
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2bff      	cmp	r3, #255	@ 0xff
 8004a98:	d039      	beq.n	8004b0e <recorder::SampleMemory<half>::Init()+0x1b6>
        for (uint32_t i = 0; i < kNumBlocks; i++)
 8004a9a:	f109 0901 	add.w	r9, r9, #1
 8004a9e:	f240 2322 	movw	r3, #546	@ 0x222
 8004aa2:	4599      	cmp	r9, r3
 8004aa4:	d195      	bne.n	80049d2 <recorder::SampleMemory<half>::Init()+0x7a>
        active_block_n_ = FindFreshestBlock();
 8004aa6:	9a01      	ldr	r2, [sp, #4]
        if (block_n == -1)
 8004aa8:	1c54      	adds	r4, r2, #1
        active_block_n_ = FindFreshestBlock();
 8004aaa:	632a      	str	r2, [r5, #48]	@ 0x30
        if (block_n == -1)
 8004aac:	d051      	beq.n	8004b52 <recorder::SampleMemory<half>::Init()+0x1fa>
        uint32_t page_n = block_n / kBlocksPerPage;
 8004aae:	4964      	ldr	r1, [pc, #400]	@ (8004c40 <recorder::SampleMemory<half>::Init()+0x2e8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004ab0:	f04f 0a02 	mov.w	sl, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 8004ab4:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 8004ab8:	fba1 3102 	umull	r3, r1, r1, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004abc:	4c5f      	ldr	r4, [pc, #380]	@ (8004c3c <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 8004abe:	4f61      	ldr	r7, [pc, #388]	@ (8004c44 <recorder::SampleMemory<half>::Init()+0x2ec>)
 8004ac0:	1a50      	subs	r0, r2, r1
 8004ac2:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 8004ac6:	0a09      	lsrs	r1, r1, #8
        return page_n * kPageSize + block_n * kBlockSize;
 8004ac8:	eb01 1001 	add.w	r0, r1, r1, lsl #4
 8004acc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8004ad0:	1a12      	subs	r2, r2, r0
 8004ad2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004ad6:	eb02 3201 	add.w	r2, r2, r1, lsl #12
        while (write_in_progress())
 8004ada:	4691      	mov	r9, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004adc:	68a6      	ldr	r6, [r4, #8]
 8004ade:	f016 0620 	ands.w	r6, r6, #32
 8004ae2:	d1fb      	bne.n	8004adc <recorder::SampleMemory<half>::Init()+0x184>
        QUADSPI->DLR = 0;
 8004ae4:	6126      	str	r6, [r4, #16]
        QUADSPI->CCR =
 8004ae6:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8004aee:	d0fb      	beq.n	8004ae8 <recorder::SampleMemory<half>::Init()+0x190>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004af0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004af4:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	0798      	lsls	r0, r3, #30
 8004afa:	d5fc      	bpl.n	8004af6 <recorder::SampleMemory<half>::Init()+0x19e>
        while (write_in_progress())
 8004afc:	f012 0201 	ands.w	r2, r2, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004b00:	f8c4 a00c 	str.w	sl, [r4, #12]
        while (write_in_progress())
 8004b04:	d01a      	beq.n	8004b3c <recorder::SampleMemory<half>::Init()+0x1e4>
            system::Delay_ms(1);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f002 ff24 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004b0c:	e7e6      	b.n	8004adc <recorder::SampleMemory<half>::Init()+0x184>
                if ((block == -1) ||
 8004b0e:	9b01      	ldr	r3, [sp, #4]
                uint32_t sn = block_.sequence_num;
 8004b10:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
                if ((block == -1) ||
 8004b12:	3301      	adds	r3, #1
 8004b14:	d007      	beq.n	8004b26 <recorder::SampleMemory<half>::Init()+0x1ce>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004b16:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
                if ((block == -1) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d908      	bls.n	8004b2e <recorder::SampleMemory<half>::Init()+0x1d6>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f240 2121 	movw	r1, #545	@ 0x221
 8004b22:	428b      	cmp	r3, r1
 8004b24:	d8b9      	bhi.n	8004a9a <recorder::SampleMemory<half>::Init()+0x142>
            if (LoadBlock(i) && IsValid(block_))
 8004b26:	f8cd 9004 	str.w	r9, [sp, #4]
                    sequence_ = sn;
 8004b2a:	636a      	str	r2, [r5, #52]	@ 0x34
 8004b2c:	e7b5      	b.n	8004a9a <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004b2e:	d2b4      	bcs.n	8004a9a <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn < sequence_) && (sequence_ - sn >= kNumBlocks)))
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	f240 2121 	movw	r1, #545	@ 0x221
 8004b36:	428b      	cmp	r3, r1
 8004b38:	d9af      	bls.n	8004a9a <recorder::SampleMemory<half>::Init()+0x142>
 8004b3a:	e7f4      	b.n	8004b26 <recorder::SampleMemory<half>::Init()+0x1ce>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	4640      	mov	r0, r8
 8004b40:	464a      	mov	r2, r9
 8004b42:	4659      	mov	r1, fp
 8004b44:	4699      	mov	r9, r3
 8004b46:	230f      	movs	r3, #15
 8004b48:	f002 fa04 	bl	8006f54 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
        if (active_block_n_ != -1)
 8004b4c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b4e:	3301      	adds	r3, #1
 8004b50:	d10a      	bne.n	8004b68 <recorder::SampleMemory<half>::Init()+0x210>
            printf("No save data found\n");
 8004b52:	483d      	ldr	r0, [pc, #244]	@ (8004c48 <recorder::SampleMemory<half>::Init()+0x2f0>)
 8004b54:	f006 fa7c 	bl	800b050 <puts>
            audio_info_.address = kAudioBufferAddress;
 8004b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    }
 8004b62:	b005      	add	sp, #20
 8004b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            std::memcpy(&data, &block_.data, sizeof(T));
 8004b68:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b6c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8004b70:	6a29      	ldr	r1, [r5, #32]
 8004b72:	61eb      	str	r3, [r5, #28]
 8004b74:	6169      	str	r1, [r5, #20]
 8004b76:	61aa      	str	r2, [r5, #24]
            printf("Save data found:\n");
 8004b78:	4834      	ldr	r0, [pc, #208]	@ (8004c4c <recorder::SampleMemory<half>::Init()+0x2f4>)
 8004b7a:	f006 fa69 	bl	800b050 <puts>
        printf("%sAddress: 0x%08" PRIX32 "\n", line_prefix, audio_info_.address);
 8004b7e:	4934      	ldr	r1, [pc, #208]	@ (8004c50 <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b80:	696a      	ldr	r2, [r5, #20]
 8004b82:	4834      	ldr	r0, [pc, #208]	@ (8004c54 <recorder::SampleMemory<half>::Init()+0x2fc>)
 8004b84:	f006 f9fc 	bl	800af80 <iprintf>
        printf("%sSize:    0x%08" PRIX32 "\n", line_prefix, audio_info_.size);
 8004b88:	4931      	ldr	r1, [pc, #196]	@ (8004c50 <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b8a:	69aa      	ldr	r2, [r5, #24]
 8004b8c:	4832      	ldr	r0, [pc, #200]	@ (8004c58 <recorder::SampleMemory<half>::Init()+0x300>)
 8004b8e:	f006 f9f7 	bl	800af80 <iprintf>
        printf("%sCRC32:   0x%08" PRIX32 "\n", line_prefix, audio_info_.crc32);
 8004b92:	492f      	ldr	r1, [pc, #188]	@ (8004c50 <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b94:	69ea      	ldr	r2, [r5, #28]
 8004b96:	4831      	ldr	r0, [pc, #196]	@ (8004c5c <recorder::SampleMemory<half>::Init()+0x304>)
 8004b98:	f006 f9f2 	bl	800af80 <iprintf>
            if (audio_info_.address < kAudioBufferAddress)
 8004b9c:	696b      	ldr	r3, [r5, #20]
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	d339      	bcc.n	8004c18 <recorder::SampleMemory<half>::Init()+0x2c0>
                printf("Loading audio... ");
 8004ba4:	482e      	ldr	r0, [pc, #184]	@ (8004c60 <recorder::SampleMemory<half>::Init()+0x308>)
 8004ba6:	f006 f9eb 	bl	800af80 <iprintf>
  WRITE_REG(CRCx->INIT, InitCrc);
 8004baa:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <recorder::SampleMemory<half>::Init()+0x2d8>)
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bb0:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]
    iter end() {return iter(chain_, num_links_);}
 8004bba:	e9d5 370f 	ldrd	r3, r7, [r5, #60]	@ 0x3c
                uint32_t address = audio_info_.address;
 8004bbe:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
                for (auto link : buffer_chain_)
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8081 	beq.w	8004cca <recorder::SampleMemory<half>::Init()+0x372>
 8004bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004bcc:	3704      	adds	r7, #4
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004bce:	4c1b      	ldr	r4, [pc, #108]	@ (8004c3c <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 8004bd0:	46ab      	mov	fp, r5
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	e957 5301 	ldrd	r5, r3, [r7, #-4]
            return length * sizeof(T);
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4543      	cmp	r3, r8
 8004bdc:	bf28      	it	cs
 8004bde:	4643      	movcs	r3, r8
 8004be0:	469a      	mov	sl, r3
                    system::ReloadWatchdog();
 8004be2:	f002 fcb5 	bl	8007550 <recorder::system::ReloadWatchdog()>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004be6:	68a3      	ldr	r3, [r4, #8]
 8004be8:	f013 0320 	ands.w	r3, r3, #32
 8004bec:	d1fb      	bne.n	8004be6 <recorder::SampleMemory<half>::Init()+0x28e>
        QUADSPI->DLR = 0;
 8004bee:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8004bf0:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <recorder::SampleMemory<half>::Init()+0x2ec>)
 8004bf2:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004bf4:	68a3      	ldr	r3, [r4, #8]
 8004bf6:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8004bfa:	d0fb      	beq.n	8004bf4 <recorder::SampleMemory<half>::Init()+0x29c>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004bfc:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004c00:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	0799      	lsls	r1, r3, #30
 8004c06:	d5fc      	bpl.n	8004c02 <recorder::SampleMemory<half>::Init()+0x2aa>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	60e3      	str	r3, [r4, #12]
        while (write_in_progress())
 8004c0c:	07d3      	lsls	r3, r2, #31
 8004c0e:	d52b      	bpl.n	8004c68 <recorder::SampleMemory<half>::Init()+0x310>
            system::Delay_ms(1);
 8004c10:	2001      	movs	r0, #1
 8004c12:	f002 fe9f 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004c16:	e7e6      	b.n	8004be6 <recorder::SampleMemory<half>::Init()+0x28e>
                printf("Invalid address\n");
 8004c18:	4812      	ldr	r0, [pc, #72]	@ (8004c64 <recorder::SampleMemory<half>::Init()+0x30c>)
 8004c1a:	f006 fa19 	bl	800b050 <puts>
                audio_info_.address = kAudioBufferAddress;
 8004c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c22:	e9c5 3905 	strd	r3, r9, [r5, #20]
    }
 8004c26:	b005      	add	sp, #20
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	58024c00 	.word	0x58024c00
 8004c34:	04c11db7 	.word	0x04c11db7
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	52005000 	.word	0x52005000
 8004c40:	e01e01e1 	.word	0xe01e01e1
 8004c44:	05000105 	.word	0x05000105
 8004c48:	0800c154 	.word	0x0800c154
 8004c4c:	0800c140 	.word	0x0800c140
 8004c50:	0800c0fc 	.word	0x0800c0fc
 8004c54:	0800c104 	.word	0x0800c104
 8004c58:	0800c118 	.word	0x0800c118
 8004c5c:	0800c12c 	.word	0x0800c12c
 8004c60:	0800c178 	.word	0x0800c178
 8004c64:	0800c168 	.word	0x0800c168
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004c68:	4653      	mov	r3, sl
 8004c6a:	464a      	mov	r2, r9
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4658      	mov	r0, fp
 8004c70:	f002 f970 	bl	8006f54 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
                    system::ReloadWatchdog();
 8004c74:	f002 fc6c 	bl	8007550 <recorder::system::ReloadWatchdog()>
        while (size >= 4)
 8004c78:	f1ba 0f03 	cmp.w	sl, #3
 8004c7c:	d935      	bls.n	8004cea <recorder::SampleMemory<half>::Init()+0x392>
 8004c7e:	f1aa 0304 	sub.w	r3, sl, #4
  WRITE_REG(CRCx->DR, InData);
 8004c82:	481e      	ldr	r0, [pc, #120]	@ (8004cfc <recorder::SampleMemory<half>::Init()+0x3a4>)
 8004c84:	f023 0303 	bic.w	r3, r3, #3
 8004c88:	3304      	adds	r3, #4
 8004c8a:	442b      	add	r3, r5
            auto word = *reinterpret_cast<const uint32_t*>(data);
 8004c8c:	f855 2b04 	ldr.w	r2, [r5], #4
        while (size >= 4)
 8004c90:	429d      	cmp	r5, r3
 8004c92:	6002      	str	r2, [r0, #0]
 8004c94:	d1fa      	bne.n	8004c8c <recorder::SampleMemory<half>::Init()+0x334>
 8004c96:	f00a 0303 	and.w	r3, sl, #3
        while (size--)
 8004c9a:	b153      	cbz	r3, 8004cb2 <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004c9c:	7828      	ldrb	r0, [r5, #0]
        while (size--)
 8004c9e:	2b01      	cmp	r3, #1
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8004ca0:	4a16      	ldr	r2, [pc, #88]	@ (8004cfc <recorder::SampleMemory<half>::Init()+0x3a4>)
 8004ca2:	7010      	strb	r0, [r2, #0]
 8004ca4:	d005      	beq.n	8004cb2 <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004ca6:	7868      	ldrb	r0, [r5, #1]
        while (size--)
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	7010      	strb	r0, [r2, #0]
 8004cac:	d001      	beq.n	8004cb2 <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004cae:	78ab      	ldrb	r3, [r5, #2]
 8004cb0:	7013      	strb	r3, [r2, #0]
  return (uint32_t)(READ_REG(CRCx->DR));
 8004cb2:	4b12      	ldr	r3, [pc, #72]	@ (8004cfc <recorder::SampleMemory<half>::Init()+0x3a4>)
                    if (total_size == 0)
 8004cb4:	ebb8 080a 	subs.w	r8, r8, sl
                    address += read_size;
 8004cb8:	44d1      	add	r9, sl
 8004cba:	681b      	ldr	r3, [r3, #0]
                    if (total_size == 0)
 8004cbc:	d004      	beq.n	8004cc8 <recorder::SampleMemory<half>::Init()+0x370>
                for (auto link : buffer_chain_)
 8004cbe:	3603      	adds	r6, #3
 8004cc0:	9b01      	ldr	r3, [sp, #4]
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	42b3      	cmp	r3, r6
 8004cc6:	d185      	bne.n	8004bd4 <recorder::SampleMemory<half>::Init()+0x27c>
 8004cc8:	465d      	mov	r5, fp
 8004cca:	4a0c      	ldr	r2, [pc, #48]	@ (8004cfc <recorder::SampleMemory<half>::Init()+0x3a4>)
                if (audio_info_.crc32 == crc_.value())
 8004ccc:	69e9      	ldr	r1, [r5, #28]
 8004cce:	6813      	ldr	r3, [r2, #0]
        return ~LL_CRC_ReadData32(CRC);
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	4299      	cmp	r1, r3
 8004cd4:	d00b      	beq.n	8004cee <recorder::SampleMemory<half>::Init()+0x396>
 8004cd6:	6811      	ldr	r1, [r2, #0]
                    printf("invalid CRC32: 0x%08" PRIX32 "\n", crc_.value());
 8004cd8:	4809      	ldr	r0, [pc, #36]	@ (8004d00 <recorder::SampleMemory<half>::Init()+0x3a8>)
 8004cda:	43c9      	mvns	r1, r1
 8004cdc:	f006 f950 	bl	800af80 <iprintf>
                    audio_info_.size = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61ab      	str	r3, [r5, #24]
    }
 8004ce4:	b005      	add	sp, #20
 8004ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (size >= 4)
 8004cea:	4653      	mov	r3, sl
 8004cec:	e7d5      	b.n	8004c9a <recorder::SampleMemory<half>::Init()+0x342>
                    printf("done\n");
 8004cee:	4805      	ldr	r0, [pc, #20]	@ (8004d04 <recorder::SampleMemory<half>::Init()+0x3ac>)
    }
 8004cf0:	b005      	add	sp, #20
 8004cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    printf("done\n");
 8004cf6:	f006 b9ab 	b.w	800b050 <puts>
 8004cfa:	bf00      	nop
 8004cfc:	58024c00 	.word	0x58024c00
 8004d00:	0800c194 	.word	0x0800c194
 8004d04:	0800c18c 	.word	0x0800c18c

08004d08 <main>:

    extern "C" int main(void)
    {
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        system::Init();
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 8004d0c:	f8df 93d4 	ldr.w	r9, [pc, #980]	@ 80050e4 <main+0x3dc>
    {
 8004d10:	b083      	sub	sp, #12
        system::Init();
 8004d12:	f002 fc25 	bl	8007560 <recorder::system::Init()>
        analog_.Init(Process);
 8004d16:	49d6      	ldr	r1, [pc, #856]	@ (8005070 <main+0x368>)
 8004d18:	4648      	mov	r0, r9
 8004d1a:	f001 fd6f 	bl	80067fc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
        switches_.Init();
 8004d1e:	48d5      	ldr	r0, [pc, #852]	@ (8005074 <main+0x36c>)
 8004d20:	f7fb fd40 	bl	80007a4 <recorder::Switches::Init()>
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	4ad4      	ldr	r2, [pc, #848]	@ (8005078 <main+0x370>)
 8004d28:	49d4      	ldr	r1, [pc, #848]	@ (800507c <main+0x374>)
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4ad4      	ldr	r2, [pc, #848]	@ (8005080 <main+0x378>)
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	48d4      	ldr	r0, [pc, #848]	@ (8005084 <main+0x37c>)
 8004d32:	49d5      	ldr	r1, [pc, #852]	@ (8005088 <main+0x380>)
 8004d34:	6013      	str	r3, [r2, #0]
            if (state_ == STATE_STOPPED)
 8004d36:	f899 2160 	ldrb.w	r2, [r9, #352]	@ 0x160
 8004d3a:	6003      	str	r3, [r0, #0]
 8004d3c:	600b      	str	r3, [r1, #0]
 8004d3e:	2a00      	cmp	r2, #0
 8004d40:	f040 859f 	bne.w	8005882 <main+0xb7a>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004d44:	48d1      	ldr	r0, [pc, #836]	@ (800508c <main+0x384>)
                fade_position_ = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8004d4c:	4ad0      	ldr	r2, [pc, #832]	@ (8005090 <main+0x388>)
 8004d4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d52:	6184      	str	r4, [r0, #24]
                dac_.Start();
 8004d54:	f509 70aa 	add.w	r0, r9, #340	@ 0x154
                fade_position_ = 0;
 8004d58:	f8c9 315c 	str.w	r3, [r9, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	6191      	str	r1, [r2, #24]
 8004d60:	f8a9 3160 	strh.w	r3, [r9, #352]	@ 0x160
                dac_.Start();
 8004d64:	f001 fe00 	bl	8006968 <recorder::Dac::Start()>
                adc_.Start();
 8004d68:	f109 0004 	add.w	r0, r9, #4
 8004d6c:	f001 fafc 	bl	8006368 <recorder::Adc::Start()>
                StartTimer();
 8004d70:	4648      	mov	r0, r9
 8004d72:	f001 fde5 	bl	8006940 <recorder::Analog::StartTimer()>
 8004d76:	49c7      	ldr	r1, [pc, #796]	@ (8005094 <main+0x38c>)
 8004d78:	2000      	movs	r0, #0
        num_sections_ = num_sections;
 8004d7a:	2405      	movs	r4, #5
            x_[n][0] = 0;
 8004d7c:	2200      	movs	r2, #0
        num_sections_ = num_sections;
 8004d7e:	1f0b      	subs	r3, r1, #4
 8004d80:	6008      	str	r0, [r1, #0]
 8004d82:	6048      	str	r0, [r1, #4]
 8004d84:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
            sections_[n].b[1] = sections[n].b[1];
 8004d88:	4cc3      	ldr	r4, [pc, #780]	@ (8005098 <main+0x390>)
            sections_[n].b[0] = sections[n].b[0];
 8004d8a:	48c4      	ldr	r0, [pc, #784]	@ (800509c <main+0x394>)
            sections_[n].b[1] = sections[n].b[1];
 8004d8c:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
 8004d90:	4cc3      	ldr	r4, [pc, #780]	@ (80050a0 <main+0x398>)
            sections_[n].b[0] = sections[n].b[0];
 8004d92:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
            sections_[n].b[2] = sections[n].b[2];
 8004d96:	f8c3 00a0 	str.w	r0, [r3, #160]	@ 0xa0
            sections_[n].b[1] = sections[n].b[1];
 8004d9a:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
            sections_[n].a[0] = sections[n].a[0];
 8004d9e:	48c1      	ldr	r0, [pc, #772]	@ (80050a4 <main+0x39c>)
 8004da0:	4cc1      	ldr	r4, [pc, #772]	@ (80050a8 <main+0x3a0>)
 8004da2:	f8c3 00a4 	str.w	r0, [r3, #164]	@ 0xa4
 8004da6:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
            sections_[n].a[1] = sections[n].a[1];
 8004daa:	48c0      	ldr	r0, [pc, #768]	@ (80050ac <main+0x3a4>)
 8004dac:	4cc0      	ldr	r4, [pc, #768]	@ (80050b0 <main+0x3a8>)
 8004dae:	f8c3 00a8 	str.w	r0, [r3, #168]	@ 0xa8
            sections_[n].b[0] = sections[n].b[0];
 8004db2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
            sections_[n].a[1] = sections[n].a[1];
 8004db6:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
            sections_[n].b[1] = sections[n].b[1];
 8004dba:	4cbe      	ldr	r4, [pc, #760]	@ (80050b4 <main+0x3ac>)
            x_[n][0] = 0;
 8004dbc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            x_[n][1] = 0;
 8004dc0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            x_[n][2] = 0;
 8004dc4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            x_[n][0] = 0;
 8004dc8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 8004dcc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 8004dd0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            x_[n][0] = 0;
 8004dd4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 8004dd8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 8004ddc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
            x_[n][0] = 0;
 8004de0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 8004de4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 8004de8:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
            x_[n][0] = 0;
 8004dec:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 8004df0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 8004df4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        x_[num_sections_][0] = 0;
 8004df8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        x_[num_sections_][1] = 0;
 8004dfc:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        x_[num_sections_][2] = 0;
 8004e00:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
            sections_[n].b[0] = sections[n].b[0];
 8004e04:	f8c3 00ac 	str.w	r0, [r3, #172]	@ 0xac
            sections_[n].b[2] = sections[n].b[2];
 8004e08:	f8c3 00b4 	str.w	r0, [r3, #180]	@ 0xb4
            sections_[n].b[0] = sections[n].b[0];
 8004e0c:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
            sections_[n].b[1] = sections[n].b[1];
 8004e10:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
            sections_[n].a[0] = sections[n].a[0];
 8004e14:	4ca8      	ldr	r4, [pc, #672]	@ (80050b8 <main+0x3b0>)
            sections_[n].b[2] = sections[n].b[2];
 8004e16:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
            sections_[n].a[0] = sections[n].a[0];
 8004e1a:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
            sections_[n].a[1] = sections[n].a[1];
 8004e1e:	4ca7      	ldr	r4, [pc, #668]	@ (80050bc <main+0x3b4>)
            sections_[n].b[0] = sections[n].b[0];
 8004e20:	f8c3 00d4 	str.w	r0, [r3, #212]	@ 0xd4
            sections_[n].a[1] = sections[n].a[1];
 8004e24:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            sections_[n].b[1] = sections[n].b[1];
 8004e28:	4ca5      	ldr	r4, [pc, #660]	@ (80050c0 <main+0x3b8>)
            sections_[n].b[2] = sections[n].b[2];
 8004e2a:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
            sections_[n].b[1] = sections[n].b[1];
 8004e2e:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
            sections_[n].a[0] = sections[n].a[0];
 8004e32:	4ca4      	ldr	r4, [pc, #656]	@ (80050c4 <main+0x3bc>)
            sections_[n].b[0] = sections[n].b[0];
 8004e34:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
            sections_[n].a[0] = sections[n].a[0];
 8004e38:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
            sections_[n].a[1] = sections[n].a[1];
 8004e3c:	4ca2      	ldr	r4, [pc, #648]	@ (80050c8 <main+0x3c0>)
            sections_[n].b[2] = sections[n].b[2];
 8004e3e:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
            sections_[n].a[1] = sections[n].a[1];
 8004e42:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
            sections_[n].b[1] = sections[n].b[1];
 8004e46:	4ca1      	ldr	r4, [pc, #644]	@ (80050cc <main+0x3c4>)
 8004e48:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
            sections_[n].a[0] = sections[n].a[0];
 8004e4c:	4ca0      	ldr	r4, [pc, #640]	@ (80050d0 <main+0x3c8>)
 8004e4e:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
            sections_[n].a[1] = sections[n].a[1];
 8004e52:	4ca0      	ldr	r4, [pc, #640]	@ (80050d4 <main+0x3cc>)
 8004e54:	f8c3 40f8 	str.w	r4, [r3, #248]	@ 0xf8
	return __atomic_load_n(&_M_i, int(__m));
 8004e58:	684c      	ldr	r4, [r1, #4]
 8004e5a:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, int(__m));
 8004e5e:	f3bf 8f5b 	dmb	ish
 8004e62:	600c      	str	r4, [r1, #0]
        for (int n = 0; n < num_sections_; n++)
 8004e64:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
        input_phase_ = 1;
 8004e68:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
 8004e6c:	2900      	cmp	r1, #0
        history_ = 0;
 8004e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004e72:	dd2d      	ble.n	8004ed0 <main+0x1c8>
 8004e74:	2901      	cmp	r1, #1
            x_[n][0] = 0;
 8004e76:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            x_[n][1] = 0;
 8004e7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            x_[n][2] = 0;
 8004e7e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        for (int n = 0; n < num_sections_; n++)
 8004e82:	d025      	beq.n	8004ed0 <main+0x1c8>
 8004e84:	2902      	cmp	r1, #2
            x_[n][0] = 0;
 8004e86:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 8004e8a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 8004e8e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        for (int n = 0; n < num_sections_; n++)
 8004e92:	d01d      	beq.n	8004ed0 <main+0x1c8>
 8004e94:	2903      	cmp	r1, #3
            x_[n][0] = 0;
 8004e96:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 8004e9a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 8004e9e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        for (int n = 0; n < num_sections_; n++)
 8004ea2:	d015      	beq.n	8004ed0 <main+0x1c8>
 8004ea4:	2904      	cmp	r1, #4
            x_[n][0] = 0;
 8004ea6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 8004eaa:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 8004eae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        for (int n = 0; n < num_sections_; n++)
 8004eb2:	d00d      	beq.n	8004ed0 <main+0x1c8>
 8004eb4:	2905      	cmp	r1, #5
            x_[n][0] = 0;
 8004eb6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 8004eba:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 8004ebe:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        for (int n = 0; n < num_sections_; n++)
 8004ec2:	d005      	beq.n	8004ed0 <main+0x1c8>
            x_[n][0] = 0;
 8004ec4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
            x_[n][1] = 0;
 8004ec8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            x_[n][2] = 0;
 8004ecc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        x_[num_sections_][0] = 0;
 8004ed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        button_3_.Init();
        button_4_.Init();

        analog_.StartPlayback();
        recording_.Init();
        playback_.Init();
 8004ed4:	f8df 8210 	ldr.w	r8, [pc, #528]	@ 80050e8 <main+0x3e0>
 8004ed8:	2600      	movs	r6, #0
        mode_ = false;
 8004eda:	4c7f      	ldr	r4, [pc, #508]	@ (80050d8 <main+0x3d0>)
 8004edc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004ee0:	2700      	movs	r7, #0
 8004ee2:	4640      	mov	r0, r8
        base_frequency_ = 261.63f; // Default to middle C
 8004ee4:	4d7d      	ldr	r5, [pc, #500]	@ (80050dc <main+0x3d4>)
 8004ee6:	f8c3 60fc 	str.w	r6, [r3, #252]	@ 0xfc
        x_[num_sections_][1] = 0;
 8004eea:	f8c3 6100 	str.w	r6, [r3, #256]	@ 0x100
        x_[num_sections_][2] = 0;
 8004eee:	f8c3 6104 	str.w	r6, [r3, #260]	@ 0x104
 8004ef2:	f7ff fbcf 	bl	8004694 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>
        waveform_ = w;
 8004ef6:	2301      	movs	r3, #1
            strum_current_[s] = 0.0f;
 8004ef8:	2230      	movs	r2, #48	@ 0x30
 8004efa:	4639      	mov	r1, r7
 8004efc:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8004f00:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f02:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f04:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004f06:	64a3      	str	r3, [r4, #72]	@ 0x48
        base_frequency_ = 261.63f; // Default to middle C
 8004f08:	6125      	str	r5, [r4, #16]
        phase_inc_ = freq * kPhaseFactor;
 8004f0a:	6226      	str	r6, [r4, #32]
        mode_ = false;
 8004f0c:	f884 7208 	strb.w	r7, [r4, #520]	@ 0x208
        current_chord_ = 0;
 8004f10:	f8c4 7204 	str.w	r7, [r4, #516]	@ 0x204
        in_base_freq_mode_ = false;
 8004f14:	7527      	strb	r7, [r4, #20]
        seventh_hold_counter_ = 0;
 8004f16:	61a7      	str	r7, [r4, #24]
            current_freq_[v] = 0.0f;
 8004f18:	64e7      	str	r7, [r4, #76]	@ 0x4c
 8004f1a:	62e6      	str	r6, [r4, #44]	@ 0x2c
 8004f1c:	63a6      	str	r6, [r4, #56]	@ 0x38
 8004f1e:	6466      	str	r6, [r4, #68]	@ 0x44
            env_state_[v] = ENV_IDLE;
 8004f20:	66e7      	str	r7, [r4, #108]	@ 0x6c
            current_freq_[v] = 0.0f;
 8004f22:	65a7      	str	r7, [r4, #88]	@ 0x58
            env_state_[v] = ENV_IDLE;
 8004f24:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
            is_active_ = false;
 8004f28:	f8df a1c0 	ldr.w	sl, [pc, #448]	@ 80050ec <main+0x3e4>
            current_freq_[v] = 0.0f;
 8004f2c:	e9c4 7714 	strd	r7, r7, [r4, #80]	@ 0x50
            env_state_[v] = ENV_IDLE;
 8004f30:	e9c4 771c 	strd	r7, r7, [r4, #112]	@ 0x70
 8004f34:	e9c4 771e 	strd	r7, r7, [r4, #120]	@ 0x78
            strum_current_[s] = 0.0f;
 8004f38:	f006 f8bd 	bl	800b0b6 <memset>
            strum_attenuation_[s] = 1.0f;
 8004f3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
            sections_[n].b[0] = sections[n].b[0];
 8004f40:	4a56      	ldr	r2, [pc, #344]	@ (800509c <main+0x394>)
        last_strum_ = -1;
 8004f42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
            strum_attenuation_[s] = 1.0f;
 8004f46:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8004f4a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 8004f4e:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8004f52:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8004f56:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8004f5a:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
            strum_state_[s] = ENV_IDLE;
 8004f5e:	f8a4 7100 	strh.w	r7, [r4, #256]	@ 0x100
        waveform_ = w;
 8004f62:	f8c4 708c 	str.w	r7, [r4, #140]	@ 0x8c
 8004f66:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
 8004f6a:	f8c4 70a4 	str.w	r7, [r4, #164]	@ 0xa4
 8004f6e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
 8004f72:	f8c4 70bc 	str.w	r7, [r4, #188]	@ 0xbc
 8004f76:	f8c4 70c8 	str.w	r7, [r4, #200]	@ 0xc8
        phase_inc_ = freq * kPhaseFactor;
 8004f7a:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
 8004f7e:	f8c4 6094 	str.w	r6, [r4, #148]	@ 0x94
 8004f82:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
 8004f86:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
 8004f8a:	f8c4 60b8 	str.w	r6, [r4, #184]	@ 0xb8
 8004f8e:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 8004f92:	f8c4 70fc 	str.w	r7, [r4, #252]	@ 0xfc
            strum_level_[s] = 0.0f;
 8004f96:	f8c4 7104 	str.w	r7, [r4, #260]	@ 0x104
            strum_activation_time_[s] = 0;
 8004f9a:	f8c4 7120 	str.w	r7, [r4, #288]	@ 0x120
            strum_level_[s] = 0.0f;
 8004f9e:	f8c4 7118 	str.w	r7, [r4, #280]	@ 0x118
            strum_activation_time_[s] = 0;
 8004fa2:	f8c4 7134 	str.w	r7, [r4, #308]	@ 0x134
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 8004fa6:	484e      	ldr	r0, [pc, #312]	@ (80050e0 <main+0x3d8>)
            strum_level_[s] = 0.0f;
 8004fa8:	e9c4 7742 	strd	r7, r7, [r4, #264]	@ 0x108
 8004fac:	e9c4 7744 	strd	r7, r7, [r4, #272]	@ 0x110
            strum_activation_time_[s] = 0;
 8004fb0:	e9c4 7749 	strd	r7, r7, [r4, #292]	@ 0x124
 8004fb4:	e9c4 774b 	strd	r7, r7, [r4, #300]	@ 0x12c
        last_strum_ = -1;
 8004fb8:	f8c4 111c 	str.w	r1, [r4, #284]	@ 0x11c
 8004fbc:	4639      	mov	r1, r7
 8004fbe:	f8c4 2158 	str.w	r2, [r4, #344]	@ 0x158
            sections_[n].b[2] = sections[n].b[2];
 8004fc2:	f8c4 2160 	str.w	r2, [r4, #352]	@ 0x160
        num_sections_ = num_sections;
 8004fc6:	2205      	movs	r2, #5
            sections_[n].b[0] = sections[n].b[0];
 8004fc8:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
        num_sections_ = num_sections;
 8004fcc:	f8c4 2154 	str.w	r2, [r4, #340]	@ 0x154
            sections_[n].b[1] = sections[n].b[1];
 8004fd0:	4a31      	ldr	r2, [pc, #196]	@ (8005098 <main+0x390>)
            sections_[n].b[2] = sections[n].b[2];
 8004fd2:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
            sections_[n].b[1] = sections[n].b[1];
 8004fd6:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
            sections_[n].a[0] = sections[n].a[0];
 8004fda:	4a32      	ldr	r2, [pc, #200]	@ (80050a4 <main+0x39c>)
            sections_[n].b[0] = sections[n].b[0];
 8004fdc:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
            sections_[n].a[0] = sections[n].a[0];
 8004fe0:	f8c4 2164 	str.w	r2, [r4, #356]	@ 0x164
            sections_[n].a[1] = sections[n].a[1];
 8004fe4:	4a31      	ldr	r2, [pc, #196]	@ (80050ac <main+0x3a4>)
        strum_activation_counter_ = 0;
 8004fe6:	f8c4 7138 	str.w	r7, [r4, #312]	@ 0x138
 8004fea:	f8c4 2168 	str.w	r2, [r4, #360]	@ 0x168
            sections_[n].b[1] = sections[n].b[1];
 8004fee:	4a2c      	ldr	r2, [pc, #176]	@ (80050a0 <main+0x398>)
            x_[n][0] = 0;
 8004ff0:	f8c4 61bc 	str.w	r6, [r4, #444]	@ 0x1bc
            sections_[n].b[1] = sections[n].b[1];
 8004ff4:	f8c4 2170 	str.w	r2, [r4, #368]	@ 0x170
            sections_[n].a[0] = sections[n].a[0];
 8004ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80050a8 <main+0x3a0>)
            x_[n][1] = 0;
 8004ffa:	f8c4 61c0 	str.w	r6, [r4, #448]	@ 0x1c0
            sections_[n].a[0] = sections[n].a[0];
 8004ffe:	f8c4 2178 	str.w	r2, [r4, #376]	@ 0x178
            sections_[n].a[1] = sections[n].a[1];
 8005002:	4a2b      	ldr	r2, [pc, #172]	@ (80050b0 <main+0x3a8>)
            x_[n][2] = 0;
 8005004:	f8c4 61c4 	str.w	r6, [r4, #452]	@ 0x1c4
            sections_[n].a[1] = sections[n].a[1];
 8005008:	f8c4 217c 	str.w	r2, [r4, #380]	@ 0x17c
            sections_[n].b[1] = sections[n].b[1];
 800500c:	4a29      	ldr	r2, [pc, #164]	@ (80050b4 <main+0x3ac>)
            x_[n][0] = 0;
 800500e:	f8c4 61c8 	str.w	r6, [r4, #456]	@ 0x1c8
            sections_[n].b[1] = sections[n].b[1];
 8005012:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 8005016:	222c      	movs	r2, #44	@ 0x2c
            x_[n][1] = 0;
 8005018:	f8c4 61cc 	str.w	r6, [r4, #460]	@ 0x1cc
            x_[n][2] = 0;
 800501c:	f8c4 61d0 	str.w	r6, [r4, #464]	@ 0x1d0
            x_[n][0] = 0;
 8005020:	f8c4 61d4 	str.w	r6, [r4, #468]	@ 0x1d4
            x_[n][1] = 0;
 8005024:	f8c4 61d8 	str.w	r6, [r4, #472]	@ 0x1d8
            x_[n][2] = 0;
 8005028:	f8c4 61dc 	str.w	r6, [r4, #476]	@ 0x1dc
            x_[n][0] = 0;
 800502c:	f8c4 61e0 	str.w	r6, [r4, #480]	@ 0x1e0
            x_[n][1] = 0;
 8005030:	f8c4 61e4 	str.w	r6, [r4, #484]	@ 0x1e4
            x_[n][2] = 0;
 8005034:	f8c4 61e8 	str.w	r6, [r4, #488]	@ 0x1e8
            x_[n][0] = 0;
 8005038:	f8c4 61ec 	str.w	r6, [r4, #492]	@ 0x1ec
            x_[n][1] = 0;
 800503c:	f8c4 61f0 	str.w	r6, [r4, #496]	@ 0x1f0
            x_[n][2] = 0;
 8005040:	f8c4 61f4 	str.w	r6, [r4, #500]	@ 0x1f4
        x_[num_sections_][0] = 0;
 8005044:	f8c4 61f8 	str.w	r6, [r4, #504]	@ 0x1f8
        x_[num_sections_][1] = 0;
 8005048:	f8c4 61fc 	str.w	r6, [r4, #508]	@ 0x1fc
        x_[num_sections_][2] = 0;
 800504c:	f8c4 6200 	str.w	r6, [r4, #512]	@ 0x200
            sections_[n].b[2] = sections[n].b[2];
 8005050:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
            sections_[n].b[0] = sections[n].b[0];
 8005054:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
            sections_[n].b[2] = sections[n].b[2];
 8005058:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
            sections_[n].b[0] = sections[n].b[0];
 800505c:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
            sections_[n].b[2] = sections[n].b[2];
 8005060:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
        compGain_ = 1.0f;
 8005064:	6063      	str	r3, [r4, #4]
            sections_[n].a[0] = sections[n].a[0];
 8005066:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <main+0x3b0>)
        target_freq_[0] = root_freq * chord_multipliers[0];
 8005068:	65e5      	str	r5, [r4, #92]	@ 0x5c
 800506a:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
 800506e:	e03f      	b.n	80050f0 <main+0x3e8>
 8005070:	080023f9 	.word	0x080023f9
 8005074:	20010b38 	.word	0x20010b38
 8005078:	2001090c 	.word	0x2001090c
 800507c:	200108e0 	.word	0x200108e0
 8005080:	20010904 	.word	0x20010904
 8005084:	20010908 	.word	0x20010908
 8005088:	20010900 	.word	0x20010900
 800508c:	58021800 	.word	0x58021800
 8005090:	58020400 	.word	0x58020400
 8005094:	2001074c 	.word	0x2001074c
 8005098:	3a85b218 	.word	0x3a85b218
 800509c:	3a446737 	.word	0x3a446737
 80050a0:	beade39b 	.word	0xbeade39b
 80050a4:	bfbc65fb 	.word	0xbfbc65fb
 80050a8:	bfb80d8c 	.word	0xbfb80d8c
 80050ac:	3f10296d 	.word	0x3f10296d
 80050b0:	3f2d1db0 	.word	0x3f2d1db0
 80050b4:	bf74e042 	.word	0xbf74e042
 80050b8:	bfb33dc4 	.word	0xbfb33dc4
 80050bc:	3f4f7eb1 	.word	0x3f4f7eb1
 80050c0:	bf954df0 	.word	0xbf954df0
 80050c4:	bfb0aec0 	.word	0xbfb0aec0
 80050c8:	3f68ba72 	.word	0x3f68ba72
 80050cc:	bf9e3e9d 	.word	0xbf9e3e9d
 80050d0:	bfb140a2 	.word	0xbfb140a2
 80050d4:	3f793977 	.word	0x3f793977
 80050d8:	20010928 	.word	0x20010928
 80050dc:	4382d0a4 	.word	0x4382d0a4
 80050e0:	20000554 	.word	0x20000554
 80050e4:	20010c40 	.word	0x20010c40
 80050e8:	20000580 	.word	0x20000580
 80050ec:	20010910 	.word	0x20010910
            sections_[n].a[1] = sections[n].a[1];
 80050f0:	4bcb      	ldr	r3, [pc, #812]	@ (8005420 <main+0x718>)
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 80050f2:	4dcc      	ldr	r5, [pc, #816]	@ (8005424 <main+0x71c>)
 80050f4:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
            sections_[n].b[1] = sections[n].b[1];
 80050f8:	4bcb      	ldr	r3, [pc, #812]	@ (8005428 <main+0x720>)
        compEnv_ = 0.0f;
 80050fa:	6026      	str	r6, [r4, #0]
 80050fc:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
            sections_[n].a[0] = sections[n].a[0];
 8005100:	4bca      	ldr	r3, [pc, #808]	@ (800542c <main+0x724>)
 8005102:	f88a 700c 	strb.w	r7, [sl, #12]
 8005106:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
            sections_[n].a[1] = sections[n].a[1];
 800510a:	4bc9      	ldr	r3, [pc, #804]	@ (8005430 <main+0x728>)
        waveform_ = w;
 800510c:	f8ca 7008 	str.w	r7, [sl, #8]
 8005110:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
            sections_[n].b[1] = sections[n].b[1];
 8005114:	4bc7      	ldr	r3, [pc, #796]	@ (8005434 <main+0x72c>)
        phase_inc_ = freq * kPhaseFactor;
 8005116:	f8ca 6004 	str.w	r6, [sl, #4]
 800511a:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
            sections_[n].a[0] = sections[n].a[0];
 800511e:	4bc6      	ldr	r3, [pc, #792]	@ (8005438 <main+0x730>)
 8005120:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
            sections_[n].a[1] = sections[n].a[1];
 8005124:	4bc5      	ldr	r3, [pc, #788]	@ (800543c <main+0x734>)
 8005126:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
        alphaAtk_ = std::exp(-1.0f/(kCompAttackTime * kAudioSampleRate));
 800512a:	4bc5      	ldr	r3, [pc, #788]	@ (8005440 <main+0x738>)
 800512c:	60a3      	str	r3, [r4, #8]
        alphaRel_ = std::exp(-1.0f/(kCompReleaseTime* kAudioSampleRate));
 800512e:	4bc5      	ldr	r3, [pc, #788]	@ (8005444 <main+0x73c>)
 8005130:	60e3      	str	r3, [r4, #12]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8005132:	4bc5      	ldr	r3, [pc, #788]	@ (8005448 <main+0x740>)
 8005134:	6623      	str	r3, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 8005136:	4bc5      	ldr	r3, [pc, #788]	@ (800544c <main+0x744>)
 8005138:	6663      	str	r3, [r4, #100]	@ 0x64
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 800513a:	4bc5      	ldr	r3, [pc, #788]	@ (8005450 <main+0x748>)
            note_timer_ = 0;
 800513c:	e9ca 7704 	strd	r7, r7, [sl, #16]
 8005140:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005142:	f005 ffb8 	bl	800b0b6 <memset>
 8005146:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800514a:	4639      	mov	r1, r7
 800514c:	f108 0034 	add.w	r0, r8, #52	@ 0x34
            state_ = STATE_STOPPED;
 8005150:	f888 7030 	strb.w	r7, [r8, #48]	@ 0x30
            cue_play_ = false;
 8005154:	f8a8 7031 	strh.w	r7, [r8, #49]	@ 0x31
 8005158:	f888 7018 	strb.w	r7, [r8, #24]
 800515c:	f8c5 7080 	str.w	r7, [r5, #128]	@ 0x80
 8005160:	f005 ffa9 	bl	800b0b6 <memset>
        write_head_ = 0;
 8005164:	f508 3380 	add.w	r3, r8, #65536	@ 0x10000
        for (int n = 0; n < num_sections_; n++)
 8005168:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800516c:	635f      	str	r7, [r3, #52]	@ 0x34
 800516e:	42ba      	cmp	r2, r7
        hold_count_ = 0;
 8005170:	655f      	str	r7, [r3, #84]	@ 0x54
 8005172:	669f      	str	r7, [r3, #104]	@ 0x68
        envelope_ = 0;
 8005174:	659e      	str	r6, [r3, #88]	@ 0x58
 8005176:	66de      	str	r6, [r3, #108]	@ 0x6c
        history_ = initial_value;
 8005178:	675e      	str	r6, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 800517a:	679e      	str	r6, [r3, #120]	@ 0x78
 800517c:	dd2d      	ble.n	80051da <main+0x4d2>
 800517e:	2a01      	cmp	r2, #1
            x_[n][0] = 0;
 8005180:	f8c3 617c 	str.w	r6, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 8005184:	f8c3 6180 	str.w	r6, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 8005188:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
        for (int n = 0; n < num_sections_; n++)
 800518c:	d025      	beq.n	80051da <main+0x4d2>
 800518e:	2a02      	cmp	r2, #2
            x_[n][0] = 0;
 8005190:	f8c3 6188 	str.w	r6, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 8005194:	f8c3 618c 	str.w	r6, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 8005198:	f8c3 6190 	str.w	r6, [r3, #400]	@ 0x190
        for (int n = 0; n < num_sections_; n++)
 800519c:	d01d      	beq.n	80051da <main+0x4d2>
 800519e:	2a03      	cmp	r2, #3
            x_[n][0] = 0;
 80051a0:	f8c3 6194 	str.w	r6, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 80051a4:	f8c3 6198 	str.w	r6, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 80051a8:	f8c3 619c 	str.w	r6, [r3, #412]	@ 0x19c
        for (int n = 0; n < num_sections_; n++)
 80051ac:	d015      	beq.n	80051da <main+0x4d2>
 80051ae:	2a04      	cmp	r2, #4
            x_[n][0] = 0;
 80051b0:	f8c3 61a0 	str.w	r6, [r3, #416]	@ 0x1a0
            x_[n][1] = 0;
 80051b4:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
            x_[n][2] = 0;
 80051b8:	f8c3 61a8 	str.w	r6, [r3, #424]	@ 0x1a8
        for (int n = 0; n < num_sections_; n++)
 80051bc:	d00d      	beq.n	80051da <main+0x4d2>
 80051be:	2a05      	cmp	r2, #5
            x_[n][0] = 0;
 80051c0:	f8c3 61ac 	str.w	r6, [r3, #428]	@ 0x1ac
            x_[n][1] = 0;
 80051c4:	f8c3 61b0 	str.w	r6, [r3, #432]	@ 0x1b0
            x_[n][2] = 0;
 80051c8:	f8c3 61b4 	str.w	r6, [r3, #436]	@ 0x1b4
        for (int n = 0; n < num_sections_; n++)
 80051cc:	d005      	beq.n	80051da <main+0x4d2>
            x_[n][0] = 0;
 80051ce:	f8c3 61b8 	str.w	r6, [r3, #440]	@ 0x1b8
            x_[n][1] = 0;
 80051d2:	f8c3 61bc 	str.w	r6, [r3, #444]	@ 0x1bc
            x_[n][2] = 0;
 80051d6:	f8c3 61c0 	str.w	r6, [r3, #448]	@ 0x1c0
        x_[num_sections_][0] = 0;
 80051da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
        synth_engine_.Init();
        jingle_engine_.Init(); // Initialize jingle engine
        io_.Init();
        monitor_.Init();
        playback_.Reset();
        sample_memory_.Init();
 80051de:	489d      	ldr	r0, [pc, #628]	@ (8005454 <main+0x74c>)
 80051e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        x_[num_sections_][1] = 0;
 80051ea:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        x_[num_sections_][2] = 0;
 80051ee:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 80051f2:	f7ff fbb1 	bl	8004958 <recorder::SampleMemory<half>::Init()>
            if (state_ == STATE_STOPPED)
 80051f6:	f899 3160 	ldrb.w	r3, [r9, #352]	@ 0x160
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 8335 	bne.w	800586a <main+0xb62>
 8005200:	2101      	movs	r1, #1
 8005202:	4895      	ldr	r0, [pc, #596]	@ (8005458 <main+0x750>)
 8005204:	f7fb faa6 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
            current_note_ = 0;
 8005208:	2400      	movs	r4, #0
 800520a:	4b94      	ldr	r3, [pc, #592]	@ (800545c <main+0x754>)
            is_active_ = true;
 800520c:	f240 1201 	movw	r2, #257	@ 0x101
        
        // Start with startup jingle instead of directly to synth
        analog_.Start(true); // Ensure audio is on for jingle
        jingle_engine_.StartupJingle();
        Transition(STATE_STARTUP);
 8005210:	200b      	movs	r0, #11
 8005212:	f8ca 3004 	str.w	r3, [sl, #4]
        
        // Initialize idle timeout counter
        idle_timeout_ = 0;

        bool expire_watchdog = false;
 8005216:	46a1      	mov	r9, r4
 8005218:	f8aa 200c 	strh.w	r2, [sl, #12]
            note_timer_ = 0;
 800521c:	e9ca 4404 	strd	r4, r4, [sl, #16]
        Transition(STATE_STARTUP);
 8005220:	f7fd ffaa 	bl	8003178 <recorder::Transition(recorder::State)>
        idle_timeout_ = 0;
 8005224:	4b8e      	ldr	r3, [pc, #568]	@ (8005460 <main+0x758>)
 8005226:	601c      	str	r4, [r3, #0]
        if (kADCAlwaysOn)
 8005228:	4b8e      	ldr	r3, [pc, #568]	@ (8005464 <main+0x75c>)
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800522a:	4c8f      	ldr	r4, [pc, #572]	@ (8005468 <main+0x760>)
 800522c:	f103 0ba5 	add.w	fp, r3, #165	@ 0xa5
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 8005230:	4b8e      	ldr	r3, [pc, #568]	@ (800546c <main+0x764>)
  { __atomic_thread_fence(int(__m)); }
 8005232:	f3bf 8f5b 	dmb	ish
 8005236:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f1c0 0180 	rsb	r1, r0, #128	@ 0x80
 8005240:	4428      	add	r0, r5
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	f002 fc1e 	bl	8007a84 <fgets>

        if (result != nullptr)
 8005248:	b1c8      	cbz	r0, 800527e <main+0x576>
        {
            length_ = std::strlen(line_);
 800524a:	4876      	ldr	r0, [pc, #472]	@ (8005424 <main+0x71c>)
 800524c:	f7fb f828 	bl	80002a0 <strlen>
 8005250:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 8005254:	b118      	cbz	r0, 800525e <main+0x556>
 8005256:	1e43      	subs	r3, r0, #1
 8005258:	5cea      	ldrb	r2, [r5, r3]
 800525a:	2a0a      	cmp	r2, #10
 800525c:	d012      	beq.n	8005284 <main+0x57c>
        {
            message_.payload.type = Message::TYPE_NONE;
 800525e:	2300      	movs	r3, #0
 8005260:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
        for (;;)
        {
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 8005264:	2600      	movs	r6, #0
                system::Reset();
            }
            else if (message.type == Message::TYPE_ERASE)
                sample_memory_.Erase();

            if (!expire_watchdog)
 8005266:	f1b9 0f00 	cmp.w	r9, #0
 800526a:	d101      	bne.n	8005270 <main+0x568>
                system::ReloadWatchdog();
 800526c:	f002 f970 	bl	8007550 <recorder::system::ReloadWatchdog()>

            StateMachine(standby);
 8005270:	4630      	mov	r0, r6
 8005272:	f7fe f915 	bl	80034a0 <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();
            system::Delay_ms(1);
 8005276:	2001      	movs	r0, #1
 8005278:	f002 fb6c 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        }
 800527c:	e7d8      	b.n	8005230 <main+0x528>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 800527e:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8005282:	e7e7      	b.n	8005254 <main+0x54c>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 8005284:	782e      	ldrb	r6, [r5, #0]
 8005286:	2801      	cmp	r0, #1
 8005288:	f1a6 06ff 	sub.w	r6, r6, #255	@ 0xff
 800528c:	fab6 f686 	clz	r6, r6
 8005290:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8005294:	bf08      	it	eq
 8005296:	2600      	moveq	r6, #0
 8005298:	b966      	cbnz	r6, 80052b4 <main+0x5ac>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 800529a:	4962      	ldr	r1, [pc, #392]	@ (8005424 <main+0x71c>)
 800529c:	2280      	movs	r2, #128	@ 0x80
                line_[length_ - 1] = '\0';
 800529e:	54ee      	strb	r6, [r5, r3]
                message_.payload.type = Message::TYPE_TEXT;
 80052a0:	2301      	movs	r3, #1
                std::strncpy(message_.payload.text, line_,
 80052a2:	f101 0087 	add.w	r0, r1, #135	@ 0x87
                message_.payload.type = Message::TYPE_TEXT;
 80052a6:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
                std::strncpy(message_.payload.text, line_,
 80052aa:	f005 fef1 	bl	800b090 <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 80052ae:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 80052b2:	e7d7      	b.n	8005264 <main+0x55c>
                line_[length_ - 1] = '\0';
 80052b4:	2700      	movs	r7, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 80052b6:	486e      	ldr	r0, [pc, #440]	@ (8005470 <main+0x768>)
 80052b8:	54ef      	strb	r7, [r5, r3]
 80052ba:	f7fa fff1 	bl	80002a0 <strlen>
    size_t num_bytes = 0;

    while (length)
 80052be:	2800      	cmp	r0, #0
 80052c0:	d04e      	beq.n	8005360 <main+0x658>
    size_t num_bytes = 0;
 80052c2:	463a      	mov	r2, r7
    while (length)
 80052c4:	496a      	ldr	r1, [pc, #424]	@ (8005470 <main+0x768>)
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 80052c6:	46ca      	mov	sl, r9
 80052c8:	9601      	str	r6, [sp, #4]
            group[i] = length ? *str - 33 : 84;
 80052ca:	780b      	ldrb	r3, [r1, #0]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80052cc:	2804      	cmp	r0, #4
            group[i] = length ? *str - 33 : 84;
 80052ce:	f1a3 0321 	sub.w	r3, r3, #33	@ 0x21
 80052d2:	b2db      	uxtb	r3, r3
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80052d4:	f240 8272 	bls.w	80057bc <main+0xab4>
            group[i] = length ? *str - 33 : 84;
 80052d8:	f891 c001 	ldrb.w	ip, [r1, #1]
                length--;
 80052dc:	3805      	subs	r0, #5
            group[i] = length ? *str - 33 : 84;
 80052de:	f891 8003 	ldrb.w	r8, [r1, #3]
            word += group[i];
 80052e2:	2704      	movs	r7, #4
            group[i] = length ? *str - 33 : 84;
 80052e4:	f891 9002 	ldrb.w	r9, [r1, #2]
 80052e8:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
 80052ec:	f891 e004 	ldrb.w	lr, [r1, #4]
 80052f0:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
 80052f4:	f1a9 0921 	sub.w	r9, r9, #33	@ 0x21
            word += group[i];
 80052f8:	fa5f fc8c 	uxtb.w	ip, ip
            group[i] = length ? *str - 33 : 84;
 80052fc:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
            word += group[i];
 8005300:	fa5f f888 	uxtb.w	r8, r8
 8005304:	fa5f f989 	uxtb.w	r9, r9
                str++;
 8005308:	3105      	adds	r1, #5
            word += group[i];
 800530a:	fa5f fe8e 	uxtb.w	lr, lr
 800530e:	2655      	movs	r6, #85	@ 0x55
        }

        for (size_t i = 0; i < 4 - padding; i++)
        {
            if (num_bytes < size)
 8005310:	2a82      	cmp	r2, #130	@ 0x82
            word += group[i];
 8005312:	fb16 c303 	smlabb	r3, r6, r3, ip
            word *= 85;
 8005316:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800531a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 800531e:	444b      	add	r3, r9
            word *= 85;
 8005320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005324:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8005328:	4443      	add	r3, r8
            word *= 85;
 800532a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800532e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8005332:	4473      	add	r3, lr
            if (num_bytes < size)
 8005334:	d810      	bhi.n	8005358 <main+0x650>
            {
                bytes[num_bytes] = word >> 24;
 8005336:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 800533a:	4e4a      	ldr	r6, [pc, #296]	@ (8005464 <main+0x75c>)
        for (size_t i = 0; i < 4 - padding; i++)
 800533c:	2f01      	cmp	r7, #1
                num_bytes++;
 800533e:	f102 0e01 	add.w	lr, r2, #1
                bytes[num_bytes] = word >> 24;
 8005342:	f806 c002 	strb.w	ip, [r6, r2]
                word <<= 8;
 8005346:	ea4f 2c03 	mov.w	ip, r3, lsl #8
        for (size_t i = 0; i < 4 - padding; i++)
 800534a:	f000 8261 	beq.w	8005810 <main+0xb08>
            if (num_bytes < size)
 800534e:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 8005352:	f040 8211 	bne.w	8005778 <main+0xa70>
        for (size_t i = 0; i < 4 - padding; i++)
 8005356:	2283      	movs	r2, #131	@ 0x83
    while (length)
 8005358:	2800      	cmp	r0, #0
 800535a:	d1b6      	bne.n	80052ca <main+0x5c2>
 800535c:	46d1      	mov	r9, sl
 800535e:	9e01      	ldr	r6, [sp, #4]
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 8005360:	f895 3084 	ldrb.w	r3, [r5, #132]	@ 0x84
 8005364:	2b81      	cmp	r3, #129	@ 0x81
 8005366:	d81f      	bhi.n	80053a8 <main+0x6a0>
 8005368:	4942      	ldr	r1, [pc, #264]	@ (8005474 <main+0x76c>)
 800536a:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 800536c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005370:	f002 307f 	and.w	r0, r2, #2139062143	@ 0x7f7f7f7f
 8005374:	405a      	eors	r2, r3
 8005376:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800537a:	f002 3280 	and.w	r2, r2, #2155905152	@ 0x80808080
 800537e:	4403      	add	r3, r0
 8005380:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 8005382:	4b3d      	ldr	r3, [pc, #244]	@ (8005478 <main+0x770>)
 8005384:	428b      	cmp	r3, r1
 8005386:	d1f1      	bne.n	800536c <main+0x664>
            sum += bytes[i];
 8005388:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800538c:	f895 1106 	ldrb.w	r1, [r5, #262]	@ 0x106
 8005390:	4413      	add	r3, r2
 8005392:	440b      	add	r3, r1
 8005394:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005398:	440b      	add	r3, r1
 800539a:	eb03 6312 	add.w	r3, r3, r2, lsr #24
                if (message_.Verify())
 800539e:	f895 2085 	ldrb.w	r2, [r5, #133]	@ 0x85
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d005      	beq.n	80053b4 <main+0x6ac>
                    message_.payload.type = Message::TYPE_NONE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 80053ae:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 80053b2:	e757      	b.n	8005264 <main+0x55c>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 80053b4:	4831      	ldr	r0, [pc, #196]	@ (800547c <main+0x774>)
 80053b6:	f005 fe4b 	bl	800b050 <puts>
            auto message = monitor_.Receive();
 80053ba:	f895 3086 	ldrb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 80053be:	2200      	movs	r2, #0
 80053c0:	3b65      	subs	r3, #101	@ 0x65
 80053c2:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 80053c6:	2b12      	cmp	r3, #18
 80053c8:	f63f af4c 	bhi.w	8005264 <main+0x55c>
 80053cc:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <main+0x6cc>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	0800562d 	.word	0x0800562d
 80053d8:	08005265 	.word	0x08005265
 80053dc:	08005265 	.word	0x08005265
 80053e0:	08005265 	.word	0x08005265
 80053e4:	08005265 	.word	0x08005265
 80053e8:	08005265 	.word	0x08005265
 80053ec:	08005265 	.word	0x08005265
 80053f0:	08005265 	.word	0x08005265
 80053f4:	08005265 	.word	0x08005265
 80053f8:	08005265 	.word	0x08005265
 80053fc:	08005265 	.word	0x08005265
 8005400:	08005265 	.word	0x08005265
 8005404:	0800548d 	.word	0x0800548d
 8005408:	08005481 	.word	0x08005481
 800540c:	08005267 	.word	0x08005267
 8005410:	08005265 	.word	0x08005265
 8005414:	08005265 	.word	0x08005265
 8005418:	08005265 	.word	0x08005265
 800541c:	0800572d 	.word	0x0800572d
 8005420:	3f4f7eb1 	.word	0x3f4f7eb1
 8005424:	20000428 	.word	0x20000428
 8005428:	bf954df0 	.word	0xbf954df0
 800542c:	bfb0aec0 	.word	0xbfb0aec0
 8005430:	3f68ba72 	.word	0x3f68ba72
 8005434:	bf9e3e9d 	.word	0xbf9e3e9d
 8005438:	bfb140a2 	.word	0xbfb140a2
 800543c:	3f793977 	.word	0x3f793977
 8005440:	1263ca70 	.word	0x1263ca70
 8005444:	3f7feb86 	.word	0x3f7feb86
 8005448:	43a4d10a 	.word	0x43a4d10a
 800544c:	43c40044 	.word	0x43c40044
 8005450:	4402d0a4 	.word	0x4402d0a4
 8005454:	2001088c 	.word	0x2001088c
 8005458:	20010c40 	.word	0x20010c40
 800545c:	3dd26a54 	.word	0x3dd26a54
 8005460:	200108e8 	.word	0x200108e8
 8005464:	200004ac 	.word	0x200004ac
 8005468:	52005000 	.word	0x52005000
 800546c:	2000003c 	.word	0x2000003c
 8005470:	20000429 	.word	0x20000429
 8005474:	200004ae 	.word	0x200004ae
 8005478:	2000052e 	.word	0x2000052e
 800547c:	0800c1ac 	.word	0x0800c1ac
                system::SerialFlushTx();
 8005480:	2000      	movs	r0, #0
 8005482:	f002 fa7d 	bl	8007980 <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8005486:	f002 faf9 	bl	8007a7c <recorder::system::Reset()>
 800548a:	e6eb      	b.n	8005264 <main+0x55c>
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 800548c:	48b2      	ldr	r0, [pc, #712]	@ (8005758 <main+0xa50>)
            state.pot[i] = human.pot[i];
 800548e:	6802      	ldr	r2, [r0, #0]
        state.play = human.sw[SWITCH_PLAY];
 8005490:	f890 1025 	ldrb.w	r1, [r0, #37]	@ 0x25
            state.pot[i] = human.pot[i];
 8005494:	f8c5 2109 	str.w	r2, [r5, #265]	@ 0x109
 8005498:	6842      	ldr	r2, [r0, #4]
        state.play = human.sw[SWITCH_PLAY];
 800549a:	f890 3020 	ldrb.w	r3, [r0, #32]
            state.pot[i] = human.pot[i];
 800549e:	f8c5 210d 	str.w	r2, [r5, #269]	@ 0x10d
 80054a2:	6882      	ldr	r2, [r0, #8]
        state.play = human.sw[SWITCH_PLAY];
 80054a4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80054a8:	49ac      	ldr	r1, [pc, #688]	@ (800575c <main+0xa54>)
            state.pot[i] = human.pot[i];
 80054aa:	f8c5 2111 	str.w	r2, [r5, #273]	@ 0x111
 80054ae:	68c2      	ldr	r2, [r0, #12]
 80054b0:	f8c5 2115 	str.w	r2, [r5, #277]	@ 0x115
 80054b4:	6902      	ldr	r2, [r0, #16]
 80054b6:	f8c5 2119 	str.w	r2, [r5, #281]	@ 0x119
 80054ba:	6942      	ldr	r2, [r0, #20]
 80054bc:	f8c5 211d 	str.w	r2, [r5, #285]	@ 0x11d
 80054c0:	6982      	ldr	r2, [r0, #24]
 80054c2:	f8c5 2121 	str.w	r2, [r5, #289]	@ 0x121
 80054c6:	69c2      	ldr	r2, [r0, #28]
 80054c8:	f8c5 2125 	str.w	r2, [r5, #293]	@ 0x125
        state.play = human.sw[SWITCH_PLAY];
 80054cc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80054d0:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80054d4:	f890 2029 	ldrb.w	r2, [r0, #41]	@ 0x29
 80054d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80054dc:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
 80054e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80054e4:	f895 2129 	ldrb.w	r2, [r5, #297]	@ 0x129
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	f022 021f 	bic.w	r2, r2, #31
 80054f0:	4313      	orrs	r3, r2
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 80054f2:	2221      	movs	r2, #33	@ 0x21
 80054f4:	f885 3129 	strb.w	r3, [r5, #297]	@ 0x129
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8a5 2107 	strh.w	r2, [r5, #263]	@ 0x107
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 80054fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005502:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 8005504:	4559      	cmp	r1, fp
            checksum += bytes[i];
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f885 3108 	strb.w	r3, [r5, #264]	@ 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 800550c:	d1f7      	bne.n	80054fe <main+0x7f6>
 800550e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8005512:	2021      	movs	r0, #33	@ 0x21
    size_t num_chars = 0;
 8005514:	2700      	movs	r7, #0
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 8005516:	f8df c25c 	ldr.w	ip, [pc, #604]	@ 8005774 <main+0xa6c>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 800551a:	f1be 0f03 	cmp.w	lr, #3
 800551e:	f8cd 9004 	str.w	r9, [sp, #4]
 8005522:	d975      	bls.n	8005610 <main+0x908>
                word |= *bytes++;
 8005524:	f8bc 3000 	ldrh.w	r3, [ip]
                data_size--;
 8005528:	f1ae 0e04 	sub.w	lr, lr, #4
                word |= *bytes++;
 800552c:	f89c 2002 	ldrb.w	r2, [ip, #2]
                data_size--;
 8005530:	f04f 0805 	mov.w	r8, #5
 8005534:	ba5b      	rev16	r3, r3
                word |= *bytes++;
 8005536:	f89c 0003 	ldrb.w	r0, [ip, #3]
 800553a:	f10c 0c04 	add.w	ip, ip, #4
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005544:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            if (num_chars < buf_size - 1)
 8005548:	2f7e      	cmp	r7, #126	@ 0x7e
 800554a:	d858      	bhi.n	80055fe <main+0x8f6>
            word /= 85;
 800554c:	4984      	ldr	r1, [pc, #528]	@ (8005760 <main+0xa58>)
                num_chars++;
 800554e:	f107 0901 	add.w	r9, r7, #1
            word /= 85;
 8005552:	fba1 2300 	umull	r2, r3, r1, r0
 8005556:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800555a:	fba1 2603 	umull	r2, r6, r1, r3
 800555e:	ea4f 1696 	mov.w	r6, r6, lsr #6
 8005562:	fba1 2106 	umull	r2, r1, r1, r6
 8005566:	4a7e      	ldr	r2, [pc, #504]	@ (8005760 <main+0xa58>)
 8005568:	ea4f 1191 	mov.w	r1, r1, lsr #6
 800556c:	fba2 a201 	umull	sl, r2, r2, r1
 8005570:	ea4f 1292 	mov.w	r2, r2, lsr #6
                buf[num_chars] = group[i] + 33;
 8005574:	f102 0a21 	add.w	sl, r2, #33	@ 0x21
 8005578:	f805 a007 	strb.w	sl, [r5, r7]
            if (num_chars < buf_size - 1)
 800557c:	f000 80d9 	beq.w	8005732 <main+0xa2a>
            group[4 - i] = (word % 85);
 8005580:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 8005584:	f1b8 0f02 	cmp.w	r8, #2
            group[4 - i] = (word % 85);
 8005588:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800558c:	eba1 0202 	sub.w	r2, r1, r2
                buf[num_chars] = group[i] + 33;
 8005590:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 8005594:	f805 2009 	strb.w	r2, [r5, r9]
                num_chars++;
 8005598:	f107 0202 	add.w	r2, r7, #2
        for (size_t i = 0; i < 5 - padding; i++)
 800559c:	f000 811b 	beq.w	80057d6 <main+0xace>
            if (num_chars < buf_size - 1)
 80055a0:	2a7f      	cmp	r2, #127	@ 0x7f
 80055a2:	f000 80c6 	beq.w	8005732 <main+0xa2a>
            group[4 - i] = (word % 85);
 80055a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 80055aa:	f1b8 0f03 	cmp.w	r8, #3
            group[4 - i] = (word % 85);
 80055ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80055b2:	eba6 0101 	sub.w	r1, r6, r1
                buf[num_chars] = group[i] + 33;
 80055b6:	f101 0121 	add.w	r1, r1, #33	@ 0x21
 80055ba:	54a9      	strb	r1, [r5, r2]
                num_chars++;
 80055bc:	f107 0103 	add.w	r1, r7, #3
        for (size_t i = 0; i < 5 - padding; i++)
 80055c0:	f000 8124 	beq.w	800580c <main+0xb04>
            if (num_chars < buf_size - 1)
 80055c4:	297f      	cmp	r1, #127	@ 0x7f
 80055c6:	f000 80b4 	beq.w	8005732 <main+0xa2a>
            group[4 - i] = (word % 85);
 80055ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 80055ce:	f1b8 0f05 	cmp.w	r8, #5
            group[4 - i] = (word % 85);
 80055d2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80055d6:	eba3 0206 	sub.w	r2, r3, r6
                buf[num_chars] = group[i] + 33;
 80055da:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 80055de:	546a      	strb	r2, [r5, r1]
                num_chars++;
 80055e0:	f107 0204 	add.w	r2, r7, #4
        for (size_t i = 0; i < 5 - padding; i++)
 80055e4:	f040 80f7 	bne.w	80057d6 <main+0xace>
            if (num_chars < buf_size - 1)
 80055e8:	2a7f      	cmp	r2, #127	@ 0x7f
 80055ea:	f000 80a2 	beq.w	8005732 <main+0xa2a>
            group[4 - i] = (word % 85);
 80055ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                num_chars++;
 80055f2:	3705      	adds	r7, #5
            group[4 - i] = (word % 85);
 80055f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80055f8:	1ac3      	subs	r3, r0, r3
                buf[num_chars] = group[i] + 33;
 80055fa:	3321      	adds	r3, #33	@ 0x21
 80055fc:	54ab      	strb	r3, [r5, r2]
    while (data_size)
 80055fe:	f1be 0f00 	cmp.w	lr, #0
 8005602:	f000 809b 	beq.w	800573c <main+0xa34>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8005606:	f1be 0f03 	cmp.w	lr, #3
                word |= *bytes++;
 800560a:	f89c 0000 	ldrb.w	r0, [ip]
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 800560e:	d889      	bhi.n	8005524 <main+0x81c>
            if (data_size)
 8005610:	f1be 0f01 	cmp.w	lr, #1
                word |= *bytes++;
 8005614:	f10c 0301 	add.w	r3, ip, #1
            if (data_size)
 8005618:	f040 80df 	bne.w	80057da <main+0xad2>
            word <<= 8;
 800561c:	0400      	lsls	r0, r0, #16
 800561e:	469c      	mov	ip, r3
 8005620:	f04f 0802 	mov.w	r8, #2
 8005624:	0200      	lsls	r0, r0, #8
 8005626:	f04f 0e00 	mov.w	lr, #0
 800562a:	e78d      	b.n	8005548 <main+0x840>
        return nvmem_.Erase(0, kRegionSize);
 800562c:	4b4d      	ldr	r3, [pc, #308]	@ (8005764 <main+0xa5c>)
        state_ =
 800562e:	2200      	movs	r2, #0
 8005630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
        QUADSPI->CCR =
 8005634:	4f4c      	ldr	r7, [pc, #304]	@ (8005768 <main+0xa60>)
 8005636:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005638:	2002      	movs	r0, #2
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800563a:	f44f 7e83 	mov.w	lr, #262	@ 0x106
        QUADSPI->CCR =
 800563e:	f242 5cd7 	movw	ip, #9687	@ 0x25d7
        state_ =
 8005642:	60b2      	str	r2, [r6, #8]
 8005644:	e9c6 2100 	strd	r2, r1, [r6]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005648:	68a3      	ldr	r3, [r4, #8]
 800564a:	f013 0320 	ands.w	r3, r3, #32
 800564e:	d1fb      	bne.n	8005648 <main+0x940>
        QUADSPI->DLR = 0;
 8005650:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8005652:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8005654:	68a3      	ldr	r3, [r4, #8]
 8005656:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 800565a:	d0fb      	beq.n	8005654 <main+0x94c>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 800565c:	f894 8020 	ldrb.w	r8, [r4, #32]
 8005660:	fa5f f888 	uxtb.w	r8, r8
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	079b      	lsls	r3, r3, #30
 8005668:	d5fc      	bpl.n	8005664 <main+0x95c>
        if (write_in_progress())
 800566a:	f018 0f01 	tst.w	r8, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800566e:	60e0      	str	r0, [r4, #12]
        if (write_in_progress())
 8005670:	d1ea      	bne.n	8005648 <main+0x940>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 8005672:	b293      	uxth	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d16a      	bne.n	800574e <main+0xa46>
 8005678:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800567c:	d23a      	bcs.n	80056f4 <main+0x9ec>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 800567e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8005682:	d21b      	bcs.n	80056bc <main+0x9b4>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005684:	68a3      	ldr	r3, [r4, #8]
 8005686:	069b      	lsls	r3, r3, #26
 8005688:	d4fc      	bmi.n	8005684 <main+0x97c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800568a:	f8c4 e014 	str.w	lr, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	079b      	lsls	r3, r3, #30
 8005692:	d5fc      	bpl.n	800568e <main+0x986>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005694:	60e0      	str	r0, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005696:	68a3      	ldr	r3, [r4, #8]
 8005698:	069b      	lsls	r3, r3, #26
 800569a:	d4fc      	bmi.n	8005696 <main+0x98e>
        QUADSPI->CCR =
 800569c:	f8c4 c014 	str.w	ip, [r4, #20]
        QUADSPI->AR = address;
 80056a0:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	079b      	lsls	r3, r3, #30
 80056a6:	d5fc      	bpl.n	80056a2 <main+0x99a>
            location += kEraseGranularity;
 80056a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
            length -= kEraseGranularity;
 80056ac:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056b0:	60e0      	str	r0, [r4, #12]
        state_.location = location;
 80056b2:	e9c6 2100 	strd	r2, r1, [r6]
        while (!FinishErase());
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d1c6      	bne.n	8005648 <main+0x940>
 80056ba:	e5d3      	b.n	8005264 <main+0x55c>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	d4fc      	bmi.n	80056bc <main+0x9b4>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80056c2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80056c6:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	079b      	lsls	r3, r3, #30
 80056cc:	d5fc      	bpl.n	80056c8 <main+0x9c0>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056ce:	2302      	movs	r3, #2
 80056d0:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	069b      	lsls	r3, r3, #26
 80056d6:	d4fc      	bmi.n	80056d2 <main+0x9ca>
        QUADSPI->CCR =
 80056d8:	f242 5352 	movw	r3, #9554	@ 0x2552
 80056dc:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 80056de:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80056e0:	68a3      	ldr	r3, [r4, #8]
 80056e2:	079b      	lsls	r3, r3, #30
 80056e4:	d5fc      	bpl.n	80056e0 <main+0x9d8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056e6:	2302      	movs	r3, #2
            location += kBlock32Size;
 80056e8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
            length -= kBlock32Size;
 80056ec:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056f0:	60e3      	str	r3, [r4, #12]
            length -= kBlock32Size;
 80056f2:	e7de      	b.n	80056b2 <main+0x9aa>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80056f4:	68a3      	ldr	r3, [r4, #8]
 80056f6:	069b      	lsls	r3, r3, #26
 80056f8:	d4fc      	bmi.n	80056f4 <main+0x9ec>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80056fa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80056fe:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005700:	68a3      	ldr	r3, [r4, #8]
 8005702:	079b      	lsls	r3, r3, #30
 8005704:	d5fc      	bpl.n	8005700 <main+0x9f8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005706:	2302      	movs	r3, #2
 8005708:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	069b      	lsls	r3, r3, #26
 800570e:	d4fc      	bmi.n	800570a <main+0xa02>
        QUADSPI->CCR =
 8005710:	f242 53d8 	movw	r3, #9688	@ 0x25d8
 8005714:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 8005716:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	079b      	lsls	r3, r3, #30
 800571c:	d5fc      	bpl.n	8005718 <main+0xa10>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800571e:	2302      	movs	r3, #2
            location += kBlock64Size;
 8005720:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
            length -= kBlock64Size;
 8005724:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005728:	60e3      	str	r3, [r4, #12]
            length -= kBlock64Size;
 800572a:	e7c2      	b.n	80056b2 <main+0x9aa>
            length_ = 0;
 800572c:	46b1      	mov	r9, r6
 800572e:	2600      	movs	r6, #0
 8005730:	e59e      	b.n	8005270 <main+0x568>
                num_chars++;
 8005732:	277f      	movs	r7, #127	@ 0x7f
    while (data_size)
 8005734:	f1be 0f00 	cmp.w	lr, #0
 8005738:	f47f af65 	bne.w	8005606 <main+0x8fe>
        printf("\xff%s\n", line_);
 800573c:	490b      	ldr	r1, [pc, #44]	@ (800576c <main+0xa64>)
    buf[num_chars] = '\0';
 800573e:	f805 e007 	strb.w	lr, [r5, r7]
 8005742:	480b      	ldr	r0, [pc, #44]	@ (8005770 <main+0xa68>)
 8005744:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005748:	f005 fc1a 	bl	800af80 <iprintf>
    }
 800574c:	e58a      	b.n	8005264 <main+0x55c>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 800574e:	f3c2 030e 	ubfx	r3, r2, #0, #15
 8005752:	2b00      	cmp	r3, #0
 8005754:	d196      	bne.n	8005684 <main+0x97c>
 8005756:	e792      	b.n	800567e <main+0x976>
 8005758:	20000554 	.word	0x20000554
 800575c:	20000530 	.word	0x20000530
 8005760:	c0c0c0c1 	.word	0xc0c0c0c1
 8005764:	2001088c 	.word	0x2001088c
 8005768:	05000105 	.word	0x05000105
 800576c:	20000428 	.word	0x20000428
 8005770:	0800c1b4 	.word	0x0800c1b4
 8005774:	2000052f 	.word	0x2000052f
                bytes[num_bytes] = word >> 24;
 8005778:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800577c:	4e55      	ldr	r6, [pc, #340]	@ (80058d4 <main+0xbcc>)
        for (size_t i = 0; i < 4 - padding; i++)
 800577e:	2f02      	cmp	r7, #2
                bytes[num_bytes] = word >> 24;
 8005780:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 8005784:	f102 0e02 	add.w	lr, r2, #2
                word <<= 8;
 8005788:	ea4f 4c03 	mov.w	ip, r3, lsl #16
        for (size_t i = 0; i < 4 - padding; i++)
 800578c:	d040      	beq.n	8005810 <main+0xb08>
            if (num_bytes < size)
 800578e:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 8005792:	f43f ade0 	beq.w	8005356 <main+0x64e>
                bytes[num_bytes] = word >> 24;
 8005796:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        for (size_t i = 0; i < 4 - padding; i++)
 800579a:	2f04      	cmp	r7, #4
                bytes[num_bytes] = word >> 24;
 800579c:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 80057a0:	f102 0c03 	add.w	ip, r2, #3
        for (size_t i = 0; i < 4 - padding; i++)
 80057a4:	d15c      	bne.n	8005860 <main+0xb58>
            if (num_bytes < size)
 80057a6:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 80057aa:	f43f add4 	beq.w	8005356 <main+0x64e>
                num_bytes++;
 80057ae:	3204      	adds	r2, #4
                bytes[num_bytes] = word >> 24;
 80057b0:	f806 300c 	strb.w	r3, [r6, ip]
    while (length)
 80057b4:	2800      	cmp	r0, #0
 80057b6:	f47f ad88 	bne.w	80052ca <main+0x5c2>
 80057ba:	e5cf      	b.n	800535c <main+0x654>
            group[i] = length ? *str - 33 : 84;
 80057bc:	2801      	cmp	r0, #1
                str++;
 80057be:	f101 0701 	add.w	r7, r1, #1
            group[i] = length ? *str - 33 : 84;
 80057c2:	d12a      	bne.n	800581a <main+0xb12>
 80057c4:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 80057c8:	4639      	mov	r1, r7
 80057ca:	2000      	movs	r0, #0
 80057cc:	2704      	movs	r7, #4
 80057ce:	46f0      	mov	r8, lr
 80057d0:	46f1      	mov	r9, lr
 80057d2:	46f4      	mov	ip, lr
 80057d4:	e59b      	b.n	800530e <main+0x606>
                num_chars++;
 80057d6:	4617      	mov	r7, r2
 80057d8:	e711      	b.n	80055fe <main+0x8f6>
                word |= *bytes++;
 80057da:	4663      	mov	r3, ip
            if (data_size)
 80057dc:	f1be 0f02 	cmp.w	lr, #2
 80057e0:	f833 0b02 	ldrh.w	r0, [r3], #2
 80057e4:	ba40      	rev16	r0, r0
 80057e6:	b280      	uxth	r0, r0
            word <<= 8;
 80057e8:	ea4f 2000 	mov.w	r0, r0, lsl #8
            if (data_size)
 80057ec:	d103      	bne.n	80057f6 <main+0xaee>
 80057ee:	469c      	mov	ip, r3
 80057f0:	f04f 0803 	mov.w	r8, #3
 80057f4:	e716      	b.n	8005624 <main+0x91c>
                word |= *bytes++;
 80057f6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80057fa:	f04f 0804 	mov.w	r8, #4
 80057fe:	f10c 0c03 	add.w	ip, ip, #3
 8005802:	f04f 0e00 	mov.w	lr, #0
 8005806:	4303      	orrs	r3, r0
            word <<= 8;
 8005808:	0218      	lsls	r0, r3, #8
            if (data_size)
 800580a:	e69d      	b.n	8005548 <main+0x840>
                num_chars++;
 800580c:	460f      	mov	r7, r1
 800580e:	e6f6      	b.n	80055fe <main+0x8f6>
        for (size_t i = 0; i < 4 - padding; i++)
 8005810:	4672      	mov	r2, lr
    while (length)
 8005812:	2800      	cmp	r0, #0
 8005814:	f47f ad59 	bne.w	80052ca <main+0x5c2>
 8005818:	e5a0      	b.n	800535c <main+0x654>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 800581a:	4247      	negs	r7, r0
 800581c:	4e2e      	ldr	r6, [pc, #184]	@ (80058d8 <main+0xbd0>)
            group[i] = length ? *str - 33 : 84;
 800581e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8005822:	3802      	subs	r0, #2
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005824:	fba6 8e07 	umull	r8, lr, r6, r7
                str++;
 8005828:	f101 0902 	add.w	r9, r1, #2
            group[i] = length ? *str - 33 : 84;
 800582c:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005830:	f02e 0803 	bic.w	r8, lr, #3
            word += group[i];
 8005834:	fa5f fc8c 	uxtb.w	ip, ip
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005838:	eb08 089e 	add.w	r8, r8, lr, lsr #2
 800583c:	eba7 0708 	sub.w	r7, r7, r8
 8005840:	ea4f 0787 	mov.w	r7, r7, lsl #2
 8005844:	fba6 e707 	umull	lr, r7, r6, r7
 8005848:	ea4f 0797 	mov.w	r7, r7, lsr #2
        for (size_t i = 0; i < 4 - padding; i++)
 800584c:	f1c7 0704 	rsb	r7, r7, #4
            group[i] = length ? *str - 33 : 84;
 8005850:	d124      	bne.n	800589c <main+0xb94>
 8005852:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 8005856:	4649      	mov	r1, r9
 8005858:	2701      	movs	r7, #1
 800585a:	46f0      	mov	r8, lr
 800585c:	46f1      	mov	r9, lr
 800585e:	e556      	b.n	800530e <main+0x606>
        for (size_t i = 0; i < 4 - padding; i++)
 8005860:	4662      	mov	r2, ip
    while (length)
 8005862:	2800      	cmp	r0, #0
 8005864:	f47f ad31 	bne.w	80052ca <main+0x5c2>
 8005868:	e578      	b.n	800535c <main+0x654>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800586a:	2b02      	cmp	r3, #2
 800586c:	f47f accc 	bne.w	8005208 <main+0x500>
 8005870:	4a1a      	ldr	r2, [pc, #104]	@ (80058dc <main+0xbd4>)
 8005872:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005876:	4b1a      	ldr	r3, [pc, #104]	@ (80058e0 <main+0xbd8>)
 8005878:	6191      	str	r1, [r2, #24]
 800587a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800587e:	619a      	str	r2, [r3, #24]
    }
 8005880:	e4c2      	b.n	8005208 <main+0x500>
 8005882:	2a02      	cmp	r2, #2
 8005884:	f47f aa77 	bne.w	8004d76 <main+0x6e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8005888:	4914      	ldr	r1, [pc, #80]	@ (80058dc <main+0xbd4>)
 800588a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800588e:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <main+0xbd8>)
 8005890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005894:	6188      	str	r0, [r1, #24]
 8005896:	619a      	str	r2, [r3, #24]
    }
 8005898:	f7ff ba6d 	b.w	8004d76 <main+0x6e>
            group[i] = length ? *str - 33 : 84;
 800589c:	f891 e002 	ldrb.w	lr, [r1, #2]
 80058a0:	2801      	cmp	r0, #1
 80058a2:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
 80058a6:	fa5f fe8e 	uxtb.w	lr, lr
 80058aa:	d106      	bne.n	80058ba <main+0xbb2>
            word += group[i];
 80058ac:	46f1      	mov	r9, lr
 80058ae:	f04f 0e54 	mov.w	lr, #84	@ 0x54
                str++;
 80058b2:	3103      	adds	r1, #3
            word += group[i];
 80058b4:	2000      	movs	r0, #0
 80058b6:	46f0      	mov	r8, lr
 80058b8:	e529      	b.n	800530e <main+0x606>
            group[i] = length ? *str - 33 : 84;
 80058ba:	f899 8001 	ldrb.w	r8, [r9, #1]
                str++;
 80058be:	3104      	adds	r1, #4
            word += group[i];
 80058c0:	46f1      	mov	r9, lr
 80058c2:	2000      	movs	r0, #0
            group[i] = length ? *str - 33 : 84;
 80058c4:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
            word += group[i];
 80058c8:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 80058cc:	fa5f f888 	uxtb.w	r8, r8
 80058d0:	e51d      	b.n	800530e <main+0x606>
 80058d2:	bf00      	nop
 80058d4:	200004ac 	.word	0x200004ac
 80058d8:	cccccccd 	.word	0xcccccccd
 80058dc:	58021800 	.word	0x58021800
 80058e0:	58020400 	.word	0x58020400
 80058e4:	00000000 	.word	0x00000000

080058e8 <_GLOBAL__sub_I__ZN8recorder7analog_E>:
    SynthEngine() = default;
 80058e8:	4b37      	ldr	r3, [pc, #220]	@ (80059c8 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	4837      	ldr	r0, [pc, #220]	@ (80059cc <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe4>)
    }
 80058f0:	b4f0      	push	{r4, r5, r6, r7}
 80058f2:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	605c      	str	r4, [r3, #4]
 80058fc:	60da      	str	r2, [r3, #12]
 80058fe:	6118      	str	r0, [r3, #16]
      : phase_(0.0f),
 8005900:	61da      	str	r2, [r3, #28]
 8005902:	4833      	ldr	r0, [pc, #204]	@ (80059d0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe8>)
        phase_inc_(0.0f),
 8005904:	621a      	str	r2, [r3, #32]
      : phase_(0.0f),
 8005906:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 8005908:	62da      	str	r2, [r3, #44]	@ 0x2c
      : phase_(0.0f),
 800590a:	635a      	str	r2, [r3, #52]	@ 0x34
        phase_inc_(0.0f),
 800590c:	639a      	str	r2, [r3, #56]	@ 0x38
      : phase_(0.0f),
 800590e:	641a      	str	r2, [r3, #64]	@ 0x40
        phase_inc_(0.0f),
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
      : phase_(0.0f),
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        phase_inc_(0.0f),
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      : phase_(0.0f),
 800591a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        phase_inc_(0.0f),
 800591e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      : phase_(0.0f),
 8005922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        phase_inc_(0.0f),
 8005926:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      : phase_(0.0f),
 800592a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        phase_inc_(0.0f),
 800592e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8005932:	7519      	strb	r1, [r3, #20]
 8005934:	6199      	str	r1, [r3, #24]
        waveform_(Waveform::SINE)
 8005936:	6259      	str	r1, [r3, #36]	@ 0x24
 8005938:	6319      	str	r1, [r3, #48]	@ 0x30
 800593a:	63d9      	str	r1, [r3, #60]	@ 0x3c
 800593c:	6499      	str	r1, [r3, #72]	@ 0x48
 800593e:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
 8005942:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
 8005946:	f8c3 10a4 	str.w	r1, [r3, #164]	@ 0xa4
 800594a:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
      : phase_(0.0f),
 800594e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        phase_inc_(0.0f),
 8005952:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      : phase_(0.0f),
 8005956:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        phase_inc_(0.0f),
 800595a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        waveform_(Waveform::SINE)
 800595e:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
 8005962:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
        PlaybackEngine(T &memory) : memory_{memory} {}
 8005966:	4b1b      	ldr	r3, [pc, #108]	@ (80059d4 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xec>)
      : phase_(0.0f),
 8005968:	6002      	str	r2, [r0, #0]
    SamplePlayer(T& memory) : memory_{memory} {}
 800596a:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 800596c:	6042      	str	r2, [r0, #4]
 800596e:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005972:	61dc      	str	r4, [r3, #28]
 8005974:	f882 11c4 	strb.w	r1, [r2, #452]	@ 0x1c4
    EdgeDetector buttons[numButtons] = {button_1_, button_2_, button_3_, button_4_};
 8005978:	4a17      	ldr	r2, [pc, #92]	@ (80059d8 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf0>)
 800597a:	621c      	str	r4, [r3, #32]
 800597c:	6817      	ldr	r7, [r2, #0]
 800597e:	4a17      	ldr	r2, [pc, #92]	@ (80059dc <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf4>)
 8005980:	4c17      	ldr	r4, [pc, #92]	@ (80059e0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf8>)
 8005982:	6816      	ldr	r6, [r2, #0]
 8005984:	4a17      	ldr	r2, [pc, #92]	@ (80059e4 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xfc>)
 8005986:	f8d4 c000 	ldr.w	ip, [r4]
 800598a:	6815      	ldr	r5, [r2, #0]
 800598c:	4c16      	ldr	r4, [pc, #88]	@ (80059e8 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x100>)
    SaveData(NVMem& nvmem) : nvmem_{nvmem} {}
 800598e:	4a17      	ldr	r2, [pc, #92]	@ (80059ec <_GLOBAL__sub_I__ZN8recorder7analog_E+0x104>)
        waveform_(Waveform::SINE)
 8005990:	6081      	str	r1, [r0, #8]
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	6392      	str	r2, [r2, #56]	@ 0x38
        iter() {}
 8005998:	6511      	str	r1, [r2, #80]	@ 0x50
	typedef _Clock						clock;
	typedef _Dur						duration;
	typedef typename duration::rep				rep;
	typedef typename duration::period			period;

	constexpr time_point() : __d(duration::zero())
 800599a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80059c0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xd8>
 800599e:	e9c4 c700 	strd	ip, r7, [r4]
 80059a2:	e9c4 6502 	strd	r6, r5, [r4, #8]
 80059a6:	ed83 7b02 	vstr	d7, [r3, #8]
    RecordingEngine(T& memory) : memory_{memory} {}
 80059aa:	4c11      	ldr	r4, [pc, #68]	@ (80059f0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x108>)
        JingleEngine() = default;
 80059ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059b0:	e9c0 1104 	strd	r1, r1, [r0, #16]
      __atomic_base() noexcept = default;
 80059b4:	e9c4 2100 	strd	r2, r1, [r4]
 80059b8:	60a1      	str	r1, [r4, #8]
 80059ba:	8183      	strh	r3, [r0, #12]
 80059bc:	bcf0      	pop	{r4, r5, r6, r7}
 80059be:	4770      	bx	lr
	...
 80059c8:	20010928 	.word	0x20010928
 80059cc:	4382d0a4 	.word	0x4382d0a4
 80059d0:	20010910 	.word	0x20010910
 80059d4:	20000580 	.word	0x20000580
 80059d8:	20010908 	.word	0x20010908
 80059dc:	20010904 	.word	0x20010904
 80059e0:	2001090c 	.word	0x2001090c
 80059e4:	20010900 	.word	0x20010900
 80059e8:	200108f0 	.word	0x200108f0
 80059ec:	2001088c 	.word	0x2001088c
 80059f0:	20010748 	.word	0x20010748

080059f4 <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}


void Adc::DMAService(void)
{
 80059f4:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80059f6:	49c7      	ldr	r1, [pc, #796]	@ (8005d14 <recorder::Adc::DMAService()+0x320>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80059f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80059fc:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a00:	4ac5      	ldr	r2, [pc, #788]	@ (8005d18 <recorder::Adc::DMAService()+0x324>)
 8005a02:	b08e      	sub	sp, #56	@ 0x38
 8005a04:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8005a06:	608b      	str	r3, [r1, #8]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	6891      	ldr	r1, [r2, #8]
 8005a0c:	0749      	lsls	r1, r1, #29
 8005a0e:	f100 809a 	bmi.w	8005b46 <recorder::Adc::DMAService()+0x152>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8005a12:	6c10      	ldr	r0, [r2, #64]	@ 0x40
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 8005a14:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
  MODIFY_REG(ADCx->CR,
 8005a18:	6894      	ldr	r4, [r2, #8]
 8005a1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
    LL_DMA_ClearFlag_TC1(DMA1);
    LL_DMA_ClearFlag_HT1(DMA1);

    if (!LL_ADC_REG_IsConversionOngoing(ADC1))
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 8005a1e:	b280      	uxth	r0, r0
 8005a20:	49be      	ldr	r1, [pc, #760]	@ (8005d1c <recorder::Adc::DMAService()+0x328>)
 8005a22:	eddf 5abf 	vldr	s11, [pc, #764]	@ 8005d20 <recorder::Adc::DMAService()+0x32c>
 8005a26:	ee07 0a90 	vmov	s15, r0
 8005a2a:	4021      	ands	r1, r4
 8005a2c:	ed9f 6abd 	vldr	s12, [pc, #756]	@ 8005d24 <recorder::Adc::DMAService()+0x330>
 8005a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a34:	f041 0104 	orr.w	r1, r1, #4
 8005a38:	6091      	str	r1, [r2, #8]
 8005a3a:	eee7 6aa5 	vfma.f32	s13, s15, s11
        if (kEnableReverse && current_pot_ == POT_7)
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 8005a3e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8005a42:	eef0 7a47 	vmov.f32	s15, s14
 8005a46:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005a4a:	0090      	lsls	r0, r2, #2
 8005a4c:	00c9      	lsls	r1, r1, #3
 8005a4e:	eee6 7a86 	vfma.f32	s15, s13, s12
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 8005a52:	185d      	adds	r5, r3, r1
 8005a54:	f101 0408 	add.w	r4, r1, #8
 8005a58:	3114      	adds	r1, #20
 8005a5a:	ed95 7a08 	vldr	s14, [r5, #32]

        if (delta >= threshold_)
 8005a5e:	edd5 6a07 	vldr	s13, [r5, #28]
 8005a62:	441c      	add	r4, r3
 8005a64:	4419      	add	r1, r3
        float delta = input - position_;
 8005a66:	ee37 6ac7 	vsub.f32	s12, s15, s14
        if (delta >= threshold_)
 8005a6a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	f2c0 8142 	blt.w	8005cfa <recorder::Adc::DMAService()+0x306>
        {
            position_ = input - threshold_;
 8005a76:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005a7a:	ed85 7a08 	vstr	s14, [r5, #32]
 8005a7e:	ed91 6a01 	vldr	s12, [r1, #4]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 8005a82:	1881      	adds	r1, r0, r2
 8005a84:	3201      	adds	r2, #1
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 8005a86:	edd4 4a01 	vldr	s9, [r4, #4]
 8005a8a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8005a8e:	ed9f 5aa6 	vldr	s10, [pc, #664]	@ 8005d28 <recorder::Adc::DMAService()+0x334>
 8005a92:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8005a96:	edd1 5a0a 	vldr	s11, [r1, #40]	@ 0x28
 8005a9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005a9e:	edd1 7a05 	vldr	s15, [r1, #20]
 8005aa2:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005aa6:	edd1 6a09 	vldr	s13, [r1, #36]	@ 0x24
 8005aaa:	edd0 5a01 	vldr	s11, [r0, #4]
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
            float frac = sample - index;
            float a = kPotCorrection[index];
 8005aae:	489f      	ldr	r0, [pc, #636]	@ (8005d2c <recorder::Adc::DMAService()+0x338>)
 8005ab0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005ab4:	eef0 5a67 	vmov.f32	s11, s15
 8005ab8:	eee7 5a26 	vfma.f32	s11, s14, s13
        increment_ = (sample - history_) * step_;
 8005abc:	edd4 6a00 	vldr	s13, [r4]
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8005ac0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
      if (__a < __b)
 8005ac4:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
      if (__b < __a)
 8005ac8:	eef4 7ac6 	vcmpe.f32	s15, s12
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8005acc:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 8005d30 <recorder::Adc::DMAService()+0x33c>
 8005ad0:	eddf 5a98 	vldr	s11, [pc, #608]	@ 8005d34 <recorder::Adc::DMAService()+0x340>
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return std::clamp(x, out_min_, out_max_);
 8005ad8:	bfc8      	it	gt
 8005ada:	edd1 7a06 	vldrgt	s15, [r1, #24]
 8005ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005ae2:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8005ae6:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8005aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005af2:	ee17 1a10 	vmov	r1, s14
 8005af6:	293f      	cmp	r1, #63	@ 0x3f
 8005af8:	bfa8      	it	ge
 8005afa:	213f      	movge	r1, #63	@ 0x3f
            float frac = sample - index;
 8005afc:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 8005b00:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 8005b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = kPotCorrection[index + 1];
            return a + (b - a) * frac;
 8005b08:	ed95 6a01 	vldr	s12, [r5, #4]
            float frac = sample - index;
 8005b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 8005b10:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 8005b14:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005b18:	eea7 7a86 	vfma.f32	s14, s15, s12
 8005b1c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005b20:	ee67 7aa4 	vmul.f32	s15, s15, s9
  { return __builtin_fabsf(__x); }
 8005b24:	eef0 6ae7 	vabs.f32	s13, s15
 8005b28:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8005b2c:	eef4 6ac5 	vcmpe.f32	s13, s10
 8005b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b34:	d803      	bhi.n	8005b3e <recorder::Adc::DMAService()+0x14a>
        {
            history_ = sample;
 8005b36:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 8005b3a:	edc4 5a02 	vstr	s11, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 8005b3e:	f002 0207 	and.w	r2, r2, #7
 8005b42:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 8005b46:	ed93 0a02 	vldr	s0, [r3, #8]
 8005b4a:	edd3 0a0c 	vldr	s1, [r3, #48]	@ 0x30
 8005b4e:	ed93 1a16 	vldr	s2, [r3, #88]	@ 0x58
 8005b52:	edd3 1a20 	vldr	s3, [r3, #128]	@ 0x80
 8005b56:	ed93 2a2a 	vldr	s4, [r3, #168]	@ 0xa8
 8005b5a:	edd3 2a34 	vldr	s5, [r3, #208]	@ 0xd0
 8005b5e:	ed93 3a3e 	vldr	s6, [r3, #248]	@ 0xf8
 8005b62:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8005b66:	ed93 4a04 	vldr	s8, [r3, #16]
 8005b6a:	edd3 4a0e 	vldr	s9, [r3, #56]	@ 0x38
 8005b6e:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8005b72:	ee34 4a00 	vadd.f32	s8, s8, s0
 8005b76:	edd3 5a22 	vldr	s11, [r3, #136]	@ 0x88
 8005b7a:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8005b7e:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 8005b82:	ee35 5a01 	vadd.f32	s10, s10, s2
 8005b86:	edd3 6a36 	vldr	s13, [r3, #216]	@ 0xd8
 8005b8a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8005b8e:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 8005b92:	ee36 6a02 	vadd.f32	s12, s12, s4
 8005b96:	edd3 3a4a 	vldr	s7, [r3, #296]	@ 0x128
 8005b9a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005b9e:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 8005ba2:	4e65      	ldr	r6, [pc, #404]	@ (8005d38 <recorder::Adc::DMAService()+0x344>)
 8005ba4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005ba8:	ed83 6a2a 	vstr	s12, [r3, #168]	@ 0xa8
 8005bac:	edc3 6a34 	vstr	s13, [r3, #208]	@ 0xd0
 8005bb0:	ed83 7a3e 	vstr	s14, [r3, #248]	@ 0xf8
 8005bb4:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
 8005bb8:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8005bbc:	ed8d 4a06 	vstr	s8, [sp, #24]
 8005bc0:	edc3 4a0c 	vstr	s9, [r3, #48]	@ 0x30
 8005bc4:	edcd 4a07 	vstr	s9, [sp, #28]
 8005bc8:	ed83 5a16 	vstr	s10, [r3, #88]	@ 0x58
 8005bcc:	ed8d 5a08 	vstr	s10, [sp, #32]
 8005bd0:	edc3 5a20 	vstr	s11, [r3, #128]	@ 0x80
 8005bd4:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8005bd8:	ed8d 6a0a 	vstr	s12, [sp, #40]	@ 0x28
 8005bdc:	edcd 6a0b 	vstr	s13, [sp, #44]	@ 0x2c
 8005be0:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8005be4:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005be8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8005bec:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005bf0:	4c52      	ldr	r4, [pc, #328]	@ (8005d3c <recorder::Adc::DMAService()+0x348>)
 8005bf2:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 8005bf4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005bf8:	eeb0 6a67 	vmov.f32	s12, s15
 8005bfc:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005d40 <recorder::Adc::DMAService()+0x34c>
                float sample = dma_buffer_[read_index_];
 8005c00:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c04:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c0c:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005c0e:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c16:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c1a:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 8005c1e:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c20:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005c24:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005c28:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c2c:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c30:	ed8d 6a00 	vstr	s12, [sp]
 8005c34:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c38:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005c3a:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c42:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c46:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005c4a:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005c4e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005c52:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c56:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c5a:	ed8d 6a03 	vstr	s12, [sp, #12]
 8005c5e:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c62:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005c64:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c6c:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c70:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005c74:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005c78:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005c7c:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c80:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c84:	ed8d 6a01 	vstr	s12, [sp, #4]
 8005c88:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c8c:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005c8e:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005c96:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005c9a:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005c9e:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005ca2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005ca6:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005caa:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005cae:	ed8d 6a04 	vstr	s12, [sp, #16]
 8005cb2:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005cb6:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005cb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005cbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005cc0:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005cc4:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8005cc8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ccc:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8005cce:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005cd2:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005cd6:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8005cda:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005cde:	08e4      	lsrs	r4, r4, #3
 8005ce0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005ce4:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ce8:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8005cec:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005cf0:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 8005cf4:	47a8      	blx	r5
    }

    PerformCallback();
}
 8005cf6:	b00e      	add	sp, #56	@ 0x38
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
        else if (delta <= -threshold_)
 8005cfa:	eef1 5a66 	vneg.f32	s11, s13
 8005cfe:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	f63f aeba 	bhi.w	8005a7e <recorder::Adc::DMAService()+0x8a>
            position_ = input + threshold_;
 8005d0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005d0e:	ed85 7a08 	vstr	s14, [r5, #32]
 8005d12:	e6b4      	b.n	8005a7e <recorder::Adc::DMAService()+0x8a>
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40022000 	.word	0x40022000
 8005d1c:	7fffffc0 	.word	0x7fffffc0
 8005d20:	37800080 	.word	0x37800080
 8005d24:	3f8051ec 	.word	0x3f8051ec
 8005d28:	34000000 	.word	0x34000000
 8005d2c:	0800c428 	.word	0x0800c428
 8005d30:	42800000 	.word	0x42800000
 8005d34:	00000000 	.word	0x00000000
 8005d38:	3800fc00 	.word	0x3800fc00
 8005d3c:	aaaaaaab 	.word	0xaaaaaaab
 8005d40:	38000080 	.word	0x38000080

08005d44 <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 8005d44:	4b01      	ldr	r3, [pc, #4]	@ (8005d4c <recorder::Adc::DMAHandler()+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	f7ff be54 	b.w	80059f4 <recorder::Adc::DMAService()>
 8005d4c:	20010da4 	.word	0x20010da4

08005d50 <recorder::Adc::InitADC(ADC_TypeDef*)>:
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8005d50:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <recorder::Adc::InitADC(ADC_TypeDef*)+0x78>)
void Adc::InitADC(ADC_TypeDef* adc)
{
    LL_ADC_SetBoostMode(adc, LL_ADC_BOOST_MODE_50MHZ);
    LL_ADC_DisableDeepPowerDown(adc);
    LL_ADC_EnableInternalRegulator(adc);
    system::Delay_ms(1);
 8005d52:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d54:	4a1d      	ldr	r2, [pc, #116]	@ (8005dcc <recorder::Adc::InitADC(ADC_TypeDef*)+0x7c>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8005d60:	688b      	ldr	r3, [r1, #8]
 8005d62:	bf0c      	ite	eq
 8005d64:	f443 73e0 	orreq.w	r3, r3, #448	@ 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 8005d68:	f443 7340 	orrne.w	r3, r3, #768	@ 0x300
{
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	460c      	mov	r4, r1
 8005d70:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d72:	6889      	ldr	r1, [r1, #8]
 8005d74:	b084      	sub	sp, #16
  MODIFY_REG(ADCx->CR,
 8005d76:	4b16      	ldr	r3, [pc, #88]	@ (8005dd0 <recorder::Adc::InitADC(ADC_TypeDef*)+0x80>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d78:	400a      	ands	r2, r1
 8005d7a:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(ADCx->CR,
 8005d7c:	68a2      	ldr	r2, [r4, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	60a3      	str	r3, [r4, #8]
    system::Delay_ms(1);
 8005d86:	f001 fde5 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>

    LL_ADC_InitTypeDef adc_init =
 8005d8a:	2300      	movs	r3, #0
        .Resolution   = LL_ADC_RESOLUTION_16B,
        .LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE,
        .LowPowerMode = LL_ADC_LP_MODE_NONE,
    };

    LL_ADC_Init(adc, &adc_init);
 8005d8c:	4669      	mov	r1, sp
 8005d8e:	4620      	mov	r0, r4
    LL_ADC_InitTypeDef adc_init =
 8005d90:	9302      	str	r3, [sp, #8]
 8005d92:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8005dc0 <recorder::Adc::InitADC(ADC_TypeDef*)+0x70>
 8005d96:	ed8d 7b00 	vstr	d7, [sp]
    LL_ADC_Init(adc, &adc_init);
 8005d9a:	f003 fb5f 	bl	800945c <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8005d9e:	68a1      	ldr	r1, [r4, #8]
 8005da0:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd4 <recorder::Adc::InitADC(ADC_TypeDef*)+0x84>)
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <recorder::Adc::InitADC(ADC_TypeDef*)+0x88>)
 8005da4:	400a      	ands	r2, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dbfc      	blt.n	8005daa <recorder::Adc::InitADC(ADC_TypeDef*)+0x5a>
    LL_ADC_StartCalibration(adc,
        LL_ADC_CALIB_OFFSET_LINEARITY, LL_ADC_SINGLE_ENDED);
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
 8005db0:	2001      	movs	r0, #1
 8005db2:	f001 fdcf 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
}
 8005db6:	b004      	add	sp, #16
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w
	...
 8005dc8:	5c001000 	.word	0x5c001000
 8005dcc:	5fffffc0 	.word	0x5fffffc0
 8005dd0:	6fffffc0 	.word	0x6fffffc0
 8005dd4:	3ffeffc0 	.word	0x3ffeffc0
 8005dd8:	80010000 	.word	0x80010000
 8005ddc:	00000000 	.word	0x00000000

08005de0 <recorder::Adc::InitAudioSequence()>:

void Adc::InitAudioSequence(void)
{
 8005de0:	b510      	push	{r4, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 8005de2:	2300      	movs	r3, #0
{
 8005de4:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8005de6:	4c2e      	ldr	r4, [pc, #184]	@ (8005ea0 <recorder::Adc::InitAudioSequence()+0xc0>)
    };
 8005de8:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8005dec:	4669      	mov	r1, sp
 8005dee:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8005df0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8005e98 <recorder::Adc::InitAudioSequence()+0xb8>
 8005df4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8005df8:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8005dfa:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8005dfe:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 8005e02:	f003 fb45 	bl	8009490 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	4b27      	ldr	r3, [pc, #156]	@ (8005ea4 <recorder::Adc::InitAudioSequence()+0xc4>)
 8005e08:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fab3 f383 	clz	r3, r3
 8005e12:	69e0      	ldr	r0, [r4, #28]
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
  MODIFY_REG(*preg,
 8005e18:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <recorder::Adc::InitAudioSequence()+0xc8>)
 8005e1a:	4303      	orrs	r3, r0
 8005e1c:	61e3      	str	r3, [r4, #28]
 8005e1e:	f8d2 0130 	ldr.w	r0, [r2, #304]	@ 0x130
 8005e22:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <recorder::Adc::InitAudioSequence()+0xcc>)
 8005e24:	f420 60f8 	bic.w	r0, r0, #1984	@ 0x7c0
 8005e28:	f440 7070 	orr.w	r0, r0, #960	@ 0x3c0
 8005e2c:	f8c2 0130 	str.w	r0, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 8005e30:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8005e34:	f420 3060 	bic.w	r0, r0, #229376	@ 0x38000
 8005e38:	f440 3020 	orr.w	r0, r0, #163840	@ 0x28000
 8005e3c:	f8c2 0118 	str.w	r0, [r2, #280]	@ 0x118
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	fab3 f383 	clz	r3, r3
 8005e48:	69e0      	ldr	r0, [r4, #28]
 8005e4a:	4099      	lsls	r1, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <recorder::Adc::InitAudioSequence()+0xd0>)
 8005e4e:	4301      	orrs	r1, r0
 8005e50:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005e52:	f8d2 1130 	ldr.w	r1, [r2, #304]	@ 0x130
 8005e56:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8005e5a:	f441 4130 	orr.w	r1, r1, #45056	@ 0xb000
 8005e5e:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 8005e62:	f8d2 1118 	ldr.w	r1, [r2, #280]	@ 0x118
 8005e66:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8005e6a:	f041 0128 	orr.w	r1, r1, #40	@ 0x28
 8005e6e:	f8c2 1118 	str.w	r1, [r2, #280]	@ 0x118
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005e72:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005e74:	490f      	ldr	r1, [pc, #60]	@ (8005eb4 <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005e76:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005e78:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb8 <recorder::Adc::InitAudioSequence()+0xd8>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005e7a:	f043 0303 	orr.w	r3, r3, #3
 8005e7e:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8005e80:	6923      	ldr	r3, [r4, #16]
 8005e82:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e86:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	4019      	ands	r1, r3
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8005e90:	b006      	add	sp, #24
 8005e92:	bd10      	pop	{r4, pc}
 8005e94:	f3af 8000 	nop.w
 8005e98:	00000003 	.word	0x00000003
 8005e9c:	00001000 	.word	0x00001000
 8005ea0:	40022100 	.word	0x40022100
 8005ea4:	3ef08000 	.word	0x3ef08000
 8005ea8:	40022000 	.word	0x40022000
 8005eac:	2e300800 	.word	0x2e300800
 8005eb0:	fffffbfc 	.word	0xfffffbfc
 8005eb4:	fc00fe1f 	.word	0xfc00fe1f
 8005eb8:	00010020 	.word	0x00010020

08005ebc <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8005ebc:	b510      	push	{r4, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8005ebe:	2300      	movs	r3, #0
{
 8005ec0:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8005ec2:	4c69      	ldr	r4, [pc, #420]	@ (8006068 <recorder::Adc::InitPotSequence()+0x1ac>)
    LL_ADC_REG_InitTypeDef reg_init =
 8005ec4:	2007      	movs	r0, #7
 8005ec6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	9001      	str	r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8005ece:	4669      	mov	r1, sp
 8005ed0:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8005ed2:	9202      	str	r2, [sp, #8]
 8005ed4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005edc:	9305      	str	r3, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8005ede:	f003 fad7 	bl	8009490 <LL_ADC_REG_Init>
 8005ee2:	4a62      	ldr	r2, [pc, #392]	@ (800606c <recorder::Adc::InitPotSequence()+0x1b0>)
 8005ee4:	fa92 f2a2 	rbit	r2, r2

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8005ee8:	2301      	movs	r3, #1
 8005eea:	fab2 f282 	clz	r2, r2
 8005eee:	69e0      	ldr	r0, [r4, #28]
 8005ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8005ef4:	495e      	ldr	r1, [pc, #376]	@ (8006070 <recorder::Adc::InitPotSequence()+0x1b4>)
 8005ef6:	4302      	orrs	r2, r0
 8005ef8:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005efa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005efc:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8005f00:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005f04:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005f06:	6962      	ldr	r2, [r4, #20]
 8005f08:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005f0c:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 8005f10:	6162      	str	r2, [r4, #20]
 8005f12:	fa91 f1a1 	rbit	r1, r1
 8005f16:	fab1 f181 	clz	r1, r1
 8005f1a:	69e0      	ldr	r0, [r4, #28]
 8005f1c:	4a55      	ldr	r2, [pc, #340]	@ (8006074 <recorder::Adc::InitPotSequence()+0x1b8>)
 8005f1e:	fa03 f101 	lsl.w	r1, r3, r1
 8005f22:	4301      	orrs	r1, r0
 8005f24:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005f26:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f28:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8005f2c:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 8005f30:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005f32:	69a1      	ldr	r1, [r4, #24]
 8005f34:	f021 0107 	bic.w	r1, r1, #7
 8005f38:	f041 0105 	orr.w	r1, r1, #5
 8005f3c:	61a1      	str	r1, [r4, #24]
 8005f3e:	fa92 f2a2 	rbit	r2, r2
 8005f42:	fab2 f282 	clz	r2, r2
 8005f46:	69e0      	ldr	r0, [r4, #28]
 8005f48:	494b      	ldr	r1, [pc, #300]	@ (8006078 <recorder::Adc::InitPotSequence()+0x1bc>)
 8005f4a:	fa03 f202 	lsl.w	r2, r3, r2
 8005f4e:	4302      	orrs	r2, r0
 8005f50:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005f52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005f54:	f422 02f8 	bic.w	r2, r2, #8126464	@ 0x7c0000
 8005f58:	f442 12e0 	orr.w	r2, r2, #1835008	@ 0x1c0000
 8005f5c:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005f5e:	6962      	ldr	r2, [r4, #20]
 8005f60:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 8005f64:	f442 0220 	orr.w	r2, r2, #10485760	@ 0xa00000
 8005f68:	6162      	str	r2, [r4, #20]
 8005f6a:	fa91 f1a1 	rbit	r1, r1
 8005f6e:	fab1 f181 	clz	r1, r1
 8005f72:	69e0      	ldr	r0, [r4, #28]
 8005f74:	4a41      	ldr	r2, [pc, #260]	@ (800607c <recorder::Adc::InitPotSequence()+0x1c0>)
 8005f76:	fa03 f101 	lsl.w	r1, r3, r1
 8005f7a:	4301      	orrs	r1, r0
 8005f7c:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005f7e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f80:	f021 51f8 	bic.w	r1, r1, #520093696	@ 0x1f000000
 8005f84:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8005f88:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005f8a:	6961      	ldr	r1, [r4, #20]
 8005f8c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005f90:	f441 41a0 	orr.w	r1, r1, #20480	@ 0x5000
 8005f94:	6161      	str	r1, [r4, #20]
 8005f96:	fa92 f2a2 	rbit	r2, r2
 8005f9a:	fab2 f282 	clz	r2, r2
 8005f9e:	69e0      	ldr	r0, [r4, #28]
 8005fa0:	4937      	ldr	r1, [pc, #220]	@ (8006080 <recorder::Adc::InitPotSequence()+0x1c4>)
 8005fa2:	fa03 f202 	lsl.w	r2, r3, r2
 8005fa6:	4302      	orrs	r2, r0
 8005fa8:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005faa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005fac:	f022 021f 	bic.w	r2, r2, #31
 8005fb0:	f042 020c 	orr.w	r2, r2, #12
 8005fb4:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005fb6:	69a2      	ldr	r2, [r4, #24]
 8005fb8:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8005fbc:	f442 72a0 	orr.w	r2, r2, #320	@ 0x140
 8005fc0:	61a2      	str	r2, [r4, #24]
 8005fc2:	fa91 f1a1 	rbit	r1, r1
 8005fc6:	fab1 f181 	clz	r1, r1
 8005fca:	69e0      	ldr	r0, [r4, #28]
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <recorder::Adc::InitPotSequence()+0x1c8>)
 8005fce:	fa03 f101 	lsl.w	r1, r3, r1
 8005fd2:	4301      	orrs	r1, r0
 8005fd4:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005fd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fd8:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8005fdc:	f441 7150 	orr.w	r1, r1, #832	@ 0x340
 8005fe0:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005fe2:	69a1      	ldr	r1, [r4, #24]
 8005fe4:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8005fe8:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
 8005fec:	61a1      	str	r1, [r4, #24]
 8005fee:	fa92 f2a2 	rbit	r2, r2
 8005ff2:	fab2 f282 	clz	r2, r2
 8005ff6:	69e0      	ldr	r0, [r4, #28]
 8005ff8:	4923      	ldr	r1, [pc, #140]	@ (8006088 <recorder::Adc::InitPotSequence()+0x1cc>)
 8005ffa:	fa03 f202 	lsl.w	r2, r3, r2
 8005ffe:	4302      	orrs	r2, r0
 8006000:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8006002:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006004:	f422 32f8 	bic.w	r2, r2, #126976	@ 0x1f000
 8006008:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
 800600c:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 800600e:	69a2      	ldr	r2, [r4, #24]
 8006010:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8006014:	f042 62a0 	orr.w	r2, r2, #83886080	@ 0x5000000
 8006018:	61a2      	str	r2, [r4, #24]
 800601a:	fa91 f1a1 	rbit	r1, r1
 800601e:	fab1 f181 	clz	r1, r1
 8006022:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8006024:	4a19      	ldr	r2, [pc, #100]	@ (800608c <recorder::Adc::InitPotSequence()+0x1d0>)
 8006026:	408b      	lsls	r3, r1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8006028:	4919      	ldr	r1, [pc, #100]	@ (8006090 <recorder::Adc::InitPotSequence()+0x1d4>)
 800602a:	4303      	orrs	r3, r0
 800602c:	4819      	ldr	r0, [pc, #100]	@ (8006094 <recorder::Adc::InitPotSequence()+0x1d8>)
 800602e:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 8006030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006032:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8006036:	f443 0388 	orr.w	r3, r3, #4456448	@ 0x440000
 800603a:	6363      	str	r3, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 800603c:	69a3      	ldr	r3, [r4, #24]
 800603e:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8006042:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8006046:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	401a      	ands	r2, r3
 800604c:	f042 0203 	orr.w	r2, r2, #3
 8006050:	6122      	str	r2, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006058:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	4018      	ands	r0, r3
 800605e:	4301      	orrs	r1, r0
 8006060:	6121      	str	r1, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 8006062:	b006      	add	sp, #24
 8006064:	bd10      	pop	{r4, pc}
 8006066:	bf00      	nop
 8006068:	40022000 	.word	0x40022000
 800606c:	0c900008 	.word	0x0c900008
 8006070:	2a000400 	.word	0x2a000400
 8006074:	1d500080 	.word	0x1d500080
 8006078:	10c00010 	.word	0x10c00010
 800607c:	32601000 	.word	0x32601000
 8006080:	36902000 	.word	0x36902000
 8006084:	4b840000 	.word	0x4b840000
 8006088:	47520000 	.word	0x47520000
 800608c:	fffffbfc 	.word	0xfffffbfc
 8006090:	000f0080 	.word	0x000f0080
 8006094:	fc00fe1f 	.word	0xfc00fe1f

08006098 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8006098:	4aa4      	ldr	r2, [pc, #656]	@ (800632c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x294>)
        history_ = 0;
 800609a:	2300      	movs	r3, #0
{
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
        out_max_ = max;
 800609e:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
        step_ = 1.f / period;
 80060a2:	f04f 5678 	mov.w	r6, #1040187392	@ 0x3e000000
    callback_ = callback;
    started_ = false;
 80060a6:	2700      	movs	r7, #0
    instance_ = this;
 80060a8:	6010      	str	r0, [r2, #0]
        threshold_ = threshold;
 80060aa:	4aa1      	ldr	r2, [pc, #644]	@ (8006330 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x298>)
{
 80060ac:	b095      	sub	sp, #84	@ 0x54
    callback_ = callback;
 80060ae:	6001      	str	r1, [r0, #0]
{
 80060b0:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80060b2:	49a0      	ldr	r1, [pc, #640]	@ (8006334 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x29c>)
        threshold_ = threshold;
 80060b4:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 80060b6:	6282      	str	r2, [r0, #40]	@ 0x28
        threshold_ = threshold;
 80060b8:	6442      	str	r2, [r0, #68]	@ 0x44
        in_min_ = out_min_ + threshold_;
 80060ba:	6502      	str	r2, [r0, #80]	@ 0x50
        threshold_ = threshold;
 80060bc:	66c2      	str	r2, [r0, #108]	@ 0x6c
        in_min_ = out_min_ + threshold_;
 80060be:	6782      	str	r2, [r0, #120]	@ 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80060c0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    started_ = false;
 80060c2:	7107      	strb	r7, [r0, #4]
 80060c4:	60c6      	str	r6, [r0, #12]
        history_ = 0;
 80060c6:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 80060c8:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 80060ca:	6143      	str	r3, [r0, #20]
        out_max_ = max;
 80060cc:	6185      	str	r5, [r0, #24]
        position_ = initial_value;
 80060ce:	6203      	str	r3, [r0, #32]
        out_range_ = out_max_ - out_min_;
 80060d0:	6245      	str	r5, [r0, #36]	@ 0x24
        step_ = 1.f / period;
 80060d2:	6346      	str	r6, [r0, #52]	@ 0x34
        history_ = 0;
 80060d4:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 80060d6:	6383      	str	r3, [r0, #56]	@ 0x38
        out_min_ = min;
 80060d8:	63c3      	str	r3, [r0, #60]	@ 0x3c
        out_max_ = max;
 80060da:	6405      	str	r5, [r0, #64]	@ 0x40
        position_ = initial_value;
 80060dc:	6483      	str	r3, [r0, #72]	@ 0x48
        out_range_ = out_max_ - out_min_;
 80060de:	64c5      	str	r5, [r0, #76]	@ 0x4c
        step_ = 1.f / period;
 80060e0:	65c6      	str	r6, [r0, #92]	@ 0x5c
        history_ = 0;
 80060e2:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 80060e4:	6603      	str	r3, [r0, #96]	@ 0x60
        out_min_ = min;
 80060e6:	6643      	str	r3, [r0, #100]	@ 0x64
        out_max_ = max;
 80060e8:	6685      	str	r5, [r0, #104]	@ 0x68
        position_ = initial_value;
 80060ea:	6703      	str	r3, [r0, #112]	@ 0x70
        out_range_ = out_max_ - out_min_;
 80060ec:	6745      	str	r5, [r0, #116]	@ 0x74
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80060ee:	6541      	str	r1, [r0, #84]	@ 0x54
 80060f0:	67c1      	str	r1, [r0, #124]	@ 0x7c
        threshold_ = threshold;
 80060f2:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
        in_min_ = out_min_ + threshold_;
 80060f6:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80060fa:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
        threshold_ = threshold;
 80060fe:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
        in_min_ = out_min_ + threshold_;
 8006102:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8006106:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
        threshold_ = threshold;
 800610a:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
        in_min_ = out_min_ + threshold_;
 800610e:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8006112:	f8c0 10f4 	str.w	r1, [r0, #244]	@ 0xf4
        step_ = 1.f / period;
 8006116:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
        history_ = 0;
 800611a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 800611e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        out_min_ = min;
 8006122:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        out_max_ = max;
 8006126:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
        position_ = initial_value;
 800612a:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        out_range_ = out_max_ - out_min_;
 800612e:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
        step_ = 1.f / period;
 8006132:	f8c0 60ac 	str.w	r6, [r0, #172]	@ 0xac
        history_ = 0;
 8006136:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 800613a:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        out_min_ = min;
 800613e:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
        out_max_ = max;
 8006142:	f8c0 50b8 	str.w	r5, [r0, #184]	@ 0xb8
        position_ = initial_value;
 8006146:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
        out_range_ = out_max_ - out_min_;
 800614a:	f8c0 50c4 	str.w	r5, [r0, #196]	@ 0xc4
        step_ = 1.f / period;
 800614e:	f8c0 60d4 	str.w	r6, [r0, #212]	@ 0xd4
        history_ = 0;
 8006152:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 8006156:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        out_min_ = min;
 800615a:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
        out_max_ = max;
 800615e:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
        position_ = initial_value;
 8006162:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
        out_range_ = out_max_ - out_min_;
 8006166:	f8c0 50ec 	str.w	r5, [r0, #236]	@ 0xec
        step_ = 1.f / period;
 800616a:	f8c0 60fc 	str.w	r6, [r0, #252]	@ 0xfc
        history_ = 0;
 800616e:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        step_ = 1.f / period;
 8006172:	f8c0 6124 	str.w	r6, [r0, #292]	@ 0x124
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006176:	4e70      	ldr	r6, [pc, #448]	@ (8006338 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
        increment_ = 0;
 8006178:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        out_min_ = min;
 800617c:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
        position_ = initial_value;
 8006180:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
        history_ = 0;
 8006184:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 8006188:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        out_min_ = min;
 800618c:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
        position_ = initial_value;
 8006190:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
        out_max_ = max;
 8006194:	f8c0 5108 	str.w	r5, [r0, #264]	@ 0x108
        threshold_ = threshold;
 8006198:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
        out_range_ = out_max_ - out_min_;
 800619c:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
        in_min_ = out_min_ + threshold_;
 80061a0:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 80061a4:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
 80061a8:	f8c0 1144 	str.w	r1, [r0, #324]	@ 0x144
        out_max_ = max;
 80061ac:	f8c0 5130 	str.w	r5, [r0, #304]	@ 0x130
        threshold_ = threshold;
 80061b0:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
        out_range_ = out_max_ - out_min_;
 80061b4:	f8c0 513c 	str.w	r5, [r0, #316]	@ 0x13c
        in_min_ = out_min_ + threshold_;
 80061b8:	f8c0 2140 	str.w	r2, [r0, #320]	@ 0x140
  MODIFY_REG(ADCx->CR,
 80061bc:	4d5f      	ldr	r5, [pc, #380]	@ (800633c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a4>)
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0; 
 80061be:	e9c0 7752 	strd	r7, r7, [r0, #328]	@ 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
    LL_GPIO_StructInit(&gpio_init);
 80061c6:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80061d0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061dc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80061e8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	9302      	str	r3, [sp, #8]
 80061f2:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 80061f4:	f003 fac2 	bl	800977c <LL_GPIO_StructInit>
        gpio_init.Pin |= LL_GPIO_PIN_4;
 80061f8:	22da      	movs	r2, #218	@ 0xda
 80061fa:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 80061fc:	a904      	add	r1, sp, #16
 80061fe:	4850      	ldr	r0, [pc, #320]	@ (8006340 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a8>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8006200:	9708      	str	r7, [sp, #32]
 8006202:	4f50      	ldr	r7, [pc, #320]	@ (8006344 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ac>)
        gpio_init.Pin |= LL_GPIO_PIN_4;
 8006204:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8006208:	f003 fa04 	bl	8009614 <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 800620c:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 800620e:	a904      	add	r1, sp, #16
 8006210:	484d      	ldr	r0, [pc, #308]	@ (8006348 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b0>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8006212:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 8006214:	f003 f9fe 	bl	8009614 <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 8006218:	4a4c      	ldr	r2, [pc, #304]	@ (800634c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b4>)
    InitADC(ADC1);
 800621a:	4629      	mov	r1, r5
 800621c:	4620      	mov	r0, r4
 800621e:	6853      	ldr	r3, [r2, #4]
 8006220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006224:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006226:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800622a:	4a49      	ldr	r2, [pc, #292]	@ (8006350 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b8>)
 800622c:	f043 0320 	orr.w	r3, r3, #32
 8006230:	f8c6 30d8 	str.w	r3, [r6, #216]	@ 0xd8
 8006234:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCx->CR,
 8006238:	f106 4668 	add.w	r6, r6, #3892314112	@ 0xe8000000
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	f5a6 560c 	sub.w	r6, r6, #8960	@ 0x2300
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006248:	6893      	ldr	r3, [r2, #8]
 800624a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800624e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006252:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8006254:	68ab      	ldr	r3, [r5, #8]
 8006256:	403b      	ands	r3, r7
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	60ab      	str	r3, [r5, #8]
 800625e:	68b3      	ldr	r3, [r6, #8]
 8006260:	403b      	ands	r3, r7
 8006262:	f043 0302 	orr.w	r3, r3, #2
 8006266:	60b3      	str	r3, [r6, #8]
    InitADC(ADC1);
 8006268:	f7ff fd72 	bl	8005d50 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitADC(ADC2);
 800626c:	4631      	mov	r1, r6
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff fd6e 	bl	8005d50 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitAudioSequence();
 8006274:	4620      	mov	r0, r4
 8006276:	f7ff fdb3 	bl	8005de0 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 800627a:	4620      	mov	r0, r4
 800627c:	f7ff fe1e 	bl	8005ebc <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 8006280:	68ab      	ldr	r3, [r5, #8]
 8006282:	403b      	ands	r3, r7
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	60ab      	str	r3, [r5, #8]
 800628a:	68b3      	ldr	r3, [r6, #8]
 800628c:	403b      	ands	r3, r7
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	60b3      	str	r3, [r6, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	07da      	lsls	r2, r3, #31
 8006298:	d5fc      	bpl.n	8006294 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x1fc>
 800629a:	4a2e      	ldr	r2, [pc, #184]	@ (8006354 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2bc>)
 800629c:	6813      	ldr	r3, [r2, #0]
 800629e:	07db      	lsls	r3, r3, #31
 80062a0:	d5fc      	bpl.n	800629c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x204>
    LL_DMA_InitTypeDef dma_init =
 80062a2:	2234      	movs	r2, #52	@ 0x34
 80062a4:	2100      	movs	r1, #0
 80062a6:	a806      	add	r0, sp, #24
 80062a8:	250c      	movs	r5, #12
 80062aa:	f004 ff04 	bl	800b0b6 <memset>
 80062ae:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 80062b2:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 80062b6:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 80062ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006338 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
    LL_DMA_InitTypeDef dma_init =
 80062bc:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
 80062c0:	240a      	movs	r4, #10
 80062c2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
    };
 80062c6:	4924      	ldr	r1, [pc, #144]	@ (8006358 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c0>)
 80062c8:	4a24      	ldr	r2, [pc, #144]	@ (800635c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c4>)
    LL_DMA_InitTypeDef dma_init =
 80062ca:	f8cd e01c 	str.w	lr, [sp, #28]
 80062ce:	e9cd c709 	strd	ip, r7, [sp, #36]	@ 0x24
 80062d2:	e9cd 400d 	strd	r4, r0, [sp, #52]	@ 0x34
    };
 80062d6:	e9cd 1204 	strd	r1, r2, [sp, #16]
    LL_DMA_InitTypeDef dma_init =
 80062da:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80062de:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 80062e0:	f8d3 60d8 	ldr.w	r6, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80062e4:	4c1e      	ldr	r4, [pc, #120]	@ (8006360 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c8>)
 80062e6:	aa04      	add	r2, sp, #16
    __HAL_RCC_DMA1_CLK_ENABLE();
 80062e8:	430e      	orrs	r6, r1
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80062ea:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 80062ec:	f8c3 60d8 	str.w	r6, [r3, #216]	@ 0xd8
 80062f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062f4:	400b      	ands	r3, r1
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80062fa:	f003 f929 	bl	8009550 <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80062fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 8006300:	4628      	mov	r0, r5
 8006302:	4918      	ldr	r1, [pc, #96]	@ (8006364 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2cc>)
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	62a3      	str	r3, [r4, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800630a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800630c:	f023 0308 	bic.w	r3, r3, #8
 8006310:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006312:	f000 fecd 	bl	80070b0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 8006316:	4628      	mov	r0, r5
 8006318:	2101      	movs	r1, #1
 800631a:	f000 ff05 	bl	8007128 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 800631e:	4628      	mov	r0, r5
}
 8006320:	b015      	add	sp, #84	@ 0x54
 8006322:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 8006326:	f000 bee5 	b.w	80070f4 <recorder::irq::Enable(IRQn_Type)>
 800632a:	bf00      	nop
 800632c:	20010da4 	.word	0x20010da4
 8006330:	3a83126f 	.word	0x3a83126f
 8006334:	3f8041ab 	.word	0x3f8041ab
 8006338:	58024400 	.word	0x58024400
 800633c:	40022000 	.word	0x40022000
 8006340:	58020000 	.word	0x58020000
 8006344:	7fffffc0 	.word	0x7fffffc0
 8006348:	58020800 	.word	0x58020800
 800634c:	58000400 	.word	0x58000400
 8006350:	40022300 	.word	0x40022300
 8006354:	40022100 	.word	0x40022100
 8006358:	40022140 	.word	0x40022140
 800635c:	3800fc00 	.word	0x3800fc00
 8006360:	40020000 	.word	0x40020000
 8006364:	08005d45 	.word	0x08005d45

08006368 <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 8006368:	7903      	ldrb	r3, [r0, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12d      	bne.n	80063ca <recorder::Adc::Start()+0x62>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800636e:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <recorder::Adc::Start()+0x64>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8006370:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006374:	4a16      	ldr	r2, [pc, #88]	@ (80063d0 <recorder::Adc::Start()+0x68>)
{
 8006376:	b470      	push	{r4, r5, r6}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8006378:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800637c:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 800637e:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8006380:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006382:	f041 0110 	orr.w	r1, r1, #16
 8006386:	6299      	str	r1, [r3, #40]	@ 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006388:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800638a:	f041 0108 	orr.w	r1, r1, #8
 800638e:	6299      	str	r1, [r3, #40]	@ 0x28
 8006390:	6893      	ldr	r3, [r2, #8]
 8006392:	075b      	lsls	r3, r3, #29
 8006394:	d4fc      	bmi.n	8006390 <recorder::Adc::Start()+0x28>
  MODIFY_REG(ADCx->CR,
 8006396:	6893      	ldr	r3, [r2, #8]
        while (LL_ADC_REG_IsConversionOngoing(ADC1));
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();
        LL_ADC_REG_StartConversion(ADC1);
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 8006398:	f44f 46fa 	mov.w	r6, #32000	@ 0x7d00
 800639c:	4d0d      	ldr	r5, [pc, #52]	@ (80063d4 <recorder::Adc::Start()+0x6c>)
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 800639e:	f04f 0c01 	mov.w	ip, #1
 80063a2:	4c0d      	ldr	r4, [pc, #52]	@ (80063d8 <recorder::Adc::Start()+0x70>)
 80063a4:	402b      	ands	r3, r5
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 80063a6:	4909      	ldr	r1, [pc, #36]	@ (80063cc <recorder::Adc::Start()+0x64>)
 80063a8:	f043 0304 	orr.w	r3, r3, #4
 80063ac:	6093      	str	r3, [r2, #8]
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	402b      	ands	r3, r5
 80063b2:	f043 0304 	orr.w	r3, r3, #4
 80063b6:	60a3      	str	r3, [r4, #8]
 80063b8:	608e      	str	r6, [r1, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80063ba:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80063bc:	ea43 030c 	orr.w	r3, r3, ip
    }
}
 80063c0:	bc70      	pop	{r4, r5, r6}
 80063c2:	628b      	str	r3, [r1, #40]	@ 0x28
        started_ = true;
 80063c4:	f880 c004 	strb.w	ip, [r0, #4]
}
 80063c8:	4770      	bx	lr
 80063ca:	4770      	bx	lr
 80063cc:	40020000 	.word	0x40020000
 80063d0:	40022000 	.word	0x40022000
 80063d4:	7fffffc0 	.word	0x7fffffc0
 80063d8:	40022100 	.word	0x40022100

080063dc <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 80063dc:	7903      	ldrb	r3, [r0, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04c      	beq.n	800647c <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80063e2:	4a27      	ldr	r2, [pc, #156]	@ (8006480 <recorder::Adc::Stop()+0xa4>)
 80063e4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80063e6:	f023 0301 	bic.w	r3, r3, #1
{
 80063ea:	b470      	push	{r4, r5, r6}
 80063ec:	6293      	str	r3, [r2, #40]	@ 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80063ee:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80063f0:	07d9      	lsls	r1, r3, #31
 80063f2:	d4fc      	bmi.n	80063ee <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 80063f4:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <recorder::Adc::Stop()+0xa8>)
 80063f6:	4c24      	ldr	r4, [pc, #144]	@ (8006488 <recorder::Adc::Stop()+0xac>)
 80063f8:	6893      	ldr	r3, [r2, #8]
 80063fa:	4924      	ldr	r1, [pc, #144]	@ (800648c <recorder::Adc::Stop()+0xb0>)
 80063fc:	4023      	ands	r3, r4
 80063fe:	f043 0310 	orr.w	r3, r3, #16
 8006402:	6093      	str	r3, [r2, #8]
 8006404:	688b      	ldr	r3, [r1, #8]
 8006406:	4023      	ands	r3, r4
 8006408:	f043 0310 	orr.w	r3, r3, #16
 800640c:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800640e:	6893      	ldr	r3, [r2, #8]
 8006410:	075b      	lsls	r3, r3, #29
 8006412:	d4fc      	bmi.n	800640e <recorder::Adc::Stop()+0x32>
 8006414:	491d      	ldr	r1, [pc, #116]	@ (800648c <recorder::Adc::Stop()+0xb0>)
 8006416:	688a      	ldr	r2, [r1, #8]
 8006418:	f012 0204 	ands.w	r2, r2, #4
 800641c:	d1fb      	bne.n	8006416 <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800641e:	4918      	ldr	r1, [pc, #96]	@ (8006480 <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 8006420:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8006422:	f44f 6600 	mov.w	r6, #2048	@ 0x800
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8006426:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800642a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800642c:	f024 0410 	bic.w	r4, r4, #16
 8006430:	628c      	str	r4, [r1, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006432:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006434:	f024 0408 	bic.w	r4, r4, #8
 8006438:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800643a:	608e      	str	r6, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 800643c:	608d      	str	r5, [r1, #8]
 800643e:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8006440:	6103      	str	r3, [r0, #16]
        history_ = 0;
 8006442:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 8006444:	6383      	str	r3, [r0, #56]	@ 0x38
        history_ = 0;
 8006446:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 8006448:	6603      	str	r3, [r0, #96]	@ 0x60
        history_ = 0;
 800644a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 800644e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        history_ = 0;
 8006452:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 8006456:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        history_ = 0;
 800645a:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 800645e:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        history_ = 0;
 8006462:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        increment_ = 0;
 8006466:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        history_ = 0;
 800646a:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 800646e:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 8006472:	7102      	strb	r2, [r0, #4]
    }
}
 8006474:	bc70      	pop	{r4, r5, r6}
    current_pot_ = 0; 
 8006476:	e9c0 2252 	strd	r2, r2, [r0, #328]	@ 0x148
}
 800647a:	4770      	bx	lr
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40020000 	.word	0x40020000
 8006484:	40022000 	.word	0x40022000
 8006488:	7fffffc0 	.word	0x7fffffc0
 800648c:	40022100 	.word	0x40022100

08006490 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
        void StopTimer(void);
        static void TimerHandler(void);

        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
        {
            instance_->Service(in, pot);
 8006490:	4bc8      	ldr	r3, [pc, #800]	@ (80067b4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 8006492:	b510      	push	{r4, lr}
            instance_->Service(in, pot);
 8006494:	681c      	ldr	r4, [r3, #0]

        void Service(const AudioInput &in, const PotInput &pot)
        {
            AudioOutput out;

            if (state_ == STATE_STARTING)
 8006496:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 800649a:	2b01      	cmp	r3, #1
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 800649c:	ed2d 8b04 	vpush	{d8-d9}
 80064a0:	b084      	sub	sp, #16
            if (state_ == STATE_STARTING)
 80064a2:	f000 8082 	beq.w	80065aa <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11a>
                if (fade_position_ >= 1)
                {
                    state_ = STATE_RUNNING;
                }
            }
            else if (state_ == STATE_RUNNING)
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d066      	beq.n	8006578 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe8>
                    // Disable the amplifier at the start of the soft-off curve
                    // instead of the end, otherwise the speaker will pop.
                    amp_enable_.Clear();
                }
            }
            else if (state_ == STATE_STOPPING)
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f000 80dd 	beq.w	800666a <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1da>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80064b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80064b4:	ed9d 6a01 	vldr	s12, [sp, #4]
 80064b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
            uint32_t code = 0.5 + 0xFFF * sample;
 80064bc:	ed9f 4abe 	vldr	s8, [pc, #760]	@ 80067b8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x328>
 80064c0:	eddf 4abe 	vldr	s9, [pc, #760]	@ 80067bc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x32c>
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80064c4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80064c8:	eddd 6a02 	vldr	s13, [sp, #8]
            uint32_t code = 0.5 + 0xFFF * sample;
 80064cc:	eeb0 5a67 	vmov.f32	s10, s15
 80064d0:	f8d4 2154 	ldr.w	r2, [r4, #340]	@ 0x154
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80064d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
            dma_buffer_[write_index_] = code;
 80064d8:	48b9      	ldr	r0, [pc, #740]	@ (80067c0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x330>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80064da:	ee26 6a27 	vmul.f32	s12, s12, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80064de:	49b9      	ldr	r1, [pc, #740]	@ (80067c4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x334>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80064e0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80064e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80064e8:	fe86 6a65 	vminnm.f32	s12, s12, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 80064ec:	fe86 6a04 	vmaxnm.f32	s12, s12, s8
 80064f0:	eea6 5a24 	vfma.f32	s10, s12, s9
 80064f4:	eeb0 6a67 	vmov.f32	s12, s15
 80064f8:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 80064fc:	fec6 6a84 	vmaxnm.f32	s13, s13, s8
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8006500:	ee37 7a25 	vadd.f32	s14, s14, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 8006504:	eea6 6aa4 	vfma.f32	s12, s13, s9
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8006508:	ee27 7a27 	vmul.f32	s14, s14, s15
            uint32_t code = 0.5 + 0xFFF * sample;
 800650c:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8006510:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8006514:	fe87 7a04 	vmaxnm.f32	s14, s14, s8
 8006518:	ee15 3a10 	vmov	r3, s10
 800651c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006520:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8006524:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8006528:	3201      	adds	r2, #1
 800652a:	fba1 c302 	umull	ip, r3, r1, r2
 800652e:	089b      	lsrs	r3, r3, #2
            uint32_t code = 0.5 + 0xFFF * sample;
 8006530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8006534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006538:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 800653c:	ee16 2a10 	vmov	r2, s12
 8006540:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	fba1 c302 	umull	ip, r3, r1, r2
 800654a:	089b      	lsrs	r3, r3, #2
 800654c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006550:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 8006554:	ee17 2a90 	vmov	r2, s15
 8006558:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800655c:	3301      	adds	r3, #1
 800655e:	fba1 2103 	umull	r2, r1, r1, r3
 8006562:	0889      	lsrs	r1, r1, #2
 8006564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006568:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800656c:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        }
 8006570:	b004      	add	sp, #16
 8006572:	ecbd 8b04 	vpop	{d8-d9}
 8006576:	bd10      	pop	{r4, pc}
                out = callback_(in, pot);
 8006578:	4b93      	ldr	r3, [pc, #588]	@ (80067c8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x338>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4798      	blx	r3
                if (cue_stop_)
 800657e:	f894 3161 	ldrb.w	r3, [r4, #353]	@ 0x161
                out = callback_(in, pot);
 8006582:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006586:	edcd 0a02 	vstr	s1, [sp, #8]
 800658a:	ed8d 1a03 	vstr	s2, [sp, #12]
                if (cue_stop_)
 800658e:	2b00      	cmp	r3, #0
 8006590:	d08e      	beq.n	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    fade_position_ = 1;
 8006592:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
                    state_ = STATE_STOPPING;
 8006596:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask;
    }

    static void SetLow(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8006598:	4b8c      	ldr	r3, [pc, #560]	@ (80067cc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659e:	f884 0160 	strb.w	r0, [r4, #352]	@ 0x160
                    fade_position_ = 1;
 80065a2:	f8c4 115c 	str.w	r1, [r4, #348]	@ 0x15c
 80065a6:	619a      	str	r2, [r3, #24]
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
 80065a8:	e782      	b.n	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 80065aa:	edd4 8a57 	vldr	s17, [r4, #348]	@ 0x15c
      if (__a < __b)
 80065ae:	eddf 7a88 	vldr	s15, [pc, #544]	@ 80067d0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x340>
 80065b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80065b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ba:	f100 80b9 	bmi.w	8006730 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a0>
                    fade_position_ += 1 / kFadeDuration;
 80065be:	eddf 7a85 	vldr	s15, [pc, #532]	@ 80067d4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
      if (__b < __a)
 80065c2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065c6:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 80065ca:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80065ce:	fec7 7ac8 	vminnm.f32	s15, s15, s16
  { return __builtin_cosf(__x); }
 80065d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80065d6:	f003 ff53 	bl	800a480 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065de:	ee38 0a40 	vsub.f32	s0, s16, s0
                    fade_position_ += 1 / kFadeDuration;
 80065e2:	ed9f 8a7e 	vldr	s16, [pc, #504]	@ 80067dc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065e6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                    fade_position_ += 1 / kFadeDuration;
 80065ea:	ee38 8a88 	vadd.f32	s16, s17, s16
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065ee:	eee0 7a07 	vfma.f32	s15, s0, s14
                        out[ch][i] = FadeCurve(fade_position_);
 80065f2:	edcd 7a01 	vstr	s15, [sp, #4]
 80065f6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065fa:	eddf 7a77 	vldr	s15, [pc, #476]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 80065fe:	ed9f 9a75 	vldr	s18, [pc, #468]	@ 80067d4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 8006602:	fe88 0a68 	vminnm.f32	s0, s16, s17
 8006606:	ee20 0a27 	vmul.f32	s0, s0, s15
 800660a:	f003 ff39 	bl	800a480 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800660e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006612:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006616:	ee78 8ac0 	vsub.f32	s17, s17, s0
                    fade_position_ += 1 / kFadeDuration;
 800661a:	ee38 9a09 	vadd.f32	s18, s16, s18
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800661e:	eee8 7a87 	vfma.f32	s15, s17, s14
                        out[ch][i] = FadeCurve(fade_position_);
 8006622:	edcd 7a02 	vstr	s15, [sp, #8]
 8006626:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800662a:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 800662e:	fe89 0a68 	vminnm.f32	s0, s18, s17
 8006632:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006636:	f003 ff23 	bl	800a480 <cosf>
 800663a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800663e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                if (fade_position_ >= 1)
 8006642:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80067e0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x350>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006646:	ee78 8ac0 	vsub.f32	s17, s17, s0
 800664a:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 800664e:	eeb4 8ac7 	vcmpe.f32	s16, s14
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006652:	eee8 7aa6 	vfma.f32	s15, s17, s13
                if (fade_position_ >= 1)
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 800665a:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ >= 1)
 800665e:	f6ff af27 	blt.w	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    state_ = STATE_RUNNING;
 8006662:	2302      	movs	r3, #2
 8006664:	f884 3160 	strb.w	r3, [r4, #352]	@ 0x160
 8006668:	e722      	b.n	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 800666a:	ed94 8a57 	vldr	s16, [r4, #348]	@ 0x15c
      if (__a < __b)
 800666e:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80067d4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 8006672:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8006676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667a:	f100 8097 	bmi.w	80067ac <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
      if (__b < __a)
 800667e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006682:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
            {
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
                {
                    fade_position_ -= 1 / kFadeDuration;
 8006686:	ee38 0a40 	vsub.f32	s0, s16, s0
 800668a:	fe80 0a68 	vminnm.f32	s0, s0, s17
 800668e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006692:	f003 fef5 	bl	800a480 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006696:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800669a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800669e:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80066a2:	eee8 7a87 	vfma.f32	s15, s17, s14
      if (__a < __b)
 80066a6:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80067dc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>

                    for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                    {
                        out[ch][i] = FadeCurve(fade_position_);
 80066aa:	edcd 7a01 	vstr	s15, [sp, #4]
 80066ae:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80066b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b6:	d476      	bmi.n	80067a6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x316>
      if (__b < __a)
 80066b8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80066bc:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ -= 1 / kFadeDuration;
 80066c0:	ee38 0a40 	vsub.f32	s0, s16, s0
 80066c4:	fe80 0a68 	vminnm.f32	s0, s0, s17
 80066c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80066cc:	f003 fed8 	bl	800a480 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80066d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066d4:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80066d8:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80066dc:	eee8 7a87 	vfma.f32	s15, s17, s14
                    fade_position_ -= 1 / kFadeDuration;
 80066e0:	eddf 8a40 	vldr	s17, [pc, #256]	@ 80067e4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
                        out[ch][i] = FadeCurve(fade_position_);
 80066e4:	edcd 7a02 	vstr	s15, [sp, #8]
      if (__a < __b)
 80066e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
                    fade_position_ -= 1 / kFadeDuration;
 80066ec:	ee78 9a68 	vsub.f32	s19, s16, s17
 80066f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f4:	d43b      	bmi.n	800676e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2de>
      if (__b < __a)
 80066f6:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80066fa:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80067d8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 80066fe:	fe89 0ac9 	vminnm.f32	s0, s19, s18
 8006702:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006706:	f003 febb 	bl	800a480 <cosf>
 800670a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800670e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006712:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 8006716:	ee39 9a40 	vsub.f32	s18, s18, s0
                    }
                }

                if (fade_position_ <= 0)
 800671a:	eeb4 8a68 	vcmp.f32	s16, s17
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800671e:	eee9 7a07 	vfma.f32	s15, s18, s14
                if (fade_position_ <= 0)
 8006722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 8006726:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ <= 0)
 800672a:	f47f aec1 	bne.w	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 800672e:	e022      	b.n	8006776 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2e6>
      if (__a < __b)
 8006730:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80067e8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
                        out[ch][i] = FadeCurve(fade_position_);
 8006734:	4b2d      	ldr	r3, [pc, #180]	@ (80067ec <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 8006736:	eef4 8ae7 	vcmpe.f32	s17, s15
                    fade_position_ += 1 / kFadeDuration;
 800673a:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 80067dc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
                        out[ch][i] = FadeCurve(fade_position_);
 800673e:	9301      	str	r3, [sp, #4]
                    fade_position_ += 1 / kFadeDuration;
 8006740:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	f57f af55 	bpl.w	80065f6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
 800674c:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80067f0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x360>
 8006750:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 80067e4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
 8006754:	eef4 8ae7 	vcmpe.f32	s17, s15
                        out[ch][i] = FadeCurve(fade_position_);
 8006758:	9302      	str	r3, [sp, #8]
                    fade_position_ += 1 / kFadeDuration;
 800675a:	ee38 9a89 	vadd.f32	s18, s17, s18
 800675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006762:	f57f af60 	bpl.w	8006626 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x196>
                        out[ch][i] = FadeCurve(fade_position_);
 8006766:	9303      	str	r3, [sp, #12]
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8006768:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 800676c:	e6a0      	b.n	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                        out[ch][i] = FadeCurve(fade_position_);
 800676e:	4b1f      	ldr	r3, [pc, #124]	@ (80067ec <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 8006770:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 8006774:	9303      	str	r3, [sp, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006776:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x364>)
                {
                    state_ = STATE_STOPPED;
 8006778:	2100      	movs	r1, #0
                    StopTimer();
                    adc_.Stop();
 800677a:	1d20      	adds	r0, r4, #4
 800677c:	6813      	ldr	r3, [r2, #0]
                    state_ = STATE_STOPPED;
 800677e:	f884 1160 	strb.w	r1, [r4, #352]	@ 0x160
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	6013      	str	r3, [r2, #0]
                    adc_.Stop();
 8006788:	f7ff fe28 	bl	80063dc <recorder::Adc::Stop()>
                    dac_.Stop();
 800678c:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 8006790:	f000 f926 	bl	80069e0 <recorder::Dac::Stop()>
 8006794:	490d      	ldr	r1, [pc, #52]	@ (80067cc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 8006796:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800679a:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x368>)
 800679c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067a0:	6188      	str	r0, [r1, #24]
 80067a2:	619a      	str	r2, [r3, #24]
 80067a4:	e684      	b.n	80064b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 80067a6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80067aa:	e799      	b.n	80066e0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x250>
 80067ac:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80067b0:	e779      	b.n	80066a6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x216>
 80067b2:	bf00      	nop
 80067b4:	20010dac 	.word	0x20010dac
 80067b8:	00000000 	.word	0x00000000
 80067bc:	457ff000 	.word	0x457ff000
 80067c0:	3800fc30 	.word	0x3800fc30
 80067c4:	aaaaaaab 	.word	0xaaaaaaab
 80067c8:	20010da8 	.word	0x20010da8
 80067cc:	58020400 	.word	0x58020400
 80067d0:	b9da740e 	.word	0xb9da740e
 80067d4:	39da740e 	.word	0x39da740e
 80067d8:	40490fdb 	.word	0x40490fdb
 80067dc:	3a5a740e 	.word	0x3a5a740e
 80067e0:	3f7fe4b1 	.word	0x3f7fe4b1
 80067e4:	3aa3d70a 	.word	0x3aa3d70a
 80067e8:	ba5a740e 	.word	0xba5a740e
 80067ec:	bf800000 	.word	0xbf800000
 80067f0:	baa3d70a 	.word	0xbaa3d70a
 80067f4:	40014000 	.word	0x40014000
 80067f8:	58021800 	.word	0x58021800

080067fc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 80067fc:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 80067fe:	4a49      	ldr	r2, [pc, #292]	@ (8006924 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 8006800:	b08a      	sub	sp, #40	@ 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8006802:	4c49      	ldr	r4, [pc, #292]	@ (8006928 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 8006804:	4605      	mov	r5, r0
    instance_ = this;
 8006806:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 8006808:	3004      	adds	r0, #4
 800680a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 800680e:	2600      	movs	r6, #0
    callback_ = callback;
 8006810:	4b46      	ldr	r3, [pc, #280]	@ (800692c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 8006812:	f042 0202 	orr.w	r2, r2, #2
 8006816:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8006818:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 800681a:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800681e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006822:	4b43      	ldr	r3, [pc, #268]	@ (8006930 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 8006824:	f002 0202 	and.w	r2, r2, #2
 8006828:	9204      	str	r2, [sp, #16]
 800682a:	9a04      	ldr	r2, [sp, #16]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	f022 020c 	bic.w	r2, r2, #12
 8006832:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	f022 020c 	bic.w	r2, r2, #12
 800683a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	f022 0202 	bic.w	r2, r2, #2
 8006842:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	f022 020c 	bic.w	r2, r2, #12
 800684a:	f042 0204 	orr.w	r2, r2, #4
 800684e:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8006850:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 8006852:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006856:	4a37      	ldr	r2, [pc, #220]	@ (8006934 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 8006858:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800685c:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8006860:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8006864:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8006868:	9103      	str	r1, [sp, #12]
 800686a:	9903      	ldr	r1, [sp, #12]
 800686c:	6891      	ldr	r1, [r2, #8]
 800686e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006872:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006874:	68d1      	ldr	r1, [r2, #12]
 8006876:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 800687a:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800687c:	6851      	ldr	r1, [r2, #4]
 800687e:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8006882:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006884:	6811      	ldr	r1, [r2, #0]
 8006886:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 800688a:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 800688e:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8006890:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    adc_.Init(AdcCallback);
 8006894:	4928      	ldr	r1, [pc, #160]	@ (8006938 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 8006896:	f042 0202 	orr.w	r2, r2, #2
 800689a:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800689e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 80068a2:	f002 0202 	and.w	r2, r2, #2
 80068a6:	9202      	str	r2, [sp, #8]
 80068a8:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068b8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068c0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068c8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f7ff fbe3 	bl	8006098 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 80068d2:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
 80068d6:	f000 f905 	bl	8006ae4 <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 80068da:	f240 5334 	movw	r3, #1332	@ 0x534
    LL_TIM_InitTypeDef timer_init =
 80068de:	9609      	str	r6, [sp, #36]	@ 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 80068e0:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 80068e2:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80068e6:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 80068ea:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 80068ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f2:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80068f6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 80068fa:	4c10      	ldr	r4, [pc, #64]	@ (800693c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 80068fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 8006900:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 8006906:	f003 fb05 	bl	8009f14 <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800690a:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 800690c:	2200      	movs	r2, #0
 800690e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006912:	f043 0320 	orr.w	r3, r3, #32
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
    state_ = STATE_STOPPED;
 800691c:	f8a5 6160 	strh.w	r6, [r5, #352]	@ 0x160
}
 8006920:	b00a      	add	sp, #40	@ 0x28
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	20010dac 	.word	0x20010dac
 8006928:	58024400 	.word	0x58024400
 800692c:	20010da8 	.word	0x20010da8
 8006930:	58020400 	.word	0x58020400
 8006934:	58021800 	.word	0x58021800
 8006938:	08006491 	.word	0x08006491
 800693c:	40014000 	.word	0x40014000

08006940 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 8006940:	4b03      	ldr	r3, [pc, #12]	@ (8006950 <recorder::Analog::StartTimer()+0x10>)
 8006942:	2200      	movs	r2, #0
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	f042 0201 	orr.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 800694e:	4770      	bx	lr
 8006950:	40014000 	.word	0x40014000

08006954 <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006954:	4b03      	ldr	r3, [pc, #12]	@ (8006964 <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006956:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006958:	2120      	movs	r1, #32
 800695a:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800695c:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 800695e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8006960:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 8006962:	4770      	bx	lr
 8006964:	40020000 	.word	0x40020000

08006968 <recorder::Dac::Start()>:
    if (!started_)
 8006968:	7903      	ldrb	r3, [r0, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d131      	bne.n	80069d2 <recorder::Dac::Start()+0x6a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <recorder::Dac::Start()+0x6c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006970:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8006972:	4a19      	ldr	r2, [pc, #100]	@ (80069d8 <recorder::Dac::Start()+0x70>)
{
 8006974:	b410      	push	{r4}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006976:	2420      	movs	r4, #32
 8006978:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800697a:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800697c:	6919      	ldr	r1, [r3, #16]
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg,
 800697e:	4c17      	ldr	r4, [pc, #92]	@ (80069dc <recorder::Dac::Start()+0x74>)
 8006980:	f041 0110 	orr.w	r1, r1, #16
 8006984:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006986:	6919      	ldr	r1, [r3, #16]
 8006988:	f041 0108 	orr.w	r1, r1, #8
 800698c:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 800698e:	6811      	ldr	r1, [r2, #0]
 8006990:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8006994:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 8006996:	6811      	ldr	r1, [r2, #0]
 8006998:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 800699c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(*preg,
 800699e:	f8d4 1414 	ldr.w	r1, [r4, #1044]	@ 0x414
 80069a2:	f36f 010b 	bfc	r1, #0, #12
 80069a6:	f8c4 1414 	str.w	r1, [r4, #1044]	@ 0x414
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 80069aa:	247d      	movs	r4, #125	@ 0x7d
  SET_BIT(DACx->SWTRIGR,
 80069ac:	6851      	ldr	r1, [r2, #4]
 80069ae:	f041 0102 	orr.w	r1, r1, #2
 80069b2:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 80069ba:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 80069be:	6011      	str	r1, [r2, #0]
        started_ = true;
 80069c0:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 80069c2:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80069c4:	691a      	ldr	r2, [r3, #16]
}
 80069c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ca:	430a      	orrs	r2, r1
 80069cc:	611a      	str	r2, [r3, #16]
        started_ = true;
 80069ce:	7101      	strb	r1, [r0, #4]
}
 80069d0:	4770      	bx	lr
 80069d2:	4770      	bx	lr
 80069d4:	40020000 	.word	0x40020000
 80069d8:	40007400 	.word	0x40007400
 80069dc:	40007000 	.word	0x40007000

080069e0 <recorder::Dac::Stop()>:
    if (started_)
 80069e0:	7903      	ldrb	r3, [r0, #4]
 80069e2:	b32b      	cbz	r3, 8006a30 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80069e4:	4a13      	ldr	r2, [pc, #76]	@ (8006a34 <recorder::Dac::Stop()+0x54>)
 80069e6:	6913      	ldr	r3, [r2, #16]
 80069e8:	f023 0301 	bic.w	r3, r3, #1
{
 80069ec:	b4f0      	push	{r4, r5, r6, r7}
 80069ee:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80069f0:	6913      	ldr	r3, [r2, #16]
 80069f2:	f013 0301 	ands.w	r3, r3, #1
 80069f6:	d1fb      	bne.n	80069f0 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 80069f8:	4d0f      	ldr	r5, [pc, #60]	@ (8006a38 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80069fa:	2720      	movs	r7, #32
        dma_buffer_[i] = 0;
 80069fc:	490f      	ldr	r1, [pc, #60]	@ (8006a3c <recorder::Dac::Stop()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80069fe:	2610      	movs	r6, #16
 8006a00:	682c      	ldr	r4, [r5, #0]
 8006a02:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 8006a06:	602c      	str	r4, [r5, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8006a08:	6914      	ldr	r4, [r2, #16]
 8006a0a:	f024 0410 	bic.w	r4, r4, #16
 8006a0e:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006a10:	6914      	ldr	r4, [r2, #16]
 8006a12:	f024 0408 	bic.w	r4, r4, #8
 8006a16:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006a18:	6097      	str	r7, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006a1a:	6096      	str	r6, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8006a1c:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 8006a1e:	614b      	str	r3, [r1, #20]
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	e9c1 3301 	strd	r3, r3, [r1, #4]
 8006a26:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 8006a2a:	bcf0      	pop	{r4, r5, r6, r7}
        started_ = false;
 8006a2c:	7103      	strb	r3, [r0, #4]
}
 8006a2e:	4770      	bx	lr
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40020000 	.word	0x40020000
 8006a38:	40007400 	.word	0x40007400
 8006a3c:	3800fc30 	.word	0x3800fc30

08006a40 <recorder::Dac::InitDMA()>:
{
 8006a40:	b510      	push	{r4, lr}
 8006a42:	b092      	sub	sp, #72	@ 0x48
    LL_DMA_InitTypeDef dma_init =
 8006a44:	222c      	movs	r2, #44	@ 0x2c
 8006a46:	2100      	movs	r1, #0
 8006a48:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8006a4c:	a806      	add	r0, sp, #24
 8006a4e:	f004 fb32 	bl	800b0b6 <memset>
 8006a52:	491f      	ldr	r1, [pc, #124]	@ (8006ad0 <recorder::Dac::InitDMA()+0x90>)
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006a5a:	9405      	str	r4, [sp, #20]
 8006a5c:	2406      	movs	r4, #6
 8006a5e:	9007      	str	r0, [sp, #28]
 8006a60:	2044      	movs	r0, #68	@ 0x44
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006a62:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad4 <recorder::Dac::InitDMA()+0x94>)
    LL_DMA_InitTypeDef dma_init =
 8006a64:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8006a68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006a6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006a70:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8006a74:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
    };
 8006a78:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 8006a7a:	e9cd 400a 	strd	r4, r0, [sp, #40]	@ 0x28
 8006a7e:	910c      	str	r1, [sp, #48]	@ 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006a80:	2100      	movs	r1, #0
    };
 8006a82:	9202      	str	r2, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006a84:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006a86:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006a8a:	4c14      	ldr	r4, [pc, #80]	@ (8006adc <recorder::Dac::InitDMA()+0x9c>)
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006a8c:	f040 0001 	orr.w	r0, r0, #1
 8006a90:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006a94:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006aa2:	f002 fd55 	bl	8009550 <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8006aa6:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 8006aa8:	200b      	movs	r0, #11
 8006aaa:	490d      	ldr	r1, [pc, #52]	@ (8006ae0 <recorder::Dac::InitDMA()+0xa0>)
 8006aac:	f023 0310 	bic.w	r3, r3, #16
 8006ab0:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	f023 0308 	bic.w	r3, r3, #8
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	f000 faf9 	bl	80070b0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 8006abe:	2100      	movs	r1, #0
 8006ac0:	200b      	movs	r0, #11
 8006ac2:	f000 fb31 	bl	8007128 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 8006ac6:	200b      	movs	r0, #11
 8006ac8:	f000 fb14 	bl	80070f4 <recorder::irq::Enable(IRQn_Type)>
}
 8006acc:	b012      	add	sp, #72	@ 0x48
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	3800fc30 	.word	0x3800fc30
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	40007414 	.word	0x40007414
 8006adc:	40020000 	.word	0x40020000
 8006ae0:	08006955 	.word	0x08006955

08006ae4 <recorder::Dac::Init()>:
{
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 8006ae8:	4b26      	ldr	r3, [pc, #152]	@ (8006b84 <recorder::Dac::Init()+0xa0>)
    started_ = false;
 8006aea:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aec:	4e26      	ldr	r6, [pc, #152]	@ (8006b88 <recorder::Dac::Init()+0xa4>)
{
 8006aee:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8006af0:	6004      	str	r4, [r0, #0]
{
 8006af2:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 8006af4:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af6:	f8d6 20e0 	ldr.w	r2, [r6, #224]	@ 0xe0
    started_ = false;
 8006afa:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 8006afc:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afe:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 8006b02:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 8006b04:	4d21      	ldr	r5, [pc, #132]	@ (8006b8c <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006b06:	4f22      	ldr	r7, [pc, #136]	@ (8006b90 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 8006b08:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8006b0c:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b10:	f8c6 20e0 	str.w	r2, [r6, #224]	@ 0xe0
 8006b14:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 8006b20:	f002 fe2c 	bl	800977c <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 8006b24:	2220      	movs	r2, #32
 8006b26:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8006b28:	a902      	add	r1, sp, #8
 8006b2a:	481a      	ldr	r0, [pc, #104]	@ (8006b94 <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8006b2c:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 8006b2e:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 8006b30:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8006b34:	f002 fd6e 	bl	8009614 <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 8006b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3c:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006b40:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 8006b42:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006b46:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	4912      	ldr	r1, [pc, #72]	@ (8006b98 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006b4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b52:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8006b56:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8006b5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006b62:	f002 fcbd 	bl	80094e0 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 8006b66:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b76:	603b      	str	r3, [r7, #0]
}
 8006b78:	b008      	add	sp, #32
 8006b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 8006b7e:	f7ff bf5f 	b.w	8006a40 <recorder::Dac::InitDMA()>
 8006b82:	bf00      	nop
 8006b84:	3800fc30 	.word	0x3800fc30
 8006b88:	58024400 	.word	0x58024400
 8006b8c:	0800bfa0 	.word	0x0800bfa0
 8006b90:	40007400 	.word	0x40007400
 8006b94:	58020000 	.word	0x58020000
 8006b98:	35400072 	.word	0x35400072

08006b9c <recorder::Flash::Init()>:
namespace recorder
{

void Flash::Init(void)
{
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b9c:	4bb1      	ldr	r3, [pc, #708]	@ (8006e64 <recorder::Flash::Init()+0x2c8>)
 8006b9e:	2240      	movs	r2, #64	@ 0x40
 8006ba0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006ba4:	f041 0120 	orr.w	r1, r1, #32
{
 8006ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006baa:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
{
 8006bae:	b0a5      	sub	sp, #148	@ 0x94
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bb0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
{
 8006bb4:	4605      	mov	r5, r0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bb6:	f001 0120 	and.w	r1, r1, #32
 8006bba:	9101      	str	r1, [sp, #4]
 8006bbc:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006bbe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8006bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bcc:	4013      	ands	r3, r2
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	fa92 f2a2 	rbit	r2, r2
    };
}

void Flash::InitPin(GPIO_TypeDef* base, uint32_t pin, uint32_t alternate)
{
    if (POSITION_VAL(pin) < 8)
 8006bd6:	fab2 f282 	clz	r2, r2
 8006bda:	2a07      	cmp	r2, #7
 8006bdc:	f300 8158 	bgt.w	8006e90 <recorder::Flash::Init()+0x2f4>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006be0:	4aa1      	ldr	r2, [pc, #644]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006be2:	6a13      	ldr	r3, [r2, #32]
 8006be4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006be8:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8006bec:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006bee:	4b9e      	ldr	r3, [pc, #632]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006bf0:	2280      	movs	r2, #128	@ 0x80
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006bf8:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006bfc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006c04:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006c08:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006c0a:	68d9      	ldr	r1, [r3, #12]
 8006c0c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006c10:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006c18:	6059      	str	r1, [r3, #4]
 8006c1a:	fa92 f2a2 	rbit	r2, r2
 8006c1e:	fab2 f282 	clz	r2, r2
 8006c22:	2a07      	cmp	r2, #7
 8006c24:	f300 8138 	bgt.w	8006e98 <recorder::Flash::Init()+0x2fc>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c2e:	f042 4210 	orr.w	r2, r2, #2415919104	@ 0x90000000
 8006c32:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006c34:	4b8c      	ldr	r3, [pc, #560]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c3a:	6819      	ldr	r1, [r3, #0]
 8006c3c:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006c40:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006c44:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006c4c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006c50:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006c58:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c5a:	6859      	ldr	r1, [r3, #4]
 8006c5c:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006c60:	6059      	str	r1, [r3, #4]
 8006c62:	fa92 f2a2 	rbit	r2, r2
 8006c66:	fab2 f282 	clz	r2, r2
 8006c6a:	2a07      	cmp	r2, #7
 8006c6c:	f300 8117 	bgt.w	8006e9e <recorder::Flash::Init()+0x302>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006c74:	4b7c      	ldr	r3, [pc, #496]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c7a:	6819      	ldr	r1, [r3, #0]
 8006c7c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006c80:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006c84:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006c86:	6899      	ldr	r1, [r3, #8]
 8006c88:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006c8c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006c90:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006c92:	68d9      	ldr	r1, [r3, #12]
 8006c94:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006c98:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c9a:	6859      	ldr	r1, [r3, #4]
 8006c9c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8006ca0:	6059      	str	r1, [r3, #4]
 8006ca2:	fa92 f2a2 	rbit	r2, r2
 8006ca6:	fab2 f282 	clz	r2, r2
 8006caa:	2a07      	cmp	r2, #7
 8006cac:	f300 80fe 	bgt.w	8006eac <recorder::Flash::Init()+0x310>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006cb0:	6a1a      	ldr	r2, [r3, #32]
 8006cb2:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cba:	6819      	ldr	r1, [r3, #0]
 8006cbc:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006cc0:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8006cc4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006cc6:	6899      	ldr	r1, [r3, #8]
 8006cc8:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006ccc:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8006cd0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006cd8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006cda:	6859      	ldr	r1, [r3, #4]
 8006cdc:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8006ce0:	6059      	str	r1, [r3, #4]
 8006ce2:	fa92 f2a2 	rbit	r2, r2
 8006ce6:	fab2 f282 	clz	r2, r2
 8006cea:	2a07      	cmp	r2, #7
 8006cec:	f300 80e5 	bgt.w	8006eba <recorder::Flash::Init()+0x31e>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006cf0:	6a1a      	ldr	r2, [r3, #32]
 8006cf2:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e68 <recorder::Flash::Init()+0x2cc>)
 8006cf6:	2240      	movs	r2, #64	@ 0x40
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006cfe:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8006d02:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006d04:	6899      	ldr	r1, [r3, #8]
 8006d06:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006d0a:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8006d0e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006d10:	68d9      	ldr	r1, [r3, #12]
 8006d12:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006d16:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006d18:	6859      	ldr	r1, [r3, #4]
 8006d1a:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8006d1e:	6059      	str	r1, [r3, #4]
 8006d20:	fa92 f3a2 	rbit	r3, r2
 8006d24:	fab3 f383 	clz	r3, r3
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	f300 80ad 	bgt.w	8006e88 <recorder::Flash::Init()+0x2ec>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006d2e:	4a4f      	ldr	r2, [pc, #316]	@ (8006e6c <recorder::Flash::Init()+0x2d0>)
 8006d30:	6a13      	ldr	r3, [r2, #32]
 8006d32:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006d36:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8006d3a:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006e6c <recorder::Flash::Init()+0x2d0>)
  */
__STATIC_INLINE void LL_MDMA_DisableChannel(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006d3e:	f04f 46a4 	mov.w	r6, #1375731712	@ 0x52000000
    LL_GPIO_SetPinOutputType(base, pin, LL_GPIO_OUTPUT_PUSHPULL);
}

void Flash::InitDMA(void)
{
    __HAL_RCC_MDMA_CLK_ENABLE();
 8006d42:	4c48      	ldr	r4, [pc, #288]	@ (8006e64 <recorder::Flash::Init()+0x2c8>)

    LL_MDMA_DisableChannel(MDMA, LL_MDMA_CHANNEL_0);

    LL_MDMA_InitTypeDef mdma_init =
 8006d44:	a804      	add	r0, sp, #16
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4949      	ldr	r1, [pc, #292]	@ (8006e70 <recorder::Flash::Init()+0x2d4>)
 8006d4a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006d4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d52:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006d5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d5e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006d66:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_MDMA_CLK_ENABLE();
 8006d72:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8006d7e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	64f3      	str	r3, [r6, #76]	@ 0x4c
    LL_MDMA_InitTypeDef mdma_init =
 8006d92:	f004 f9c6 	bl	800b122 <memcpy>
        .SrcBus                        = LL_MDMA_SRC_BUS_SYSTEM_AXI,
        .MaskAddress                   = 0,
        .MaskData                      = 0,
    };

    LL_MDMA_Init(MDMA, LL_MDMA_CHANNEL_0, &mdma_init);
 8006d96:	aa04      	add	r2, sp, #16
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f002 fcfa 	bl	8009794 <LL_MDMA_Init>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006da0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006da4:	4a33      	ldr	r2, [pc, #204]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006da6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006daa:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8006dae:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	9b04      	ldr	r3, [sp, #16]
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dba:	6893      	ldr	r3, [r2, #8]
 8006dbc:	f013 0320 	ands.w	r3, r3, #32
 8006dc0:	d1fb      	bne.n	8006dba <recorder::Flash::Init()+0x21e>
    QUADSPI->CR =
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006dc8:	fa93 f3a3 	rbit	r3, r3
        ((POSITION_VAL(kSize) - 1) << QUADSPI_DCR_FSIZE_Pos) |
 8006dcc:	fab3 f383 	clz	r3, r3
    static constexpr uint32_t kIndirectWrite = 0;
    static constexpr uint32_t kIndirectRead = QUADSPI_CCR_FMODE_0;

    void SendCommand(Command cmd)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dd0:	4828      	ldr	r0, [pc, #160]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
    QUADSPI->DCR =
 8006dda:	6053      	str	r3, [r2, #4]
    QUADSPI->CR |= QUADSPI_CR_EN;
 8006ddc:	6813      	ldr	r3, [r2, #0]
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	6883      	ldr	r3, [r0, #8]
 8006de6:	069f      	lsls	r7, r3, #26
 8006de8:	d4fc      	bmi.n	8006de4 <recorder::Flash::Init()+0x248>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006dea:	f240 13ab 	movw	r3, #427	@ 0x1ab
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006dee:	4921      	ldr	r1, [pc, #132]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006df0:	6143      	str	r3, [r0, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006df2:	688b      	ldr	r3, [r1, #8]
 8006df4:	079e      	lsls	r6, r3, #30
 8006df6:	d5fc      	bpl.n	8006df2 <recorder::Flash::Init()+0x256>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006df8:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006dfc:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dfe:	6893      	ldr	r3, [r2, #8]
 8006e00:	069c      	lsls	r4, r3, #26
 8006e02:	d4fc      	bmi.n	8006dfe <recorder::Flash::Init()+0x262>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006e04:	f44f 73b3 	mov.w	r3, #358	@ 0x166
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e08:	491a      	ldr	r1, [pc, #104]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006e0a:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e0c:	688b      	ldr	r3, [r1, #8]
 8006e0e:	0798      	lsls	r0, r3, #30
 8006e10:	d5fc      	bpl.n	8006e0c <recorder::Flash::Init()+0x270>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e12:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e14:	4a17      	ldr	r2, [pc, #92]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e16:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e18:	6893      	ldr	r3, [r2, #8]
 8006e1a:	0699      	lsls	r1, r3, #26
 8006e1c:	d4fc      	bmi.n	8006e18 <recorder::Flash::Init()+0x27c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006e1e:	f240 1399 	movw	r3, #409	@ 0x199
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e22:	4914      	ldr	r1, [pc, #80]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006e24:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e26:	688b      	ldr	r3, [r1, #8]
 8006e28:	079a      	lsls	r2, r3, #30
 8006e2a:	d5fc      	bpl.n	8006e26 <recorder::Flash::Init()+0x28a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e2c:	2302      	movs	r3, #2
        SendCommand(CMD_WRITE_ENABLE);
    }

    uint8_t ReadStatus(void)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e2e:	4a11      	ldr	r2, [pc, #68]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e30:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e32:	6893      	ldr	r3, [r2, #8]
 8006e34:	f013 0320 	ands.w	r3, r3, #32
 8006e38:	d1fb      	bne.n	8006e32 <recorder::Flash::Init()+0x296>
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8006e3a:	480f      	ldr	r0, [pc, #60]	@ (8006e78 <recorder::Flash::Init()+0x2dc>)
            kIndirectRead |
            QSPI_DATA_1_LINE |
            QSPI_INSTRUCTION_1_LINE |
            CMD_READ_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006e3c:	490d      	ldr	r1, [pc, #52]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        QUADSPI->DLR = 0;
 8006e3e:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8006e40:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006e42:	688b      	ldr	r3, [r1, #8]
 8006e44:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8006e48:	d0fb      	beq.n	8006e42 <recorder::Flash::Init()+0x2a6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006e4a:	f891 1020 	ldrb.w	r1, [r1, #32]
        uint8_t status = DataRead8();
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e4e:	4a09      	ldr	r2, [pc, #36]	@ (8006e74 <recorder::Flash::Init()+0x2d8>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006e50:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006e52:	6893      	ldr	r3, [r2, #8]
 8006e54:	079b      	lsls	r3, r3, #30
 8006e56:	d5fc      	bpl.n	8006e52 <recorder::Flash::Init()+0x2b6>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e58:	2302      	movs	r3, #2
    if (ReadStatus() != STATUS_QUAD_ENABLE)
 8006e5a:	2940      	cmp	r1, #64	@ 0x40
 8006e5c:	60d3      	str	r3, [r2, #12]
 8006e5e:	d133      	bne.n	8006ec8 <recorder::Flash::Init()+0x32c>
 8006e60:	e00c      	b.n	8006e7c <recorder::Flash::Init()+0x2e0>
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
 8006e68:	58021400 	.word	0x58021400
 8006e6c:	58021800 	.word	0x58021800
 8006e70:	0800bfb8 	.word	0x0800bfb8
 8006e74:	52005000 	.word	0x52005000
 8006e78:	05000105 	.word	0x05000105
    state_ =
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e9c5 3300 	strd	r3, r3, [r5]
 8006e82:	60ab      	str	r3, [r5, #8]
}
 8006e84:	b025      	add	sp, #148	@ 0x94
 8006e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006e88:	4b2d      	ldr	r3, [pc, #180]	@ (8006f40 <recorder::Flash::Init()+0x3a4>)
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e8c:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8006e8e:	e755      	b.n	8006d3c <recorder::Flash::Init()+0x1a0>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006e90:	4b2c      	ldr	r3, [pc, #176]	@ (8006f44 <recorder::Flash::Init()+0x3a8>)
 8006e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e94:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006e96:	e6aa      	b.n	8006bee <recorder::Flash::Init()+0x52>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e9a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006e9c:	e6ca      	b.n	8006c34 <recorder::Flash::Init()+0x98>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ea0:	f022 020f 	bic.w	r2, r2, #15
 8006ea4:	f042 020a 	orr.w	r2, r2, #10
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006eaa:	e6e3      	b.n	8006c74 <recorder::Flash::Init()+0xd8>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eae:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006eb2:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006eb6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006eb8:	e6fc      	b.n	8006cb4 <recorder::Flash::Init()+0x118>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006eba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ebc:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8006ec0:	f442 6210 	orr.w	r2, r2, #2304	@ 0x900
 8006ec4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006ec6:	e715      	b.n	8006cf4 <recorder::Flash::Init()+0x158>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
 8006eca:	6893      	ldr	r3, [r2, #8]
 8006ecc:	069f      	lsls	r7, r3, #26
 8006ece:	d4fc      	bmi.n	8006eca <recorder::Flash::Init()+0x32e>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006ed0:	f44f 7383 	mov.w	r3, #262	@ 0x106
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006ed4:	491c      	ldr	r1, [pc, #112]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006ed6:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006ed8:	688b      	ldr	r3, [r1, #8]
 8006eda:	079e      	lsls	r6, r3, #30
 8006edc:	d5fc      	bpl.n	8006ed8 <recorder::Flash::Init()+0x33c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006ede:	2302      	movs	r3, #2

    void WriteStatus(uint8_t status)
    {
        WriteEnable();

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006ee0:	4a19      	ldr	r2, [pc, #100]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006ee2:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006ee4:	6893      	ldr	r3, [r2, #8]
 8006ee6:	f013 0320 	ands.w	r3, r3, #32
 8006eea:	d1fb      	bne.n	8006ee4 <recorder::Flash::Init()+0x348>
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8006eec:	4817      	ldr	r0, [pc, #92]	@ (8006f4c <recorder::Flash::Init()+0x3b0>)
            kIndirectWrite |
            QSPI_DATA_1_LINE |
            QSPI_INSTRUCTION_1_LINE |
            CMD_WRITE_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8006eee:	4916      	ldr	r1, [pc, #88]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->DLR = 0;
 8006ef0:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8006ef2:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8006ef4:	688b      	ldr	r3, [r1, #8]
 8006ef6:	075c      	lsls	r4, r3, #29
 8006ef8:	d5fc      	bpl.n	8006ef4 <recorder::Flash::Init()+0x358>
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8006efa:	2340      	movs	r3, #64	@ 0x40
        DataWrite8(status);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006efc:	4a12      	ldr	r2, [pc, #72]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8006efe:	f881 3020 	strb.w	r3, [r1, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006f02:	6893      	ldr	r3, [r2, #8]
 8006f04:	0798      	lsls	r0, r3, #30
 8006f06:	d5fc      	bpl.n	8006f02 <recorder::Flash::Init()+0x366>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006f08:	2602      	movs	r6, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006f0a:	4c0f      	ldr	r4, [pc, #60]	@ (8006f48 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR =
 8006f0c:	4f10      	ldr	r7, [pc, #64]	@ (8006f50 <recorder::Flash::Init()+0x3b4>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006f0e:	60d6      	str	r6, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006f10:	68a3      	ldr	r3, [r4, #8]
 8006f12:	f013 0320 	ands.w	r3, r3, #32
 8006f16:	d1fb      	bne.n	8006f10 <recorder::Flash::Init()+0x374>
        QUADSPI->DLR = 0;
 8006f18:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8006f1a:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8006f22:	d0fb      	beq.n	8006f1c <recorder::Flash::Init()+0x380>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006f24:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006f28:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	0799      	lsls	r1, r3, #30
 8006f2e:	d5fc      	bpl.n	8006f2a <recorder::Flash::Init()+0x38e>
        while (write_in_progress())
 8006f30:	07d3      	lsls	r3, r2, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006f32:	60e6      	str	r6, [r4, #12]
        while (write_in_progress())
 8006f34:	d5a2      	bpl.n	8006e7c <recorder::Flash::Init()+0x2e0>
            system::Delay_ms(1);
 8006f36:	2001      	movs	r0, #1
 8006f38:	f000 fd0c 	bl	8007954 <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006f3c:	e7e8      	b.n	8006f10 <recorder::Flash::Init()+0x374>
 8006f3e:	bf00      	nop
 8006f40:	58021800 	.word	0x58021800
 8006f44:	58021400 	.word	0x58021400
 8006f48:	52005000 	.word	0x52005000
 8006f4c:	01000101 	.word	0x01000101
 8006f50:	05000105 	.word	0x05000105

08006f54 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>:
void Flash::ReadData(uint8_t* buffer, uint32_t address, uint32_t count)
{
    ScopedProfilingPin<PROFILE_FLASH_READ> profile1;
    ScopedProfilingPin<PROFILE_FLASH_ACCESS> profile2;

    while (count)
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d07c      	beq.n	8007052 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xfe>
 8006f58:	f04f 40a4 	mov.w	r0, #1375731712	@ 0x52000000
        LL_MDMA_EnableChannel(MDMA, LL_MDMA_CHANNEL_0);

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
        constexpr uint32_t dummy_cycles = 8;
        QUADSPI->DLR = block_length - 1;
        QUADSPI->CCR =
 8006f5c:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8007058 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x104>
{
 8006f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f64:	460d      	mov	r5, r1
 8006f66:	4616      	mov	r6, r2
 8006f68:	4619      	mov	r1, r3
  */
__STATIC_INLINE void LL_MDMA_SetBlkDataLength(MDMA_TypeDef *MDMAx, uint32_t Channel, uint32_t BlkDataLength)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006f6a:	f8df e0f0 	ldr.w	lr, [pc, #240]	@ 800705c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x108>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006f6e:	4b39      	ldr	r3, [pc, #228]	@ (8007054 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x100>)
  */
__STATIC_INLINE void LL_MDMA_ClearFlag_BT(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 8006f70:	2408      	movs	r4, #8
        QUADSPI->AR = address;

        while (!LL_MDMA_IsActiveFlag_BT(MDMA, LL_MDMA_CHANNEL_0));
        LL_MDMA_ClearFlag_BT(MDMA, LL_MDMA_CHANNEL_0);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006f72:	2702      	movs	r7, #2
  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006f74:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
        uint32_t bus = (dest_addr & 0xDF000000) ?
 8006f76:	f015 4f5f 	tst.w	r5, #3741319168	@ 0xdf000000
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	bf0c      	ite	eq
 8006f80:	f04f 0801 	moveq.w	r8, #1
 8006f84:	f04f 0800 	movne.w	r8, #0
      if (__b < __a)
 8006f88:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006f8c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8006f8e:	65c5      	str	r5, [r0, #92]	@ 0x5c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_DBUS, DestBus);
 8006f90:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006f92:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006f96:	ea42 4248 	orr.w	r2, r2, r8, lsl #17
 8006f9a:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8006f9c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006f9e:	d839      	bhi.n	8007014 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xc0>
 8006fa0:	2980      	cmp	r1, #128	@ 0x80
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	f022 72fe 	bic.w	r2, r2, #33292288	@ 0x1fc0000
        QUADSPI->DLR = block_length - 1;
 8006fa8:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8006fac:	bf28      	it	cs
 8006fae:	f04f 0880 	movcs.w	r8, #128	@ 0x80
        if (block_length < 128)
 8006fb2:	297f      	cmp	r1, #127	@ 0x7f
        LL_MDMA_SetBufferTransferLength(MDMA, LL_MDMA_CHANNEL_0,
 8006fb4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006fb8:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
 8006fbc:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006fbe:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8006fc0:	ea02 020e 	and.w	r2, r2, lr
 8006fc4:	ea42 0201 	orr.w	r2, r2, r1
 8006fc8:	6542      	str	r2, [r0, #84]	@ 0x54
        if (block_length < 128)
 8006fca:	d83f      	bhi.n	800704c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xf8>
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8006fcc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
}
 8006fce:	4688      	mov	r8, r1
 8006fd0:	2100      	movs	r1, #0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8006fd2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006fd6:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 8006fd8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006fda:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8006fde:	6502      	str	r2, [r0, #80]	@ 0x50
  SET_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006fe0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	64c2      	str	r2, [r0, #76]	@ 0x4c
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	0692      	lsls	r2, r2, #26
 8006fec:	d4fc      	bmi.n	8006fe8 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x94>
        QUADSPI->DLR = block_length - 1;
 8006fee:	f8c3 9010 	str.w	r9, [r3, #16]
        QUADSPI->CCR =
 8006ff2:	f8c3 c014 	str.w	ip, [r3, #20]
        QUADSPI->AR = address;
 8006ff6:	619e      	str	r6, [r3, #24]
  return ((READ_BIT(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CISR, MDMA_CISR_BTIF) == (MDMA_CISR_BTIF)) ? 1UL : 0UL);
 8006ff8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006ffa:	0712      	lsls	r2, r2, #28
 8006ffc:	d5fc      	bpl.n	8006ff8 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xa4>
  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 8006ffe:	6444      	str	r4, [r0, #68]	@ 0x44
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	0792      	lsls	r2, r2, #30
 8007004:	d5fc      	bpl.n	8007000 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xac>

        count -= block_length;
        buffer += block_length;
 8007006:	4445      	add	r5, r8
        address += block_length;
 8007008:	4446      	add	r6, r8
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800700a:	60df      	str	r7, [r3, #12]
    while (count)
 800700c:	2900      	cmp	r1, #0
 800700e:	d1b1      	bne.n	8006f74 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x20>
    }
}
 8007010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8007014:	f042 72fe 	orr.w	r2, r2, #33292288	@ 0x1fc0000
 8007018:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 800701c:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	return __b;
 8007020:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8007024:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8007026:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007028:	ea02 020e 	and.w	r2, r2, lr
 800702c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007030:	6542      	str	r2, [r0, #84]	@ 0x54
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8007032:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007034:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800703c:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 800703e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007040:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8007044:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007048:	6502      	str	r2, [r0, #80]	@ 0x50
}
 800704a:	e7c9      	b.n	8006fe0 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x8c>
 800704c:	4688      	mov	r8, r1
 800704e:	2100      	movs	r1, #0
 8007050:	e7ef      	b.n	8007032 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xde>
 8007052:	4770      	bx	lr
 8007054:	52005000 	.word	0x52005000
 8007058:	0720256b 	.word	0x0720256b
 800705c:	fffe0000 	.word	0xfffe0000

08007060 <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8007060:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <recorder::irq::Init()+0x48>)
 8007062:	689a      	ldr	r2, [r3, #8]
{
 8007064:	b410      	push	{r4}
 8007066:	1d13      	adds	r3, r2, #4
 8007068:	4c10      	ldr	r4, [pc, #64]	@ (80070ac <recorder::irq::Init()+0x4c>)
 800706a:	42a3      	cmp	r3, r4
 800706c:	d010      	beq.n	8007090 <recorder::irq::Init()+0x30>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 800706e:	4623      	mov	r3, r4
 8007070:	f504 7c26 	add.w	ip, r4, #664	@ 0x298

    for (uint32_t i = 0; i < kNumVectors; i++)
    {
        RAMVectorTable[i] = src[i];
 8007074:	1b12      	subs	r2, r2, r4
 8007076:	1899      	adds	r1, r3, r2
 8007078:	5898      	ldr	r0, [r3, r2]
    for (uint32_t i = 0; i < kNumVectors; i++)
 800707a:	3308      	adds	r3, #8
        RAMVectorTable[i] = src[i];
 800707c:	6849      	ldr	r1, [r1, #4]
 800707e:	4563      	cmp	r3, ip
 8007080:	e943 0102 	strd	r0, r1, [r3, #-8]
    for (uint32_t i = 0; i < kNumVectors; i++)
 8007084:	d1f7      	bne.n	8007076 <recorder::irq::Init()+0x16>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8007086:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <recorder::irq::Init()+0x48>)
 8007088:	609c      	str	r4, [r3, #8]
}
 800708a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	f502 7126 	add.w	r1, r2, #664	@ 0x298
        RAMVectorTable[i] = src[i];
 8007094:	6813      	ldr	r3, [r2, #0]
 8007096:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 800709a:	428a      	cmp	r2, r1
 800709c:	d1fa      	bne.n	8007094 <recorder::irq::Init()+0x34>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 800709e:	4b02      	ldr	r3, [pc, #8]	@ (80070a8 <recorder::irq::Init()+0x48>)
 80070a0:	609c      	str	r4, [r3, #8]
}
 80070a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	20011000 	.word	0x20011000

080070b0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 80070b0:	f110 0f0e 	cmn.w	r0, #14
{
 80070b4:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 80070b6:	db06      	blt.n	80070c6 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 80070b8:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 80070ba:	28a5      	cmp	r0, #165	@ 0xa5
 80070bc:	dc09      	bgt.n	80070d2 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 80070be:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 80070c0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 80070c4:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 80070c6:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 80070c8:	211c      	movs	r1, #28
 80070ca:	4a07      	ldr	r2, [pc, #28]	@ (80070e8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 80070cc:	4807      	ldr	r0, [pc, #28]	@ (80070ec <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 80070ce:	f003 fdc9 	bl	800ac64 <__assert_func>
    assert(exception_num < kNumVectors);
 80070d2:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 80070d4:	211f      	movs	r1, #31
 80070d6:	4a04      	ldr	r2, [pc, #16]	@ (80070e8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 80070d8:	4804      	ldr	r0, [pc, #16]	@ (80070ec <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 80070da:	f003 fdc3 	bl	800ac64 <__assert_func>
 80070de:	bf00      	nop
 80070e0:	20011000 	.word	0x20011000
 80070e4:	0800c1bc 	.word	0x0800c1bc
 80070e8:	0800c1d8 	.word	0x0800c1d8
 80070ec:	0800c210 	.word	0x0800c210
 80070f0:	0800c220 	.word	0x0800c220

080070f4 <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 80070f4:	2800      	cmp	r0, #0
{
 80070f6:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 80070f8:	db08      	blt.n	800710c <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80070fa:	f000 011f 	and.w	r1, r0, #31
 80070fe:	2301      	movs	r3, #1
 8007100:	0940      	lsrs	r0, r0, #5
 8007102:	4a05      	ldr	r2, [pc, #20]	@ (8007118 <recorder::irq::Enable(IRQn_Type)+0x24>)
 8007104:	408b      	lsls	r3, r1
 8007106:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 800710a:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 800710c:	4b03      	ldr	r3, [pc, #12]	@ (800711c <recorder::irq::Enable(IRQn_Type)+0x28>)
 800710e:	2126      	movs	r1, #38	@ 0x26
 8007110:	4a03      	ldr	r2, [pc, #12]	@ (8007120 <recorder::irq::Enable(IRQn_Type)+0x2c>)
 8007112:	4804      	ldr	r0, [pc, #16]	@ (8007124 <recorder::irq::Enable(IRQn_Type)+0x30>)
 8007114:	f003 fda6 	bl	800ac64 <__assert_func>
 8007118:	e000e100 	.word	0xe000e100
 800711c:	0800c23c 	.word	0x0800c23c
 8007120:	0800c248 	.word	0x0800c248
 8007124:	0800c210 	.word	0x0800c210

08007128 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007128:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x4c>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007130:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007134:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007136:	f1bc 0f04 	cmp.w	ip, #4
 800713a:	bf28      	it	cs
 800713c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007140:	2a06      	cmp	r2, #6
 8007142:	bf88      	it	hi
 8007144:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714a:	bf98      	it	ls
 800714c:	2200      	movls	r2, #0
  if ((int32_t)(IRQn) >= 0)
 800714e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007150:	fa03 f30c 	lsl.w	r3, r3, ip
 8007154:	ea21 0303 	bic.w	r3, r1, r3
 8007158:	fa03 f302 	lsl.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007160:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007162:	db02      	blt.n	800716a <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007164:	4a04      	ldr	r2, [pc, #16]	@ (8007178 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x50>)
 8007166:	5413      	strb	r3, [r2, r0]
 8007168:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800716a:	f000 000f 	and.w	r0, r0, #15
 800716e:	4a03      	ldr	r2, [pc, #12]	@ (800717c <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 8007170:	5413      	strb	r3, [r2, r0]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 8007172:	4770      	bx	lr
 8007174:	e000ed00 	.word	0xe000ed00
 8007178:	e000e400 	.word	0xe000e400
 800717c:	e000ed14 	.word	0xe000ed14

08007180 <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007180:	4b4e      	ldr	r3, [pc, #312]	@ (80072bc <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 8007182:	4a4f      	ldr	r2, [pc, #316]	@ (80072c0 <recorder::Serial::Init(unsigned long)+0x140>)
{
 8007184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 8007188:	6010      	str	r0, [r2, #0]
{
 800718a:	b08b      	sub	sp, #44	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800718c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
{
 8007190:	460d      	mov	r5, r1

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 8007192:	2701      	movs	r7, #1
    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8007194:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007196:	f042 0202 	orr.w	r2, r2, #2
 800719a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800719e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071a2:	f002 0202 	and.w	r2, r2, #2
 80071a6:	9200      	str	r2, [sp, #0]
 80071a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 80071aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80071ae:	f042 0210 	orr.w	r2, r2, #16
 80071b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80071b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80071c2:	4b40      	ldr	r3, [pc, #256]	@ (80072c4 <recorder::Serial::Init(unsigned long)+0x144>)
 80071c4:	e01f      	b.n	8007206 <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 80071cc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80071d0:	ea22 0204 	bic.w	r2, r2, r4
 80071d4:	ea42 0208 	orr.w	r2, r2, r8
 80071d8:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80071e0:	ea22 0204 	bic.w	r2, r2, r4
 80071e4:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 80071e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	ea22 0204 	bic.w	r2, r2, r4
 80071f0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	ea22 0204 	bic.w	r2, r2, r4
 80071f8:	ea42 020e 	orr.w	r2, r2, lr
 80071fc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	4016      	ands	r6, r2
 8007202:	605e      	str	r6, [r3, #4]
    while (pins != 0)
 8007204:	b339      	cbz	r1, 8007256 <recorder::Serial::Init(unsigned long)+0xd6>
 8007206:	fa91 fca1 	rbit	ip, r1
        uint32_t pin = 1 << POSITION_VAL(pins);
 800720a:	fabc fc8c 	clz	ip, ip
 800720e:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 8007212:	43e6      	mvns	r6, r4
 8007214:	ea21 0104 	bic.w	r1, r1, r4
 8007218:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800721c:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007220:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 8007222:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007226:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800722a:	fb02 f202 	mul.w	r2, r2, r2
 800722e:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007232:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007236:	fb02 f202 	mul.w	r2, r2, r2
 800723a:	ddc4      	ble.n	80071c6 <recorder::Serial::Init(unsigned long)+0x46>
 800723c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8007240:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007244:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007248:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800724c:	ea28 0409 	bic.w	r4, r8, r9
 8007250:	4322      	orrs	r2, r4
 8007252:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007254:	e7c1      	b.n	80071da <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 8007256:	4c1c      	ldr	r4, [pc, #112]	@ (80072c8 <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 8007258:	2220      	movs	r2, #32
	__atomic_store_n(&_M_i, __i, int(__m));
 800725a:	6001      	str	r1, [r0, #0]
 800725c:	6041      	str	r1, [r0, #4]
 800725e:	6481      	str	r1, [r0, #72]	@ 0x48
 8007260:	64c1      	str	r1, [r0, #76]	@ 0x4c
 8007262:	a802      	add	r0, sp, #8
 8007264:	f003 ff27 	bl	800b0b6 <memset>
 8007268:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 800726a:	a902      	add	r1, sp, #8
 800726c:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 800726e:	9307      	str	r3, [sp, #28]
    };
 8007270:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 8007272:	f002 feb5 	bl	8009fe0 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8007276:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 8007278:	2025      	movs	r0, #37	@ 0x25
 800727a:	4914      	ldr	r1, [pc, #80]	@ (80072cc <recorder::Serial::Init(unsigned long)+0x14c>)
 800727c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007280:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f043 0301 	orr.w	r3, r3, #1
 8007288:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 800728a:	69a3      	ldr	r3, [r4, #24]
 800728c:	f043 0308 	orr.w	r3, r3, #8
 8007290:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f043 0320 	orr.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	f7ff ff05 	bl	80070b0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 80072a6:	210b      	movs	r1, #11
 80072a8:	2025      	movs	r0, #37	@ 0x25
 80072aa:	f7ff ff3d 	bl	8007128 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 80072ae:	2025      	movs	r0, #37	@ 0x25
 80072b0:	f7ff ff20 	bl	80070f4 <recorder::irq::Enable(IRQn_Type)>
}
 80072b4:	b00b      	add	sp, #44	@ 0x2c
 80072b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072ba:	bf00      	nop
 80072bc:	58024400 	.word	0x58024400
 80072c0:	20011298 	.word	0x20011298
 80072c4:	58020400 	.word	0x58020400
 80072c8:	40011000 	.word	0x40011000
 80072cc:	08007421 	.word	0x08007421

080072d0 <recorder::Serial::BytesAvailable()>:
	return __atomic_load_n(&_M_i, int(__m));
 80072d0:	6803      	ldr	r3, [r0, #0]
 80072d2:	6840      	ldr	r0, [r0, #4]
 80072d4:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 80072d8:	1ac0      	subs	r0, r0, r3
 80072da:	4770      	bx	lr

080072dc <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 80072dc:	4602      	mov	r2, r0
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	6851      	ldr	r1, [r2, #4]
 80072e2:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 80072e6:	428b      	cmp	r3, r1
 80072e8:	d0f9      	beq.n	80072de <recorder::Serial::GetByteBlocking()+0x2>
        {
            return false;
        }

        item = data_[head % size];
 80072ea:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
        head_.store(head + 1, std::memory_order_release);
 80072ee:	3301      	adds	r3, #1
        item = data_[head % size];
 80072f0:	4411      	add	r1, r2
 80072f2:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 80072f4:	f3bf 8f5b 	dmb	ish
 80072f8:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 80072fa:	4770      	bx	lr

080072fc <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 80072fc:	b500      	push	{lr}
 80072fe:	4684      	mov	ip, r0
 8007300:	468e      	mov	lr, r1
 8007302:	4613      	mov	r3, r2
	return __atomic_load_n(&_M_i, int(__m));
 8007304:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8007308:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800730a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800730c:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8007310:	1a12      	subs	r2, r2, r0
 8007312:	f10c 0048 	add.w	r0, ip, #72	@ 0x48

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 8007316:	2aff      	cmp	r2, #255	@ 0xff
 8007318:	d900      	bls.n	800731c <recorder::Serial::Write(unsigned char, bool)+0x20>
 800731a:	b1bb      	cbz	r3, 800734c <recorder::Serial::Write(unsigned char, bool)+0x50>
 800731c:	680b      	ldr	r3, [r1, #0]
 800731e:	6802      	ldr	r2, [r0, #0]
 8007320:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8007324:	1a9a      	subs	r2, r3, r2
 8007326:	2aff      	cmp	r2, #255	@ 0xff
 8007328:	d8f8      	bhi.n	800731c <recorder::Serial::Write(unsigned char, bool)+0x20>
            data_[(tail + i) % size] = buffer[i];
 800732a:	fa5c f283 	uxtab	r2, ip, r3
 800732e:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 8007330:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8007332:	f882 e050 	strb.w	lr, [r2, #80]	@ 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 8007336:	f3bf 8f5b 	dmb	ish
 800733a:	f8cc 304c 	str.w	r3, [ip, #76]	@ 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800733e:	4a04      	ldr	r2, [pc, #16]	@ (8007350 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8007340:	6813      	ldr	r3, [r2, #0]
 8007342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007346:	6013      	str	r3, [r2, #0]
}
 8007348:	f85d fb04 	ldr.w	pc, [sp], #4
 800734c:	4618      	mov	r0, r3
 800734e:	e7f6      	b.n	800733e <recorder::Serial::Write(unsigned char, bool)+0x42>
 8007350:	40011000 	.word	0x40011000

08007354 <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 8007354:	b971      	cbnz	r1, 8007374 <recorder::Serial::FlushTx(bool)+0x20>
	return __atomic_load_n(&_M_i, int(__m));
 8007356:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8007358:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800735a:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 800735e:	429a      	cmp	r2, r3
 8007360:	d1f9      	bne.n	8007356 <recorder::Serial::FlushTx(bool)+0x2>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8007362:	4a09      	ldr	r2, [pc, #36]	@ (8007388 <recorder::Serial::FlushTx(bool)+0x34>)
 8007364:	69d3      	ldr	r3, [r2, #28]
 8007366:	0619      	lsls	r1, r3, #24
 8007368:	d5fc      	bpl.n	8007364 <recorder::Serial::FlushTx(bool)+0x10>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800736a:	4a07      	ldr	r2, [pc, #28]	@ (8007388 <recorder::Serial::FlushTx(bool)+0x34>)
 800736c:	69d3      	ldr	r3, [r2, #28]
 800736e:	065b      	lsls	r3, r3, #25
 8007370:	d5fc      	bpl.n	800736c <recorder::Serial::FlushTx(bool)+0x18>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 8007372:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007374:	4904      	ldr	r1, [pc, #16]	@ (8007388 <recorder::Serial::FlushTx(bool)+0x34>)
	__atomic_store_n(&_M_i, __i, int(__m));
 8007376:	2200      	movs	r2, #0
 8007378:	680b      	ldr	r3, [r1, #0]
 800737a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	6482      	str	r2, [r0, #72]	@ 0x48
 8007382:	64c2      	str	r2, [r0, #76]	@ 0x4c
    }
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40011000 	.word	0x40011000

0800738c <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800738c:	4b23      	ldr	r3, [pc, #140]	@ (800741c <recorder::Serial::InterruptService()+0x90>)
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	0692      	lsls	r2, r2, #26
 8007392:	d516      	bpl.n	80073c2 <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8007394:	6a59      	ldr	r1, [r3, #36]	@ 0x24
	return __atomic_load_n(&_M_i, int(__m));
 8007396:	6843      	ldr	r3, [r0, #4]
 8007398:	6802      	ldr	r2, [r0, #0]
 800739a:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 800739e:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 80073a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80073a2:	d82b      	bhi.n	80073fc <recorder::Serial::InterruptService()+0x70>
 80073a4:	6843      	ldr	r3, [r0, #4]
 80073a6:	6802      	ldr	r2, [r0, #0]
 80073a8:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 80073ac:	1a9a      	subs	r2, r3, r2
 80073ae:	2a3f      	cmp	r2, #63	@ 0x3f
 80073b0:	d807      	bhi.n	80073c2 <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 80073b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
        tail_.store(tail + length, std::memory_order_release);
 80073b6:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 80073b8:	4402      	add	r2, r0
 80073ba:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 80073bc:	f3bf 8f5b 	dmb	ish
 80073c0:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 80073c2:	4b16      	ldr	r3, [pc, #88]	@ (800741c <recorder::Serial::InterruptService()+0x90>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	0611      	lsls	r1, r2, #24
 80073c8:	d517      	bpl.n	80073fa <recorder::Serial::InterruptService()+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	0612      	lsls	r2, r2, #24
 80073ce:	d514      	bpl.n	80073fa <recorder::Serial::InterruptService()+0x6e>
	return __atomic_load_n(&_M_i, int(__m));
 80073d0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80073d2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80073d4:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 80073d8:	428a      	cmp	r2, r1
 80073da:	d01a      	beq.n	8007412 <recorder::Serial::InterruptService()+0x86>
        item = data_[head % size];
 80073dc:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 80073e0:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80073e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80073e6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80073e8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80073ea:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <recorder::Serial::InterruptService()+0x6e>
        head_.store(head + 1, std::memory_order_release);
 80073f2:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 80073f4:	f3bf 8f5b 	dmb	ish
 80073f8:	6483      	str	r3, [r0, #72]	@ 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 80073fa:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 80073fc:	6803      	ldr	r3, [r0, #0]
 80073fe:	6842      	ldr	r2, [r0, #4]
 8007400:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8007404:	4293      	cmp	r3, r2
 8007406:	d0cd      	beq.n	80073a4 <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 8007408:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 800740a:	f3bf 8f5b 	dmb	ish
 800740e:	6003      	str	r3, [r0, #0]
        return true;
 8007410:	e7c8      	b.n	80073a4 <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007418:	601a      	str	r2, [r3, #0]
}
 800741a:	4770      	bx	lr
 800741c:	40011000 	.word	0x40011000

08007420 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 8007420:	4b01      	ldr	r3, [pc, #4]	@ (8007428 <recorder::Serial::InterruptHandler()+0x8>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	f7ff bfb2 	b.w	800738c <recorder::Serial::InterruptService()>
 8007428:	20011298 	.word	0x20011298

0800742c <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800742c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007430:	4905      	ldr	r1, [pc, #20]	@ (8007448 <NVIC_SystemReset+0x1c>)
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <NVIC_SystemReset+0x20>)
 8007434:	68ca      	ldr	r2, [r1, #12]
 8007436:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800743a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800743c:	60cb      	str	r3, [r1, #12]
 800743e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007442:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007444:	e7fd      	b.n	8007442 <NVIC_SystemReset+0x16>
 8007446:	bf00      	nop
 8007448:	e000ed00 	.word	0xe000ed00
 800744c:	05fa0004 	.word	0x05fa0004

08007450 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007450:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <TickHandler+0x14>)
 8007452:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 8007456:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <TickHandler+0x18>)
 8007458:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 800745e:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8007460:	6013      	str	r3, [r2, #0]
}
 8007462:	4770      	bx	lr
 8007464:	40001400 	.word	0x40001400
 8007468:	200112a4 	.word	0x200112a4

0800746c <recorder::system::ConfigureClocks()>:
{
 800746c:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800746e:	2002      	movs	r0, #2
{
 8007470:	b0cc      	sub	sp, #304	@ 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007472:	f000 fc55 	bl	8007d20 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 8007476:	4b30      	ldr	r3, [pc, #192]	@ (8007538 <recorder::system::ConfigureClocks()+0xcc>)
 8007478:	2100      	movs	r1, #0
 800747a:	4a30      	ldr	r2, [pc, #192]	@ (800753c <recorder::system::ConfigureClocks()+0xd0>)
 800747c:	9101      	str	r1, [sp, #4]
 800747e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007480:	f021 0101 	bic.w	r1, r1, #1
 8007484:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	6993      	ldr	r3, [r2, #24]
 8007490:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007498:	6193      	str	r3, [r2, #24]
 800749a:	6993      	ldr	r3, [r2, #24]
 800749c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 80074a4:	6993      	ldr	r3, [r2, #24]
 80074a6:	049b      	lsls	r3, r3, #18
 80074a8:	d5fc      	bpl.n	80074a4 <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 80074aa:	2248      	movs	r2, #72	@ 0x48
 80074ac:	2100      	movs	r1, #0
 80074ae:	a80b      	add	r0, sp, #44	@ 0x2c
 80074b0:	f003 fe01 	bl	800b0b6 <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 80074b4:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80074b6:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 80074b8:	930d      	str	r3, [sp, #52]	@ 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80074ba:	920a      	str	r2, [sp, #40]	@ 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 80074bc:	f000 fc04 	bl	8007cc8 <HAL_GetREVID>
 80074c0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80074c4:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 80074c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007540 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80074c8:	a80a      	add	r0, sp, #40	@ 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 80074ca:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 80074cc:	bf94      	ite	ls
 80074ce:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 80074d2:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 80074d6:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80074d8:	f000 fc48 	bl	8007d6c <HAL_RCC_OscConfig>
 80074dc:	b100      	cbz	r0, 80074e0 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 80074de:	e7fe      	b.n	80074de <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 80074e0:	233f      	movs	r3, #63	@ 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 80074e2:	9009      	str	r0, [sp, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 80074e4:	2101      	movs	r1, #1
    clk_init.ClockType =
 80074e6:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 80074e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80074ec:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80074f0:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 80074f4:	a802      	add	r0, sp, #8
 80074f6:	f000 ff53 	bl	80083a0 <HAL_RCC_ClockConfig>
 80074fa:	b100      	cbz	r0, 80074fe <recorder::system::ConfigureClocks()+0x92>
        while (1);
 80074fc:	e7fe      	b.n	80074fc <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 80074fe:	4601      	mov	r1, r0
 8007500:	22b8      	movs	r2, #184	@ 0xb8
 8007502:	a81e      	add	r0, sp, #120	@ 0x78
    periph_clk_init.PLL3 =
 8007504:	4c0f      	ldr	r4, [pc, #60]	@ (8007544 <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8007506:	f003 fdd6 	bl	800b0b6 <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 800750a:	490f      	ldr	r1, [pc, #60]	@ (8007548 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800750c:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800750e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    periph_clk_init.PLL3 =
 8007512:	f10d 0c98 	add.w	ip, sp, #152	@ 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8007516:	911d      	str	r1, [sp, #116]	@ 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8007518:	923b      	str	r2, [sp, #236]	@ 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800751a:	9345      	str	r3, [sp, #276]	@ 0x114
    periph_clk_init.PLL3 =
 800751c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800751e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007522:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007526:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 800752a:	a81d      	add	r0, sp, #116	@ 0x74
 800752c:	f001 f934 	bl	8008798 <HAL_RCCEx_PeriphCLKConfig>
 8007530:	b908      	cbnz	r0, 8007536 <recorder::system::ConfigureClocks()+0xca>
}
 8007532:	b04c      	add	sp, #304	@ 0x130
 8007534:	bd10      	pop	{r4, pc}
        while (1);
 8007536:	e7fe      	b.n	8007536 <recorder::system::ConfigureClocks()+0xca>
 8007538:	58000400 	.word	0x58000400
 800753c:	58024800 	.word	0x58024800
 8007540:	58024400 	.word	0x58024400
 8007544:	0800c038 	.word	0x0800c038
 8007548:	02080001 	.word	0x02080001

0800754c <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 800754c:	2000      	movs	r0, #0
 800754e:	4770      	bx	lr

08007550 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8007550:	4b02      	ldr	r3, [pc, #8]	@ (800755c <recorder::system::ReloadWatchdog()+0xc>)
 8007552:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007556:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	58004800 	.word	0x58004800

08007560 <recorder::system::Init()>:

void Init(void)
{
 8007560:	b530      	push	{r4, r5, lr}
 8007562:	b08d      	sub	sp, #52	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007564:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8007566:	4cb1      	ldr	r4, [pc, #708]	@ (800782c <recorder::system::Init()+0x2cc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007568:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800756c:	4bb0      	ldr	r3, [pc, #704]	@ (8007830 <recorder::system::Init()+0x2d0>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800756e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
  reg_value  =  (reg_value                                   |
 8007572:	4ab0      	ldr	r2, [pc, #704]	@ (8007834 <recorder::system::Init()+0x2d4>)
 8007574:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8007578:	4daf      	ldr	r5, [pc, #700]	@ (8007838 <recorder::system::Init()+0x2d8>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800757a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800757e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007580:	f041 4140 	orr.w	r1, r1, #3221225472	@ 0xc0000000
 8007584:	6359      	str	r1, [r3, #52]	@ 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 8007586:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007588:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800758c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 800758e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007590:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8007594:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 8007596:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007598:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 800759c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 800759e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80075a0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80075a4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a6:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 80075a8:	49a4      	ldr	r1, [pc, #656]	@ (800783c <recorder::system::Init()+0x2dc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075aa:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 80075ac:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 80075ae:	4ba4      	ldr	r3, [pc, #656]	@ (8007840 <recorder::system::Init()+0x2e0>)
  SCB->AIRCR =  reg_value;
 80075b0:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 80075b2:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 80075b4:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 80075b6:	f7ff ff59 	bl	800746c <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 80075ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075be:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80075c2:	2500      	movs	r5, #0
 80075c4:	f8c4 5250 	str.w	r5, [r4, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80075c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80075d0:	6963      	ldr	r3, [r4, #20]
 80075d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075d6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80075d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	4c98      	ldr	r4, [pc, #608]	@ (8007844 <recorder::system::Init()+0x2e4>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80075e2:	4b99      	ldr	r3, [pc, #612]	@ (8007848 <recorder::system::Init()+0x2e8>)
 80075e4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80075e8:	4a98      	ldr	r2, [pc, #608]	@ (800784c <recorder::system::Init()+0x2ec>)
 80075ea:	f041 0102 	orr.w	r1, r1, #2
 80075ee:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 80075f2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80075f6:	f001 0102 	and.w	r1, r1, #2
 80075fa:	9105      	str	r1, [sp, #20]
 80075fc:	9905      	ldr	r1, [sp, #20]
 80075fe:	6899      	ldr	r1, [r3, #8]
 8007600:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007604:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8007608:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800760a:	68d9      	ldr	r1, [r3, #12]
 800760c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007610:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007618:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007620:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8007624:	6019      	str	r1, [r3, #0]
 8007626:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800762a:	f041 0102 	orr.w	r1, r1, #2
 800762e:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8007632:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8007636:	f001 0102 	and.w	r1, r1, #2
 800763a:	9104      	str	r1, [sp, #16]
 800763c:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800763e:	6899      	ldr	r1, [r3, #8]
 8007640:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8007644:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8007648:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800764a:	68d9      	ldr	r1, [r3, #12]
 800764c:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8007650:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007652:	6859      	ldr	r1, [r3, #4]
 8007654:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8007658:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800765a:	6819      	ldr	r1, [r3, #0]
 800765c:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8007660:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8007664:	6019      	str	r1, [r3, #0]
 8007666:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800766a:	f041 0102 	orr.w	r1, r1, #2
 800766e:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8007672:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8007676:	f001 0102 	and.w	r1, r1, #2
 800767a:	9103      	str	r1, [sp, #12]
 800767c:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800767e:	6899      	ldr	r1, [r3, #8]
 8007680:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8007684:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8007688:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800768a:	68d9      	ldr	r1, [r3, #12]
 800768c:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8007690:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007692:	6859      	ldr	r1, [r3, #4]
 8007694:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8007698:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800769a:	6819      	ldr	r1, [r3, #0]
 800769c:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 80076a0:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80076aa:	f041 0102 	orr.w	r1, r1, #2
 80076ae:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 80076b2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80076b6:	f001 0102 	and.w	r1, r1, #2
 80076ba:	9102      	str	r1, [sp, #8]
 80076bc:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80076c4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80076c8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80076ca:	68d9      	ldr	r1, [r3, #12]
 80076cc:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80076d0:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80076d8:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80076e0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80076e4:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80076e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ee:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80076f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80076f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80076fe:	6893      	ldr	r3, [r2, #8]
 8007700:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007708:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800770a:	68d3      	ldr	r3, [r2, #12]
 800770c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007710:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007712:	6853      	ldr	r3, [r2, #4]
 8007714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007718:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007724:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 8007726:	f7ff fc9b 	bl	8007060 <recorder::irq::Init()>
    serial_.Init(115200);
 800772a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800772e:	4848      	ldr	r0, [pc, #288]	@ (8007850 <recorder::system::Init()+0x2f0>)
 8007730:	f7ff fd26 	bl	8007180 <recorder::Serial::Init(unsigned long)>
 8007734:	4b47      	ldr	r3, [pc, #284]	@ (8007854 <recorder::system::Init()+0x2f4>)
    LL_TIM_InitTypeDef timer_init =
 8007736:	2210      	movs	r2, #16
    LL_TIM_Init(TIM7, &timer_init);
 8007738:	a906      	add	r1, sp, #24
 800773a:	601d      	str	r5, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 800773c:	f641 03ff 	movw	r3, #6399	@ 0x18ff
 8007740:	9207      	str	r2, [sp, #28]
 8007742:	9506      	str	r5, [sp, #24]
 8007744:	9308      	str	r3, [sp, #32]
 8007746:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 800774a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
    LL_TIM_Init(TIM7, &timer_init);
 800774e:	4d42      	ldr	r5, [pc, #264]	@ (8007858 <recorder::system::Init()+0x2f8>)
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007750:	f043 0320 	orr.w	r3, r3, #32
    LL_TIM_Init(TIM7, &timer_init);
 8007754:	4628      	mov	r0, r5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007756:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 800775a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	9b00      	ldr	r3, [sp, #0]
    LL_TIM_Init(TIM7, &timer_init);
 8007766:	f002 fbd5 	bl	8009f14 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800776a:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 800776c:	2037      	movs	r0, #55	@ 0x37
 800776e:	493b      	ldr	r1, [pc, #236]	@ (800785c <recorder::system::Init()+0x2fc>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	f7ff fc97 	bl	80070b0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 8007782:	210a      	movs	r1, #10
 8007784:	2037      	movs	r0, #55	@ 0x37
 8007786:	f7ff fccf 	bl	8007128 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 800778a:	2037      	movs	r0, #55	@ 0x37
 800778c:	f7ff fcb2 	bl	80070f4 <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8007790:	4a33      	ldr	r2, [pc, #204]	@ (8007860 <recorder::system::Init()+0x300>)
 8007792:	4b34      	ldr	r3, [pc, #208]	@ (8007864 <recorder::system::Init()+0x304>)
 8007794:	69d1      	ldr	r1, [r2, #28]
 8007796:	400b      	ands	r3, r1
 8007798:	2b10      	cmp	r3, #16
 800779a:	d010      	beq.n	80077be <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800779c:	4932      	ldr	r1, [pc, #200]	@ (8007868 <recorder::system::Init()+0x308>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800779e:	4833      	ldr	r0, [pc, #204]	@ (800786c <recorder::system::Init()+0x30c>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 80077a0:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <recorder::system::Init()+0x310>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80077a2:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80077a4:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 80077a6:	6a11      	ldr	r1, [r2, #32]
 80077a8:	400b      	ands	r3, r1
 80077aa:	f043 0310 	orr.w	r3, r3, #16
 80077ae:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80077b0:	6993      	ldr	r3, [r2, #24]
 80077b2:	f043 0302 	orr.w	r3, r3, #2
 80077b6:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 80077b8:	69d3      	ldr	r3, [r2, #28]
 80077ba:	07d8      	lsls	r0, r3, #31
 80077bc:	d4fc      	bmi.n	80077b8 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 80077be:	492d      	ldr	r1, [pc, #180]	@ (8007874 <recorder::system::Init()+0x314>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80077c0:	f64c 44cc 	movw	r4, #52428	@ 0xcccc
 80077c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007878 <recorder::system::Init()+0x318>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80077c6:	f245 5055 	movw	r0, #21845	@ 0x5555
 80077ca:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80077cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077d0:	654b      	str	r3, [r1, #84]	@ 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80077d2:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80077d4:	2364      	movs	r3, #100	@ 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80077d6:	6014      	str	r4, [r2, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80077d8:	6010      	str	r0, [r2, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80077da:	6051      	str	r1, [r2, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80077dc:	6093      	str	r3, [r2, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80077de:	68d3      	ldr	r3, [r2, #12]
 80077e0:	0759      	lsls	r1, r3, #29
 80077e2:	d1fc      	bne.n	80077de <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80077e4:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 80077e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80077ea:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 80077ec:	4b15      	ldr	r3, [pc, #84]	@ (8007844 <recorder::system::Init()+0x2e4>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 80077ee:	4823      	ldr	r0, [pc, #140]	@ (800787c <recorder::system::Init()+0x31c>)
    uint32_t reset_flags = RCC->RSR;
 80077f0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80077f4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80077f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80077fc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    printf("Reset source was ");
 8007800:	f003 fbbe 	bl	800af80 <iprintf>

    switch (reset_flags >> 16)
 8007804:	0c23      	lsrs	r3, r4, #16
 8007806:	2bfe      	cmp	r3, #254	@ 0xfe
 8007808:	d07e      	beq.n	8007908 <recorder::system::Init()+0x3a8>
 800780a:	d93b      	bls.n	8007884 <recorder::system::Init()+0x324>
 800780c:	f241 0246 	movw	r2, #4166	@ 0x1046
 8007810:	4293      	cmp	r3, r2
 8007812:	d075      	beq.n	8007900 <recorder::system::Init()+0x3a0>
 8007814:	d868      	bhi.n	80078e8 <recorder::system::Init()+0x388>
 8007816:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 800781a:	d052      	beq.n	80078c2 <recorder::system::Init()+0x362>
 800781c:	f240 4246 	movw	r2, #1094	@ 0x446
 8007820:	4293      	cmp	r3, r2
 8007822:	d175      	bne.n	8007910 <recorder::system::Init()+0x3b0>
        case 0x0046: printf("NRST\n");  break;
        case 0x0066: printf("BOR\n");   break;
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
 8007824:	4816      	ldr	r0, [pc, #88]	@ (8007880 <recorder::system::Init()+0x320>)
 8007826:	f003 fc13 	bl	800b050 <puts>
 800782a:	e035      	b.n	8007898 <recorder::system::Init()+0x338>
 800782c:	e000ed00 	.word	0xe000ed00
 8007830:	e000ef00 	.word	0xe000ef00
 8007834:	05fa0300 	.word	0x05fa0300
 8007838:	2000002c 	.word	0x2000002c
 800783c:	03d09000 	.word	0x03d09000
 8007840:	20000028 	.word	0x20000028
 8007844:	58024400 	.word	0x58024400
 8007848:	58020400 	.word	0x58020400
 800784c:	58021800 	.word	0x58021800
 8007850:	200112a8 	.word	0x200112a8
 8007854:	200112a4 	.word	0x200112a4
 8007858:	40001400 	.word	0x40001400
 800785c:	08007451 	.word	0x08007451
 8007860:	52002000 	.word	0x52002000
 8007864:	00060010 	.word	0x00060010
 8007868:	4c5d6e7f 	.word	0x4c5d6e7f
 800786c:	08192a3b 	.word	0x08192a3b
 8007870:	fff9ffef 	.word	0xfff9ffef
 8007874:	5c001000 	.word	0x5c001000
 8007878:	58004800 	.word	0x58004800
 800787c:	0800c270 	.word	0x0800c270
 8007880:	0800c2a4 	.word	0x0800c2a4
    switch (reset_flags >> 16)
 8007884:	2b46      	cmp	r3, #70	@ 0x46
 8007886:	d037      	beq.n	80078f8 <recorder::system::Init()+0x398>
 8007888:	d828      	bhi.n	80078dc <recorder::system::Init()+0x37c>
 800788a:	2b06      	cmp	r3, #6
 800788c:	d015      	beq.n	80078ba <recorder::system::Init()+0x35a>
 800788e:	2b1e      	cmp	r3, #30
 8007890:	d13e      	bne.n	8007910 <recorder::system::Init()+0x3b0>
        case 0x001E: printf("WAKE\n");  break;
 8007892:	4822      	ldr	r0, [pc, #136]	@ (800791c <recorder::system::Init()+0x3bc>)
 8007894:	f003 fbdc 	bl	800b050 <puts>
        case 0x4046: printf("LPWR\n");  break;
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 8007898:	4b21      	ldr	r3, [pc, #132]	@ (8007920 <recorder::system::Init()+0x3c0>)
 800789a:	4c22      	ldr	r4, [pc, #136]	@ (8007924 <recorder::system::Init()+0x3c4>)
 800789c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 800789e:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 80078a0:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 80078a2:	d416      	bmi.n	80078d2 <recorder::system::Init()+0x372>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80078a4:	079b      	lsls	r3, r3, #30
 80078a6:	d410      	bmi.n	80078ca <recorder::system::Init()+0x36a>
 80078a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007928 <recorder::system::Init()+0x3c8>)
 80078aa:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 80078ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 80078b6:	b00d      	add	sp, #52	@ 0x34
 80078b8:	bd30      	pop	{r4, r5, pc}
        case 0x0006: printf("CPU\n");   break;
 80078ba:	481c      	ldr	r0, [pc, #112]	@ (800792c <recorder::system::Init()+0x3cc>)
 80078bc:	f003 fbc8 	bl	800b050 <puts>
 80078c0:	e7ea      	b.n	8007898 <recorder::system::Init()+0x338>
        case 0x0146: printf("SFT\n");   break;
 80078c2:	481b      	ldr	r0, [pc, #108]	@ (8007930 <recorder::system::Init()+0x3d0>)
 80078c4:	f003 fbc4 	bl	800b050 <puts>
 80078c8:	e7e6      	b.n	8007898 <recorder::system::Init()+0x338>
        printf("Wakeup event was play button\n");
 80078ca:	481a      	ldr	r0, [pc, #104]	@ (8007934 <recorder::system::Init()+0x3d4>)
 80078cc:	f003 fbc0 	bl	800b050 <puts>
 80078d0:	e7ea      	b.n	80078a8 <recorder::system::Init()+0x348>
        printf("Wakeup event was record button\n");
 80078d2:	4819      	ldr	r0, [pc, #100]	@ (8007938 <recorder::system::Init()+0x3d8>)
 80078d4:	f003 fbbc 	bl	800b050 <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	e7e3      	b.n	80078a4 <recorder::system::Init()+0x344>
    switch (reset_flags >> 16)
 80078dc:	2b66      	cmp	r3, #102	@ 0x66
 80078de:	d117      	bne.n	8007910 <recorder::system::Init()+0x3b0>
        case 0x0066: printf("BOR\n");   break;
 80078e0:	4816      	ldr	r0, [pc, #88]	@ (800793c <recorder::system::Init()+0x3dc>)
 80078e2:	f003 fbb5 	bl	800b050 <puts>
 80078e6:	e7d7      	b.n	8007898 <recorder::system::Init()+0x338>
    switch (reset_flags >> 16)
 80078e8:	f244 0246 	movw	r2, #16454	@ 0x4046
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10f      	bne.n	8007910 <recorder::system::Init()+0x3b0>
        case 0x4046: printf("LPWR\n");  break;
 80078f0:	4813      	ldr	r0, [pc, #76]	@ (8007940 <recorder::system::Init()+0x3e0>)
 80078f2:	f003 fbad 	bl	800b050 <puts>
 80078f6:	e7cf      	b.n	8007898 <recorder::system::Init()+0x338>
        case 0x0046: printf("NRST\n");  break;
 80078f8:	4812      	ldr	r0, [pc, #72]	@ (8007944 <recorder::system::Init()+0x3e4>)
 80078fa:	f003 fba9 	bl	800b050 <puts>
 80078fe:	e7cb      	b.n	8007898 <recorder::system::Init()+0x338>
        case 0x1046: printf("WWDG1\n"); break;
 8007900:	4811      	ldr	r0, [pc, #68]	@ (8007948 <recorder::system::Init()+0x3e8>)
 8007902:	f003 fba5 	bl	800b050 <puts>
 8007906:	e7c7      	b.n	8007898 <recorder::system::Init()+0x338>
        case 0x00FE: printf("POR\n");   break;
 8007908:	4810      	ldr	r0, [pc, #64]	@ (800794c <recorder::system::Init()+0x3ec>)
 800790a:	f003 fba1 	bl	800b050 <puts>
 800790e:	e7c3      	b.n	8007898 <recorder::system::Init()+0x338>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 8007910:	4621      	mov	r1, r4
 8007912:	480f      	ldr	r0, [pc, #60]	@ (8007950 <recorder::system::Init()+0x3f0>)
 8007914:	f003 fb34 	bl	800af80 <iprintf>
 8007918:	e7be      	b.n	8007898 <recorder::system::Init()+0x338>
 800791a:	bf00      	nop
 800791c:	0800c2ac 	.word	0x0800c2ac
 8007920:	58024800 	.word	0x58024800
 8007924:	200112a0 	.word	0x200112a0
 8007928:	58024400 	.word	0x58024400
 800792c:	0800c298 	.word	0x0800c298
 8007930:	0800c294 	.word	0x0800c294
 8007934:	0800c2f0 	.word	0x0800c2f0
 8007938:	0800c2d0 	.word	0x0800c2d0
 800793c:	0800c290 	.word	0x0800c290
 8007940:	0800c2b4 	.word	0x0800c2b4
 8007944:	0800c288 	.word	0x0800c288
 8007948:	0800c29c 	.word	0x0800c29c
 800794c:	0800c284 	.word	0x0800c284
 8007950:	0800c2bc 	.word	0x0800c2bc

08007954 <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 8007954:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 8007956:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 800795a:	4d08      	ldr	r5, [pc, #32]	@ (800797c <recorder::system::Delay_ms(unsigned long)+0x28>)
 800795c:	0044      	lsls	r4, r0, #1
 800795e:	682e      	ldr	r6, [r5, #0]
 8007960:	f3bf 8f5b 	dmb	ish
 8007964:	e001      	b.n	800796a <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8007966:	f000 f9cd 	bl	8007d04 <HAL_PWR_EnterSLEEPMode>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	2101      	movs	r1, #1
 800796e:	2000      	movs	r0, #0
 8007970:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 8007974:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 8007976:	429c      	cmp	r4, r3
 8007978:	d8f5      	bhi.n	8007966 <recorder::system::Delay_ms(unsigned long)+0x12>
}
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	200112a4 	.word	0x200112a4

08007980 <recorder::system::SerialFlushTx(bool)>:
{
 8007980:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 8007982:	4801      	ldr	r0, [pc, #4]	@ (8007988 <recorder::system::SerialFlushTx(bool)+0x8>)
 8007984:	f7ff bce6 	b.w	8007354 <recorder::Serial::FlushTx(bool)>
 8007988:	200112a8 	.word	0x200112a8

0800798c <recorder::system::Standby()>:
{
 800798c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 800798e:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007990:	4b33      	ldr	r3, [pc, #204]	@ (8007a60 <recorder::system::Standby()+0xd4>)
 8007992:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 8007996:	4d33      	ldr	r5, [pc, #204]	@ (8007a64 <recorder::system::Standby()+0xd8>)
 8007998:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800799c:	f8c3 4180 	str.w	r4, [r3, #384]	@ 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079a0:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079a4:	f8c3 4184 	str.w	r4, [r3, #388]	@ 0x184
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079a8:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079ac:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079b0:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079b4:	f8c3 418c 	str.w	r4, [r3, #396]	@ 0x18c
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079b8:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079bc:	f8c3 4190 	str.w	r4, [r3, #400]	@ 0x190
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079c0:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079c4:	f8c3 4194 	str.w	r4, [r3, #404]	@ 0x194
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079c8:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079cc:	f8c3 4198 	str.w	r4, [r3, #408]	@ 0x198
        NVIC->ICER[i] = 0xFFFFFFFF;
 80079d0:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80079d4:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
 80079d8:	692b      	ldr	r3, [r5, #16]
 80079da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079de:	612b      	str	r3, [r5, #16]
    HAL_DisableDBGSleepMode();
 80079e0:	f000 f978 	bl	8007cd4 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 80079e4:	f000 f97e 	bl	8007ce4 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 80079e8:	f000 f984 	bl	8007cf4 <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 80079ec:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ee:	2302      	movs	r3, #2
 80079f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079f4:	62aa      	str	r2, [r5, #40]	@ 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 80079f6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80079f8:	fa93 f2a3 	rbit	r2, r3
 80079fc:	fab2 f282 	clz	r2, r2
 8007a00:	fa93 f3a3 	rbit	r3, r3
 8007a04:	fab3 f383 	clz	r3, r3
 8007a08:	0052      	lsls	r2, r2, #1
 8007a0a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8007a0e:	3308      	adds	r3, #8
 8007a10:	f002 021e 	and.w	r2, r2, #30
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	fa00 f202 	lsl.w	r2, r0, r2
 8007a1a:	f003 031e 	and.w	r3, r3, #30
 8007a1e:	ea21 0202 	bic.w	r2, r1, r2
 8007a22:	2101      	movs	r1, #1
 8007a24:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8007a28:	490f      	ldr	r1, [pc, #60]	@ (8007a68 <recorder::system::Standby()+0xdc>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	62ab      	str	r3, [r5, #40]	@ 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 8007a2e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8007a30:	f043 0302 	orr.w	r3, r3, #2
 8007a34:	62ab      	str	r3, [r5, #40]	@ 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 8007a36:	622c      	str	r4, [r5, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 8007a38:	692b      	ldr	r3, [r5, #16]
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 8007a40:	692b      	ldr	r3, [r5, #16]
 8007a42:	f043 0302 	orr.w	r3, r3, #2
 8007a46:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 8007a48:	692b      	ldr	r3, [r5, #16]
 8007a4a:	f043 0304 	orr.w	r3, r3, #4
 8007a4e:	612b      	str	r3, [r5, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	f043 0304 	orr.w	r3, r3, #4
 8007a56:	610b      	str	r3, [r1, #16]
    __WFI();
 8007a58:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 8007a5a:	f7ff fce7 	bl	800742c <NVIC_SystemReset>
 8007a5e:	bf00      	nop
 8007a60:	e000e100 	.word	0xe000e100
 8007a64:	58024800 	.word	0x58024800
 8007a68:	e000ed00 	.word	0xe000ed00

08007a6c <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 8007a6c:	4b02      	ldr	r3, [pc, #8]	@ (8007a78 <recorder::system::WakeupWasPlayButton()+0xc>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
}
 8007a70:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	200112a0 	.word	0x200112a0

08007a7c <recorder::system::Reset()>:
{
 8007a7c:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 8007a7e:	f7ff fcd5 	bl	800742c <NVIC_SystemReset>
 8007a82:	bf00      	nop

08007a84 <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 8007a88:	2901      	cmp	r1, #1
{
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	9001      	str	r0, [sp, #4]
    if (count < 2)
 8007a8e:	dd34      	ble.n	8007afa <fgets+0x76>
 8007a90:	4616      	mov	r6, r2
 8007a92:	4607      	mov	r7, r0
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 8007a94:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8007a98:	f04f 0900 	mov.w	r9, #0
    {
        char byte = std::getc(stream);
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f003 fa3f 	bl	800af20 <getc>
 8007aa2:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f003 f943 	bl	800ad30 <ferror>
 8007aaa:	4682      	mov	sl, r0
        bool eof = std::feof(stream);
 8007aac:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 8007aae:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 8007ab0:	f003 f91a 	bl	800ace8 <feof>
 8007ab4:	4604      	mov	r4, r0
        std::clearerr(stream);
 8007ab6:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 8007ab8:	f1b4 0b00 	subs.w	fp, r4, #0
 8007abc:	bf18      	it	ne
 8007abe:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 8007ac2:	f003 f8ed 	bl	800aca0 <clearerr>

        if (error || (eof && i == 0))
 8007ac6:	f1ba 0f00 	cmp.w	sl, #0
 8007aca:	d116      	bne.n	8007afa <fgets+0x76>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	d102      	bne.n	8007ad8 <fgets+0x54>
 8007ad2:	f1bb 0f00 	cmp.w	fp, #0
 8007ad6:	d110      	bne.n	8007afa <fgets+0x76>
        {
            return nullptr;
        }
        else if (eof)
 8007ad8:	b99c      	cbnz	r4, 8007b02 <fgets+0x7e>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 8007ada:	2d0a      	cmp	r5, #10
            str[i] = byte;
 8007adc:	f807 5b01 	strb.w	r5, [r7], #1
            if (byte == '\n')
 8007ae0:	d003      	beq.n	8007aea <fgets+0x66>
    for (i = 0; i < count - 1; i++)
 8007ae2:	f109 0901 	add.w	r9, r9, #1
 8007ae6:	45c1      	cmp	r9, r8
 8007ae8:	d1d8      	bne.n	8007a9c <fgets+0x18>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	444b      	add	r3, r9
 8007af0:	705a      	strb	r2, [r3, #1]
            return str;
 8007af2:	9801      	ldr	r0, [sp, #4]
    return str;
}
 8007af4:	b003      	add	sp, #12
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 8007afa:	2000      	movs	r0, #0
}
 8007afc:	b003      	add	sp, #12
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            str[i] = '\0';
 8007b02:	2300      	movs	r3, #0
 8007b04:	703b      	strb	r3, [r7, #0]
            return str;
 8007b06:	e7f4      	b.n	8007af2 <fgets+0x6e>

08007b08 <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 8007b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 8007b0c:	bb38      	cbnz	r0, 8007b5e <_read+0x56>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	4604      	mov	r4, r0
 8007b12:	4616      	mov	r6, r2
 8007b14:	dd20      	ble.n	8007b58 <_read+0x50>
 8007b16:	4688      	mov	r8, r1
 8007b18:	4d15      	ldr	r5, [pc, #84]	@ (8007b70 <_read+0x68>)
 8007b1a:	4f16      	ldr	r7, [pc, #88]	@ (8007b74 <_read+0x6c>)
 8007b1c:	e007      	b.n	8007b2e <_read+0x26>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 8007b1e:	280a      	cmp	r0, #10
 8007b20:	d014      	beq.n	8007b4c <_read+0x44>
            {
                ptr[i++] = ch;
 8007b22:	f808 0004 	strb.w	r0, [r8, r4]
 8007b26:	3401      	adds	r4, #1
            }

            prev_was_cr = is_cr;
 8007b28:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 8007b2a:	42b4      	cmp	r4, r6
 8007b2c:	da14      	bge.n	8007b58 <_read+0x50>
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7ff fbce 	bl	80072d0 <recorder::Serial::BytesAvailable()>
 8007b34:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 8007b36:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 8007b38:	b173      	cbz	r3, 8007b58 <_read+0x50>
            char ch = serial_.GetByteBlocking();
 8007b3a:	f7ff fbcf 	bl	80072dc <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 8007b3e:	280d      	cmp	r0, #13
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
            if (is_cr)
 8007b46:	d1ea      	bne.n	8007b1e <_read+0x16>
 8007b48:	200a      	movs	r0, #10
 8007b4a:	e7ea      	b.n	8007b22 <_read+0x1a>
            if (!(is_lf && prev_was_cr))
 8007b4c:	783a      	ldrb	r2, [r7, #0]
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	d0e7      	beq.n	8007b22 <_read+0x1a>
        while (i < len && serial_.BytesAvailable())
 8007b52:	42b4      	cmp	r4, r6
            prev_was_cr = is_cr;
 8007b54:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 8007b56:	dbea      	blt.n	8007b2e <_read+0x26>
        }

        return i;
 8007b58:	4620      	mov	r0, r4
    }

    errno = ENOENT;
    return -1;
}
 8007b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8007b5e:	f003 fab3 	bl	800b0c8 <__errno>
 8007b62:	2202      	movs	r2, #2
 8007b64:	4603      	mov	r3, r0
    return -1;
 8007b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 8007b6a:	601a      	str	r2, [r3, #0]
    return -1;
 8007b6c:	e7f5      	b.n	8007b5a <_read+0x52>
 8007b6e:	bf00      	nop
 8007b70:	200112a8 	.word	0x200112a8
 8007b74:	2001129d 	.word	0x2001129d

08007b78 <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8007b78:	1e43      	subs	r3, r0, #1
 8007b7a:	2b01      	cmp	r3, #1
{
 8007b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8007b80:	d822      	bhi.n	8007bc8 <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	4690      	mov	r8, r2
 8007b86:	dd1c      	ble.n	8007bc2 <_write+0x4a>
 8007b88:	1e4c      	subs	r4, r1, #1
 8007b8a:	4e13      	ldr	r6, [pc, #76]	@ (8007bd8 <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 8007b8c:	4d13      	ldr	r5, [pc, #76]	@ (8007bdc <_write+0x64>)
 8007b8e:	18a7      	adds	r7, r4, r2
 8007b90:	e008      	b.n	8007ba4 <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 8007b92:	4619      	mov	r1, r3
 8007b94:	2201      	movs	r2, #1
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff fbb0 	bl	80072fc <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 8007b9c:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 8007b9e:	42bc      	cmp	r4, r7
            prev = ptr[i];
 8007ba0:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 8007ba2:	d00e      	beq.n	8007bc2 <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 8007ba4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007ba8:	2b0a      	cmp	r3, #10
 8007baa:	d1f2      	bne.n	8007b92 <_write+0x1a>
 8007bac:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 8007bb0:	210d      	movs	r1, #13
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 8007bb6:	458c      	cmp	ip, r1
 8007bb8:	d0eb      	beq.n	8007b92 <_write+0x1a>
                serial_.Write('\r', true);
 8007bba:	f7ff fb9f 	bl	80072fc <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 8007bbe:	7823      	ldrb	r3, [r4, #0]
 8007bc0:	e7e7      	b.n	8007b92 <_write+0x1a>
        }

        return len;
 8007bc2:	4640      	mov	r0, r8
    }

    errno = ENOENT;
    return -1;
}
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8007bc8:	f003 fa7e 	bl	800b0c8 <__errno>
 8007bcc:	2202      	movs	r2, #2
 8007bce:	4603      	mov	r3, r0
    return -1;
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 8007bd4:	601a      	str	r2, [r3, #0]
    return -1;
 8007bd6:	e7f5      	b.n	8007bc4 <_write+0x4c>
 8007bd8:	2001129c 	.word	0x2001129c
 8007bdc:	200112a8 	.word	0x200112a8

08007be0 <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 8007be0:	4b03      	ldr	r3, [pc, #12]	@ (8007bf0 <_GLOBAL__sub_I_TickHandler+0x10>)
 8007be2:	2000      	movs	r0, #0
 8007be4:	2100      	movs	r1, #0
 8007be6:	e9c3 0100 	strd	r0, r1, [r3]
 8007bea:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48

}
 8007bee:	4770      	bx	lr
 8007bf0:	200112a8 	.word	0x200112a8

08007bf4 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8007bf4:	e7fe      	b.n	8007bf4 <Default_Handler>
 8007bf6:	bf00      	nop

08007bf8 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8007bf8:	480b      	ldr	r0, [pc, #44]	@ (8007c28 <Reset_Handler+0x30>)
 8007bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8007c2c <Reset_Handler+0x34>)
 8007bfc:	4290      	cmp	r0, r2
 8007bfe:	d003      	beq.n	8007c08 <Reset_Handler+0x10>
		*pDest = *pSource;
 8007c00:	1a12      	subs	r2, r2, r0
 8007c02:	490b      	ldr	r1, [pc, #44]	@ (8007c30 <Reset_Handler+0x38>)
 8007c04:	f003 fa8d 	bl	800b122 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8007c08:	480a      	ldr	r0, [pc, #40]	@ (8007c34 <Reset_Handler+0x3c>)
 8007c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8007c38 <Reset_Handler+0x40>)
 8007c0c:	4290      	cmp	r0, r2
 8007c0e:	d003      	beq.n	8007c18 <Reset_Handler+0x20>
		*pDest = 0;
 8007c10:	1a12      	subs	r2, r2, r0
 8007c12:	2100      	movs	r1, #0
 8007c14:	f003 fa4f 	bl	800b0b6 <memset>
	SystemInit();
 8007c18:	f000 f810 	bl	8007c3c <SystemInit>
	__libc_init_array();
 8007c1c:	f003 fa5a 	bl	800b0d4 <__libc_init_array>
	(void)main();
 8007c20:	f7fd f872 	bl	8004d08 <main>
	for (;;) ;
 8007c24:	e7fe      	b.n	8007c24 <Reset_Handler+0x2c>
 8007c26:	bf00      	nop
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	2000008c 	.word	0x2000008c
 8007c30:	0800ca08 	.word	0x0800ca08
 8007c34:	20000400 	.word	0x20000400
 8007c38:	2001154c 	.word	0x2001154c

08007c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c3c:	b410      	push	{r4}
    __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

/* FPU settings ------------------------------------------------------------*/
#if(__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007c3e:	4c1a      	ldr	r4, [pc, #104]	@ (8007ca8 <SystemInit+0x6c>)
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= RCC_CR_HSION;

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8007c40:	2200      	movs	r2, #0
    RCC->CR |= RCC_CR_HSION;
 8007c42:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007c44:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88

    /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
    RCC->CR &= 0xEAF6ED7FU;
 8007c48:	4919      	ldr	r1, [pc, #100]	@ (8007cb0 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007c4a:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
 8007c4e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
    RCC->CR |= RCC_CR_HSION;
 8007c52:	6818      	ldr	r0, [r3, #0]
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
    /* dual core CM7 or single core line */
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007c54:	4c17      	ldr	r4, [pc, #92]	@ (8007cb4 <SystemInit+0x78>)
    RCC->CR |= RCC_CR_HSION;
 8007c56:	f040 0001 	orr.w	r0, r0, #1
 8007c5a:	6018      	str	r0, [r3, #0]
    RCC->CFGR = 0x00000000;
 8007c5c:	611a      	str	r2, [r3, #16]
    RCC->CR &= 0xEAF6ED7FU;
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4001      	ands	r1, r0
 8007c62:	6019      	str	r1, [r3, #0]
    RCC->D1CFGR = 0x00000000;
 8007c64:	619a      	str	r2, [r3, #24]
    RCC->D2CFGR = 0x00000000;
 8007c66:	61da      	str	r2, [r3, #28]
    RCC->D3CFGR = 0x00000000;
 8007c68:	621a      	str	r2, [r3, #32]
    RCC->PLLCKSELR = 0x00000000;
 8007c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC->PLLCFGR = 0x00000000;
 8007c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->PLL1DIVR = 0x00000000;
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC->PLL1FRACR = 0x00000000;
 8007c70:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->PLL2DIVR = 0x00000000;
 8007c72:	639a      	str	r2, [r3, #56]	@ 0x38
    RCC->PLL2FRACR = 0x00000000;
 8007c74:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC->PLL3DIVR = 0x00000000;
 8007c76:	641a      	str	r2, [r3, #64]	@ 0x40
    RCC->PLL3FRACR = 0x00000000;
 8007c78:	645a      	str	r2, [r3, #68]	@ 0x44
    RCC->CR &= 0xFFFBFFFFU;
 8007c7a:	6819      	ldr	r1, [r3, #0]
 8007c7c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8007c80:	6019      	str	r1, [r3, #0]
    RCC->CIER = 0x00000000;
 8007c82:	661a      	str	r2, [r3, #96]	@ 0x60
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	f36f 030f 	bfc	r3, #0, #16
 8007c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c8e:	d203      	bcs.n	8007c98 <SystemInit+0x5c>
    {
        /* if stm32h7 revY*/
        /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
        *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007c90:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <SystemInit+0x7c>)
 8007c92:	2201      	movs	r2, #1
 8007c94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    SCB->VTOR
        = D1_AXISRAM_BASE
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
    SCB->VTOR
        = FLASH_BANK1_BASE
 8007c98:	4b03      	ldr	r3, [pc, #12]	@ (8007ca8 <SystemInit+0x6c>)
 8007c9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
        = FLASH_BANK1_BASE
 8007ca2:	609a      	str	r2, [r3, #8]
}
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000ed00 	.word	0xe000ed00
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8007cb4:	5c001000 	.word	0x5c001000
 8007cb8:	51008000 	.word	0x51008000

08007cbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007cbc:	4b01      	ldr	r3, [pc, #4]	@ (8007cc4 <HAL_GetTick+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	200113f8 	.word	0x200113f8

08007cc8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007cc8:	4b01      	ldr	r3, [pc, #4]	@ (8007cd0 <HAL_GetREVID+0x8>)
 8007cca:	6818      	ldr	r0, [r3, #0]
}
 8007ccc:	0c00      	lsrs	r0, r0, #16
 8007cce:	4770      	bx	lr
 8007cd0:	5c001000 	.word	0x5c001000

08007cd4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during Domain1 SLEEP mode
  * @retval None
  */
void HAL_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 8007cd4:	4a02      	ldr	r2, [pc, #8]	@ (8007ce0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8007cd6:	6853      	ldr	r3, [r2, #4]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	6053      	str	r3, [r2, #4]
}
 8007cde:	4770      	bx	lr
 8007ce0:	5c001000 	.word	0x5c001000

08007ce4 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during Domain1 STOP mode
  * @retval None
  */
void HAL_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 8007ce4:	4a02      	ldr	r2, [pc, #8]	@ (8007cf0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8007ce6:	6853      	ldr	r3, [r2, #4]
 8007ce8:	f023 0302 	bic.w	r3, r3, #2
 8007cec:	6053      	str	r3, [r2, #4]
}
 8007cee:	4770      	bx	lr
 8007cf0:	5c001000 	.word	0x5c001000

08007cf4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during Domain1 STANDBY mode
  * @retval None
  */
void HAL_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 8007cf4:	4a02      	ldr	r2, [pc, #8]	@ (8007d00 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8007cf6:	6853      	ldr	r3, [r2, #4]
 8007cf8:	f023 0304 	bic.w	r3, r3, #4
 8007cfc:	6053      	str	r3, [r2, #4]
}
 8007cfe:	4770      	bx	lr
 8007d00:	5c001000 	.word	0x5c001000

08007d04 <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d04:	4a05      	ldr	r2, [pc, #20]	@ (8007d1c <HAL_PWR_EnterSLEEPMode+0x18>)

  /* Select SLEEP mode entry */
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007d06:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d08:	6913      	ldr	r3, [r2, #16]
 8007d0a:	f023 0304 	bic.w	r3, r3, #4
 8007d0e:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007d10:	d001      	beq.n	8007d16 <HAL_PWR_EnterSLEEPMode+0x12>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8007d12:	bf20      	wfe
  }
}
 8007d14:	4770      	bx	lr
    __WFI();
 8007d16:	bf30      	wfi
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	e000ed00 	.word	0xe000ed00

08007d20 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007d20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8007d22:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <HAL_PWREx_ConfigSupply+0x48>)
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	0752      	lsls	r2, r2, #29
 8007d28:	d404      	bmi.n	8007d34 <HAL_PWREx_ConfigSupply+0x14>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d114      	bne.n	8007d5e <HAL_PWREx_ConfigSupply+0x3e>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d34:	4c0c      	ldr	r4, [pc, #48]	@ (8007d68 <HAL_PWREx_ConfigSupply+0x48>)
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	f023 0307 	bic.w	r3, r3, #7
 8007d3c:	4303      	orrs	r3, r0
 8007d3e:	60e3      	str	r3, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d40:	f7ff ffbc 	bl	8007cbc <HAL_GetTick>
 8007d44:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007d46:	e005      	b.n	8007d54 <HAL_PWREx_ConfigSupply+0x34>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8007d48:	f7ff ffb8 	bl	8007cbc <HAL_GetTick>
 8007d4c:	1b40      	subs	r0, r0, r5
 8007d4e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007d52:	d806      	bhi.n	8007d62 <HAL_PWREx_ConfigSupply+0x42>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	049b      	lsls	r3, r3, #18
 8007d58:	d5f6      	bpl.n	8007d48 <HAL_PWREx_ConfigSupply+0x28>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007d5a:	2000      	movs	r0, #0
}
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007d5e:	2001      	movs	r0, #1
}
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007d62:	2003      	movs	r0, #3
}
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	bf00      	nop
 8007d68:	58024800 	.word	0x58024800

08007d6c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f000 8283 	beq.w	8008278 <HAL_RCC_OscConfig+0x50c>
{
 8007d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d74:	6803      	ldr	r3, [r0, #0]
 8007d76:	4604      	mov	r4, r0
 8007d78:	07d8      	lsls	r0, r3, #31
 8007d7a:	d530      	bpl.n	8007dde <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d7c:	499f      	ldr	r1, [pc, #636]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007d7e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d80:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d82:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d86:	2a10      	cmp	r2, #16
 8007d88:	f000 8100 	beq.w	8007f8c <HAL_RCC_OscConfig+0x220>
 8007d8c:	2a18      	cmp	r2, #24
 8007d8e:	f000 80f8 	beq.w	8007f82 <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d98:	f000 8120 	beq.w	8007fdc <HAL_RCC_OscConfig+0x270>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 815e 	beq.w	800805e <HAL_RCC_OscConfig+0x2f2>
 8007da2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007da6:	4b95      	ldr	r3, [pc, #596]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	f000 822d 	beq.w	8008208 <HAL_RCC_OscConfig+0x49c>
 8007dae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007dba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7ff ff7e 	bl	8007cbc <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dc0:	4e8e      	ldr	r6, [pc, #568]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dc2:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007dc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dc8:	e005      	b.n	8007dd6 <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dca:	f7ff ff77 	bl	8007cbc <HAL_GetTick>
 8007dce:	1b40      	subs	r0, r0, r5
 8007dd0:	42b8      	cmp	r0, r7
 8007dd2:	f200 8142 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dd6:	6833      	ldr	r3, [r6, #0]
 8007dd8:	039a      	lsls	r2, r3, #14
 8007dda:	d5f6      	bpl.n	8007dca <HAL_RCC_OscConfig+0x5e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	079d      	lsls	r5, r3, #30
 8007de0:	f100 8085 	bmi.w	8007eee <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007de4:	06d9      	lsls	r1, r3, #27
 8007de6:	d52f      	bpl.n	8007e48 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de8:	4a84      	ldr	r2, [pc, #528]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007dea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	f000 80da 	beq.w	8007fac <HAL_RCC_OscConfig+0x240>
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	f000 80d2 	beq.w	8007fa2 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007dfe:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e00:	4d7e      	ldr	r5, [pc, #504]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 8165 	beq.w	80080d2 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_CSI_ENABLE();
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e0e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7ff ff54 	bl	8007cbc <HAL_GetTick>
 8007e14:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e16:	e005      	b.n	8007e24 <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e18:	f7ff ff50 	bl	8007cbc <HAL_GetTick>
 8007e1c:	1b80      	subs	r0, r0, r6
 8007e1e:	2802      	cmp	r0, #2
 8007e20:	f200 811b 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	05db      	lsls	r3, r3, #23
 8007e28:	d5f6      	bpl.n	8007e18 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e2a:	f7ff ff4d 	bl	8007cc8 <HAL_GetREVID>
 8007e2e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007e32:	4298      	cmp	r0, r3
 8007e34:	f200 8209 	bhi.w	800824a <HAL_RCC_OscConfig+0x4de>
 8007e38:	686b      	ldr	r3, [r5, #4]
 8007e3a:	6a22      	ldr	r2, [r4, #32]
 8007e3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e40:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007e44:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	071d      	lsls	r5, r3, #28
 8007e4a:	d516      	bpl.n	8007e7a <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e4c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e4e:	4d6b      	ldr	r5, [pc, #428]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 811c 	beq.w	800808e <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8007e56:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	676b      	str	r3, [r5, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5e:	f7ff ff2d 	bl	8007cbc <HAL_GetTick>
 8007e62:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e64:	e005      	b.n	8007e72 <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e66:	f7ff ff29 	bl	8007cbc <HAL_GetTick>
 8007e6a:	1b80      	subs	r0, r0, r6
 8007e6c:	2802      	cmp	r0, #2
 8007e6e:	f200 80f4 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e72:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007e74:	0798      	lsls	r0, r3, #30
 8007e76:	d5f6      	bpl.n	8007e66 <HAL_RCC_OscConfig+0xfa>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	069a      	lsls	r2, r3, #26
 8007e7c:	d516      	bpl.n	8007eac <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007e7e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e80:	4d5e      	ldr	r5, [pc, #376]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 8114 	beq.w	80080b0 <HAL_RCC_OscConfig+0x344>
      __HAL_RCC_HSI48_ENABLE();
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e8e:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e90:	f7ff ff14 	bl	8007cbc <HAL_GetTick>
 8007e94:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e96:	e005      	b.n	8007ea4 <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e98:	f7ff ff10 	bl	8007cbc <HAL_GetTick>
 8007e9c:	1b80      	subs	r0, r0, r6
 8007e9e:	2802      	cmp	r0, #2
 8007ea0:	f200 80db 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	049f      	lsls	r7, r3, #18
 8007ea8:	d5f6      	bpl.n	8007e98 <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	0759      	lsls	r1, r3, #29
 8007eae:	f100 809b 	bmi.w	8007fe8 <HAL_RCC_OscConfig+0x27c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007eb4:	b1cb      	cbz	r3, 8007eea <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007eb6:	4d51      	ldr	r5, [pc, #324]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007eb8:	692a      	ldr	r2, [r5, #16]
 8007eba:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007ebe:	2a18      	cmp	r2, #24
 8007ec0:	d06d      	beq.n	8007f9e <HAL_RCC_OscConfig+0x232>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ec2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eca:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ecc:	f000 8137 	beq.w	800813e <HAL_RCC_OscConfig+0x3d2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed0:	f7ff fef4 	bl	8007cbc <HAL_GetTick>
 8007ed4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ed6:	e005      	b.n	8007ee4 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed8:	f7ff fef0 	bl	8007cbc <HAL_GetTick>
 8007edc:	1b00      	subs	r0, r0, r4
 8007ede:	2802      	cmp	r0, #2
 8007ee0:	f200 80bb 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	019b      	lsls	r3, r3, #6
 8007ee8:	d4f6      	bmi.n	8007ed8 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8007eea:	2000      	movs	r0, #0
}
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eee:	4a43      	ldr	r2, [pc, #268]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007ef0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ef2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ef4:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8007ef8:	d129      	bne.n	8007f4e <HAL_RCC_OscConfig+0x1e2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007efa:	4b40      	ldr	r3, [pc, #256]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007efc:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	0759      	lsls	r1, r3, #29
 8007f02:	d501      	bpl.n	8007f08 <HAL_RCC_OscConfig+0x19c>
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d04a      	beq.n	8007f9e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f08:	4d3c      	ldr	r5, [pc, #240]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	f023 0319 	bic.w	r3, r3, #25
 8007f10:	4313      	orrs	r3, r2
 8007f12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f14:	f7ff fed2 	bl	8007cbc <HAL_GetTick>
 8007f18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f1a:	e005      	b.n	8007f28 <HAL_RCC_OscConfig+0x1bc>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f1c:	f7ff fece 	bl	8007cbc <HAL_GetTick>
 8007f20:	1b80      	subs	r0, r0, r6
 8007f22:	2802      	cmp	r0, #2
 8007f24:	f200 8099 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	075b      	lsls	r3, r3, #29
 8007f2c:	d5f6      	bpl.n	8007f1c <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f2e:	f7ff fecb 	bl	8007cc8 <HAL_GetREVID>
 8007f32:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007f36:	6922      	ldr	r2, [r4, #16]
 8007f38:	4298      	cmp	r0, r3
 8007f3a:	686b      	ldr	r3, [r5, #4]
 8007f3c:	f200 80f0 	bhi.w	8008120 <HAL_RCC_OscConfig+0x3b4>
 8007f40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f44:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007f48:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	e74a      	b.n	8007de4 <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f4e:	2b18      	cmp	r3, #24
 8007f50:	f000 80e2 	beq.w	8008118 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f54:	4d29      	ldr	r5, [pc, #164]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f56:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f58:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	f000 80cb 	beq.w	80080f6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f60:	f023 0319 	bic.w	r3, r3, #25
 8007f64:	4313      	orrs	r3, r2
 8007f66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f68:	f7ff fea8 	bl	8007cbc <HAL_GetTick>
 8007f6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f6e:	e004      	b.n	8007f7a <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f70:	f7ff fea4 	bl	8007cbc <HAL_GetTick>
 8007f74:	1b80      	subs	r0, r0, r6
 8007f76:	2802      	cmp	r0, #2
 8007f78:	d86f      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	075f      	lsls	r7, r3, #29
 8007f7e:	d5f7      	bpl.n	8007f70 <HAL_RCC_OscConfig+0x204>
 8007f80:	e7d5      	b.n	8007f2e <HAL_RCC_OscConfig+0x1c2>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f82:	f001 0103 	and.w	r1, r1, #3
 8007f86:	2902      	cmp	r1, #2
 8007f88:	f47f af03 	bne.w	8007d92 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	0391      	lsls	r1, r2, #14
 8007f92:	f57f af24 	bpl.w	8007dde <HAL_RCC_OscConfig+0x72>
 8007f96:	6862      	ldr	r2, [r4, #4]
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	f47f af20 	bne.w	8007dde <HAL_RCC_OscConfig+0x72>
    return HAL_ERROR;
 8007f9e:	2001      	movs	r0, #1
}
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fa2:	f002 0203 	and.w	r2, r2, #3
 8007fa6:	2a01      	cmp	r2, #1
 8007fa8:	f47f af29 	bne.w	8007dfe <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fac:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	05da      	lsls	r2, r3, #23
 8007fb2:	d502      	bpl.n	8007fba <HAL_RCC_OscConfig+0x24e>
 8007fb4:	69e3      	ldr	r3, [r4, #28]
 8007fb6:	2b80      	cmp	r3, #128	@ 0x80
 8007fb8:	d1f1      	bne.n	8007f9e <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fba:	f7ff fe85 	bl	8007cc8 <HAL_GetREVID>
 8007fbe:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	6a21      	ldr	r1, [r4, #32]
 8007fc8:	f200 80b1 	bhi.w	800812e <HAL_RCC_OscConfig+0x3c2>
 8007fcc:	6853      	ldr	r3, [r2, #4]
 8007fce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007fd2:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8007fd6:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	e735      	b.n	8007e48 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fdc:	4a07      	ldr	r2, [pc, #28]	@ (8007ffc <HAL_RCC_OscConfig+0x290>)
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fe4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fe6:	e6e9      	b.n	8007dbc <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8007fe8:	4d05      	ldr	r5, [pc, #20]	@ (8008000 <HAL_RCC_OscConfig+0x294>)
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007ff2:	f7ff fe63 	bl	8007cbc <HAL_GetTick>
 8007ff6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ff8:	e009      	b.n	800800e <HAL_RCC_OscConfig+0x2a2>
 8007ffa:	bf00      	nop
 8007ffc:	58024400 	.word	0x58024400
 8008000:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008004:	f7ff fe5a 	bl	8007cbc <HAL_GetTick>
 8008008:	1b80      	subs	r0, r0, r6
 800800a:	2864      	cmp	r0, #100	@ 0x64
 800800c:	d825      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	05da      	lsls	r2, r3, #23
 8008012:	d5f7      	bpl.n	8008004 <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	2b01      	cmp	r3, #1
 8008018:	f000 8120 	beq.w	800825c <HAL_RCC_OscConfig+0x4f0>
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80fb 	beq.w	8008218 <HAL_RCC_OscConfig+0x4ac>
 8008022:	2b05      	cmp	r3, #5
 8008024:	4b95      	ldr	r3, [pc, #596]	@ (800827c <HAL_RCC_OscConfig+0x510>)
 8008026:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008028:	f000 811e 	beq.w	8008268 <HAL_RCC_OscConfig+0x4fc>
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	671a      	str	r2, [r3, #112]	@ 0x70
 8008032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008034:	f022 0204 	bic.w	r2, r2, #4
 8008038:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800803a:	f7ff fe3f 	bl	8007cbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800803e:	4e8f      	ldr	r6, [pc, #572]	@ (800827c <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008040:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008044:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008046:	e004      	b.n	8008052 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008048:	f7ff fe38 	bl	8007cbc <HAL_GetTick>
 800804c:	1b40      	subs	r0, r0, r5
 800804e:	42b8      	cmp	r0, r7
 8008050:	d803      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008052:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8008054:	079b      	lsls	r3, r3, #30
 8008056:	d5f7      	bpl.n	8008048 <HAL_RCC_OscConfig+0x2dc>
 8008058:	e72b      	b.n	8007eb2 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 800805a:	2003      	movs	r0, #3
}
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805e:	4d87      	ldr	r5, [pc, #540]	@ (800827c <HAL_RCC_OscConfig+0x510>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008060:	f241 3788 	movw	r7, #5000	@ 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008064:	682b      	ldr	r3, [r5, #0]
 8008066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800806a:	602b      	str	r3, [r5, #0]
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008072:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008074:	f7ff fe22 	bl	8007cbc <HAL_GetTick>
 8008078:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800807a:	e004      	b.n	8008086 <HAL_RCC_OscConfig+0x31a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800807c:	f7ff fe1e 	bl	8007cbc <HAL_GetTick>
 8008080:	1b80      	subs	r0, r0, r6
 8008082:	42b8      	cmp	r0, r7
 8008084:	d8e9      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	039b      	lsls	r3, r3, #14
 800808a:	d4f7      	bmi.n	800807c <HAL_RCC_OscConfig+0x310>
 800808c:	e6a6      	b.n	8007ddc <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_LSI_DISABLE();
 800808e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8008096:	f7ff fe11 	bl	8007cbc <HAL_GetTick>
 800809a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800809c:	e004      	b.n	80080a8 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800809e:	f7ff fe0d 	bl	8007cbc <HAL_GetTick>
 80080a2:	1b80      	subs	r0, r0, r6
 80080a4:	2802      	cmp	r0, #2
 80080a6:	d8d8      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080a8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80080aa:	0799      	lsls	r1, r3, #30
 80080ac:	d4f7      	bmi.n	800809e <HAL_RCC_OscConfig+0x332>
 80080ae:	e6e3      	b.n	8007e78 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80080b8:	f7ff fe00 	bl	8007cbc <HAL_GetTick>
 80080bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080be:	e004      	b.n	80080ca <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080c0:	f7ff fdfc 	bl	8007cbc <HAL_GetTick>
 80080c4:	1b80      	subs	r0, r0, r6
 80080c6:	2802      	cmp	r0, #2
 80080c8:	d8c7      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	0498      	lsls	r0, r3, #18
 80080ce:	d4f7      	bmi.n	80080c0 <HAL_RCC_OscConfig+0x354>
 80080d0:	e6eb      	b.n	8007eaa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080da:	f7ff fdef 	bl	8007cbc <HAL_GetTick>
 80080de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080e0:	e004      	b.n	80080ec <HAL_RCC_OscConfig+0x380>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080e2:	f7ff fdeb 	bl	8007cbc <HAL_GetTick>
 80080e6:	1b80      	subs	r0, r0, r6
 80080e8:	2802      	cmp	r0, #2
 80080ea:	d8b6      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	05df      	lsls	r7, r3, #23
 80080f0:	d4f7      	bmi.n	80080e2 <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	e6a8      	b.n	8007e48 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080fc:	f7ff fdde 	bl	8007cbc <HAL_GetTick>
 8008100:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008102:	e004      	b.n	800810e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008104:	f7ff fdda 	bl	8007cbc <HAL_GetTick>
 8008108:	1b80      	subs	r0, r0, r6
 800810a:	2802      	cmp	r0, #2
 800810c:	d8a5      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	0758      	lsls	r0, r3, #29
 8008112:	d4f7      	bmi.n	8008104 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	e665      	b.n	8007de4 <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008118:	0790      	lsls	r0, r2, #30
 800811a:	f47f af1b 	bne.w	8007f54 <HAL_RCC_OscConfig+0x1e8>
 800811e:	e6ec      	b.n	8007efa <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008120:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008124:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008128:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	e65a      	b.n	8007de4 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800812e:	68d3      	ldr	r3, [r2, #12]
 8008130:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008134:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008138:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	e684      	b.n	8007e48 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800813e:	f7ff fdbd 	bl	8007cbc <HAL_GetTick>
 8008142:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008144:	e004      	b.n	8008150 <HAL_RCC_OscConfig+0x3e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008146:	f7ff fdb9 	bl	8007cbc <HAL_GetTick>
 800814a:	1b80      	subs	r0, r0, r6
 800814c:	2802      	cmp	r0, #2
 800814e:	d884      	bhi.n	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	0199      	lsls	r1, r3, #6
 8008154:	d4f7      	bmi.n	8008146 <HAL_RCC_OscConfig+0x3da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008156:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8008158:	4b49      	ldr	r3, [pc, #292]	@ (8008280 <HAL_RCC_OscConfig+0x514>)
 800815a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800815c:	400b      	ands	r3, r1
 800815e:	4313      	orrs	r3, r2
 8008160:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008162:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008166:	62ab      	str	r3, [r5, #40]	@ 0x28
 8008168:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800816a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800816e:	3901      	subs	r1, #1
 8008170:	3b01      	subs	r3, #1
 8008172:	3a01      	subs	r2, #1
 8008174:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008178:	025b      	lsls	r3, r3, #9
 800817a:	0412      	lsls	r2, r2, #16
 800817c:	b29b      	uxth	r3, r3
 800817e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008182:	4313      	orrs	r3, r2
 8008184:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8008186:	3a01      	subs	r2, #1
 8008188:	430b      	orrs	r3, r1
 800818a:	0612      	lsls	r2, r2, #24
 800818c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008190:	4313      	orrs	r3, r2
 8008192:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008194:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800819c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800819e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80081a0:	f36f 03cf 	bfc	r3, #3, #13
 80081a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80081a8:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80081ae:	f023 030c 	bic.w	r3, r3, #12
 80081b2:	4313      	orrs	r3, r2
 80081b4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081b8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80081ba:	f023 0302 	bic.w	r3, r3, #2
 80081be:	4313      	orrs	r3, r2
 80081c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081c2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081c8:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081d0:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80081da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081ea:	f7ff fd67 	bl	8007cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081ee:	4d23      	ldr	r5, [pc, #140]	@ (800827c <HAL_RCC_OscConfig+0x510>)
        tickstart = HAL_GetTick();
 80081f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081f2:	e005      	b.n	8008200 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081f4:	f7ff fd62 	bl	8007cbc <HAL_GetTick>
 80081f8:	1b00      	subs	r0, r0, r4
 80081fa:	2802      	cmp	r0, #2
 80081fc:	f63f af2d 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	019a      	lsls	r2, r3, #6
 8008204:	d5f6      	bpl.n	80081f4 <HAL_RCC_OscConfig+0x488>
 8008206:	e670      	b.n	8007eea <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008208:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008214:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008216:	e5d1      	b.n	8007dbc <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008218:	4d18      	ldr	r5, [pc, #96]	@ (800827c <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800821e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	672b      	str	r3, [r5, #112]	@ 0x70
 8008226:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8008228:	f023 0304 	bic.w	r3, r3, #4
 800822c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800822e:	f7ff fd45 	bl	8007cbc <HAL_GetTick>
 8008232:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008234:	e005      	b.n	8008242 <HAL_RCC_OscConfig+0x4d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008236:	f7ff fd41 	bl	8007cbc <HAL_GetTick>
 800823a:	1b80      	subs	r0, r0, r6
 800823c:	42b8      	cmp	r0, r7
 800823e:	f63f af0c 	bhi.w	800805a <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008242:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8008244:	0798      	lsls	r0, r3, #30
 8008246:	d4f6      	bmi.n	8008236 <HAL_RCC_OscConfig+0x4ca>
 8008248:	e633      	b.n	8007eb2 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800824a:	68eb      	ldr	r3, [r5, #12]
 800824c:	6a22      	ldr	r2, [r4, #32]
 800824e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008256:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	e5f5      	b.n	8007e48 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800825c:	4a07      	ldr	r2, [pc, #28]	@ (800827c <HAL_RCC_OscConfig+0x510>)
 800825e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008266:	e6e8      	b.n	800803a <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008268:	f042 0204 	orr.w	r2, r2, #4
 800826c:	671a      	str	r2, [r3, #112]	@ 0x70
 800826e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008270:	f042 0201 	orr.w	r2, r2, #1
 8008274:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008276:	e6e0      	b.n	800803a <HAL_RCC_OscConfig+0x2ce>
    return HAL_ERROR;
 8008278:	2001      	movs	r0, #1
}
 800827a:	4770      	bx	lr
 800827c:	58024400 	.word	0x58024400
 8008280:	fffffc0c 	.word	0xfffffc0c

08008284 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008284:	4a3f      	ldr	r2, [pc, #252]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x100>)
 8008286:	6913      	ldr	r3, [r2, #16]
 8008288:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800828c:	2b10      	cmp	r3, #16
 800828e:	d04f      	beq.n	8008330 <HAL_RCC_GetSysClockFreq+0xac>
 8008290:	2b18      	cmp	r3, #24
 8008292:	d00a      	beq.n	80082aa <HAL_RCC_GetSysClockFreq+0x26>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d14d      	bne.n	8008334 <HAL_RCC_GetSysClockFreq+0xb0>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008298:	6813      	ldr	r3, [r2, #0]
 800829a:	0699      	lsls	r1, r3, #26
 800829c:	d54c      	bpl.n	8008338 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	4839      	ldr	r0, [pc, #228]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x104>)
 80082a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80082a6:	40d8      	lsrs	r0, r3
 80082a8:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80082ac:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80082ae:	6a94      	ldr	r4, [r2, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082b0:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80082b2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082b6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80082b8:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80082bc:	d036      	beq.n	800832c <HAL_RCC_GetSysClockFreq+0xa8>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082be:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082c2:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082c6:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082ca:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082ce:	fb05 f303 	mul.w	r3, r5, r3
 80082d2:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082d8:	ee06 3a90 	vmov	s13, r3
 80082dc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80082e0:	d002      	beq.n	80082e8 <HAL_RCC_GetSysClockFreq+0x64>
 80082e2:	2902      	cmp	r1, #2
 80082e4:	d048      	beq.n	8008378 <HAL_RCC_GetSysClockFreq+0xf4>
 80082e6:	b349      	cbz	r1, 800833c <HAL_RCC_GetSysClockFreq+0xb8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082e8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800838c <HAL_RCC_GetSysClockFreq+0x108>
 80082ec:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80082f0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80082f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f6:	ee07 3a10 	vmov	s14, r3
 80082fa:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80082fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008302:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008306:	ee37 7a26 	vadd.f32	s14, s14, s13
 800830a:	ee27 7a06 	vmul.f32	s14, s14, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800830e:	4b1d      	ldr	r3, [pc, #116]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x100>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008312:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008316:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008328:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800832c:	bc30      	pop	{r4, r5}
 800832e:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008330:	4817      	ldr	r0, [pc, #92]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008332:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8008334:	4817      	ldr	r0, [pc, #92]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x110>)
 8008336:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008338:	4813      	ldr	r0, [pc, #76]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x104>)
}
 800833a:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800833c:	6813      	ldr	r3, [r2, #0]
 800833e:	069b      	lsls	r3, r3, #26
 8008340:	d51d      	bpl.n	800837e <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008342:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008348:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800834a:	490f      	ldr	r1, [pc, #60]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x104>)
 800834c:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008350:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008354:	40d1      	lsrs	r1, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008356:	ee06 3a10 	vmov	s12, r3
 800835a:	ee05 1a90 	vmov	s11, r1
 800835e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008362:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008366:	ee36 6a07 	vadd.f32	s12, s12, s14
 800836a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800836e:	ee76 7a26 	vadd.f32	s15, s12, s13
 8008372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008376:	e7ca      	b.n	800830e <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008378:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8008398 <HAL_RCC_GetSysClockFreq+0x114>
 800837c:	e7b6      	b.n	80082ec <HAL_RCC_GetSysClockFreq+0x68>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800837e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800839c <HAL_RCC_GetSysClockFreq+0x118>
 8008382:	e7b3      	b.n	80082ec <HAL_RCC_GetSysClockFreq+0x68>
 8008384:	58024400 	.word	0x58024400
 8008388:	03d09000 	.word	0x03d09000
 800838c:	4a742400 	.word	0x4a742400
 8008390:	00f42400 	.word	0x00f42400
 8008394:	003d0900 	.word	0x003d0900
 8008398:	4b742400 	.word	0x4b742400
 800839c:	4c742400 	.word	0x4c742400

080083a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f000 8104 	beq.w	80085ae <HAL_RCC_ClockConfig+0x20e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083a6:	4a88      	ldr	r2, [pc, #544]	@ (80085c8 <HAL_RCC_ClockConfig+0x228>)
 80083a8:	6813      	ldr	r3, [r2, #0]
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	428b      	cmp	r3, r1
{
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083b8:	d20c      	bcs.n	80083d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	f023 030f 	bic.w	r3, r3, #15
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c4:	6813      	ldr	r3, [r2, #0]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	428b      	cmp	r3, r1
 80083cc:	d002      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80083ce:	2001      	movs	r0, #1
}
 80083d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	0758      	lsls	r0, r3, #29
 80083d8:	d50b      	bpl.n	80083f2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083da:	497c      	ldr	r1, [pc, #496]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 80083dc:	6920      	ldr	r0, [r4, #16]
 80083de:	698a      	ldr	r2, [r1, #24]
 80083e0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80083e4:	4290      	cmp	r0, r2
 80083e6:	d904      	bls.n	80083f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083e8:	698a      	ldr	r2, [r1, #24]
 80083ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80083ee:	4302      	orrs	r2, r0
 80083f0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f2:	0719      	lsls	r1, r3, #28
 80083f4:	d50b      	bpl.n	800840e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083f6:	4975      	ldr	r1, [pc, #468]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 80083f8:	6960      	ldr	r0, [r4, #20]
 80083fa:	69ca      	ldr	r2, [r1, #28]
 80083fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008400:	4290      	cmp	r0, r2
 8008402:	d904      	bls.n	800840e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008404:	69ca      	ldr	r2, [r1, #28]
 8008406:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800840a:	4302      	orrs	r2, r0
 800840c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800840e:	06da      	lsls	r2, r3, #27
 8008410:	d50b      	bpl.n	800842a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008412:	496e      	ldr	r1, [pc, #440]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008414:	69a0      	ldr	r0, [r4, #24]
 8008416:	69ca      	ldr	r2, [r1, #28]
 8008418:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800841c:	4290      	cmp	r0, r2
 800841e:	d904      	bls.n	800842a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008420:	69ca      	ldr	r2, [r1, #28]
 8008422:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008426:	4302      	orrs	r2, r0
 8008428:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800842a:	069f      	lsls	r7, r3, #26
 800842c:	d50b      	bpl.n	8008446 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800842e:	4967      	ldr	r1, [pc, #412]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008430:	69e0      	ldr	r0, [r4, #28]
 8008432:	6a0a      	ldr	r2, [r1, #32]
 8008434:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008438:	4290      	cmp	r0, r2
 800843a:	d904      	bls.n	8008446 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800843c:	6a0a      	ldr	r2, [r1, #32]
 800843e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008442:	4302      	orrs	r2, r0
 8008444:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008446:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008448:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800844c:	f140 80a1 	bpl.w	8008592 <HAL_RCC_ClockConfig+0x1f2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008450:	4e5e      	ldr	r6, [pc, #376]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	69b1      	ldr	r1, [r6, #24]
 8008456:	f001 010f 	and.w	r1, r1, #15
 800845a:	4288      	cmp	r0, r1
 800845c:	d904      	bls.n	8008468 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800845e:	69b1      	ldr	r1, [r6, #24]
 8008460:	f021 010f 	bic.w	r1, r1, #15
 8008464:	4301      	orrs	r1, r0
 8008466:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008468:	2a00      	cmp	r2, #0
 800846a:	d030      	beq.n	80084ce <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800846c:	4a57      	ldr	r2, [pc, #348]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 800846e:	68a1      	ldr	r1, [r4, #8]
 8008470:	6993      	ldr	r3, [r2, #24]
 8008472:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008476:	430b      	orrs	r3, r1
 8008478:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800847a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800847c:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800847e:	2902      	cmp	r1, #2
 8008480:	f000 8097 	beq.w	80085b2 <HAL_RCC_ClockConfig+0x212>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008484:	2903      	cmp	r1, #3
 8008486:	f000 808e 	beq.w	80085a6 <HAL_RCC_ClockConfig+0x206>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800848a:	2901      	cmp	r1, #1
 800848c:	f000 8097 	beq.w	80085be <HAL_RCC_ClockConfig+0x21e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008490:	075f      	lsls	r7, r3, #29
 8008492:	d59c      	bpl.n	80083ce <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008494:	4e4d      	ldr	r6, [pc, #308]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008496:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800849a:	6933      	ldr	r3, [r6, #16]
 800849c:	f023 0307 	bic.w	r3, r3, #7
 80084a0:	430b      	orrs	r3, r1
 80084a2:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80084a4:	f7ff fc0a 	bl	8007cbc <HAL_GetTick>
 80084a8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084aa:	e005      	b.n	80084b8 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084ac:	f7ff fc06 	bl	8007cbc <HAL_GetTick>
 80084b0:	1bc0      	subs	r0, r0, r7
 80084b2:	4540      	cmp	r0, r8
 80084b4:	f200 8081 	bhi.w	80085ba <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b8:	6933      	ldr	r3, [r6, #16]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084c0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80084c4:	d1f2      	bne.n	80084ac <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	079e      	lsls	r6, r3, #30
 80084ca:	d506      	bpl.n	80084da <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084cc:	68e0      	ldr	r0, [r4, #12]
 80084ce:	493f      	ldr	r1, [pc, #252]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 80084d0:	698a      	ldr	r2, [r1, #24]
 80084d2:	f002 020f 	and.w	r2, r2, #15
 80084d6:	4290      	cmp	r0, r2
 80084d8:	d35f      	bcc.n	800859a <HAL_RCC_ClockConfig+0x1fa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084da:	493b      	ldr	r1, [pc, #236]	@ (80085c8 <HAL_RCC_ClockConfig+0x228>)
 80084dc:	680a      	ldr	r2, [r1, #0]
 80084de:	f002 020f 	and.w	r2, r2, #15
 80084e2:	42aa      	cmp	r2, r5
 80084e4:	d90a      	bls.n	80084fc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e6:	680a      	ldr	r2, [r1, #0]
 80084e8:	f022 020f 	bic.w	r2, r2, #15
 80084ec:	432a      	orrs	r2, r5
 80084ee:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f0:	680a      	ldr	r2, [r1, #0]
 80084f2:	f002 020f 	and.w	r2, r2, #15
 80084f6:	42aa      	cmp	r2, r5
 80084f8:	f47f af69 	bne.w	80083ce <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084fc:	0758      	lsls	r0, r3, #29
 80084fe:	d50b      	bpl.n	8008518 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008500:	4932      	ldr	r1, [pc, #200]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008502:	6920      	ldr	r0, [r4, #16]
 8008504:	698a      	ldr	r2, [r1, #24]
 8008506:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800850a:	4290      	cmp	r0, r2
 800850c:	d204      	bcs.n	8008518 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800850e:	698a      	ldr	r2, [r1, #24]
 8008510:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008514:	4302      	orrs	r2, r0
 8008516:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008518:	0719      	lsls	r1, r3, #28
 800851a:	d50b      	bpl.n	8008534 <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800851c:	492b      	ldr	r1, [pc, #172]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 800851e:	6960      	ldr	r0, [r4, #20]
 8008520:	69ca      	ldr	r2, [r1, #28]
 8008522:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008526:	4290      	cmp	r0, r2
 8008528:	d204      	bcs.n	8008534 <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800852a:	69ca      	ldr	r2, [r1, #28]
 800852c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008530:	4302      	orrs	r2, r0
 8008532:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008534:	06da      	lsls	r2, r3, #27
 8008536:	d50b      	bpl.n	8008550 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008538:	4924      	ldr	r1, [pc, #144]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 800853a:	69a0      	ldr	r0, [r4, #24]
 800853c:	69ca      	ldr	r2, [r1, #28]
 800853e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8008542:	4290      	cmp	r0, r2
 8008544:	d204      	bcs.n	8008550 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008546:	69ca      	ldr	r2, [r1, #28]
 8008548:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800854c:	4302      	orrs	r2, r0
 800854e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008550:	069b      	lsls	r3, r3, #26
 8008552:	d50b      	bpl.n	800856c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008554:	4a1d      	ldr	r2, [pc, #116]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008556:	69e1      	ldr	r1, [r4, #28]
 8008558:	6a13      	ldr	r3, [r2, #32]
 800855a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800855e:	4299      	cmp	r1, r3
 8008560:	d204      	bcs.n	800856c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008562:	6a13      	ldr	r3, [r2, #32]
 8008564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008568:	430b      	orrs	r3, r1
 800856a:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800856c:	f7ff fe8a 	bl	8008284 <HAL_RCC_GetSysClockFreq>
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <HAL_RCC_ClockConfig+0x22c>)
 8008572:	4603      	mov	r3, r0
 8008574:	4816      	ldr	r0, [pc, #88]	@ (80085d0 <HAL_RCC_ClockConfig+0x230>)
 8008576:	6992      	ldr	r2, [r2, #24]
 8008578:	4916      	ldr	r1, [pc, #88]	@ (80085d4 <HAL_RCC_ClockConfig+0x234>)
 800857a:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800857e:	5c82      	ldrb	r2, [r0, r2]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8008580:	200e      	movs	r0, #14
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008582:	f002 021f 	and.w	r2, r2, #31
 8008586:	40d3      	lsrs	r3, r2
}
 8008588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800858c:	600b      	str	r3, [r1, #0]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 800858e:	f7fe bfdd 	b.w	800754c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008592:	2a00      	cmp	r2, #0
 8008594:	f47f af6a 	bne.w	800846c <HAL_RCC_ClockConfig+0xcc>
 8008598:	e79f      	b.n	80084da <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800859a:	698a      	ldr	r2, [r1, #24]
 800859c:	f022 020f 	bic.w	r2, r2, #15
 80085a0:	4302      	orrs	r2, r0
 80085a2:	618a      	str	r2, [r1, #24]
 80085a4:	e799      	b.n	80084da <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085a6:	019a      	lsls	r2, r3, #6
 80085a8:	f53f af74 	bmi.w	8008494 <HAL_RCC_ClockConfig+0xf4>
 80085ac:	e70f      	b.n	80083ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80085ae:	2001      	movs	r0, #1
}
 80085b0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085b2:	0398      	lsls	r0, r3, #14
 80085b4:	f53f af6e 	bmi.w	8008494 <HAL_RCC_ClockConfig+0xf4>
 80085b8:	e709      	b.n	80083ce <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80085ba:	2003      	movs	r0, #3
 80085bc:	e708      	b.n	80083d0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085be:	05db      	lsls	r3, r3, #23
 80085c0:	f53f af68 	bmi.w	8008494 <HAL_RCC_ClockConfig+0xf4>
 80085c4:	e703      	b.n	80083ce <HAL_RCC_ClockConfig+0x2e>
 80085c6:	bf00      	nop
 80085c8:	52002000 	.word	0x52002000
 80085cc:	58024400 	.word	0x58024400
 80085d0:	0800c52c 	.word	0x0800c52c
 80085d4:	2000002c 	.word	0x2000002c

080085d8 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085da:	4c36      	ldr	r4, [pc, #216]	@ (80086b4 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80085dc:	4606      	mov	r6, r0
 80085de:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e8:	f7ff fb68 	bl	8007cbc <HAL_GetTick>
 80085ec:	4605      	mov	r5, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085ee:	e004      	b.n	80085fa <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085f0:	f7ff fb64 	bl	8007cbc <HAL_GetTick>
 80085f4:	1b40      	subs	r0, r0, r5
 80085f6:	2802      	cmp	r0, #2
 80085f8:	d856      	bhi.n	80086a8 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	011a      	lsls	r2, r3, #4
 80085fe:	d4f7      	bmi.n	80085f0 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008600:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008602:	6832      	ldr	r2, [r6, #0]
 8008604:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008608:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800860c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800860e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008612:	3b01      	subs	r3, #1
 8008614:	3a01      	subs	r2, #1
 8008616:	025b      	lsls	r3, r3, #9
 8008618:	0412      	lsls	r2, r2, #16
 800861a:	b29b      	uxth	r3, r3
 800861c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008620:	4313      	orrs	r3, r2
 8008622:	6872      	ldr	r2, [r6, #4]
 8008624:	3a01      	subs	r2, #1
 8008626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800862a:	4313      	orrs	r3, r2
 800862c:	6932      	ldr	r2, [r6, #16]
 800862e:	3a01      	subs	r2, #1
 8008630:	0612      	lsls	r2, r2, #24
 8008632:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008636:	4313      	orrs	r3, r2
 8008638:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800863a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800863c:	6972      	ldr	r2, [r6, #20]
 800863e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008642:	4313      	orrs	r3, r2
 8008644:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008646:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008648:	69b2      	ldr	r2, [r6, #24]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	4313      	orrs	r3, r2
 8008650:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008652:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800865a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800865c:	69f2      	ldr	r2, [r6, #28]
 800865e:	f36f 03cf 	bfc	r3, #3, #13
 8008662:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008666:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008668:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800866a:	f043 0310 	orr.w	r3, r3, #16
 800866e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008670:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008672:	b1df      	cbz	r7, 80086ac <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008674:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008676:	bf0c      	ite	eq
 8008678:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800867c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8008680:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008682:	4c0c      	ldr	r4, [pc, #48]	@ (80086b4 <RCCEx_PLL2_Config.part.0+0xdc>)
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800868a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800868c:	f7ff fb16 	bl	8007cbc <HAL_GetTick>
 8008690:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008692:	e004      	b.n	800869e <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008694:	f7ff fb12 	bl	8007cbc <HAL_GetTick>
 8008698:	1b40      	subs	r0, r0, r5
 800869a:	2802      	cmp	r0, #2
 800869c:	d804      	bhi.n	80086a8 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	d5f7      	bpl.n	8008694 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80086a4:	2000      	movs	r0, #0
}
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80086a8:	2003      	movs	r0, #3
}
 80086aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086b2:	e7e6      	b.n	8008682 <RCCEx_PLL2_Config.part.0+0xaa>
 80086b4:	58024400 	.word	0x58024400

080086b8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086ba:	4c36      	ldr	r4, [pc, #216]	@ (8008794 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086c6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c8:	f7ff faf8 	bl	8007cbc <HAL_GetTick>
 80086cc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086ce:	e004      	b.n	80086da <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086d0:	f7ff faf4 	bl	8007cbc <HAL_GetTick>
 80086d4:	1b40      	subs	r0, r0, r5
 80086d6:	2802      	cmp	r0, #2
 80086d8:	d856      	bhi.n	8008788 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	009a      	lsls	r2, r3, #2
 80086de:	d4f7      	bmi.n	80086d0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80086e2:	6832      	ldr	r2, [r6, #0]
 80086e4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80086e8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80086ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ee:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	3a01      	subs	r2, #1
 80086f6:	025b      	lsls	r3, r3, #9
 80086f8:	0412      	lsls	r2, r2, #16
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008700:	4313      	orrs	r3, r2
 8008702:	6872      	ldr	r2, [r6, #4]
 8008704:	3a01      	subs	r2, #1
 8008706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800870a:	4313      	orrs	r3, r2
 800870c:	6932      	ldr	r2, [r6, #16]
 800870e:	3a01      	subs	r2, #1
 8008710:	0612      	lsls	r2, r2, #24
 8008712:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008716:	4313      	orrs	r3, r2
 8008718:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800871a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800871c:	6972      	ldr	r2, [r6, #20]
 800871e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008722:	4313      	orrs	r3, r2
 8008724:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008726:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008728:	69b2      	ldr	r2, [r6, #24]
 800872a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800872e:	4313      	orrs	r3, r2
 8008730:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008732:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008738:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800873a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800873c:	69f2      	ldr	r2, [r6, #28]
 800873e:	f36f 03cf 	bfc	r3, #3, #13
 8008742:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008746:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008748:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800874a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800874e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008750:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008752:	b1df      	cbz	r7, 800878c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008754:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008756:	bf0c      	ite	eq
 8008758:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800875c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8008760:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008762:	4c0c      	ldr	r4, [pc, #48]	@ (8008794 <RCCEx_PLL3_Config.part.0+0xdc>)
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800876a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800876c:	f7ff faa6 	bl	8007cbc <HAL_GetTick>
 8008770:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008772:	e004      	b.n	800877e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008774:	f7ff faa2 	bl	8007cbc <HAL_GetTick>
 8008778:	1b40      	subs	r0, r0, r5
 800877a:	2802      	cmp	r0, #2
 800877c:	d804      	bhi.n	8008788 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	d5f7      	bpl.n	8008774 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8008784:	2000      	movs	r0, #0
}
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008788:	2003      	movs	r0, #3
}
 800878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800878c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008792:	e7e6      	b.n	8008762 <RCCEx_PLL3_Config.part.0+0xaa>
 8008794:	58024400 	.word	0x58024400

08008798 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800879c:	6803      	ldr	r3, [r0, #0]
{
 800879e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087a0:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 80087a4:	d023      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80087a6:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80087a8:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 80087ac:	f000 8516 	beq.w	80091dc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80087b0:	f200 85fd 	bhi.w	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	f000 852a 	beq.w	800920e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80087ba:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80087be:	f040 85fa 	bne.w	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c2:	4aa2      	ldr	r2, [pc, #648]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80087c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80087c6:	f002 0203 	and.w	r2, r2, #3
 80087ca:	2a03      	cmp	r2, #3
 80087cc:	f000 85f3 	beq.w	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80087d0:	2102      	movs	r1, #2
 80087d2:	3004      	adds	r0, #4
 80087d4:	f7ff ff00 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
 80087d8:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087da:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80087dc:	b93e      	cbnz	r6, 80087ee <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087e0:	489a      	ldr	r0, [pc, #616]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087e2:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087e4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80087e6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80087ea:	430a      	orrs	r2, r1
 80087ec:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087ee:	05dd      	lsls	r5, r3, #23
 80087f0:	d50a      	bpl.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80087f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087f4:	2a04      	cmp	r2, #4
 80087f6:	d806      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80087f8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80087fc:	04b3036b 	.word	0x04b3036b
 8008800:	0370049f 	.word	0x0370049f
 8008804:	0370      	.short	0x0370
      status = ret;
 8008806:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008808:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800880a:	0598      	lsls	r0, r3, #22
 800880c:	d522      	bpl.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai23ClockSelection)
 800880e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008810:	2a80      	cmp	r2, #128	@ 0x80
 8008812:	f000 847e 	beq.w	8009112 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008816:	f200 85bf 	bhi.w	8009398 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 84af 	beq.w	800917e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8008820:	2a40      	cmp	r2, #64	@ 0x40
 8008822:	f040 85c0 	bne.w	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008826:	4a89      	ldr	r2, [pc, #548]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008828:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800882a:	f002 0203 	and.w	r2, r2, #3
 800882e:	2a03      	cmp	r2, #3
 8008830:	f000 85b9 	beq.w	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8008834:	2100      	movs	r1, #0
 8008836:	1d20      	adds	r0, r4, #4
 8008838:	f7ff fece 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008840:	2d00      	cmp	r5, #0
 8008842:	f040 8477 	bne.w	8009134 <HAL_RCCEx_PeriphCLKConfig+0x99c>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008846:	4981      	ldr	r1, [pc, #516]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800884a:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800884c:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8008850:	4302      	orrs	r2, r0
 8008852:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008854:	0559      	lsls	r1, r3, #21
 8008856:	d526      	bpl.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008858:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 800885c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8008860:	f000 84e3 	beq.w	800922a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008864:	f200 8589 	bhi.w	800937a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8008868:	2a00      	cmp	r2, #0
 800886a:	f000 84c5 	beq.w	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800886e:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8008872:	f040 858a 	bne.w	800938a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008876:	4a75      	ldr	r2, [pc, #468]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008878:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800887a:	f002 0203 	and.w	r2, r2, #3
 800887e:	2a03      	cmp	r2, #3
 8008880:	f000 8583 	beq.w	800938a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8008884:	2100      	movs	r1, #0
 8008886:	1d20      	adds	r0, r4, #4
 8008888:	f7ff fea6 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008890:	2d00      	cmp	r5, #0
 8008892:	f040 84b9 	bne.w	8009208 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008896:	496d      	ldr	r1, [pc, #436]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008898:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800889c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800889e:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 80088a2:	4302      	orrs	r2, r0
 80088a4:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80088a6:	051a      	lsls	r2, r3, #20
 80088a8:	d526      	bpl.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4BClockSelection)
 80088aa:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 80088ae:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 80088b2:	f000 847f 	beq.w	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80088b6:	f200 8548 	bhi.w	800934a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	f000 84ae 	beq.w	800921c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80088c0:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80088c4:	f040 8549 	bne.w	800935a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088c8:	4a60      	ldr	r2, [pc, #384]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80088ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80088cc:	f002 0203 	and.w	r2, r2, #3
 80088d0:	2a03      	cmp	r2, #3
 80088d2:	f000 8542 	beq.w	800935a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80088d6:	2100      	movs	r1, #0
 80088d8:	1d20      	adds	r0, r4, #4
 80088da:	f7ff fe7d 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	f040 8477 	bne.w	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088e8:	4958      	ldr	r1, [pc, #352]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80088ea:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80088ee:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80088f0:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 80088f4:	4302      	orrs	r2, r0
 80088f6:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088f8:	019f      	lsls	r7, r3, #6
 80088fa:	d518      	bpl.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x196>
    switch(PeriphClkInit->QspiClockSelection)
 80088fc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80088fe:	2a20      	cmp	r2, #32
 8008900:	f000 83c0 	beq.w	8009084 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008904:	f200 855a 	bhi.w	80093bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008908:	b13a      	cbz	r2, 800891a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800890a:	2a10      	cmp	r2, #16
 800890c:	f040 8559 	bne.w	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008910:	494e      	ldr	r1, [pc, #312]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008912:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008914:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008918:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800891a:	2d00      	cmp	r5, #0
 800891c:	f040 832c 	bne.w	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008920:	494a      	ldr	r1, [pc, #296]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008922:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8008924:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8008926:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800892a:	4302      	orrs	r2, r0
 800892c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800892e:	04d8      	lsls	r0, r3, #19
 8008930:	d524      	bpl.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008932:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8008934:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008938:	f000 8428 	beq.w	800918c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 800893c:	f200 8511 	bhi.w	8009362 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8008940:	2a00      	cmp	r2, #0
 8008942:	f000 8482 	beq.w	800924a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008946:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800894a:	f040 8512 	bne.w	8009372 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800894e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008950:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008952:	f002 0203 	and.w	r2, r2, #3
 8008956:	2a03      	cmp	r2, #3
 8008958:	f000 850b 	beq.w	8009372 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800895c:	2100      	movs	r1, #0
 800895e:	1d20      	adds	r0, r4, #4
 8008960:	f7ff fe3a 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008968:	2d00      	cmp	r5, #0
 800896a:	f040 8420 	bne.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800896e:	4937      	ldr	r1, [pc, #220]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008970:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008972:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008974:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8008978:	4302      	orrs	r2, r0
 800897a:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800897c:	0499      	lsls	r1, r3, #18
 800897e:	d522      	bpl.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008980:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8008982:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8008986:	f000 83b2 	beq.w	80090ee <HAL_RCCEx_PeriphCLKConfig+0x956>
 800898a:	f200 84b5 	bhi.w	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 800898e:	b182      	cbz	r2, 80089b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008990:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008994:	f040 84ba 	bne.w	800930c <HAL_RCCEx_PeriphCLKConfig+0xb74>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008998:	4a2c      	ldr	r2, [pc, #176]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800899a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800899c:	f002 0203 	and.w	r2, r2, #3
 80089a0:	2a03      	cmp	r2, #3
 80089a2:	f000 84b3 	beq.w	800930c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80089a6:	2101      	movs	r1, #1
 80089a8:	1d20      	adds	r0, r4, #4
 80089aa:	f7ff fe15 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	f040 82fd 	bne.w	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80089b8:	4924      	ldr	r1, [pc, #144]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80089ba:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80089bc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80089be:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80089c2:	4302      	orrs	r2, r0
 80089c4:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089c6:	045a      	lsls	r2, r3, #17
 80089c8:	d524      	bpl.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi6ClockSelection)
 80089ca:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 80089ce:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80089d2:	f000 82fe 	beq.w	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80089d6:	f200 849d 	bhi.w	8009314 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80089da:	b182      	cbz	r2, 80089fe <HAL_RCCEx_PeriphCLKConfig+0x266>
 80089dc:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80089e0:	f040 84a2 	bne.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0xb90>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089e4:	4a19      	ldr	r2, [pc, #100]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80089e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80089e8:	f002 0203 	and.w	r2, r2, #3
 80089ec:	2a03      	cmp	r2, #3
 80089ee:	f000 849b 	beq.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 80089f2:	2101      	movs	r1, #1
 80089f4:	1d20      	adds	r0, r4, #4
 80089f6:	f7ff fdef 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	f040 82d9 	bne.w	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a04:	4911      	ldr	r1, [pc, #68]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008a06:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8008a0a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008a0c:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8008a10:	4302      	orrs	r2, r0
 8008a12:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a14:	041f      	lsls	r7, r3, #16
 8008a16:	d50d      	bpl.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    switch(PeriphClkInit->FdcanClockSelection)
 8008a18:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008a1a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8008a1e:	f000 81db 	beq.w	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8008a22:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8008a26:	f000 84d5 	beq.w	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 81d9 	beq.w	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = ret;
 8008a30:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008a32:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a34:	01d8      	lsls	r0, r3, #7
 8008a36:	d514      	bpl.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->FmcClockSelection)
 8008a38:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008a3a:	2a03      	cmp	r2, #3
 8008a3c:	f200 84e3 	bhi.w	8009406 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8008a40:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008a44:	0006000b 	.word	0x0006000b
 8008a48:	000b030b 	.word	0x000b030b
 8008a4c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a50:	4935      	ldr	r1, [pc, #212]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a52:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008a54:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008a58:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	f000 828e 	beq.w	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      status = ret;
 8008a60:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a62:	0259      	lsls	r1, r3, #9
 8008a64:	f100 81f4 	bmi.w	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a68:	07df      	lsls	r7, r3, #31
 8008a6a:	d52f      	bpl.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x334>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a6c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8008a6e:	2a28      	cmp	r2, #40	@ 0x28
 8008a70:	d82a      	bhi.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008a72:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008a76:	01d1      	.short	0x01d1
 8008a78:	00290029 	.word	0x00290029
 8008a7c:	00290029 	.word	0x00290029
 8008a80:	00290029 	.word	0x00290029
 8008a84:	01c40029 	.word	0x01c40029
 8008a88:	00290029 	.word	0x00290029
 8008a8c:	00290029 	.word	0x00290029
 8008a90:	00290029 	.word	0x00290029
 8008a94:	04150029 	.word	0x04150029
 8008a98:	00290029 	.word	0x00290029
 8008a9c:	00290029 	.word	0x00290029
 8008aa0:	00290029 	.word	0x00290029
 8008aa4:	01d10029 	.word	0x01d10029
 8008aa8:	00290029 	.word	0x00290029
 8008aac:	00290029 	.word	0x00290029
 8008ab0:	00290029 	.word	0x00290029
 8008ab4:	01d10029 	.word	0x01d10029
 8008ab8:	00290029 	.word	0x00290029
 8008abc:	00290029 	.word	0x00290029
 8008ac0:	00290029 	.word	0x00290029
 8008ac4:	01d10029 	.word	0x01d10029
      status = ret;
 8008ac8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008aca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008acc:	0798      	lsls	r0, r3, #30
 8008ace:	d51c      	bpl.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008ad0:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8008ad2:	2a05      	cmp	r2, #5
 8008ad4:	f200 848f 	bhi.w	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8008ad8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008adc:	00060013 	.word	0x00060013
 8008ae0:	001303d0 	.word	0x001303d0
 8008ae4:	00130013 	.word	0x00130013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008aea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008aec:	f002 0203 	and.w	r2, r2, #3
 8008af0:	2a03      	cmp	r2, #3
 8008af2:	f000 8480 	beq.w	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8008af6:	2101      	movs	r1, #1
 8008af8:	1d20      	adds	r0, r4, #4
 8008afa:	f7ff fd6d 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	f000 824d 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      status = ret;
 8008b08:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b0a:	0759      	lsls	r1, r3, #29
 8008b0c:	d51f      	bpl.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008b0e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008b12:	2a05      	cmp	r2, #5
 8008b14:	f200 8473 	bhi.w	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008b18:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008b1c:	00080015 	.word	0x00080015
 8008b20:	0015039e 	.word	0x0015039e
 8008b24:	00150015 	.word	0x00150015
 8008b28:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b2c:	4aa9      	ldr	r2, [pc, #676]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b2e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b30:	f002 0203 	and.w	r2, r2, #3
 8008b34:	2a03      	cmp	r2, #3
 8008b36:	f000 8462 	beq.w	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	1d20      	adds	r0, r4, #4
 8008b3e:	f7ff fd4b 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b46:	2d00      	cmp	r5, #0
 8008b48:	f000 8222 	beq.w	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      status = ret;
 8008b4c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b4e:	069a      	lsls	r2, r3, #26
 8008b50:	d524      	bpl.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b52:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8008b56:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8008b5a:	f000 825c 	beq.w	8009016 <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8008b5e:	f200 83be 	bhi.w	80092de <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8008b62:	b182      	cbz	r2, 8008b86 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8008b64:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8008b68:	f040 83c3 	bne.w	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b6c:	4a99      	ldr	r2, [pc, #612]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b6e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b70:	f002 0203 	and.w	r2, r2, #3
 8008b74:	2a03      	cmp	r2, #3
 8008b76:	f000 83bc 	beq.w	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	1d20      	adds	r0, r4, #4
 8008b7e:	f7ff fd2b 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	f040 8219 	bne.w	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b8c:	4991      	ldr	r1, [pc, #580]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b8e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8008b92:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008b94:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8008b98:	4302      	orrs	r2, r0
 8008b9a:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b9c:	065f      	lsls	r7, r3, #25
 8008b9e:	d524      	bpl.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ba0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8008ba4:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8008ba8:	f000 8246 	beq.w	8009038 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8008bac:	f200 83c0 	bhi.w	8009330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008bb0:	b182      	cbz	r2, 8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8008bb2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008bb6:	f040 83c5 	bne.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0xbac>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bba:	4a86      	ldr	r2, [pc, #536]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008bbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008bbe:	f002 0203 	and.w	r2, r2, #3
 8008bc2:	2a03      	cmp	r2, #3
 8008bc4:	f000 83be 	beq.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008bc8:	2100      	movs	r1, #0
 8008bca:	1d20      	adds	r0, r4, #4
 8008bcc:	f7ff fd04 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	f040 81f0 	bne.w	8008fba <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bda:	497e      	ldr	r1, [pc, #504]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008bdc:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8008be0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008be2:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8008be6:	4302      	orrs	r2, r0
 8008be8:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bea:	0618      	lsls	r0, r3, #24
 8008bec:	d524      	bpl.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008bee:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8008bf2:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8008bf6:	f000 81fd 	beq.w	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8008bfa:	f200 8363 	bhi.w	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
 8008bfe:	b182      	cbz	r2, 8008c22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008c00:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008c04:	f040 8368 	bne.w	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xb40>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c08:	4a72      	ldr	r2, [pc, #456]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c0a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c0c:	f002 0203 	and.w	r2, r2, #3
 8008c10:	2a03      	cmp	r2, #3
 8008c12:	f000 8361 	beq.w	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8008c16:	2100      	movs	r1, #0
 8008c18:	1d20      	adds	r0, r4, #4
 8008c1a:	f7ff fcdd 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008c22:	2d00      	cmp	r5, #0
 8008c24:	f040 81cd 	bne.w	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c28:	496a      	ldr	r1, [pc, #424]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c2a:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8008c2e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008c30:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008c34:	4302      	orrs	r2, r0
 8008c36:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c38:	0719      	lsls	r1, r3, #28
 8008c3a:	d50b      	bpl.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c3c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8008c40:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008c44:	f000 8167 	beq.w	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c48:	4862      	ldr	r0, [pc, #392]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c4a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008c4c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008c50:	430a      	orrs	r2, r1
 8008c52:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c54:	06da      	lsls	r2, r3, #27
 8008c56:	d50b      	bpl.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008c58:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8008c5c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008c60:	f000 8148 	beq.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c64:	485b      	ldr	r0, [pc, #364]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c66:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8008c68:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c70:	031f      	lsls	r7, r3, #12
 8008c72:	d522      	bpl.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->AdcClockSelection)
 8008c74:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8008c78:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8008c7c:	f000 8225 	beq.w	80090ca <HAL_RCCEx_PeriphCLKConfig+0x932>
 8008c80:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8008c84:	d00e      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008c86:	2900      	cmp	r1, #0
 8008c88:	f040 80b6 	bne.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x660>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c8c:	4a51      	ldr	r2, [pc, #324]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c8e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c90:	f002 0203 	and.w	r2, r2, #3
 8008c94:	2a03      	cmp	r2, #3
 8008c96:	f000 80af 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8008c9a:	1d20      	adds	r0, r4, #4
 8008c9c:	f7ff fc9c 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	f040 818e 	bne.w	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008caa:	494a      	ldr	r1, [pc, #296]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008cac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8008cb0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008cb2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8008cb6:	4302      	orrs	r2, r0
 8008cb8:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cba:	0358      	lsls	r0, r3, #13
 8008cbc:	d50f      	bpl.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->UsbClockSelection)
 8008cbe:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008cc2:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8008cc6:	f000 81ee 	beq.w	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x90e>
 8008cca:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8008cce:	f000 80b3 	beq.w	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8008cd2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8008cd6:	f000 80aa 	beq.w	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x696>
      status = ret;
 8008cda:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008cdc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008cde:	03d9      	lsls	r1, r3, #15
 8008ce0:	d51c      	bpl.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008ce2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8008ce4:	2a00      	cmp	r2, #0
 8008ce6:	f000 8139 	beq.w	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8008cea:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008cee:	d16e      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cf0:	4a38      	ldr	r2, [pc, #224]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008cf2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008cf4:	f002 0203 	and.w	r2, r2, #3
 8008cf8:	2a03      	cmp	r2, #3
 8008cfa:	d068      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x636>
 8008cfc:	2102      	movs	r1, #2
 8008cfe:	1d20      	adds	r0, r4, #4
 8008d00:	f7ff fc6a 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
 8008d04:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d06:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	f040 812f 	bne.w	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d0e:	4931      	ldr	r1, [pc, #196]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d10:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008d12:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8008d14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008d18:	4302      	orrs	r2, r0
 8008d1a:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d1c:	009a      	lsls	r2, r3, #2
 8008d1e:	d50d      	bpl.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d20:	4a2c      	ldr	r2, [pc, #176]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d22:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d24:	f002 0203 	and.w	r2, r2, #3
 8008d28:	2a03      	cmp	r2, #3
 8008d2a:	d04e      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x632>
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008d32:	f7ff fcc1 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d36:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d146      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x632>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d3c:	039f      	lsls	r7, r3, #14
 8008d3e:	d435      	bmi.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x614>
  if (status == HAL_OK)
 8008d40:	1e30      	subs	r0, r6, #0
 8008d42:	bf18      	it	ne
 8008d44:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d46:	02de      	lsls	r6, r3, #11
 8008d48:	d506      	bpl.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d4a:	4922      	ldr	r1, [pc, #136]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d4c:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8008d4e:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008d50:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008d54:	432a      	orrs	r2, r5
 8008d56:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008d58:	00dd      	lsls	r5, r3, #3
 8008d5a:	d507      	bpl.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d5c:	491d      	ldr	r1, [pc, #116]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d5e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8008d62:	690a      	ldr	r2, [r1, #16]
 8008d64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d68:	432a      	orrs	r2, r5
 8008d6a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d6c:	0299      	lsls	r1, r3, #10
 8008d6e:	d506      	bpl.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d70:	4918      	ldr	r1, [pc, #96]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d72:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8008d74:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008d76:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008d7a:	432a      	orrs	r2, r5
 8008d7c:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d7e:	005a      	lsls	r2, r3, #1
 8008d80:	d509      	bpl.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d82:	4a14      	ldr	r2, [pc, #80]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d84:	6911      	ldr	r1, [r2, #16]
 8008d86:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8008d8a:	6111      	str	r1, [r2, #16]
 8008d8c:	6911      	ldr	r1, [r2, #16]
 8008d8e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8008d92:	4329      	orrs	r1, r5
 8008d94:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da06      	bge.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008d9c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008d9e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008da0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8008da4:	430b      	orrs	r3, r1
 8008da6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8008da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008dac:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8008dae:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008db2:	f000 80c1 	beq.w	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008db6:	f240 8108 	bls.w	8008fca <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008dba:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8008dbe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008dc2:	f000 80be 	beq.w	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status=HAL_ERROR;
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	e7bd      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8008dca:	2601      	movs	r6, #1
 8008dcc:	e7b6      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      status = ret;
 8008dce:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008dd0:	4635      	mov	r5, r6
 8008dd2:	e7a3      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008dd4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd8:	49a8      	ldr	r1, [pc, #672]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008dda:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008ddc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008de0:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008de2:	2d00      	cmp	r5, #0
 8008de4:	f040 80c4 	bne.w	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008de8:	49a4      	ldr	r1, [pc, #656]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008dea:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008dec:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008dee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008df2:	4302      	orrs	r2, r0
 8008df4:	650a      	str	r2, [r1, #80]	@ 0x50
 8008df6:	e61d      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8008df8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008dfa:	4635      	mov	r5, r6
 8008dfc:	e75d      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x522>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dfe:	4a9f      	ldr	r2, [pc, #636]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008e02:	f002 0203 	and.w	r2, r2, #3
 8008e06:	2a03      	cmp	r2, #3
 8008e08:	f43f ae5e 	beq.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	1d20      	adds	r0, r4, #4
 8008e10:	f7ff fbe2 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e18:	2d00      	cmp	r5, #0
 8008e1a:	f040 80b7 	bne.w	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008e1e:	4997      	ldr	r1, [pc, #604]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e20:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8008e22:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008e24:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8008e28:	4302      	orrs	r2, r0
 8008e2a:	654a      	str	r2, [r1, #84]	@ 0x54
 8008e2c:	e64e      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2e:	4993      	ldr	r1, [pc, #588]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e30:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008e32:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008e36:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	f040 809b 	bne.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e3e:	498f      	ldr	r1, [pc, #572]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e40:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8008e44:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008e46:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8008e4a:	4302      	orrs	r2, r0
 8008e4c:	654a      	str	r2, [r1, #84]	@ 0x54
 8008e4e:	e746      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x546>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e50:	4f8b      	ldr	r7, [pc, #556]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e58:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008e5a:	f7fe ff2f 	bl	8007cbc <HAL_GetTick>
 8008e5e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e60:	e006      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e62:	f7fe ff2b 	bl	8007cbc <HAL_GetTick>
 8008e66:	eba0 0008 	sub.w	r0, r0, r8
 8008e6a:	2864      	cmp	r0, #100	@ 0x64
 8008e6c:	f200 82ad 	bhi.w	80093ca <HAL_RCCEx_PeriphCLKConfig+0xc32>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	05da      	lsls	r2, r3, #23
 8008e74:	d5f5      	bpl.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
    if(ret == HAL_OK)
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	f040 82a8 	bne.w	80093cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e7e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8008e82:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8008e84:	4059      	eors	r1, r3
 8008e86:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8008e8a:	d00b      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e8c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e8e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e90:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e94:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8008e98:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e9a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8008e9c:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8008ea0:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8008ea2:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea8:	f000 82b1 	beq.w	800940e <HAL_RCCEx_PeriphCLKConfig+0xc76>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eac:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008eb0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8008eb4:	f000 82bf 	beq.w	8009436 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8008eb8:	4970      	ldr	r1, [pc, #448]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008eba:	690a      	ldr	r2, [r1, #16]
 8008ebc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8008ec0:	610a      	str	r2, [r1, #16]
 8008ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	e5ca      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed2:	496a      	ldr	r1, [pc, #424]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ed4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008ed6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008eda:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8008edc:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	f040 813c 	bne.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ee4:	4965      	ldr	r1, [pc, #404]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ee6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8008ee8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008eea:	f022 0207 	bic.w	r2, r2, #7
 8008eee:	4302      	orrs	r2, r0
 8008ef0:	650a      	str	r2, [r1, #80]	@ 0x50
 8008ef2:	e48a      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ef4:	4a61      	ldr	r2, [pc, #388]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ef6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ef8:	f002 0203 	and.w	r2, r2, #3
 8008efc:	2a03      	cmp	r2, #3
 8008efe:	d008      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8008f00:	2102      	movs	r1, #2
 8008f02:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008f06:	f7ff fbd7 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f0a:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f43f aeaf 	beq.w	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        status = HAL_ERROR;
 8008f12:	2601      	movs	r6, #1
 8008f14:	e6ac      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f16:	4a59      	ldr	r2, [pc, #356]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f1a:	f002 0203 	and.w	r2, r2, #3
 8008f1e:	2a03      	cmp	r2, #3
 8008f20:	d008      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8008f22:	2102      	movs	r1, #2
 8008f24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008f28:	f7ff fbc6 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f2c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f ae90 	beq.w	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
          status = HAL_ERROR;
 8008f34:	2601      	movs	r6, #1
 8008f36:	e68d      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4850      	ldr	r0, [pc, #320]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f3a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008f3c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008f40:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	f47f af3f 	bne.w	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f48:	4d4c      	ldr	r5, [pc, #304]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
  if (status == HAL_OK)
 8008f4a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f4c:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 8008f4e:	bf18      	it	ne
 8008f50:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f52:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8008f56:	430a      	orrs	r2, r1
 8008f58:	656a      	str	r2, [r5, #84]	@ 0x54
 8008f5a:	e6f4      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5c:	4947      	ldr	r1, [pc, #284]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f5e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008f60:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f64:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	f43f aed1 	beq.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x576>
      status = ret;
 8008f6c:	462e      	mov	r6, r5
 8008f6e:	e6d5      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      status = ret;
 8008f70:	462e      	mov	r6, r5
 8008f72:	e55f      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8008f74:	462e      	mov	r6, r5
 8008f76:	e6b2      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x546>
      status = ret;
 8008f78:	462e      	mov	r6, r5
 8008f7a:	e4d8      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f7c:	493f      	ldr	r1, [pc, #252]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f7e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008f80:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8008f82:	f022 0203 	bic.w	r2, r2, #3
 8008f86:	4302      	orrs	r2, r0
 8008f88:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8008f8a:	e56a      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      status = ret;
 8008f8c:	462e      	mov	r6, r5
 8008f8e:	e59d      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f90:	493a      	ldr	r1, [pc, #232]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f92:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008f96:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008f98:	f022 0207 	bic.w	r2, r2, #7
 8008f9c:	4302      	orrs	r2, r0
 8008f9e:	658a      	str	r2, [r1, #88]	@ 0x58
 8008fa0:	e5d5      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fa2:	4936      	ldr	r1, [pc, #216]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008fa4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008fa6:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008fa8:	f022 0207 	bic.w	r2, r2, #7
 8008fac:	4302      	orrs	r2, r0
 8008fae:	654a      	str	r2, [r1, #84]	@ 0x54
 8008fb0:	e5ab      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 8008fb2:	462e      	mov	r6, r5
 8008fb4:	e507      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      status = ret;
 8008fb6:	462e      	mov	r6, r5
 8008fb8:	e52c      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      status = ret;
 8008fba:	462e      	mov	r6, r5
 8008fbc:	e615      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x452>
      status = ret;
 8008fbe:	462e      	mov	r6, r5
 8008fc0:	e5ec      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 8008fc2:	462e      	mov	r6, r5
 8008fc4:	e638      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      status = ret;
 8008fc6:	462e      	mov	r6, r5
 8008fc8:	e677      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->RngClockSelection)
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	f47f aefb 	bne.w	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8008fd0:	e7b7      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008fd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008fd6:	f002 0203 	and.w	r2, r2, #3
 8008fda:	2a03      	cmp	r2, #3
 8008fdc:	f000 81a4 	beq.w	8009328 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008fe6:	f7ff fb67 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8008fea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	d1e1      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008ff2:	e507      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ff4:	4a21      	ldr	r2, [pc, #132]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ff6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ff8:	f002 0203 	and.w	r2, r2, #3
 8008ffc:	2a03      	cmp	r2, #3
 8008ffe:	f000 816b 	beq.w	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8009002:	2102      	movs	r1, #2
 8009004:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009008:	f7ff fb56 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 800900c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800900e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009010:	2d00      	cmp	r5, #0
 8009012:	d1d6      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8009014:	e608      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009016:	4a19      	ldr	r2, [pc, #100]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009018:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800901a:	f002 0203 	and.w	r2, r2, #3
 800901e:	2a03      	cmp	r2, #3
 8009020:	f000 8167 	beq.w	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8009024:	2102      	movs	r1, #2
 8009026:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800902a:	f7ff fb45 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 800902e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009030:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009032:	2d00      	cmp	r5, #0
 8009034:	d1c3      	bne.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x826>
 8009036:	e5a9      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009038:	4a10      	ldr	r2, [pc, #64]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800903a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800903c:	f002 0203 	and.w	r2, r2, #3
 8009040:	2a03      	cmp	r2, #3
 8009042:	f000 817f 	beq.w	8009344 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009046:	2102      	movs	r1, #2
 8009048:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800904c:	f7ff fb34 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8009050:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009052:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009054:	2d00      	cmp	r5, #0
 8009056:	d1b0      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x822>
 8009058:	e5bf      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x442>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800905a:	4a08      	ldr	r2, [pc, #32]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800905c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800905e:	f002 0203 	and.w	r2, r2, #3
 8009062:	2a03      	cmp	r2, #3
 8009064:	f000 81cf 	beq.w	8009406 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8009068:	2102      	movs	r1, #2
 800906a:	1d20      	adds	r0, r4, #4
 800906c:	f7ff fab4 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
 8009070:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009072:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009074:	2d00      	cmp	r5, #0
 8009076:	f47f acf3 	bne.w	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800907a:	e77f      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800907c:	58024400 	.word	0x58024400
 8009080:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009084:	4ac3      	ldr	r2, [pc, #780]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009086:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009088:	f002 0203 	and.w	r2, r2, #3
 800908c:	2a03      	cmp	r2, #3
 800908e:	f000 8198 	beq.w	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 8009092:	2102      	movs	r1, #2
 8009094:	1d20      	adds	r0, r4, #4
 8009096:	f7ff fa9f 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
 800909a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800909c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800909e:	2d00      	cmp	r5, #0
 80090a0:	f47f af6a 	bne.w	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 80090a4:	e43c      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x188>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090a6:	4abb      	ldr	r2, [pc, #748]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090aa:	f002 0203 	and.w	r2, r2, #3
 80090ae:	2a03      	cmp	r2, #3
 80090b0:	f43f ae13 	beq.w	8008cda <HAL_RCCEx_PeriphCLKConfig+0x542>
 80090b4:	2101      	movs	r1, #1
 80090b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80090ba:	f7ff fafd 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80090be:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80090c0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80090c2:	2d00      	cmp	r5, #0
 80090c4:	f47f af56 	bne.w	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80090c8:	e6b9      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ca:	4ab2      	ldr	r2, [pc, #712]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090ce:	f002 0203 	and.w	r2, r2, #3
 80090d2:	2a03      	cmp	r2, #3
 80090d4:	f43f ae90 	beq.w	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x660>
 80090d8:	2102      	movs	r1, #2
 80090da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80090de:	f7ff faeb 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80090e2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090e4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	f47f af6d 	bne.w	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80090ec:	e5dd      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x512>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ee:	4aa9      	ldr	r2, [pc, #676]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090f2:	f002 0203 	and.w	r2, r2, #3
 80090f6:	2a03      	cmp	r2, #3
 80090f8:	f000 8108 	beq.w	800930c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80090fc:	2101      	movs	r1, #1
 80090fe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009102:	f7ff fad9 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8009106:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009108:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800910a:	2d00      	cmp	r5, #0
 800910c:	f47f af51 	bne.w	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8009110:	e452      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009112:	4aa0      	ldr	r2, [pc, #640]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009114:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009116:	f002 0203 	and.w	r2, r2, #3
 800911a:	2a03      	cmp	r2, #3
 800911c:	f000 8143 	beq.w	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8009120:	2100      	movs	r1, #0
 8009122:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009126:	f7ff fac7 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 800912a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800912c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800912e:	2d00      	cmp	r5, #0
 8009130:	f43f ab89 	beq.w	8008846 <HAL_RCCEx_PeriphCLKConfig+0xae>
      status = ret;
 8009134:	462e      	mov	r6, r5
 8009136:	f7ff bb8d 	b.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800913a:	4a96      	ldr	r2, [pc, #600]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800913c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800913e:	f002 0203 	and.w	r2, r2, #3
 8009142:	2a03      	cmp	r2, #3
 8009144:	f43f ab5f 	beq.w	8008806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009148:	2100      	movs	r1, #0
 800914a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800914e:	f7ff fab3 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8009152:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009154:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009156:	2d00      	cmp	r5, #0
 8009158:	f43f aec4 	beq.w	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      status = ret;
 800915c:	462e      	mov	r6, r5
 800915e:	f7ff bb54 	b.w	800880a <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009162:	4a8c      	ldr	r2, [pc, #560]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009164:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009166:	f002 0203 	and.w	r2, r2, #3
 800916a:	2a03      	cmp	r2, #3
 800916c:	f43f ab4b 	beq.w	8008806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009170:	2100      	movs	r1, #0
 8009172:	1d20      	adds	r0, r4, #4
 8009174:	f7ff fa30 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	4605      	mov	r5, r0
      break;
 800917c:	e6af      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x746>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800917e:	4985      	ldr	r1, [pc, #532]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009180:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009182:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009186:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 8009188:	f7ff bb5a 	b.w	8008840 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800918c:	4a81      	ldr	r2, [pc, #516]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800918e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009190:	f002 0203 	and.w	r2, r2, #3
 8009194:	2a03      	cmp	r2, #3
 8009196:	f000 80ec 	beq.w	8009372 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800919a:	2100      	movs	r1, #0
 800919c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80091a0:	f7ff fa8a 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80091a4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091a6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	f43f abe0 	beq.w	800896e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      status = ret;
 80091ae:	462e      	mov	r6, r5
 80091b0:	f7ff bbe4 	b.w	800897c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091b4:	4a77      	ldr	r2, [pc, #476]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80091b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80091b8:	f002 0203 	and.w	r2, r2, #3
 80091bc:	2a03      	cmp	r2, #3
 80091be:	f000 80cc 	beq.w	800935a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80091c2:	2100      	movs	r1, #0
 80091c4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80091c8:	f7ff fa76 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80091cc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091ce:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	f43f ab89 	beq.w	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      status = ret;
 80091d6:	462e      	mov	r6, r5
 80091d8:	f7ff bb8e 	b.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091dc:	4a6d      	ldr	r2, [pc, #436]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80091de:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80091e0:	f002 0203 	and.w	r2, r2, #3
 80091e4:	2a03      	cmp	r2, #3
 80091e6:	f000 80e6 	beq.w	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80091ea:	2102      	movs	r1, #2
 80091ec:	3024      	adds	r0, #36	@ 0x24
 80091ee:	f7ff fa63 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80091f2:	4606      	mov	r6, r0
      break;
 80091f4:	f7ff baf1 	b.w	80087da <HAL_RCCEx_PeriphCLKConfig+0x42>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f8:	4966      	ldr	r1, [pc, #408]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80091fa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80091fc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009200:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009202:	2d00      	cmp	r5, #0
 8009204:	f43f ab47 	beq.w	8008896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      status = ret;
 8009208:	462e      	mov	r6, r5
 800920a:	f7ff bb4c 	b.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920e:	4861      	ldr	r0, [pc, #388]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009210:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009212:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8009216:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009218:	f7ff bae2 	b.w	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921c:	495d      	ldr	r1, [pc, #372]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800921e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009220:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009224:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 8009226:	f7ff bb5c 	b.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800922a:	4a5a      	ldr	r2, [pc, #360]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800922c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800922e:	f002 0203 	and.w	r2, r2, #3
 8009232:	2a03      	cmp	r2, #3
 8009234:	f000 80a9 	beq.w	800938a <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8009238:	2100      	movs	r1, #0
 800923a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800923e:	f7ff fa3b 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	4605      	mov	r5, r0
      break;
 8009246:	f7ff bb23 	b.w	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800924a:	4952      	ldr	r1, [pc, #328]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800924c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800924e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009252:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 8009254:	f7ff bb88 	b.w	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009258:	4a4e      	ldr	r2, [pc, #312]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800925a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800925c:	f002 0203 	and.w	r2, r2, #3
 8009260:	2a03      	cmp	r2, #3
 8009262:	f000 80cc 	beq.w	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8009266:	2101      	movs	r1, #1
 8009268:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800926c:	f7ff fa24 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8009270:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009272:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009274:	2d00      	cmp	r5, #0
 8009276:	f47f ac69 	bne.w	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800927a:	e689      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800927c:	4a45      	ldr	r2, [pc, #276]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800927e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009280:	f002 0203 	and.w	r2, r2, #3
 8009284:	2a03      	cmp	r2, #3
 8009286:	f000 80b6 	beq.w	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 800928a:	2101      	movs	r1, #1
 800928c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009290:	f7ff fa12 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 8009294:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009296:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009298:	2d00      	cmp	r5, #0
 800929a:	f47f ac35 	bne.w	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800929e:	e680      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092a0:	4a3c      	ldr	r2, [pc, #240]	@ (8009394 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80092a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80092a4:	f002 0203 	and.w	r2, r2, #3
 80092a8:	2a03      	cmp	r2, #3
 80092aa:	f43f ac0d 	beq.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80092ae:	2101      	movs	r1, #1
 80092b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80092b4:	f7ff fa00 	bl	80086b8 <RCCEx_PLL3_Config.part.0>
 80092b8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80092bc:	2d00      	cmp	r5, #0
 80092be:	f47f ae65 	bne.w	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80092c2:	e5ac      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80092c4:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 80092c8:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80092cc:	f43f aca9 	beq.w	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80092d0:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 80092d4:	f43f aca5 	beq.w	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      status = ret;
 80092d8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80092da:	4635      	mov	r5, r6
 80092dc:	e4ac      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80092de:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 80092e2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80092e6:	f43f ac4e 	beq.w	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80092ea:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80092ee:	f43f ac4a 	beq.w	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      status = ret;
 80092f2:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80092f4:	4635      	mov	r5, r6
 80092f6:	e451      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Spi45ClockSelection)
 80092f8:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 80092fc:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8009300:	f43f ab57 	beq.w	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8009304:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8009308:	f43f ab53 	beq.w	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      status = ret;
 800930c:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800930e:	4635      	mov	r5, r6
 8009310:	f7ff bb59 	b.w	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009314:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8009318:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800931c:	f43f ab6f 	beq.w	80089fe <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009320:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8009324:	f43f ab6b 	beq.w	80089fe <HAL_RCCEx_PeriphCLKConfig+0x266>
      status = ret;
 8009328:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800932a:	4635      	mov	r5, r6
 800932c:	f7ff bb72 	b.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009330:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 8009334:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009338:	f43f ac4c 	beq.w	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800933c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8009340:	f43f ac48 	beq.w	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      status = ret;
 8009344:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009346:	4635      	mov	r5, r6
 8009348:	e44f      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Sai4BClockSelection)
 800934a:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 800934e:	f43f aac8 	beq.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8009352:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8009356:	f43f aac4 	beq.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      status = ret;
 800935a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800935c:	4635      	mov	r5, r6
 800935e:	f7ff bacb 	b.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009362:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8009366:	f43f aaff 	beq.w	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800936a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800936e:	f43f aafb 	beq.w	8008968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8009372:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009374:	4635      	mov	r5, r6
 8009376:	f7ff bb01 	b.w	800897c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Sai4AClockSelection)
 800937a:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 800937e:	f43f aa87 	beq.w	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8009382:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8009386:	f43f aa83 	beq.w	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      status = ret;
 800938a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800938c:	4635      	mov	r5, r6
 800938e:	f7ff ba8a 	b.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai23ClockSelection)
 8009398:	2ac0      	cmp	r2, #192	@ 0xc0
 800939a:	f43f aa51 	beq.w	8008840 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 800939e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80093a2:	f43f aa4d 	beq.w	8008840 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      status = ret;
 80093a6:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80093a8:	4635      	mov	r5, r6
 80093aa:	f7ff ba53 	b.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80093ae:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 80093b2:	f43f aa15 	beq.w	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 80093b6:	2601      	movs	r6, #1
 80093b8:	f7ff ba19 	b.w	80087ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->QspiClockSelection)
 80093bc:	2a30      	cmp	r2, #48	@ 0x30
 80093be:	f43f aaac 	beq.w	800891a <HAL_RCCEx_PeriphCLKConfig+0x182>
      status = ret;
 80093c2:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80093c4:	4635      	mov	r5, r6
 80093c6:	f7ff bab2 	b.w	800892e <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_TIMEOUT;
 80093ca:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093cc:	6823      	ldr	r3, [r4, #0]
      status = ret;
 80093ce:	462e      	mov	r6, r5
 80093d0:	f7ff bb4a 	b.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009454 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80093d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80093d8:	f002 0203 	and.w	r2, r2, #3
 80093dc:	2a03      	cmp	r2, #3
 80093de:	f43f ab27 	beq.w	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093e2:	2101      	movs	r1, #1
 80093e4:	1d20      	adds	r0, r4, #4
 80093e6:	f7ff f8f7 	bl	80085d8 <RCCEx_PLL2_Config.part.0>
 80093ea:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093ec:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	f47f adbe 	bne.w	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80093f4:	e4f8      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      status = ret;
 80093f6:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80093f8:	4635      	mov	r5, r6
 80093fa:	f7ff bb86 	b.w	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 80093fe:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009400:	4635      	mov	r5, r6
 8009402:	f7ff bba4 	b.w	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 8009406:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009408:	4635      	mov	r5, r6
 800940a:	f7ff bb2a 	b.w	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        tickstart = HAL_GetTick();
 800940e:	f7fe fc55 	bl	8007cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009412:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8009454 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
        tickstart = HAL_GetTick();
 8009416:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009418:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800941c:	e004      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xc90>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800941e:	f7fe fc4d 	bl	8007cbc <HAL_GetTick>
 8009422:	1bc0      	subs	r0, r0, r7
 8009424:	4548      	cmp	r0, r9
 8009426:	d810      	bhi.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009428:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800942c:	079b      	lsls	r3, r3, #30
 800942e:	d5f6      	bpl.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009430:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8009434:	e53a      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x714>
 8009436:	4807      	ldr	r0, [pc, #28]	@ (8009454 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009438:	4a07      	ldr	r2, [pc, #28]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 800943a:	6901      	ldr	r1, [r0, #16]
 800943c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009440:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8009444:	430a      	orrs	r2, r1
 8009446:	6102      	str	r2, [r0, #16]
 8009448:	e53b      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        status = ret;
 800944a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	4635      	mov	r5, r6
 8009450:	f7ff bb0a 	b.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009454:	58024400 	.word	0x58024400
 8009458:	00ffffcf 	.word	0x00ffffcf

0800945c <LL_ADC_Init>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800945c:	6882      	ldr	r2, [r0, #8]
 800945e:	07d3      	lsls	r3, r2, #31
 8009460:	d411      	bmi.n	8009486 <LL_ADC_Init+0x2a>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8009462:	4603      	mov	r3, r0
 8009464:	68c0      	ldr	r0, [r0, #12]
{
 8009466:	b430      	push	{r4, r5}
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8009468:	e891 0034 	ldmia.w	r1, {r2, r4, r5}
    MODIFY_REG(ADCx->CFGR,
 800946c:	4907      	ldr	r1, [pc, #28]	@ (800948c <LL_ADC_Init+0x30>)
 800946e:	432a      	orrs	r2, r5
 8009470:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8009472:	2001      	movs	r0, #1
    MODIFY_REG(ADCx->CFGR,
 8009474:	430a      	orrs	r2, r1
 8009476:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800947e:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8009480:	bc30      	pop	{r4, r5}
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8009482:	611a      	str	r2, [r3, #16]
}
 8009484:	4770      	bx	lr
    status = ERROR;
 8009486:	2000      	movs	r0, #0
}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	ffffbfe3 	.word	0xffffbfe3

08009490 <LL_ADC_REG_Init>:
 8009490:	6882      	ldr	r2, [r0, #8]
 8009492:	07d3      	lsls	r3, r2, #31
 8009494:	d417      	bmi.n	80094c6 <LL_ADC_REG_Init+0x36>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8009496:	4603      	mov	r3, r0
    {
      MODIFY_REG(ADCx->CFGR,
 8009498:	6948      	ldr	r0, [r1, #20]
{
 800949a:	b470      	push	{r4, r5, r6}
      MODIFY_REG(ADCx->CFGR,
 800949c:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
 80094a0:	e9d1 2400 	ldrd	r2, r4, [r1]
 80094a4:	4332      	orrs	r2, r6
 80094a6:	432a      	orrs	r2, r5
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80094a8:	b97c      	cbnz	r4, 80094ca <LL_ADC_REG_Init+0x3a>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80094aa:	4302      	orrs	r2, r0
 80094ac:	490b      	ldr	r1, [pc, #44]	@ (80094dc <LL_ADC_REG_Init+0x4c>)
 80094ae:	68d8      	ldr	r0, [r3, #12]
 80094b0:	4001      	ands	r1, r0
 80094b2:	430a      	orrs	r2, r1
 80094b4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80094b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 80094b8:	2001      	movs	r0, #1
 80094ba:	f022 020f 	bic.w	r2, r2, #15
 80094be:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80094c0:	bc70      	pop	{r4, r5, r6}
 80094c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80094c4:	4770      	bx	lr
    status = ERROR;
 80094c6:	2000      	movs	r0, #0
}
 80094c8:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 80094ca:	688d      	ldr	r5, [r1, #8]
 80094cc:	4302      	orrs	r2, r0
 80094ce:	4903      	ldr	r1, [pc, #12]	@ (80094dc <LL_ADC_REG_Init+0x4c>)
 80094d0:	68d8      	ldr	r0, [r3, #12]
 80094d2:	4001      	ands	r1, r0
 80094d4:	430a      	orrs	r2, r1
 80094d6:	432a      	orrs	r2, r5
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	e7ec      	b.n	80094b6 <LL_ADC_REG_Init+0x26>
 80094dc:	fff0c01c 	.word	0xfff0c01c

080094e0 <LL_DAC_Init>:
  return ((READ_BIT(DACx->CR,
 80094e0:	f04f 0c01 	mov.w	ip, #1
 80094e4:	f001 0110 	and.w	r1, r1, #16
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80094e8:	4603      	mov	r3, r0
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	fa0c fc01 	lsl.w	ip, ip, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80094f0:	ea3c 0c00 	bics.w	ip, ip, r0
 80094f4:	d029      	beq.n	800954a <LL_DAC_Init+0x6a>
 80094f6:	b470      	push	{r4, r5, r6}
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    {
      MODIFY_REG(DACx->CR,
 80094f8:	e9d2 4000 	ldrd	r4, r0, [r2]
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80094fc:	b9c0      	cbnz	r0, 8009530 <LL_DAC_Init+0x50>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80094fe:	25fc      	movs	r5, #252	@ 0xfc
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	408c      	lsls	r4, r1
 8009504:	408d      	lsls	r5, r1
 8009506:	ea20 0005 	bic.w	r0, r0, r5
 800950a:	4320      	orrs	r0, r4
 800950c:	6018      	str	r0, [r3, #0]
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    
    MODIFY_REG(DACx->MCR,
 800950e:	6955      	ldr	r5, [r2, #20]
 8009510:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8009512:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 8009516:	ea40 0206 	orr.w	r2, r0, r6
 800951a:	2007      	movs	r0, #7
 800951c:	432a      	orrs	r2, r5
 800951e:	4088      	lsls	r0, r1
 8009520:	408a      	lsls	r2, r1
 8009522:	ea24 0100 	bic.w	r1, r4, r0
  ErrorStatus status = SUCCESS;
 8009526:	2001      	movs	r0, #1
    MODIFY_REG(DACx->MCR,
 8009528:	430a      	orrs	r2, r1
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 800952a:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(DACx->MCR,
 800952c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800952e:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 8009530:	4320      	orrs	r0, r4
 8009532:	f640 75fc 	movw	r5, #4092	@ 0xffc
 8009536:	6894      	ldr	r4, [r2, #8]
 8009538:	408d      	lsls	r5, r1
 800953a:	4320      	orrs	r0, r4
 800953c:	681c      	ldr	r4, [r3, #0]
 800953e:	4088      	lsls	r0, r1
 8009540:	ea24 0405 	bic.w	r4, r4, r5
 8009544:	4320      	orrs	r0, r4
 8009546:	6018      	str	r0, [r3, #0]
 8009548:	e7e1      	b.n	800950e <LL_DAC_Init+0x2e>
    status = ERROR;
 800954a:	2000      	movs	r0, #0
}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop

08009550 <LL_DMA_Init>:
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR,
 8009550:	4b2b      	ldr	r3, [pc, #172]	@ (8009600 <LL_DMA_Init+0xb0>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8009552:	b530      	push	{r4, r5, lr}
 8009554:	f813 e001 	ldrb.w	lr, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8009558:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800955c:	f850 500e 	ldr.w	r5, [r0, lr]
 8009560:	eb00 0c0e 	add.w	ip, r0, lr
 8009564:	4323      	orrs	r3, r4
                        DMA_InitStruct->Mode                    | \
 8009566:	6914      	ldr	r4, [r2, #16]
 8009568:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 800956a:	6954      	ldr	r4, [r2, #20]
 800956c:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 800956e:	6994      	ldr	r4, [r2, #24]
 8009570:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8009572:	69d4      	ldr	r4, [r2, #28]
 8009574:	4323      	orrs	r3, r4
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8009576:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8009578:	4323      	orrs	r3, r4
 800957a:	4c22      	ldr	r4, [pc, #136]	@ (8009604 <LL_DMA_Init+0xb4>)
 800957c:	402c      	ands	r4, r5
 800957e:	4323      	orrs	r3, r4
 8009580:	f840 300e 	str.w	r3, [r0, lr]
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
                        DMA_InitStruct->Priority
                       );

  if (DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 8009584:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009586:	b1c3      	cbz	r3, 80095ba <LL_DMA_Init+0x6a>
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8009588:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800958c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800958e:	f024 0407 	bic.w	r4, r4, #7
 8009592:	432b      	orrs	r3, r5
 8009594:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8009596:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8009598:	f8cc 3014 	str.w	r3, [ip, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 800959c:	f850 300e 	ldr.w	r3, [r0, lr]
 80095a0:	f023 73c0 	bic.w	r3, r3, #25165824	@ 0x1800000
 80095a4:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 80095a6:	6b94      	ldr	r4, [r2, #56]	@ 0x38
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 80095a8:	f840 300e 	str.w	r3, [r0, lr]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 80095ac:	f850 300e 	ldr.w	r3, [r0, lr]
 80095b0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80095b4:	4323      	orrs	r3, r4
 80095b6:	f840 300e 	str.w	r3, [r0, lr]

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 80095ba:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80095bc:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8009610 <LL_DMA_Init+0xc0>
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 80095c0:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80095c4:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80095c6:	4c10      	ldr	r4, [pc, #64]	@ (8009608 <LL_DMA_Init+0xb8>)
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 80095c8:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80095cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80095d0:	440c      	add	r4, r1
 80095d2:	6a55      	ldr	r5, [r2, #36]	@ 0x24
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80095d4:	ea03 0e0e 	and.w	lr, r3, lr
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80095d8:	4b0c      	ldr	r3, [pc, #48]	@ (800960c <LL_DMA_Init+0xbc>)
 80095da:	1ac0      	subs	r0, r0, r3
 80095dc:	bf18      	it	ne
 80095de:	2001      	movne	r0, #1
 80095e0:	0143      	lsls	r3, r0, #5
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80095e2:	6a10      	ldr	r0, [r2, #32]
 80095e4:	ea4e 0000 	orr.w	r0, lr, r0
 80095e8:	f8cc 0004 	str.w	r0, [ip, #4]
   * - PeriphRequest:             DMA_SxCR_CHSEL[3:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Stream, DMA_InitStruct->PeriphRequest);

  return (uint32_t)SUCCESS;
}
 80095ec:	2001      	movs	r0, #1
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80095ee:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80095f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80095f6:	432a      	orrs	r2, r5
 80095f8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80095fc:	bd30      	pop	{r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	0800c53c 	.word	0x0800c53c
 8009604:	fffc801f 	.word	0xfffc801f
 8009608:	10008200 	.word	0x10008200
 800960c:	40020000 	.word	0x40020000
 8009610:	ffff0000 	.word	0xffff0000

08009614 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009618:	680c      	ldr	r4, [r1, #0]
 800961a:	fa94 f2a4 	rbit	r2, r4
 800961e:	fab2 f282 	clz	r2, r2
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009622:	f8d1 8004 	ldr.w	r8, [r1, #4]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009626:	fa34 f502 	lsrs.w	r5, r4, r2
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800962a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800962e:	f000 80a0 	beq.w	8009772 <LL_GPIO_Init+0x15e>
 8009632:	2b01      	cmp	r3, #1
 8009634:	d922      	bls.n	800967c <LL_GPIO_Init+0x68>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009636:	f04f 0e01 	mov.w	lr, #1
 800963a:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin != 0x00000000U)
 800963e:	3201      	adds	r2, #1
 8009640:	4023      	ands	r3, r4
 8009642:	fb03 f303 	mul.w	r3, r3, r3
 8009646:	d013      	beq.n	8009670 <LL_GPIO_Init+0x5c>
 8009648:	f8d0 c000 	ldr.w	ip, [r0]
 800964c:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8009650:	fb08 f503 	mul.w	r5, r8, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009654:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009656:	ea2c 0c07 	bic.w	ip, ip, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800965a:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800965e:	ea45 050c 	orr.w	r5, r5, ip
 8009662:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009664:	68c5      	ldr	r5, [r0, #12]
 8009666:	ea25 0c07 	bic.w	ip, r5, r7
 800966a:	ea43 030c 	orr.w	r3, r3, ip
 800966e:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009670:	fa34 f302 	lsrs.w	r3, r4, r2
 8009674:	d1e1      	bne.n	800963a <LL_GPIO_Init+0x26>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8009676:	2001      	movs	r0, #1
 8009678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800967c:	f1b8 0f02 	cmp.w	r8, #2
 8009680:	d154      	bne.n	800972c <LL_GPIO_Init+0x118>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009682:	2701      	movs	r7, #1
 8009684:	fa07 fc02 	lsl.w	ip, r7, r2
    if (currentpin != 0x00000000U)
 8009688:	ea1c 0c04 	ands.w	ip, ip, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800968c:	fb0c f30c 	mul.w	r3, ip, ip
 8009690:	d033      	beq.n	80096fa <LL_GPIO_Init+0xe6>
 8009692:	6805      	ldr	r5, [r0, #0]
 8009694:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009698:	688e      	ldr	r6, [r1, #8]
        if (currentpin < LL_GPIO_PIN_8)
 800969a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800969e:	ea25 050e 	bic.w	r5, r5, lr
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096a2:	f8d1 8010 	ldr.w	r8, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80096a6:	fb03 f606 	mul.w	r6, r3, r6
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80096aa:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096ae:	fb08 f803 	mul.w	r8, r8, r3
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80096b2:	fb03 f303 	mul.w	r3, r3, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80096b6:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80096b8:	6885      	ldr	r5, [r0, #8]
 80096ba:	ea25 050e 	bic.w	r5, r5, lr
 80096be:	ea46 0605 	orr.w	r6, r6, r5
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80096c2:	ea4f 251c 	mov.w	r5, ip, lsr #8
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80096c6:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096c8:	68c6      	ldr	r6, [r0, #12]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80096ca:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096ce:	ea26 060e 	bic.w	r6, r6, lr
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80096d2:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096d6:	ea46 0608 	orr.w	r6, r6, r8
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80096da:	ebc5 1e05 	rsb	lr, r5, r5, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80096de:	ebc3 1803 	rsb	r8, r3, r3, lsl #4
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80096e2:	60c6      	str	r6, [r0, #12]
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096e4:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80096e6:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80096ea:	fb06 f505 	mul.w	r5, r6, r5
        if (currentpin < LL_GPIO_PIN_8)
 80096ee:	d813      	bhi.n	8009718 <LL_GPIO_Init+0x104>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80096f0:	6a05      	ldr	r5, [r0, #32]
 80096f2:	ea25 0508 	bic.w	r5, r5, r8
 80096f6:	432b      	orrs	r3, r5
 80096f8:	6203      	str	r3, [r0, #32]
    pinpos++;
 80096fa:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096fc:	fa34 f302 	lsrs.w	r3, r4, r2
 8009700:	d1c0      	bne.n	8009684 <LL_GPIO_Init+0x70>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009702:	6843      	ldr	r3, [r0, #4]
 8009704:	68ca      	ldr	r2, [r1, #12]
 8009706:	ea23 0304 	bic.w	r3, r3, r4
 800970a:	fb02 f404 	mul.w	r4, r2, r4
 800970e:	4323      	orrs	r3, r4
 8009710:	6043      	str	r3, [r0, #4]
}
 8009712:	2001      	movs	r0, #1
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009718:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    pinpos++;
 800971a:	3201      	adds	r2, #1
 800971c:	ea23 030e 	bic.w	r3, r3, lr
 8009720:	432b      	orrs	r3, r5
 8009722:	6243      	str	r3, [r0, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009724:	fa34 f302 	lsrs.w	r3, r4, r2
 8009728:	d1ac      	bne.n	8009684 <LL_GPIO_Init+0x70>
 800972a:	e7ea      	b.n	8009702 <LL_GPIO_Init+0xee>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800972c:	2601      	movs	r6, #1
 800972e:	fa06 f302 	lsl.w	r3, r6, r2
    if (currentpin != 0x00000000U)
 8009732:	3201      	adds	r2, #1
 8009734:	4023      	ands	r3, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009736:	fb03 f303 	mul.w	r3, r3, r3
 800973a:	d016      	beq.n	800976a <LL_GPIO_Init+0x156>
 800973c:	6807      	ldr	r7, [r0, #0]
 800973e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009742:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009744:	ea27 070c 	bic.w	r7, r7, ip
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009748:	fb03 f505 	mul.w	r5, r3, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800974c:	431f      	orrs	r7, r3
 800974e:	6007      	str	r7, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009750:	6887      	ldr	r7, [r0, #8]
 8009752:	ea27 070c 	bic.w	r7, r7, ip
 8009756:	433d      	orrs	r5, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009758:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800975a:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800975c:	68c5      	ldr	r5, [r0, #12]
 800975e:	fb07 f303 	mul.w	r3, r7, r3
 8009762:	ea25 050c 	bic.w	r5, r5, ip
 8009766:	432b      	orrs	r3, r5
 8009768:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800976a:	fa34 f302 	lsrs.w	r3, r4, r2
 800976e:	d1de      	bne.n	800972e <LL_GPIO_Init+0x11a>
 8009770:	e7c7      	b.n	8009702 <LL_GPIO_Init+0xee>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009772:	2b01      	cmp	r3, #1
 8009774:	f63f af7f 	bhi.w	8009676 <LL_GPIO_Init+0x62>
 8009778:	e7c3      	b.n	8009702 <LL_GPIO_Init+0xee>
 800977a:	bf00      	nop

0800977c <LL_GPIO_StructInit>:
void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 800977c:	2300      	movs	r3, #0
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 800977e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8009782:	2203      	movs	r2, #3
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8009784:	e9c0 3302 	strd	r3, r3, [r0, #8]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8009788:	e9c0 1200 	strd	r1, r2, [r0]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 800978c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop

08009794 <LL_MDMA_Init>:
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8009794:	4b34      	ldr	r3, [pc, #208]	@ (8009868 <LL_MDMA_Init+0xd4>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: MDMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_MDMA_Init(MDMA_TypeDef *MDMAx, uint32_t Channel, LL_MDMA_InitTypeDef *MDMA_InitStruct)
{
 8009796:	b430      	push	{r4, r5}
 8009798:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   * - DestDataSize:            MDMA_CTCR_DSIZE[7:6] bits
   * - SrcDataSize:             MDMA_CTCR_SSIZE[5:4] bits
   * - DestIncMode:             MDMA_CTCR_DINC[3:2] bits
   * - SrcIncMode:              MDMA_CTCR_SINC[1:0] bits
   */
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 800979c:	6895      	ldr	r5, [r2, #8]
 800979e:	4401      	add	r1, r0
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 80097a0:	e9d2 430c 	ldrd	r4, r3, [r2, #48]	@ 0x30
 80097a4:	ea44 0003 	orr.w	r0, r4, r3
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 80097a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80097aa:	68cc      	ldr	r4, [r1, #12]
 80097ac:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->RequestMode         | \
 80097ae:	68d5      	ldr	r5, [r2, #12]
 80097b0:	f424 44e0 	bic.w	r4, r4, #28672	@ 0x7000
 80097b4:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->TriggerMode         | \
 80097b6:	6c55      	ldr	r5, [r2, #68]	@ 0x44
 80097b8:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PaddingAlignment   | \
 80097ba:	6c95      	ldr	r5, [r2, #72]	@ 0x48
 80097bc:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PackMode            | \
 80097be:	6d15      	ldr	r5, [r2, #80]	@ 0x50
 80097c0:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestBurst           | \
 80097c2:	6d55      	ldr	r5, [r2, #84]	@ 0x54
 80097c4:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->SrctBurst           | \
 80097c6:	6d95      	ldr	r5, [r2, #88]	@ 0x58
 80097c8:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestIncSize         | \
 80097ca:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 80097cc:	432b      	orrs	r3, r5
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 80097ce:	6b95      	ldr	r5, [r2, #56]	@ 0x38
 80097d0:	4328      	orrs	r0, r5
                                         MDMA_InitStruct->SrcIncSize          | \
                                         MDMA_InitStruct->DestDataSize        | \
                                         MDMA_InitStruct->SrcDataSize         | \
 80097d2:	6e95      	ldr	r5, [r2, #104]	@ 0x68
 80097d4:	4320      	orrs	r0, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 80097d6:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 80097d8:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 80097da:	68c8      	ldr	r0, [r1, #12]
 80097dc:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80097e0:	4320      	orrs	r0, r4
 80097e2:	60c8      	str	r0, [r1, #12]
                                         MDMA_InitStruct->DestDataSize        | \
 80097e4:	e9d2 4018 	ldrd	r4, r0, [r2, #96]	@ 0x60
                                         MDMA_InitStruct->SrcIncSize          | \
 80097e8:	4323      	orrs	r3, r4
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 80097ea:	6ed4      	ldr	r4, [r2, #108]	@ 0x6c
                                         MDMA_InitStruct->DestDataSize        | \
 80097ec:	4303      	orrs	r3, r0
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 80097ee:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
                                         MDMA_InitStruct->SrcDataSize         | \
 80097f0:	432b      	orrs	r3, r5
 80097f2:	0480      	lsls	r0, r0, #18
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 80097f4:	4323      	orrs	r3, r4
 80097f6:	f000 70fe 	and.w	r0, r0, #33292288	@ 0x1fc0000
 80097fa:	4303      	orrs	r3, r0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 80097fc:	e9d2 0505 	ldrd	r0, r5, [r2, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 8009800:	610b      	str	r3, [r1, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 8009802:	f3c0 0310 	ubfx	r3, r0, #0, #17
 8009806:	694c      	ldr	r4, [r1, #20]
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRDUM[19] bit
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRSUM[18] bit
   */
  LL_MDMA_ConfigBlkCounters(MDMAx, Channel, MDMA_InitStruct->BlockRepeatCount, MDMA_InitStruct->BlockDataLength);

  LL_MDMA_ConfigBlkRepeatAddrUpdate(MDMAx, Channel, MDMA_InitStruct->BlockRepeatDestAddrUpdateMode | \
 8009808:	69d0      	ldr	r0, [r2, #28]
 800980a:	f404 2c60 	and.w	ip, r4, #917504	@ 0xe0000
 800980e:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009812:	ea43 030c 	orr.w	r3, r3, ip
 8009816:	614b      	str	r3, [r1, #20]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 8009818:	694b      	ldr	r3, [r1, #20]
 800981a:	f423 2c40 	bic.w	ip, r3, #786432	@ 0xc0000
 800981e:	6a13      	ldr	r3, [r2, #32]
 8009820:	4303      	orrs	r3, r0
 8009822:	ea43 030c 	orr.w	r3, r3, ip
 8009826:	614b      	str	r3, [r1, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 8009828:	6a55      	ldr	r5, [r2, #36]	@ 0x24

  /*-------------------------- MDMAx CSAR Configuration --------------------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:     MDMA_CSAR_SAR[31:0] bits
   */
  LL_MDMA_SetSourceAddress(MDMAx, Channel, MDMA_InitStruct->SrcAddress);
 800982a:	6814      	ldr	r4, [r2, #0]
 800982c:	8d13      	ldrh	r3, [r2, #40]	@ 0x28

  /*-------------------------- MDMAx CDAR Configuration --------------------------
   * Configure the Transfer destination address with parameter :
   * - DstAddress:     MDMA_CDAR_DAR[31:0] bits
   */
  LL_MDMA_SetDestinationAddress(MDMAx, Channel, MDMA_InitStruct->DstAddress);
 800982e:	6850      	ldr	r0, [r2, #4]
 8009830:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 8009834:	618c      	str	r4, [r1, #24]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8009836:	61c8      	str	r0, [r1, #28]

  /*-------------------------- MDMAx CLAR Configuration --------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkAddress:     MDMA_CLAR_LAR[31:0] bits
   */
  LL_MDMA_SetLinkAddress(MDMAx, Channel, MDMA_InitStruct->LinkAddress);
 8009838:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 800983a:	620b      	str	r3, [r1, #32]
   * Configure the Transfer HW trigger and bus selection with parameter :
   * - DestBus:     MDMA_TBR_DBUS[17] bit
   * - SrcBus:      MDMA_TBR_SBUS[16] bit
   * - HWTrigger:   MDMA_TBR_TSEL[5:0] bits
   */
  LL_MDMA_ConfigBusSelection(MDMAx, Channel, MDMA_InitStruct->DestBus | MDMA_InitStruct->SrcBus);
 800983c:	e9d2 341c 	ldrd	r3, r4, [r2, #112]	@ 0x70
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CLAR, LinkAddress);
 8009840:	6248      	str	r0, [r1, #36]	@ 0x24
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 8009842:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8009844:	4323      	orrs	r3, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 8009846:	6914      	ldr	r4, [r2, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 8009848:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
 800984c:	4303      	orrs	r3, r0
   * - MaskData:     MDMA_CMDR_MDR[31:0] bits
   */
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);

  return (uint32_t)SUCCESS;
}
 800984e:	2001      	movs	r0, #1
 8009850:	628b      	str	r3, [r1, #40]	@ 0x28
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 8009852:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009854:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009858:	4323      	orrs	r3, r4
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);
 800985a:	e9d2 421e 	ldrd	r4, r2, [r2, #120]	@ 0x78
 800985e:	628b      	str	r3, [r1, #40]	@ 0x28
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMAR, MaskAddress);
 8009860:	630c      	str	r4, [r1, #48]	@ 0x30
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMDR, MaskData);
 8009862:	634a      	str	r2, [r1, #52]	@ 0x34
}
 8009864:	bc30      	pop	{r4, r5}
 8009866:	4770      	bx	lr
 8009868:	0800c544 	.word	0x0800c544

0800986c <LL_RCC_GetPLL1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800986c:	4a5e      	ldr	r2, [pc, #376]	@ (80099e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 800986e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009870:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();

  switch (pllsource)
 8009874:	2b01      	cmp	r3, #1
{
 8009876:	b410      	push	{r4}
  switch (pllsource)
 8009878:	f000 80aa 	beq.w	80099d0 <LL_RCC_GetPLL1ClockFreq+0x164>
 800987c:	2b02      	cmp	r3, #2
 800987e:	d00d      	beq.n	800989c <LL_RCC_GetPLL1ClockFreq+0x30>
 8009880:	2b00      	cmp	r3, #0
 8009882:	f040 80ae 	bne.w	80099e2 <LL_RCC_GetPLL1ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009886:	6813      	ldr	r3, [r2, #0]
 8009888:	f013 0c04 	ands.w	ip, r3, #4
 800988c:	d00e      	beq.n	80098ac <LL_RCC_GetPLL1ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800988e:	6812      	ldr	r2, [r2, #0]
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009890:	4b56      	ldr	r3, [pc, #344]	@ (80099ec <LL_RCC_GetPLL1ClockFreq+0x180>)
 8009892:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009896:	fa23 fc02 	lsr.w	ip, r3, r2
 800989a:	e007      	b.n	80098ac <LL_RCC_GetPLL1ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 800989c:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800989e:	4b54      	ldr	r3, [pc, #336]	@ (80099f0 <LL_RCC_GetPLL1ClockFreq+0x184>)
 80098a0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80098a4:	bf14      	ite	ne
 80098a6:	469c      	movne	ip, r3
 80098a8:	f04f 0c00 	moveq.w	ip, #0
    default:
      /* PLL clock disabled */
      break;
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80098ac:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 80098ae:	4c4e      	ldr	r4, [pc, #312]	@ (80099e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80098b0:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
  PLL_Clocks->PLL_R_Frequency = 0U;
 80098b4:	6083      	str	r3, [r0, #8]
 80098b6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 80098b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 80098ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 80098bc:	f3c2 1205 	ubfx	r2, r2, #4, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 80098c0:	f013 0301 	ands.w	r3, r3, #1
 80098c4:	d002      	beq.n	80098cc <LL_RCC_GetPLL1ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80098c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098c8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
  {
    fracn = LL_RCC_PLL1_GetFRACN();
  }

  if (m != 0U)
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d07c      	beq.n	80099ca <LL_RCC_GetPLL1ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 80098d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80098d4:	3101      	adds	r1, #1
 80098d6:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 80098da:	4943      	ldr	r1, [pc, #268]	@ (80099e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80098dc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80098de:	03e4      	lsls	r4, r4, #15
 80098e0:	d523      	bpl.n	800992a <LL_RCC_GetPLL1ClockFreq+0xbe>
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 80098ea:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80098ec:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80098f0:	ee07 ca90 	vmov	s15, ip
 80098f4:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 80099f4 <LL_RCC_GetPLL1ClockFreq+0x188>
 80098f8:	f3c1 2146 	ubfx	r1, r1, #9, #7
 80098fc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009900:	ee07 2a90 	vmov	s15, r2
 8009904:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009908:	3101      	adds	r1, #1
 800990a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800990e:	ee85 6aa7 	vdiv.f32	s12, s11, s15

  freq = freq/(float_t)PQR;
 8009912:	ee07 1a90 	vmov	s15, r1
 8009916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800991a:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 800991e:	eec6 6a27 	vdiv.f32	s13, s12, s15

  return (uint32_t)freq;
 8009922:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009926:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 800992a:	492f      	ldr	r1, [pc, #188]	@ (80099e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 800992c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800992e:	03a4      	lsls	r4, r4, #14
 8009930:	d523      	bpl.n	800997a <LL_RCC_GetPLL1ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800993a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800993c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009940:	ee07 ca90 	vmov	s15, ip
 8009944:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 80099f4 <LL_RCC_GetPLL1ClockFreq+0x188>
 8009948:	f3c1 4106 	ubfx	r1, r1, #16, #7
 800994c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009950:	ee07 2a90 	vmov	s15, r2
 8009954:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009958:	3101      	adds	r1, #1
 800995a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800995e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 8009962:	ee07 1a90 	vmov	s15, r1
 8009966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800996a:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 800996e:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 8009972:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009976:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 800997a:	491b      	ldr	r1, [pc, #108]	@ (80099e8 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 800997c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800997e:	0364      	lsls	r4, r4, #13
 8009980:	d523      	bpl.n	80099ca <LL_RCC_GetPLL1ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009982:	ee07 ca90 	vmov	s15, ip
 8009986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800998a:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 80099f4 <LL_RCC_GetPLL1ClockFreq+0x188>
 800998e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009992:	ee07 2a90 	vmov	s15, r2
 8009996:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800999a:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800999e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80099a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099a4:	eec6 5a86 	vdiv.f32	s11, s13, s12
 80099a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099ac:	3301      	adds	r3, #1
 80099ae:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80099ba:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 80099be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 80099c2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80099c6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80099ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ce:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 80099d0:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80099d2:	4b09      	ldr	r3, [pc, #36]	@ (80099f8 <LL_RCC_GetPLL1ClockFreq+0x18c>)
 80099d4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80099d8:	bf14      	ite	ne
 80099da:	469c      	movne	ip, r3
 80099dc:	f04f 0c00 	moveq.w	ip, #0
 80099e0:	e764      	b.n	80098ac <LL_RCC_GetPLL1ClockFreq+0x40>
 80099e2:	f04f 0c00 	mov.w	ip, #0
 80099e6:	e761      	b.n	80098ac <LL_RCC_GetPLL1ClockFreq+0x40>
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	00f42400 	.word	0x00f42400
 80099f4:	39000000 	.word	0x39000000
 80099f8:	003d0900 	.word	0x003d0900

080099fc <LL_RCC_GetPLL2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80099fc:	4a5e      	ldr	r2, [pc, #376]	@ (8009b78 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80099fe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009a00:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8009a04:	2b01      	cmp	r3, #1
{
 8009a06:	b410      	push	{r4}
  switch (pllsource)
 8009a08:	f000 80aa 	beq.w	8009b60 <LL_RCC_GetPLL2ClockFreq+0x164>
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d00d      	beq.n	8009a2c <LL_RCC_GetPLL2ClockFreq+0x30>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 80ae 	bne.w	8009b72 <LL_RCC_GetPLL2ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	f013 0c04 	ands.w	ip, r3, #4
 8009a1c:	d00e      	beq.n	8009a3c <LL_RCC_GetPLL2ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009a1e:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009a20:	4b56      	ldr	r3, [pc, #344]	@ (8009b7c <LL_RCC_GetPLL2ClockFreq+0x180>)
 8009a22:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009a26:	fa23 fc02 	lsr.w	ip, r3, r2
 8009a2a:	e007      	b.n	8009a3c <LL_RCC_GetPLL2ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8009a2c:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009a2e:	4b54      	ldr	r3, [pc, #336]	@ (8009b80 <LL_RCC_GetPLL2ClockFreq+0x184>)
 8009a30:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009a34:	bf14      	ite	ne
 8009a36:	469c      	movne	ip, r3
 8009a38:	f04f 0c00 	moveq.w	ip, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009a3c:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8009a3e:	4c4e      	ldr	r4, [pc, #312]	@ (8009b78 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009a40:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009a44:	6083      	str	r3, [r0, #8]
 8009a46:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8009a48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 8009a4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8009a4c:	f3c2 3205 	ubfx	r2, r2, #12, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 8009a50:	f013 0310 	ands.w	r3, r3, #16
 8009a54:	d002      	beq.n	8009a5c <LL_RCC_GetPLL2ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8009a56:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009a58:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (m != 0U)
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	d07c      	beq.n	8009b5a <LL_RCC_GetPLL2ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8009a60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009a64:	3101      	adds	r1, #1
 8009a66:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 8009a6a:	4943      	ldr	r1, [pc, #268]	@ (8009b78 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009a6c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009a6e:	0324      	lsls	r4, r4, #12
 8009a70:	d523      	bpl.n	8009aba <LL_RCC_GetPLL2ClockFreq+0xbe>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8009a7a:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8009a7c:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009a80:	ee07 ca90 	vmov	s15, ip
 8009a84:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 8009b84 <LL_RCC_GetPLL2ClockFreq+0x188>
 8009a88:	f3c1 2146 	ubfx	r1, r1, #9, #7
 8009a8c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009a90:	ee07 2a90 	vmov	s15, r2
 8009a94:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009a98:	3101      	adds	r1, #1
 8009a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a9e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 8009aa2:	ee07 1a90 	vmov	s15, r1
 8009aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009aaa:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8009aae:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 8009ab2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009ab6:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 8009aba:	492f      	ldr	r1, [pc, #188]	@ (8009b78 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009abc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009abe:	02e4      	lsls	r4, r4, #11
 8009ac0:	d523      	bpl.n	8009b0a <LL_RCC_GetPLL2ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8009aca:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8009acc:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009ad0:	ee07 ca90 	vmov	s15, ip
 8009ad4:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8009b84 <LL_RCC_GetPLL2ClockFreq+0x188>
 8009ad8:	f3c1 4106 	ubfx	r1, r1, #16, #7
 8009adc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009ae0:	ee07 2a90 	vmov	s15, r2
 8009ae4:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009ae8:	3101      	adds	r1, #1
 8009aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aee:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 8009af2:	ee07 1a90 	vmov	s15, r1
 8009af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009afa:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8009afe:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 8009b02:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009b06:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 8009b0a:	491b      	ldr	r1, [pc, #108]	@ (8009b78 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009b0c:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009b0e:	02a4      	lsls	r4, r4, #10
 8009b10:	d523      	bpl.n	8009b5a <LL_RCC_GetPLL2ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b12:	ee07 ca90 	vmov	s15, ip
 8009b16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b1a:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 8009b84 <LL_RCC_GetPLL2ClockFreq+0x188>
 8009b1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b22:	ee07 2a90 	vmov	s15, r2
 8009b26:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009b2a:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8009b2e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8009b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b34:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8009b38:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b4a:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 8009b52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b56:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b5e:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009b60:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009b62:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <LL_RCC_GetPLL2ClockFreq+0x18c>)
 8009b64:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009b68:	bf14      	ite	ne
 8009b6a:	469c      	movne	ip, r3
 8009b6c:	f04f 0c00 	moveq.w	ip, #0
 8009b70:	e764      	b.n	8009a3c <LL_RCC_GetPLL2ClockFreq+0x40>
 8009b72:	f04f 0c00 	mov.w	ip, #0
 8009b76:	e761      	b.n	8009a3c <LL_RCC_GetPLL2ClockFreq+0x40>
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	03d09000 	.word	0x03d09000
 8009b80:	00f42400 	.word	0x00f42400
 8009b84:	39000000 	.word	0x39000000
 8009b88:	003d0900 	.word	0x003d0900

08009b8c <LL_RCC_GetPLL3ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8009b8c:	4a62      	ldr	r2, [pc, #392]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009b8e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009b90:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8009b94:	2b01      	cmp	r3, #1
{
 8009b96:	b410      	push	{r4}
  switch (pllsource)
 8009b98:	f000 80a0 	beq.w	8009cdc <LL_RCC_GetPLL3ClockFreq+0x150>
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f000 8096 	beq.w	8009cce <LL_RCC_GetPLL3ClockFreq+0x142>
 8009ba2:	b91b      	cbnz	r3, 8009bac <LL_RCC_GetPLL3ClockFreq+0x20>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009ba4:	6813      	ldr	r3, [r2, #0]
 8009ba6:	075c      	lsls	r4, r3, #29
 8009ba8:	f100 80ae 	bmi.w	8009d08 <LL_RCC_GetPLL3ClockFreq+0x17c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009bac:	4c5a      	ldr	r4, [pc, #360]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009bae:	2200      	movs	r2, #0
 8009bb0:	e9c0 2200 	strd	r2, r2, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009bb4:	6082      	str	r2, [r0, #8]
 8009bb6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009bb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009bba:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8009bbc:	05e4      	lsls	r4, r4, #23
 8009bbe:	f140 8083 	bpl.w	8009cc8 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009bc2:	f3c1 5105 	ubfx	r1, r1, #20, #6
 8009bc6:	ee07 2a90 	vmov	s15, r2
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8009bca:	4c53      	ldr	r4, [pc, #332]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009bcc:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 8009bce:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  if ((m != 0U) && (pllinputfreq != 0U))
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d078      	beq.n	8009cc8 <LL_RCC_GetPLL3ClockFreq+0x13c>
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d076      	beq.n	8009cc8 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 8009bde:	4a4e      	ldr	r2, [pc, #312]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009be0:	3301      	adds	r3, #1
 8009be2:	ee06 3a90 	vmov	s13, r3
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 8009be6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009be8:	025b      	lsls	r3, r3, #9
 8009bea:	d521      	bpl.n	8009c30 <LL_RCC_GetPLL3ClockFreq+0xa4>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009bec:	ee07 4a10 	vmov	s14, r4
 8009bf0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009bf4:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8009bf8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009bfa:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 8009bfe:	ee07 1a10 	vmov	s14, r1
 8009c02:	eddf 4a46 	vldr	s9, [pc, #280]	@ 8009d1c <LL_RCC_GetPLL3ClockFreq+0x190>
 8009c06:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009c0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c0e:	eea4 6a24 	vfma.f32	s12, s8, s9
 8009c12:	3301      	adds	r3, #1
 8009c14:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 8009c18:	ee07 3a10 	vmov	s14, r3
 8009c1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009c20:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 8009c24:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 8009c28:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8009c2c:	ed80 6a00 	vstr	s12, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 8009c30:	4b39      	ldr	r3, [pc, #228]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c34:	0212      	lsls	r2, r2, #8
 8009c36:	d521      	bpl.n	8009c7c <LL_RCC_GetPLL3ClockFreq+0xf0>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009c38:	ee07 4a10 	vmov	s14, r4
 8009c3c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009c40:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8009c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c46:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 8009c4a:	ee07 1a10 	vmov	s14, r1
 8009c4e:	eddf 4a33 	vldr	s9, [pc, #204]	@ 8009d1c <LL_RCC_GetPLL3ClockFreq+0x190>
 8009c52:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009c56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c5a:	eea4 6a24 	vfma.f32	s12, s8, s9
 8009c5e:	3301      	adds	r3, #1
 8009c60:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 8009c64:	ee07 3a10 	vmov	s14, r3
 8009c68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009c6c:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 8009c70:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 8009c74:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8009c78:	ed80 6a01 	vstr	s12, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 8009c7c:	4b26      	ldr	r3, [pc, #152]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c80:	01d2      	lsls	r2, r2, #7
 8009c82:	d521      	bpl.n	8009cc8 <LL_RCC_GetPLL3ClockFreq+0x13c>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009c84:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009c88:	ee07 1a90 	vmov	s15, r1
 8009c8c:	ee07 4a10 	vmov	s14, r4
 8009c90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c9e:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8009d1c <LL_RCC_GetPLL3ClockFreq+0x190>
 8009ca2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009ca6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009caa:	3301      	adds	r3, #1
  freq = freq/(float_t)PQR;
 8009cac:	ee07 3a90 	vmov	s15, r3
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009cb0:	eee7 6a05 	vfma.f32	s13, s14, s10
  freq = freq/(float_t)PQR;
 8009cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009cb8:	ee65 6aa6 	vmul.f32	s13, s11, s13
  freq = freq/(float_t)PQR;
 8009cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 8009cc0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009cc4:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ccc:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	039a      	lsls	r2, r3, #14
 8009cd2:	f57f af6b 	bpl.w	8009bac <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = HSE_VALUE;
 8009cd6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009d20 <LL_RCC_GetPLL3ClockFreq+0x194>
 8009cda:	e005      	b.n	8009ce8 <LL_RCC_GetPLL3ClockFreq+0x15c>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009cdc:	6813      	ldr	r3, [r2, #0]
 8009cde:	05d9      	lsls	r1, r3, #23
 8009ce0:	f57f af64 	bpl.w	8009bac <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = CSI_VALUE;
 8009ce4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009d24 <LL_RCC_GetPLL3ClockFreq+0x198>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8009d18 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009cf0:	6083      	str	r3, [r0, #8]
 8009cf2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009cf4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009cf6:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009cf8:	f3c1 5105 	ubfx	r1, r1, #20, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f414 7480 	ands.w	r4, r4, #256	@ 0x100
 8009d02:	f43f af66 	beq.w	8009bd2 <LL_RCC_GetPLL3ClockFreq+0x46>
 8009d06:	e760      	b.n	8009bca <LL_RCC_GetPLL3ClockFreq+0x3e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009d08:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009d0a:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <LL_RCC_GetPLL3ClockFreq+0x19c>)
 8009d0c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009d10:	40d3      	lsrs	r3, r2
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	e7e7      	b.n	8009ce8 <LL_RCC_GetPLL3ClockFreq+0x15c>
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	39000000 	.word	0x39000000
 8009d20:	00f42400 	.word	0x00f42400
 8009d24:	003d0900 	.word	0x003d0900
 8009d28:	03d09000 	.word	0x03d09000

08009d2c <LL_RCC_GetUSARTClockFreq>:
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << CONFIG_SHIFT) );
 8009d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8009ee8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8009d2e:	f3c0 2104 	ubfx	r1, r0, #8, #5
 8009d32:	0e03      	lsrs	r3, r0, #24
 8009d34:	fa52 f280 	uxtab	r2, r2, r0
 8009d38:	408b      	lsls	r3, r1
 8009d3a:	f8d2 244c 	ldr.w	r2, [r2, #1100]	@ 0x44c
 8009d3e:	4013      	ands	r3, r2
 8009d40:	40cb      	lsrs	r3, r1
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009d42:	b510      	push	{r4, lr}
 8009d44:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009d48:	4c68      	ldr	r4, [pc, #416]	@ (8009eec <LL_RCC_GetUSARTClockFreq+0x1c0>)
{
 8009d4a:	b084      	sub	sp, #16
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	f000 80a0 	beq.w	8009e92 <LL_RCC_GetUSARTClockFreq+0x166>
 8009d52:	d81a      	bhi.n	8009d8a <LL_RCC_GetUSARTClockFreq+0x5e>
 8009d54:	4b66      	ldr	r3, [pc, #408]	@ (8009ef0 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8009d56:	4298      	cmp	r0, r3
 8009d58:	d077      	beq.n	8009e4a <LL_RCC_GetUSARTClockFreq+0x11e>
 8009d5a:	d940      	bls.n	8009dde <LL_RCC_GetUSARTClockFreq+0xb2>
 8009d5c:	4b65      	ldr	r3, [pc, #404]	@ (8009ef4 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	d009      	beq.n	8009d76 <LL_RCC_GetUSARTClockFreq+0x4a>
 8009d62:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8009d66:	4298      	cmp	r0, r3
 8009d68:	f000 8093 	beq.w	8009e92 <LL_RCC_GetUSARTClockFreq+0x166>
 8009d6c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009d70:	4298      	cmp	r0, r3
 8009d72:	f040 808b 	bne.w	8009e8c <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 8009d76:	4b60      	ldr	r3, [pc, #384]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009d7e:	d01e      	beq.n	8009dbe <LL_RCC_GetUSARTClockFreq+0x92>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8009d80:	a801      	add	r0, sp, #4
 8009d82:	f7ff fe3b 	bl	80099fc <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009d86:	9802      	ldr	r0, [sp, #8]
 8009d88:	e019      	b.n	8009dbe <LL_RCC_GetUSARTClockFreq+0x92>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8009efc <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	d053      	beq.n	8009e38 <LL_RCC_GetUSARTClockFreq+0x10c>
 8009d90:	d817      	bhi.n	8009dc2 <LL_RCC_GetUSARTClockFreq+0x96>
 8009d92:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009d96:	4298      	cmp	r0, r3
 8009d98:	d007      	beq.n	8009daa <LL_RCC_GetUSARTClockFreq+0x7e>
 8009d9a:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8009d9e:	4298      	cmp	r0, r3
 8009da0:	d04a      	beq.n	8009e38 <LL_RCC_GetUSARTClockFreq+0x10c>
 8009da2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009da6:	4298      	cmp	r0, r3
 8009da8:	d170      	bne.n	8009e8c <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009daa:	4b53      	ldr	r3, [pc, #332]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	f010 0004 	ands.w	r0, r0, #4
 8009db2:	d004      	beq.n	8009dbe <LL_RCC_GetUSARTClockFreq+0x92>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009db4:	681b      	ldr	r3, [r3, #0]

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009db6:	4852      	ldr	r0, [pc, #328]	@ (8009f00 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009db8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009dbc:	40d8      	lsrs	r0, r3
      /* Kernel clock disabled */
      break;
  }

  return usart_frequency;
}
 8009dbe:	b004      	add	sp, #16
 8009dc0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009dc2:	4b50      	ldr	r3, [pc, #320]	@ (8009f04 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	d003      	beq.n	8009dd0 <LL_RCC_GetUSARTClockFreq+0xa4>
 8009dc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8009dcc:	4298      	cmp	r0, r3
 8009dce:	d15d      	bne.n	8009e8c <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 8009dd0:	4b49      	ldr	r3, [pc, #292]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009dd2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009dd4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8009dd8:	03c0      	lsls	r0, r0, #15
}
 8009dda:	b004      	add	sp, #16
 8009ddc:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009dde:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8009de2:	4298      	cmp	r0, r3
 8009de4:	d152      	bne.n	8009e8c <LL_RCC_GetUSARTClockFreq+0x160>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009de6:	4b44      	ldr	r3, [pc, #272]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
{
  uint32_t frequency = 0U;
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009dee:	2b18      	cmp	r3, #24
 8009df0:	d80e      	bhi.n	8009e10 <LL_RCC_GetUSARTClockFreq+0xe4>
 8009df2:	e8df f003 	tbb	[pc, r3]
 8009df6:	0d6d      	.short	0x0d6d
 8009df8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009dfc:	0d760d0d 	.word	0x0d760d0d
 8009e00:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e04:	0d6b0d0d 	.word	0x0d6b0d0d
 8009e08:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e0c:	0d0d      	.short	0x0d0d
 8009e0e:	66          	.byte	0x66
 8009e0f:	00          	.byte	0x00
  uint32_t frequency = 0U;
 8009e10:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8009e12:	4b39      	ldr	r3, [pc, #228]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009e14:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009e16:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8009e18:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009e1a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009e1e:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009e22:	f3c3 1302 	ubfx	r3, r3, #4, #3
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009e26:	4a38      	ldr	r2, [pc, #224]	@ (8009f08 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8009e28:	5d14      	ldrb	r4, [r2, r4]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009e2a:	5c51      	ldrb	r1, [r2, r1]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009e2c:	40e0      	lsrs	r0, r4
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009e2e:	5cd3      	ldrb	r3, [r2, r3]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009e30:	40c8      	lsrs	r0, r1
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009e32:	40d8      	lsrs	r0, r3
}
 8009e34:	b004      	add	sp, #16
 8009e36:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009e38:	4b2f      	ldr	r3, [pc, #188]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009e3a:	4834      	ldr	r0, [pc, #208]	@ (8009f0c <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009e42:	bf08      	it	eq
 8009e44:	2000      	moveq	r0, #0
}
 8009e46:	b004      	add	sp, #16
 8009e48:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
  switch (LL_RCC_GetSysClkSource())
 8009e52:	2b18      	cmp	r3, #24
 8009e54:	d80e      	bhi.n	8009e74 <LL_RCC_GetUSARTClockFreq+0x148>
 8009e56:	e8df f003 	tbb	[pc, r3]
 8009e5a:	0d2d      	.short	0x0d2d
 8009e5c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e60:	0d420d0d 	.word	0x0d420d0d
 8009e64:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e68:	0d2b0d0d 	.word	0x0d2b0d0d
 8009e6c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e70:	0d0d      	.short	0x0d0d
 8009e72:	26          	.byte	0x26
 8009e73:	00          	.byte	0x00
  uint32_t frequency = 0U;
 8009e74:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8009e76:	4b20      	ldr	r3, [pc, #128]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009e78:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009e7a:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8009e7c:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009e7e:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009e82:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009e86:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009e8a:	e7cc      	b.n	8009e26 <LL_RCC_GetUSARTClockFreq+0xfa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009e8c:	2000      	movs	r0, #0
}
 8009e8e:	b004      	add	sp, #16
 8009e90:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 8009e92:	4b19      	ldr	r3, [pc, #100]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009e9a:	d090      	beq.n	8009dbe <LL_RCC_GetUSARTClockFreq+0x92>
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009e9c:	a801      	add	r0, sp, #4
 8009e9e:	f7ff fe75 	bl	8009b8c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009ea2:	9802      	ldr	r0, [sp, #8]
 8009ea4:	e78b      	b.n	8009dbe <LL_RCC_GetUSARTClockFreq+0x92>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8009ea6:	a801      	add	r0, sp, #4
 8009ea8:	f7ff fce0 	bl	800986c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8009eac:	9801      	ldr	r0, [sp, #4]
      break;
 8009eae:	e7e2      	b.n	8009e76 <LL_RCC_GetUSARTClockFreq+0x14a>
      frequency = HSE_VALUE;
 8009eb0:	4817      	ldr	r0, [pc, #92]	@ (8009f10 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 8009eb2:	e7e0      	b.n	8009e76 <LL_RCC_GetUSARTClockFreq+0x14a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009eb4:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009eb6:	4812      	ldr	r0, [pc, #72]	@ (8009f00 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009ebe:	40d8      	lsrs	r0, r3
  return frequency;
 8009ec0:	e7d9      	b.n	8009e76 <LL_RCC_GetUSARTClockFreq+0x14a>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8009ec2:	a801      	add	r0, sp, #4
 8009ec4:	f7ff fcd2 	bl	800986c <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8009ec8:	9801      	ldr	r0, [sp, #4]
      break;
 8009eca:	e7a2      	b.n	8009e12 <LL_RCC_GetUSARTClockFreq+0xe6>
      frequency = HSE_VALUE;
 8009ecc:	4810      	ldr	r0, [pc, #64]	@ (8009f10 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 8009ece:	e7a0      	b.n	8009e12 <LL_RCC_GetUSARTClockFreq+0xe6>
 8009ed0:	4b09      	ldr	r3, [pc, #36]	@ (8009ef8 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009ed2:	480b      	ldr	r0, [pc, #44]	@ (8009f00 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009eda:	40d8      	lsrs	r0, r3
  return frequency;
 8009edc:	e799      	b.n	8009e12 <LL_RCC_GetUSARTClockFreq+0xe6>
  switch (LL_RCC_GetSysClkSource())
 8009ede:	480b      	ldr	r0, [pc, #44]	@ (8009f0c <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009ee0:	e7c9      	b.n	8009e76 <LL_RCC_GetUSARTClockFreq+0x14a>
 8009ee2:	480a      	ldr	r0, [pc, #40]	@ (8009f0c <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009ee4:	e795      	b.n	8009e12 <LL_RCC_GetUSARTClockFreq+0xe6>
 8009ee6:	bf00      	nop
 8009ee8:	58024000 	.word	0x58024000
 8009eec:	07020308 	.word	0x07020308
 8009ef0:	07000308 	.word	0x07000308
 8009ef4:	07010308 	.word	0x07010308
 8009ef8:	58024400 	.word	0x58024400
 8009efc:	07040308 	.word	0x07040308
 8009f00:	03d09000 	.word	0x03d09000
 8009f04:	07050008 	.word	0x07050008
 8009f08:	0800c584 	.word	0x0800c584
 8009f0c:	003d0900 	.word	0x003d0900
 8009f10:	00f42400 	.word	0x00f42400

08009f14 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8009f14:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f16:	4a2d      	ldr	r2, [pc, #180]	@ (8009fcc <LL_TIM_Init+0xb8>)
 8009f18:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009f1c:	4c2c      	ldr	r4, [pc, #176]	@ (8009fd0 <LL_TIM_Init+0xbc>)
 8009f1e:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009f22:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f24:	eba0 0404 	sub.w	r4, r0, r4

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009f28:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f2a:	fab2 f282 	clz	r2, r2

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009f2e:	880d      	ldrh	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f30:	fab4 f484 	clz	r4, r4
 8009f34:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8009f38:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009f3c:	d01a      	beq.n	8009f74 <LL_TIM_Init+0x60>
 8009f3e:	b9ca      	cbnz	r2, 8009f74 <LL_TIM_Init+0x60>
 8009f40:	4f24      	ldr	r7, [pc, #144]	@ (8009fd4 <LL_TIM_Init+0xc0>)
 8009f42:	42b8      	cmp	r0, r7
 8009f44:	d02c      	beq.n	8009fa0 <LL_TIM_Init+0x8c>
 8009f46:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009f4a:	42b8      	cmp	r0, r7
 8009f4c:	d028      	beq.n	8009fa0 <LL_TIM_Init+0x8c>
 8009f4e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009f52:	42b8      	cmp	r0, r7
 8009f54:	d00e      	beq.n	8009f74 <LL_TIM_Init+0x60>
 8009f56:	b96c      	cbnz	r4, 8009f74 <LL_TIM_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f58:	4c1f      	ldr	r4, [pc, #124]	@ (8009fd8 <LL_TIM_Init+0xc4>)
 8009f5a:	4a20      	ldr	r2, [pc, #128]	@ (8009fdc <LL_TIM_Init+0xc8>)
 8009f5c:	4290      	cmp	r0, r2
 8009f5e:	bf18      	it	ne
 8009f60:	42a0      	cmpne	r0, r4
 8009f62:	d021      	beq.n	8009fa8 <LL_TIM_Init+0x94>
 8009f64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f68:	4290      	cmp	r0, r2
 8009f6a:	d01d      	beq.n	8009fa8 <LL_TIM_Init+0x94>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009f6c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009f6e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009f70:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f72:	e00e      	b.n	8009f92 <LL_TIM_Init+0x7e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009f74:	684f      	ldr	r7, [r1, #4]
 8009f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7a:	433b      	orrs	r3, r7
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009f7c:	68cf      	ldr	r7, [r1, #12]
 8009f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f82:	433b      	orrs	r3, r7
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009f84:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009f86:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009f88:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f8a:	b902      	cbnz	r2, 8009f8e <LL_TIM_Init+0x7a>
 8009f8c:	b19c      	cbz	r4, 8009fb6 <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009f8e:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009f90:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009f92:	6943      	ldr	r3, [r0, #20]
 8009f94:	f043 0301 	orr.w	r3, r3, #1
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8009f98:	bcf0      	pop	{r4, r5, r6, r7}
 8009f9a:	6143      	str	r3, [r0, #20]
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa4:	684a      	ldr	r2, [r1, #4]
 8009fa6:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009fa8:	68ca      	ldr	r2, [r1, #12]
 8009faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fae:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009fb0:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009fb2:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009fb4:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fb6:	4a08      	ldr	r2, [pc, #32]	@ (8009fd8 <LL_TIM_Init+0xc4>)
 8009fb8:	4b08      	ldr	r3, [pc, #32]	@ (8009fdc <LL_TIM_Init+0xc8>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fba:	4298      	cmp	r0, r3
 8009fbc:	bf18      	it	ne
 8009fbe:	4290      	cmpne	r0, r2
 8009fc0:	d0e5      	beq.n	8009f8e <LL_TIM_Init+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fc6:	4298      	cmp	r0, r3
 8009fc8:	d0e1      	beq.n	8009f8e <LL_TIM_Init+0x7a>
 8009fca:	e7e2      	b.n	8009f92 <LL_TIM_Init+0x7e>
 8009fcc:	40010000 	.word	0x40010000
 8009fd0:	40010400 	.word	0x40010400
 8009fd4:	40000400 	.word	0x40000400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40014400 	.word	0x40014400

08009fe0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4604      	mov	r4, r0
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009fe4:	6800      	ldr	r0, [r0, #0]
 8009fe6:	f010 0001 	ands.w	r0, r0, #1
 8009fea:	d13c      	bne.n	800a066 <LL_USART_Init+0x86>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009fec:	690a      	ldr	r2, [r1, #16]
 8009fee:	460d      	mov	r5, r1
 8009ff0:	688b      	ldr	r3, [r1, #8]
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	696a      	ldr	r2, [r5, #20]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	69ea      	ldr	r2, [r5, #28]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	4a34      	ldr	r2, [pc, #208]	@ (800a0d0 <LL_USART_Init+0xf0>)
 800a000:	400a      	ands	r2, r1
 800a002:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a004:	68ea      	ldr	r2, [r5, #12]
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	6863      	ldr	r3, [r4, #4]
 800a00a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a00e:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a010:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a012:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a014:	68a3      	ldr	r3, [r4, #8]
 800a016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a01a:	4313      	orrs	r3, r2
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a01c:	4a2d      	ldr	r2, [pc, #180]	@ (800a0d4 <LL_USART_Init+0xf4>)
 800a01e:	4294      	cmp	r4, r2
 800a020:	60a3      	str	r3, [r4, #8]
 800a022:	d031      	beq.n	800a088 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800a024:	4b2c      	ldr	r3, [pc, #176]	@ (800a0d8 <LL_USART_Init+0xf8>)
 800a026:	429c      	cmp	r4, r3
 800a028:	d01f      	beq.n	800a06a <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART3)
 800a02a:	4b2c      	ldr	r3, [pc, #176]	@ (800a0dc <LL_USART_Init+0xfc>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	d01c      	beq.n	800a06a <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART4)
 800a030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a034:	429c      	cmp	r4, r3
 800a036:	d018      	beq.n	800a06a <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART5)
 800a038:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a03c:	429c      	cmp	r4, r3
 800a03e:	d014      	beq.n	800a06a <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART6)
 800a040:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 800a044:	429c      	cmp	r4, r3
 800a046:	d01f      	beq.n	800a088 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == UART7)
 800a048:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 800a04c:	429c      	cmp	r4, r3
 800a04e:	d00c      	beq.n	800a06a <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART8)
 800a050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a054:	429c      	cmp	r4, r3
 800a056:	d008      	beq.n	800a06a <LL_USART_Init+0x8a>
 800a058:	882a      	ldrh	r2, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a05a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a05c:	f023 030f 	bic.w	r3, r3, #15
 800a060:	4313      	orrs	r3, r2
 800a062:	62e3      	str	r3, [r4, #44]	@ 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800a064:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 800a066:	2000      	movs	r0, #0
}
 800a068:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a06a:	481d      	ldr	r0, [pc, #116]	@ (800a0e0 <LL_USART_Init+0x100>)
 800a06c:	f7ff fe5e 	bl	8009d2c <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a070:	882a      	ldrh	r2, [r5, #0]
 800a072:	2800      	cmp	r0, #0
 800a074:	d0f1      	beq.n	800a05a <LL_USART_Init+0x7a>
        && (USART_InitStruct->BaudRate != 0U))
 800a076:	686b      	ldr	r3, [r5, #4]
 800a078:	b953      	cbnz	r3, 800a090 <LL_USART_Init+0xb0>
  ErrorStatus status = ERROR;
 800a07a:	4618      	mov	r0, r3
 800a07c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a07e:	f023 030f 	bic.w	r3, r3, #15
 800a082:	4313      	orrs	r3, r2
 800a084:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a086:	e7ed      	b.n	800a064 <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800a088:	4816      	ldr	r0, [pc, #88]	@ (800a0e4 <LL_USART_Init+0x104>)
 800a08a:	f7ff fe4f 	bl	8009d2c <LL_RCC_GetUSARTClockFreq>
 800a08e:	e7ef      	b.n	800a070 <LL_USART_Init+0x90>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a090:	69ed      	ldr	r5, [r5, #28]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800a092:	4915      	ldr	r1, [pc, #84]	@ (800a0e8 <LL_USART_Init+0x108>)
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a094:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800a098:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a09c:	fbb0 f0f1 	udiv	r0, r0, r1
 800a0a0:	ea4f 0153 	mov.w	r1, r3, lsr #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a0a4:	d006      	beq.n	800a0b4 <LL_USART_Init+0xd4>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800a0a6:	4408      	add	r0, r1
 800a0a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	e7d2      	b.n	800a05a <LL_USART_Init+0x7a>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800a0b4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    brrtemp = usartdiv & 0xFFF0U;
 800a0b8:	f64f 70f0 	movw	r0, #65520	@ 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800a0bc:	fbb1 f1f3 	udiv	r1, r1, r3
    brrtemp = usartdiv & 0xFFF0U;
 800a0c0:	ea01 0300 	and.w	r3, r1, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0c4:	f3c1 0142 	ubfx	r1, r1, #1, #3
 800a0c8:	4319      	orrs	r1, r3
    USARTx->BRR = brrtemp;
 800a0ca:	60e1      	str	r1, [r4, #12]
 800a0cc:	e7f0      	b.n	800a0b0 <LL_USART_Init+0xd0>
 800a0ce:	bf00      	nop
 800a0d0:	efff69f3 	.word	0xefff69f3
 800a0d4:	40011000 	.word	0x40011000
 800a0d8:	40004400 	.word	0x40004400
 800a0dc:	40004800 	.word	0x40004800
 800a0e0:	07000008 	.word	0x07000008
 800a0e4:	07000308 	.word	0x07000308
 800a0e8:	0800c594 	.word	0x0800c594

0800a0ec <expf>:
 800a0ec:	ee10 3a10 	vmov	r3, s0
 800a0f0:	f240 412a 	movw	r1, #1066	@ 0x42a
 800a0f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a0f8:	428a      	cmp	r2, r1
 800a0fa:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 800a0fe:	d832      	bhi.n	800a166 <expf+0x7a>
 800a100:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a104:	4b2d      	ldr	r3, [pc, #180]	@ (800a1bc <expf+0xd0>)
 800a106:	ed93 2b4a 	vldr	d2, [r3, #296]	@ 0x128
 800a10a:	ed93 1b48 	vldr	d1, [r3, #288]	@ 0x120
 800a10e:	eeb0 7b41 	vmov.f64	d7, d1
 800a112:	eea2 7b03 	vfma.f64	d7, d2, d3
 800a116:	ee17 0a10 	vmov	r0, s14
 800a11a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a11e:	f000 021f 	and.w	r2, r0, #31
 800a122:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800a126:	b430      	push	{r4, r5}
 800a128:	ee92 7b03 	vfnms.f64	d7, d2, d3
 800a12c:	ed93 4b4c 	vldr	d4, [r3, #304]	@ 0x130
 800a130:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800a134:	684d      	ldr	r5, [r1, #4]
 800a136:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 800a13a:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 800a13e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a142:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a146:	2100      	movs	r1, #0
 800a148:	190a      	adds	r2, r1, r4
 800a14a:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800a14e:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a152:	ec43 2b17 	vmov	d7, r2, r3
 800a156:	eea6 0b04 	vfma.f64	d0, d6, d4
 800a15a:	bc30      	pop	{r4, r5}
 800a15c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a160:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a164:	4770      	bx	lr
 800a166:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 800a16a:	d020      	beq.n	800a1ae <expf+0xc2>
 800a16c:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 800a170:	d21a      	bcs.n	800a1a8 <expf+0xbc>
 800a172:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800a1c0 <expf+0xd4>
 800a176:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	dc10      	bgt.n	800a1a2 <expf+0xb6>
 800a180:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a1c4 <expf+0xd8>
 800a184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	d412      	bmi.n	800a1b4 <expf+0xc8>
 800a18e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a1c8 <expf+0xdc>
 800a192:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a19a:	d5b1      	bpl.n	800a100 <expf+0x14>
 800a19c:	2000      	movs	r0, #0
 800a19e:	f000 ba7d 	b.w	800a69c <__math_may_uflowf>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f000 ba80 	b.w	800a6a8 <__math_oflowf>
 800a1a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1ac:	4770      	bx	lr
 800a1ae:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a1cc <expf+0xe0>
 800a1b2:	4770      	bx	lr
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f000 ba6b 	b.w	800a690 <__math_uflowf>
 800a1ba:	bf00      	nop
 800a1bc:	0800c5b0 	.word	0x0800c5b0
 800a1c0:	42b17217 	.word	0x42b17217
 800a1c4:	c2cff1b4 	.word	0xc2cff1b4
 800a1c8:	c2ce8ecf 	.word	0xc2ce8ecf
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <exp2f>:
 800a1d0:	ee10 3a10 	vmov	r3, s0
 800a1d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a1d8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a1dc:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a1e0:	d22e      	bcs.n	800a240 <exp2f+0x70>
 800a1e2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a1e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a290 <exp2f+0xc0>)
 800a1e8:	ed93 2b40 	vldr	d2, [r3, #256]	@ 0x100
 800a1ec:	ee32 3b07 	vadd.f64	d3, d2, d7
 800a1f0:	ee13 0a10 	vmov	r0, s6
 800a1f4:	ee33 3b42 	vsub.f64	d3, d3, d2
 800a1f8:	f000 021f 	and.w	r2, r0, #31
 800a1fc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800a200:	b430      	push	{r4, r5}
 800a202:	ee37 7b43 	vsub.f64	d7, d7, d3
 800a206:	ed93 4b42 	vldr	d4, [r3, #264]	@ 0x108
 800a20a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800a20e:	684d      	ldr	r5, [r1, #4]
 800a210:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800a214:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800a218:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a21c:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a220:	2100      	movs	r1, #0
 800a222:	190a      	adds	r2, r1, r4
 800a224:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800a228:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a22c:	ec43 2b17 	vmov	d7, r2, r3
 800a230:	eea6 0b04 	vfma.f64	d0, d6, d4
 800a234:	bc30      	pop	{r4, r5}
 800a236:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a23a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a23e:	4770      	bx	lr
 800a240:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 800a244:	d01e      	beq.n	800a284 <exp2f+0xb4>
 800a246:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 800a24a:	d218      	bcs.n	800a27e <exp2f+0xae>
 800a24c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a254:	dc10      	bgt.n	800a278 <exp2f+0xa8>
 800a256:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800a294 <exp2f+0xc4>
 800a25a:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800a25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a262:	d912      	bls.n	800a28a <exp2f+0xba>
 800a264:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800a298 <exp2f+0xc8>
 800a268:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800a26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a270:	d5b7      	bpl.n	800a1e2 <exp2f+0x12>
 800a272:	2000      	movs	r0, #0
 800a274:	f000 ba12 	b.w	800a69c <__math_may_uflowf>
 800a278:	2000      	movs	r0, #0
 800a27a:	f000 ba15 	b.w	800a6a8 <__math_oflowf>
 800a27e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a282:	4770      	bx	lr
 800a284:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800a29c <exp2f+0xcc>
 800a288:	4770      	bx	lr
 800a28a:	2000      	movs	r0, #0
 800a28c:	f000 ba00 	b.w	800a690 <__math_uflowf>
 800a290:	0800c5b0 	.word	0x0800c5b0
 800a294:	c3160000 	.word	0xc3160000
 800a298:	c3150000 	.word	0xc3150000
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <sinf>:
 800a2a0:	b530      	push	{r4, r5, lr}
 800a2a2:	ee10 4a10 	vmov	r4, s0
 800a2a6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a2aa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a2ae:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	d219      	bcs.n	800a2ea <sinf+0x4a>
 800a2b6:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a2ba:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800a2be:	d36c      	bcc.n	800a39a <sinf+0xfa>
 800a2c0:	ee27 2b05 	vmul.f64	d2, d7, d5
 800a2c4:	ee25 1b02 	vmul.f64	d1, d5, d2
 800a2c8:	4b69      	ldr	r3, [pc, #420]	@ (800a470 <sinf+0x1d0>)
 800a2ca:	ed93 3b1a 	vldr	d3, [r3, #104]	@ 0x68
 800a2ce:	ed93 6b18 	vldr	d6, [r3, #96]	@ 0x60
 800a2d2:	ed93 4b16 	vldr	d4, [r3, #88]	@ 0x58
 800a2d6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800a2da:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a2de:	eea6 7b01 	vfma.f64	d7, d6, d1
 800a2e2:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a2e6:	b003      	add	sp, #12
 800a2e8:	bd30      	pop	{r4, r5, pc}
 800a2ea:	f240 422e 	movw	r2, #1070	@ 0x42e
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d85b      	bhi.n	800a3aa <sinf+0x10a>
 800a2f2:	495f      	ldr	r1, [pc, #380]	@ (800a470 <sinf+0x1d0>)
 800a2f4:	ed91 6b08 	vldr	d6, [r1, #32]
 800a2f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a2fc:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800a300:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 800a304:	ee16 3a90 	vmov	r3, s13
 800a308:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 800a30c:	161b      	asrs	r3, r3, #24
 800a30e:	f013 0f02 	tst.w	r3, #2
 800a312:	ee06 3a90 	vmov	s13, r3
 800a316:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 800a31a:	bf08      	it	eq
 800a31c:	460a      	moveq	r2, r1
 800a31e:	07d8      	lsls	r0, r3, #31
 800a320:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a324:	eea6 7b45 	vfms.f64	d7, d6, d5
 800a328:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a32c:	d41b      	bmi.n	800a366 <sinf+0xc6>
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a336:	ed91 2b00 	vldr	d2, [r1]
 800a33a:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 800a33e:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 800a342:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 800a346:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a34a:	ee27 7b02 	vmul.f64	d7, d7, d2
 800a34e:	ee27 4b06 	vmul.f64	d4, d7, d6
 800a352:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a356:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a35a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a35e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a362:	b003      	add	sp, #12
 800a364:	bd30      	pop	{r4, r5, pc}
 800a366:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 800a36a:	ee26 5b06 	vmul.f64	d5, d6, d6
 800a36e:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 800a372:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 800a376:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a37a:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 800a37e:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 800a382:	eea6 0b03 	vfma.f64	d0, d6, d3
 800a386:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a38a:	eea5 0b04 	vfma.f64	d0, d5, d4
 800a38e:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a392:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a396:	b003      	add	sp, #12
 800a398:	bd30      	pop	{r4, r5, pc}
 800a39a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800a39e:	bf04      	itt	eq
 800a3a0:	eeb7 5bc5 	vcvteq.f32.f64	s10, d5
 800a3a4:	ed8d 5a01 	vstreq	s10, [sp, #4]
 800a3a8:	e7db      	b.n	800a362 <sinf+0xc2>
 800a3aa:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800a3ae:	d23b      	bcs.n	800a428 <sinf+0x188>
 800a3b0:	4b30      	ldr	r3, [pc, #192]	@ (800a474 <sinf+0x1d4>)
 800a3b2:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800a3b6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800a3ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3be:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a3c2:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800a3c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3ca:	4083      	lsls	r3, r0
 800a3cc:	6a08      	ldr	r0, [r1, #32]
 800a3ce:	6909      	ldr	r1, [r1, #16]
 800a3d0:	fba0 5003 	umull	r5, r0, r0, r3
 800a3d4:	fb03 f202 	mul.w	r2, r3, r2
 800a3d8:	fbe3 0201 	umlal	r0, r2, r3, r1
 800a3dc:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 800a3e0:	0f8d      	lsrs	r5, r1, #30
 800a3e2:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 800a3e6:	1a51      	subs	r1, r2, r1
 800a3e8:	f7f6 f940 	bl	800066c <__aeabi_l2d>
 800a3ec:	4b22      	ldr	r3, [pc, #136]	@ (800a478 <sinf+0x1d8>)
 800a3ee:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 800a468 <sinf+0x1c8>
 800a3f2:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a3f6:	ec41 0b17 	vmov	d7, r0, r1
 800a3fa:	f014 0f02 	tst.w	r4, #2
 800a3fe:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 800a402:	bf08      	it	eq
 800a404:	4613      	moveq	r3, r2
 800a406:	07e9      	lsls	r1, r5, #31
 800a408:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a40c:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a410:	d40f      	bmi.n	800a432 <sinf+0x192>
 800a412:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a416:	ed92 2b00 	vldr	d2, [r2]
 800a41a:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 800a41e:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800a422:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 800a426:	e78e      	b.n	800a346 <sinf+0xa6>
 800a428:	b003      	add	sp, #12
 800a42a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a42e:	f000 b953 	b.w	800a6d8 <__math_invalidf>
 800a432:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 800a436:	ee26 4b06 	vmul.f64	d4, d6, d6
 800a43a:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a43e:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 800a442:	eea6 5b01 	vfma.f64	d5, d6, d1
 800a446:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800a44a:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 800a44e:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a452:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a456:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a45a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a45e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a462:	e77e      	b.n	800a362 <sinf+0xc2>
 800a464:	f3af 8000 	nop.w
 800a468:	54442d18 	.word	0x54442d18
 800a46c:	3c1921fb 	.word	0x3c1921fb
 800a470:	0800c758 	.word	0x0800c758
 800a474:	0800c6f8 	.word	0x0800c6f8
 800a478:	0800c7c8 	.word	0x0800c7c8
 800a47c:	00000000 	.word	0x00000000

0800a480 <cosf>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	ee10 4a10 	vmov	r4, s0
 800a486:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a48a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a48e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a492:	d21e      	bcs.n	800a4d2 <cosf+0x52>
 800a494:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a498:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800a49c:	d36f      	bcc.n	800a57e <cosf+0xfe>
 800a49e:	ee27 1b07 	vmul.f64	d1, d7, d7
 800a4a2:	4b69      	ldr	r3, [pc, #420]	@ (800a648 <cosf+0x1c8>)
 800a4a4:	ed93 2b14 	vldr	d2, [r3, #80]	@ 0x50
 800a4a8:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a4ac:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800a4b0:	eea7 5b02 	vfma.f64	d5, d7, d2
 800a4b4:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800a4b8:	ed93 4b10 	vldr	d4, [r3, #64]	@ 0x40
 800a4bc:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a4c0:	ee27 7b01 	vmul.f64	d7, d7, d1
 800a4c4:	eea1 6b04 	vfma.f64	d6, d1, d4
 800a4c8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a4cc:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	f240 422e 	movw	r2, #1070	@ 0x42e
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d854      	bhi.n	800a584 <cosf+0x104>
 800a4da:	495b      	ldr	r1, [pc, #364]	@ (800a648 <cosf+0x1c8>)
 800a4dc:	ed91 6b08 	vldr	d6, [r1, #32]
 800a4e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a4e4:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800a4e8:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 800a4ec:	ee16 3a90 	vmov	r3, s13
 800a4f0:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 800a4f4:	161b      	asrs	r3, r3, #24
 800a4f6:	f013 0f02 	tst.w	r3, #2
 800a4fa:	ee06 3a90 	vmov	s13, r3
 800a4fe:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 800a502:	bf08      	it	eq
 800a504:	460a      	moveq	r2, r1
 800a506:	07d8      	lsls	r0, r3, #31
 800a508:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a50c:	eea6 7b45 	vfms.f64	d7, d6, d5
 800a510:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a514:	d51a      	bpl.n	800a54c <cosf+0xcc>
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a51e:	ed91 2b00 	vldr	d2, [r1]
 800a522:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 800a526:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 800a52a:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 800a52e:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a532:	ee27 7b02 	vmul.f64	d7, d7, d2
 800a536:	ee27 4b06 	vmul.f64	d4, d7, d6
 800a53a:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a53e:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a542:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a546:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 800a550:	ee26 5b06 	vmul.f64	d5, d6, d6
 800a554:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 800a558:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 800a55c:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a560:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 800a564:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 800a568:	eea6 0b03 	vfma.f64	d0, d6, d3
 800a56c:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a570:	eea5 0b04 	vfma.f64	d0, d5, d4
 800a574:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a578:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800a588:	d23d      	bcs.n	800a606 <cosf+0x186>
 800a58a:	4b30      	ldr	r3, [pc, #192]	@ (800a64c <cosf+0x1cc>)
 800a58c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800a590:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800a594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a598:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a59c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800a5a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5a4:	4083      	lsls	r3, r0
 800a5a6:	6a08      	ldr	r0, [r1, #32]
 800a5a8:	6909      	ldr	r1, [r1, #16]
 800a5aa:	fba0 5003 	umull	r5, r0, r0, r3
 800a5ae:	fb03 f202 	mul.w	r2, r3, r2
 800a5b2:	fbe3 0201 	umlal	r0, r2, r3, r1
 800a5b6:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 800a5ba:	0f8d      	lsrs	r5, r1, #30
 800a5bc:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 800a5c0:	1a51      	subs	r1, r2, r1
 800a5c2:	f7f6 f853 	bl	800066c <__aeabi_l2d>
 800a5c6:	4b22      	ldr	r3, [pc, #136]	@ (800a650 <cosf+0x1d0>)
 800a5c8:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 800a640 <cosf+0x1c0>
 800a5cc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a5d0:	ec41 0b17 	vmov	d7, r0, r1
 800a5d4:	f014 0f02 	tst.w	r4, #2
 800a5d8:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 800a5dc:	bf08      	it	eq
 800a5de:	4613      	moveq	r3, r2
 800a5e0:	07e9      	lsls	r1, r5, #31
 800a5e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5e6:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a5ea:	d510      	bpl.n	800a60e <cosf+0x18e>
 800a5ec:	f004 0403 	and.w	r4, r4, #3
 800a5f0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a5f4:	ed92 2b00 	vldr	d2, [r2]
 800a5f8:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 800a5fc:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800a600:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 800a604:	e793      	b.n	800a52e <cosf+0xae>
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60a:	f000 b865 	b.w	800a6d8 <__math_invalidf>
 800a60e:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 800a612:	ee26 4b06 	vmul.f64	d4, d6, d6
 800a616:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a61a:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 800a61e:	eea6 5b01 	vfma.f64	d5, d6, d1
 800a622:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800a626:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 800a62a:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a62e:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a632:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a636:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a63a:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	54442d18 	.word	0x54442d18
 800a644:	3c1921fb 	.word	0x3c1921fb
 800a648:	0800c758 	.word	0x0800c758
 800a64c:	0800c6f8 	.word	0x0800c6f8
 800a650:	0800c7c8 	.word	0x0800c7c8

0800a654 <with_errnof>:
 800a654:	b510      	push	{r4, lr}
 800a656:	ed2d 8b02 	vpush	{d8}
 800a65a:	eeb0 8a40 	vmov.f32	s16, s0
 800a65e:	4604      	mov	r4, r0
 800a660:	f000 fd32 	bl	800b0c8 <__errno>
 800a664:	eeb0 0a48 	vmov.f32	s0, s16
 800a668:	ecbd 8b02 	vpop	{d8}
 800a66c:	6004      	str	r4, [r0, #0]
 800a66e:	bd10      	pop	{r4, pc}

0800a670 <xflowf>:
 800a670:	b130      	cbz	r0, 800a680 <xflowf+0x10>
 800a672:	eef1 7a40 	vneg.f32	s15, s0
 800a676:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a67a:	2022      	movs	r0, #34	@ 0x22
 800a67c:	f7ff bfea 	b.w	800a654 <with_errnof>
 800a680:	eef0 7a40 	vmov.f32	s15, s0
 800a684:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a688:	2022      	movs	r0, #34	@ 0x22
 800a68a:	f7ff bfe3 	b.w	800a654 <with_errnof>
 800a68e:	bf00      	nop

0800a690 <__math_uflowf>:
 800a690:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a698 <__math_uflowf+0x8>
 800a694:	f7ff bfec 	b.w	800a670 <xflowf>
 800a698:	10000000 	.word	0x10000000

0800a69c <__math_may_uflowf>:
 800a69c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6a4 <__math_may_uflowf+0x8>
 800a6a0:	f7ff bfe6 	b.w	800a670 <xflowf>
 800a6a4:	1a200000 	.word	0x1a200000

0800a6a8 <__math_oflowf>:
 800a6a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6b0 <__math_oflowf+0x8>
 800a6ac:	f7ff bfe0 	b.w	800a670 <xflowf>
 800a6b0:	70000000 	.word	0x70000000

0800a6b4 <__math_divzerof>:
 800a6b4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a6d4 <__math_divzerof+0x20>
 800a6b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a6bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a6c6:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a6ca:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a6ce:	f7ff bfc1 	b.w	800a654 <with_errnof>
 800a6d2:	bf00      	nop
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <__math_invalidf>:
 800a6d8:	eef0 7a40 	vmov.f32	s15, s0
 800a6dc:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a6e0:	eef4 7a67 	vcmp.f32	s15, s15
 800a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a6ec:	d602      	bvs.n	800a6f4 <__math_invalidf+0x1c>
 800a6ee:	2021      	movs	r0, #33	@ 0x21
 800a6f0:	f7ff bfb0 	b.w	800a654 <with_errnof>
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop

0800a6f8 <log10f>:
 800a6f8:	b508      	push	{r3, lr}
 800a6fa:	ed2d 8b02 	vpush	{d8}
 800a6fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a702:	f000 f8ab 	bl	800a85c <__ieee754_log10f>
 800a706:	eeb4 8a48 	vcmp.f32	s16, s16
 800a70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70e:	d60f      	bvs.n	800a730 <log10f+0x38>
 800a710:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a718:	d80a      	bhi.n	800a730 <log10f+0x38>
 800a71a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	d108      	bne.n	800a736 <log10f+0x3e>
 800a724:	f000 fcd0 	bl	800b0c8 <__errno>
 800a728:	2322      	movs	r3, #34	@ 0x22
 800a72a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800a750 <log10f+0x58>
 800a72e:	6003      	str	r3, [r0, #0]
 800a730:	ecbd 8b02 	vpop	{d8}
 800a734:	bd08      	pop	{r3, pc}
 800a736:	f000 fcc7 	bl	800b0c8 <__errno>
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	4603      	mov	r3, r0
 800a740:	2221      	movs	r2, #33	@ 0x21
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	4803      	ldr	r0, [pc, #12]	@ (800a754 <log10f+0x5c>)
 800a746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a74a:	f000 b805 	b.w	800a758 <nanf>
 800a74e:	bf00      	nop
 800a750:	ff800000 	.word	0xff800000
 800a754:	0800c1b8 	.word	0x0800c1b8

0800a758 <nanf>:
 800a758:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a760 <nanf+0x8>
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	7fc00000 	.word	0x7fc00000

0800a764 <tanhf>:
 800a764:	b530      	push	{r4, r5, lr}
 800a766:	ed2d 8b02 	vpush	{d8}
 800a76a:	b083      	sub	sp, #12
 800a76c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a770:	9c01      	ldr	r4, [sp, #4]
 800a772:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 800a776:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a77a:	d310      	bcc.n	800a79e <tanhf+0x3a>
 800a77c:	4b33      	ldr	r3, [pc, #204]	@ (800a84c <tanhf+0xe8>)
 800a77e:	2c00      	cmp	r4, #0
 800a780:	ed93 7a00 	vldr	s14, [r3]
 800a784:	edd3 7a00 	vldr	s15, [r3]
 800a788:	db39      	blt.n	800a7fe <tanhf+0x9a>
 800a78a:	eef0 6a40 	vmov.f32	s13, s0
 800a78e:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800a792:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a796:	b003      	add	sp, #12
 800a798:	ecbd 8b02 	vpop	{d8}
 800a79c:	bd30      	pop	{r4, r5, pc}
 800a79e:	4a2c      	ldr	r2, [pc, #176]	@ (800a850 <tanhf+0xec>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d90f      	bls.n	800a7c4 <tanhf+0x60>
 800a7a4:	4a29      	ldr	r2, [pc, #164]	@ (800a84c <tanhf+0xe8>)
 800a7a6:	4b2b      	ldr	r3, [pc, #172]	@ (800a854 <tanhf+0xf0>)
 800a7a8:	ed92 0a00 	vldr	s0, [r2]
 800a7ac:	edd3 7a00 	vldr	s15, [r3]
 800a7b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	bfb8      	it	lt
 800a7b8:	eeb1 0a40 	vneglt.f32	s0, s0
 800a7bc:	b003      	add	sp, #12
 800a7be:	ecbd 8b02 	vpop	{d8}
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800a7c8:	d323      	bcc.n	800a812 <tanhf+0xae>
 800a7ca:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a7ce:	d32a      	bcc.n	800a826 <tanhf+0xc2>
 800a7d0:	4d21      	ldr	r5, [pc, #132]	@ (800a858 <tanhf+0xf4>)
 800a7d2:	f000 fa3f 	bl	800ac54 <fabsf>
 800a7d6:	edd5 7a00 	vldr	s15, [r5]
 800a7da:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a7de:	f000 f903 	bl	800a9e8 <expm1f>
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a84c <tanhf+0xe8>)
 800a7e4:	edd3 7a00 	vldr	s15, [r3]
 800a7e8:	ed95 6a00 	vldr	s12, [r5]
 800a7ec:	ed95 7a00 	vldr	s14, [r5]
 800a7f0:	ee37 7a00 	vadd.f32	s14, s14, s0
 800a7f4:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a7f8:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800a7fc:	e7da      	b.n	800a7b4 <tanhf+0x50>
 800a7fe:	eddd 6a01 	vldr	s13, [sp, #4]
 800a802:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800a806:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a80a:	b003      	add	sp, #12
 800a80c:	ecbd 8b02 	vpop	{d8}
 800a810:	bd30      	pop	{r4, r5, pc}
 800a812:	4b0e      	ldr	r3, [pc, #56]	@ (800a84c <tanhf+0xe8>)
 800a814:	eddd 7a01 	vldr	s15, [sp, #4]
 800a818:	ed93 0a00 	vldr	s0, [r3]
 800a81c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a820:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a824:	e7b7      	b.n	800a796 <tanhf+0x32>
 800a826:	4d0c      	ldr	r5, [pc, #48]	@ (800a858 <tanhf+0xf4>)
 800a828:	ed95 8a00 	vldr	s16, [r5]
 800a82c:	f000 fa12 	bl	800ac54 <fabsf>
 800a830:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800a834:	f000 f8d8 	bl	800a9e8 <expm1f>
 800a838:	ed95 7a00 	vldr	s14, [r5]
 800a83c:	ee37 7a00 	vadd.f32	s14, s14, s0
 800a840:	eef1 7a40 	vneg.f32	s15, s0
 800a844:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800a848:	e7b4      	b.n	800a7b4 <tanhf+0x50>
 800a84a:	bf00      	nop
 800a84c:	0800c840 	.word	0x0800c840
 800a850:	41afffff 	.word	0x41afffff
 800a854:	0800c838 	.word	0x0800c838
 800a858:	0800c83c 	.word	0x0800c83c

0800a85c <__ieee754_log10f>:
 800a85c:	b508      	push	{r3, lr}
 800a85e:	ee10 3a10 	vmov	r3, s0
 800a862:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a866:	ed2d 8b02 	vpush	{d8}
 800a86a:	d02c      	beq.n	800a8c6 <__ieee754_log10f+0x6a>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	461a      	mov	r2, r3
 800a870:	db32      	blt.n	800a8d8 <__ieee754_log10f+0x7c>
 800a872:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a876:	da41      	bge.n	800a8fc <__ieee754_log10f+0xa0>
 800a878:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a87c:	db35      	blt.n	800a8ea <__ieee754_log10f+0x8e>
 800a87e:	2100      	movs	r1, #0
 800a880:	15d3      	asrs	r3, r2, #23
 800a882:	3b7f      	subs	r3, #127	@ 0x7f
 800a884:	440b      	add	r3, r1
 800a886:	0fd9      	lsrs	r1, r3, #31
 800a888:	f1c1 017f 	rsb	r1, r1, #127	@ 0x7f
 800a88c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a890:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a894:	ee07 3a90 	vmov	s15, r3
 800a898:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800a89c:	ee00 2a10 	vmov	s0, r2
 800a8a0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a8a4:	f000 f83c 	bl	800a920 <logf>
 800a8a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a908 <__ieee754_log10f+0xac>
 800a8ac:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800a90c <__ieee754_log10f+0xb0>
 800a8b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a8b4:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a910 <__ieee754_log10f+0xb4>
 800a8b8:	eea8 0a07 	vfma.f32	s0, s16, s14
 800a8bc:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a8c0:	ecbd 8b02 	vpop	{d8}
 800a8c4:	bd08      	pop	{r3, pc}
 800a8c6:	ecbd 8b02 	vpop	{d8}
 800a8ca:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a914 <__ieee754_log10f+0xb8>
 800a8ce:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a918 <__ieee754_log10f+0xbc>
 800a8d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a8d6:	bd08      	pop	{r3, pc}
 800a8d8:	ecbd 8b02 	vpop	{d8}
 800a8dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a8e0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a918 <__ieee754_log10f+0xbc>
 800a8e4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800a8e8:	bd08      	pop	{r3, pc}
 800a8ea:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a91c <__ieee754_log10f+0xc0>
 800a8ee:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a8f2:	f06f 0118 	mvn.w	r1, #24
 800a8f6:	ee17 2a90 	vmov	r2, s15
 800a8fa:	e7c1      	b.n	800a880 <__ieee754_log10f+0x24>
 800a8fc:	ecbd 8b02 	vpop	{d8}
 800a900:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a904:	bd08      	pop	{r3, pc}
 800a906:	bf00      	nop
 800a908:	3ede5bd9 	.word	0x3ede5bd9
 800a90c:	355427db 	.word	0x355427db
 800a910:	3e9a2080 	.word	0x3e9a2080
 800a914:	cc000000 	.word	0xcc000000
 800a918:	00000000 	.word	0x00000000
 800a91c:	4c000000 	.word	0x4c000000

0800a920 <logf>:
 800a920:	ee10 3a10 	vmov	r3, s0
 800a924:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a928:	461a      	mov	r2, r3
 800a92a:	d038      	beq.n	800a99e <logf+0x7e>
 800a92c:	f5a3 0100 	sub.w	r1, r3, #8388608	@ 0x800000
 800a930:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800a934:	d236      	bcs.n	800a9a4 <logf+0x84>
 800a936:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a93a:	f102 4340 	add.w	r3, r2, #3221225472	@ 0xc0000000
 800a93e:	4927      	ldr	r1, [pc, #156]	@ (800a9dc <logf+0xbc>)
 800a940:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800a944:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 800a948:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a94c:	ed91 4b40 	vldr	d4, [r1, #256]	@ 0x100
 800a950:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a954:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a958:	ed91 6b42 	vldr	d6, [r1, #264]	@ 0x108
 800a95c:	0dd9      	lsrs	r1, r3, #23
 800a95e:	05c9      	lsls	r1, r1, #23
 800a960:	ed90 2b00 	vldr	d2, [r0]
 800a964:	1a52      	subs	r2, r2, r1
 800a966:	ee03 2a90 	vmov	s7, r2
 800a96a:	ed90 1b02 	vldr	d1, [r0, #8]
 800a96e:	15db      	asrs	r3, r3, #23
 800a970:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800a974:	eea2 0b03 	vfma.f64	d0, d2, d3
 800a978:	ee03 3a90 	vmov	s7, r3
 800a97c:	ee20 2b00 	vmul.f64	d2, d0, d0
 800a980:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a984:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 800a988:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a98c:	eea3 1b04 	vfma.f64	d1, d3, d4
 800a990:	ee30 0b01 	vadd.f64	d0, d0, d1
 800a994:	eea2 0b07 	vfma.f64	d0, d2, d7
 800a998:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a99c:	4770      	bx	lr
 800a99e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800a9e0 <logf+0xc0>
 800a9a2:	4770      	bx	lr
 800a9a4:	0059      	lsls	r1, r3, #1
 800a9a6:	d014      	beq.n	800a9d2 <logf+0xb2>
 800a9a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a9ac:	d014      	beq.n	800a9d8 <logf+0xb8>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	db0b      	blt.n	800a9ca <logf+0xaa>
 800a9b2:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800a9b6:	d208      	bcs.n	800a9ca <logf+0xaa>
 800a9b8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a9e4 <logf+0xc4>
 800a9bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a9c0:	ee17 3a90 	vmov	r3, s15
 800a9c4:	f1a3 6238 	sub.w	r2, r3, #192937984	@ 0xb800000
 800a9c8:	e7b5      	b.n	800a936 <logf+0x16>
 800a9ca:	ee00 3a10 	vmov	s0, r3
 800a9ce:	f7ff be83 	b.w	800a6d8 <__math_invalidf>
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	f7ff be6e 	b.w	800a6b4 <__math_divzerof>
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	0800c848 	.word	0x0800c848
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	4b000000 	.word	0x4b000000

0800a9e8 <expm1f>:
 800a9e8:	ee10 0a10 	vmov	r0, s0
 800a9ec:	4a8a      	ldr	r2, [pc, #552]	@ (800ac18 <expm1f+0x230>)
 800a9ee:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800a9f8:	d92b      	bls.n	800aa52 <expm1f+0x6a>
 800a9fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a9fe:	f200 808f 	bhi.w	800ab20 <expm1f+0x138>
 800aa02:	f000 80e3 	beq.w	800abcc <expm1f+0x1e4>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 808d 	bne.w	800ab26 <expm1f+0x13e>
 800aa0c:	4a83      	ldr	r2, [pc, #524]	@ (800ac1c <expm1f+0x234>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	f200 80ff 	bhi.w	800ac12 <expm1f+0x22a>
 800aa14:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800ac20 <expm1f+0x238>
 800aa18:	ee20 7a07 	vmul.f32	s14, s0, s14
 800aa1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aa20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa24:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 800ac24 <expm1f+0x23c>
 800aa28:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800ac28 <expm1f+0x240>
 800aa2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa34:	ee17 3a90 	vmov	r3, s15
 800aa38:	eef0 7a40 	vmov.f32	s15, s0
 800aa3c:	eee7 7a46 	vfms.f32	s15, s14, s12
 800aa40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aa44:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800aa48:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa50:	e007      	b.n	800aa62 <expm1f+0x7a>
 800aa52:	4a76      	ldr	r2, [pc, #472]	@ (800ac2c <expm1f+0x244>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d855      	bhi.n	800ab04 <expm1f+0x11c>
 800aa58:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800aa5c:	f0c0 8090 	bcc.w	800ab80 <expm1f+0x198>
 800aa60:	2300      	movs	r3, #0
 800aa62:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 800aa66:	ee20 4a03 	vmul.f32	s8, s0, s6
 800aa6a:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800ac30 <expm1f+0x248>
 800aa6e:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 800ac34 <expm1f+0x24c>
 800aa72:	eddf 4a71 	vldr	s9, [pc, #452]	@ 800ac38 <expm1f+0x250>
 800aa76:	ed9f 5a71 	vldr	s10, [pc, #452]	@ 800ac3c <expm1f+0x254>
 800aa7a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800aa7e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800aa82:	eea7 6a26 	vfma.f32	s12, s14, s13
 800aa86:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ac40 <expm1f+0x258>
 800aa8a:	eee6 4a07 	vfma.f32	s9, s12, s14
 800aa8e:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 800aa92:	eee4 6a87 	vfma.f32	s13, s9, s14
 800aa96:	eef1 5a08 	vmov.f32	s11, #24	@ 0x40c00000  6.0
 800aa9a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aa9e:	eef0 6a63 	vmov.f32	s13, s7
 800aaa2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800aaa6:	eea4 6a66 	vfms.f32	s12, s8, s13
 800aaaa:	eee0 5a46 	vfms.f32	s11, s0, s12
 800aaae:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800aab2:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800aab6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d05b      	beq.n	800ab76 <expm1f+0x18e>
 800aabe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800aac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aacc:	d077      	beq.n	800abbe <expm1f+0x1d6>
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d05f      	beq.n	800ab92 <expm1f+0x1aa>
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	2a39      	cmp	r2, #57	@ 0x39
 800aad6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800aada:	d840      	bhi.n	800ab5e <expm1f+0x176>
 800aadc:	2b16      	cmp	r3, #22
 800aade:	dc7b      	bgt.n	800abd8 <expm1f+0x1f0>
 800aae0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aae4:	fa42 f303 	asr.w	r3, r2, r3
 800aae8:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800aaec:	ee07 3a10 	vmov	s14, r3
 800aaf0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aaf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaf8:	ee17 3a90 	vmov	r3, s15
 800aafc:	18cb      	adds	r3, r1, r3
 800aafe:	ee00 3a10 	vmov	s0, r3
 800ab02:	4770      	bx	lr
 800ab04:	4a4f      	ldr	r2, [pc, #316]	@ (800ac44 <expm1f+0x25c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d81d      	bhi.n	800ab46 <expm1f+0x15e>
 800ab0a:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800ac24 <expm1f+0x23c>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d04f      	beq.n	800abb2 <expm1f+0x1ca>
 800ab12:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ac48 <expm1f+0x260>
 800ab16:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ab1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab1e:	e791      	b.n	800aa44 <expm1f+0x5c>
 800ab20:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab24:	4770      	bx	lr
 800ab26:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ac4c <expm1f+0x264>
 800ab2a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ab2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	d469      	bmi.n	800ac0c <expm1f+0x224>
 800ab38:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ac20 <expm1f+0x238>
 800ab3c:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800ab40:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ab44:	e76c      	b.n	800aa20 <expm1f+0x38>
 800ab46:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ac20 <expm1f+0x238>
 800ab4a:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800ab4e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800ab52:	2800      	cmp	r0, #0
 800ab54:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ab58:	fe46 7aa7 	vseleq.f32	s15, s13, s15
 800ab5c:	e760      	b.n	800aa20 <expm1f+0x38>
 800ab5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ab62:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800ab66:	ee17 3a90 	vmov	r3, s15
 800ab6a:	4419      	add	r1, r3
 800ab6c:	ee07 1a90 	vmov	s15, r1
 800ab70:	ee37 0ae3 	vsub.f32	s0, s15, s7
 800ab74:	4770      	bx	lr
 800ab76:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800ab7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ab7e:	4770      	bx	lr
 800ab80:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800ac50 <expm1f+0x268>
 800ab84:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ab88:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ab8c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab90:	4770      	bx	lr
 800ab92:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800ab96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9e:	d52c      	bpl.n	800abfa <expm1f+0x212>
 800aba0:	ee30 3a03 	vadd.f32	s6, s0, s6
 800aba4:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 800aba8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800abac:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abb0:	4770      	bx	lr
 800abb2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800ac28 <expm1f+0x240>
 800abb6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abba:	2301      	movs	r3, #1
 800abbc:	e742      	b.n	800aa44 <expm1f+0x5c>
 800abbe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abc2:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800abc6:	eea7 0a83 	vfma.f32	s0, s15, s6
 800abca:	4770      	bx	lr
 800abcc:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800abd0:	2800      	cmp	r0, #0
 800abd2:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800abd6:	4770      	bx	lr
 800abd8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800abdc:	05db      	lsls	r3, r3, #23
 800abde:	ee07 3a10 	vmov	s14, r3
 800abe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abe6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800abea:	ee30 0a23 	vadd.f32	s0, s0, s7
 800abee:	ee10 3a10 	vmov	r3, s0
 800abf2:	440b      	add	r3, r1
 800abf4:	ee00 3a10 	vmov	s0, r3
 800abf8:	4770      	bx	lr
 800abfa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abfe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ac02:	eee7 3a87 	vfma.f32	s7, s15, s14
 800ac06:	eeb0 0a63 	vmov.f32	s0, s7
 800ac0a:	4770      	bx	lr
 800ac0c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800ac10:	4770      	bx	lr
 800ac12:	f7ff bd49 	b.w	800a6a8 <__math_oflowf>
 800ac16:	bf00      	nop
 800ac18:	4195b843 	.word	0x4195b843
 800ac1c:	42b17217 	.word	0x42b17217
 800ac20:	3fb8aa3b 	.word	0x3fb8aa3b
 800ac24:	3f317180 	.word	0x3f317180
 800ac28:	3717f7d1 	.word	0x3717f7d1
 800ac2c:	3eb17218 	.word	0x3eb17218
 800ac30:	b457edbb 	.word	0xb457edbb
 800ac34:	36867e54 	.word	0x36867e54
 800ac38:	b8a670cd 	.word	0xb8a670cd
 800ac3c:	bd088889 	.word	0xbd088889
 800ac40:	3ad00d01 	.word	0x3ad00d01
 800ac44:	3f851591 	.word	0x3f851591
 800ac48:	b717f7d1 	.word	0xb717f7d1
 800ac4c:	0da24260 	.word	0x0da24260
 800ac50:	7149f2ca 	.word	0x7149f2ca

0800ac54 <fabsf>:
 800ac54:	ee10 3a10 	vmov	r3, s0
 800ac58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac5c:	ee00 3a10 	vmov	s0, r3
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop

0800ac64 <__assert_func>:
 800ac64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac66:	4614      	mov	r4, r2
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4b09      	ldr	r3, [pc, #36]	@ (800ac90 <__assert_func+0x2c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	68d8      	ldr	r0, [r3, #12]
 800ac72:	b14c      	cbz	r4, 800ac88 <__assert_func+0x24>
 800ac74:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <__assert_func+0x30>)
 800ac76:	9100      	str	r1, [sp, #0]
 800ac78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac7c:	4906      	ldr	r1, [pc, #24]	@ (800ac98 <__assert_func+0x34>)
 800ac7e:	462b      	mov	r3, r5
 800ac80:	f000 f91e 	bl	800aec0 <fiprintf>
 800ac84:	f000 fa5b 	bl	800b13e <abort>
 800ac88:	4b04      	ldr	r3, [pc, #16]	@ (800ac9c <__assert_func+0x38>)
 800ac8a:	461c      	mov	r4, r3
 800ac8c:	e7f3      	b.n	800ac76 <__assert_func+0x12>
 800ac8e:	bf00      	nop
 800ac90:	2000003c 	.word	0x2000003c
 800ac94:	0800c968 	.word	0x0800c968
 800ac98:	0800c975 	.word	0x0800c975
 800ac9c:	0800c9a3 	.word	0x0800c9a3

0800aca0 <clearerr>:
 800aca0:	4b10      	ldr	r3, [pc, #64]	@ (800ace4 <clearerr+0x44>)
 800aca2:	b510      	push	{r4, lr}
 800aca4:	4604      	mov	r4, r0
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	b118      	cbz	r0, 800acb2 <clearerr+0x12>
 800acaa:	6a03      	ldr	r3, [r0, #32]
 800acac:	b90b      	cbnz	r3, 800acb2 <clearerr+0x12>
 800acae:	f000 f8ef 	bl	800ae90 <__sinit>
 800acb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acb4:	07d8      	lsls	r0, r3, #31
 800acb6:	d405      	bmi.n	800acc4 <clearerr+0x24>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	0599      	lsls	r1, r3, #22
 800acbc:	d402      	bmi.n	800acc4 <clearerr+0x24>
 800acbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acc0:	f000 fa2d 	bl	800b11e <__retarget_lock_acquire_recursive>
 800acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc8:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 800accc:	81a2      	strh	r2, [r4, #12]
 800acce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acd0:	07d2      	lsls	r2, r2, #31
 800acd2:	d406      	bmi.n	800ace2 <clearerr+0x42>
 800acd4:	059b      	lsls	r3, r3, #22
 800acd6:	d404      	bmi.n	800ace2 <clearerr+0x42>
 800acd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acde:	f000 ba1f 	b.w	800b120 <__retarget_lock_release_recursive>
 800ace2:	bd10      	pop	{r4, pc}
 800ace4:	2000003c 	.word	0x2000003c

0800ace8 <feof>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4b10      	ldr	r3, [pc, #64]	@ (800ad2c <feof+0x44>)
 800acec:	4604      	mov	r4, r0
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	b118      	cbz	r0, 800acfa <feof+0x12>
 800acf2:	6a03      	ldr	r3, [r0, #32]
 800acf4:	b90b      	cbnz	r3, 800acfa <feof+0x12>
 800acf6:	f000 f8cb 	bl	800ae90 <__sinit>
 800acfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acfc:	07d8      	lsls	r0, r3, #31
 800acfe:	d405      	bmi.n	800ad0c <feof+0x24>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	0599      	lsls	r1, r3, #22
 800ad04:	d402      	bmi.n	800ad0c <feof+0x24>
 800ad06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad08:	f000 fa09 	bl	800b11e <__retarget_lock_acquire_recursive>
 800ad0c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad0e:	89a5      	ldrh	r5, [r4, #12]
 800ad10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad14:	07d2      	lsls	r2, r2, #31
 800ad16:	f3c5 1540 	ubfx	r5, r5, #5, #1
 800ad1a:	d404      	bmi.n	800ad26 <feof+0x3e>
 800ad1c:	059b      	lsls	r3, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <feof+0x3e>
 800ad20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad22:	f000 f9fd 	bl	800b120 <__retarget_lock_release_recursive>
 800ad26:	4628      	mov	r0, r5
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	bf00      	nop
 800ad2c:	2000003c 	.word	0x2000003c

0800ad30 <ferror>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4b10      	ldr	r3, [pc, #64]	@ (800ad74 <ferror+0x44>)
 800ad34:	4604      	mov	r4, r0
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	b118      	cbz	r0, 800ad42 <ferror+0x12>
 800ad3a:	6a03      	ldr	r3, [r0, #32]
 800ad3c:	b90b      	cbnz	r3, 800ad42 <ferror+0x12>
 800ad3e:	f000 f8a7 	bl	800ae90 <__sinit>
 800ad42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad44:	07d8      	lsls	r0, r3, #31
 800ad46:	d405      	bmi.n	800ad54 <ferror+0x24>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	0599      	lsls	r1, r3, #22
 800ad4c:	d402      	bmi.n	800ad54 <ferror+0x24>
 800ad4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad50:	f000 f9e5 	bl	800b11e <__retarget_lock_acquire_recursive>
 800ad54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad56:	89a5      	ldrh	r5, [r4, #12]
 800ad58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad5c:	07d2      	lsls	r2, r2, #31
 800ad5e:	f3c5 1580 	ubfx	r5, r5, #6, #1
 800ad62:	d404      	bmi.n	800ad6e <ferror+0x3e>
 800ad64:	059b      	lsls	r3, r3, #22
 800ad66:	d402      	bmi.n	800ad6e <ferror+0x3e>
 800ad68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad6a:	f000 f9d9 	bl	800b120 <__retarget_lock_release_recursive>
 800ad6e:	4628      	mov	r0, r5
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	bf00      	nop
 800ad74:	2000003c 	.word	0x2000003c

0800ad78 <std>:
 800ad78:	2300      	movs	r3, #0
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	8181      	strh	r1, [r0, #12]
 800ad8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad8c:	81c2      	strh	r2, [r0, #14]
 800ad8e:	6183      	str	r3, [r0, #24]
 800ad90:	4619      	mov	r1, r3
 800ad92:	2208      	movs	r2, #8
 800ad94:	305c      	adds	r0, #92	@ 0x5c
 800ad96:	f000 f98e 	bl	800b0b6 <memset>
 800ad9a:	4b0d      	ldr	r3, [pc, #52]	@ (800add0 <std+0x58>)
 800ad9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <std+0x5c>)
 800ada0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <std+0x60>)
 800ada4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ada6:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <std+0x64>)
 800ada8:	6323      	str	r3, [r4, #48]	@ 0x30
 800adaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <std+0x68>)
 800adac:	6224      	str	r4, [r4, #32]
 800adae:	429c      	cmp	r4, r3
 800adb0:	d006      	beq.n	800adc0 <std+0x48>
 800adb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800adb6:	4294      	cmp	r4, r2
 800adb8:	d002      	beq.n	800adc0 <std+0x48>
 800adba:	33d0      	adds	r3, #208	@ 0xd0
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d105      	bne.n	800adcc <std+0x54>
 800adc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800adc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc8:	f000 b9a8 	b.w	800b11c <__retarget_lock_init_recursive>
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	bf00      	nop
 800add0:	0800b99d 	.word	0x0800b99d
 800add4:	0800b9bf 	.word	0x0800b9bf
 800add8:	0800b9f7 	.word	0x0800b9f7
 800addc:	0800ba1b 	.word	0x0800ba1b
 800ade0:	200113fc 	.word	0x200113fc

0800ade4 <stdio_exit_handler>:
 800ade4:	4a02      	ldr	r2, [pc, #8]	@ (800adf0 <stdio_exit_handler+0xc>)
 800ade6:	4903      	ldr	r1, [pc, #12]	@ (800adf4 <stdio_exit_handler+0x10>)
 800ade8:	4803      	ldr	r0, [pc, #12]	@ (800adf8 <stdio_exit_handler+0x14>)
 800adea:	f000 b87b 	b.w	800aee4 <_fwalk_sglue>
 800adee:	bf00      	nop
 800adf0:	20000030 	.word	0x20000030
 800adf4:	0800b935 	.word	0x0800b935
 800adf8:	20000040 	.word	0x20000040

0800adfc <cleanup_stdio>:
 800adfc:	6841      	ldr	r1, [r0, #4]
 800adfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <cleanup_stdio+0x34>)
 800ae00:	4299      	cmp	r1, r3
 800ae02:	b510      	push	{r4, lr}
 800ae04:	4604      	mov	r4, r0
 800ae06:	d001      	beq.n	800ae0c <cleanup_stdio+0x10>
 800ae08:	f000 fd94 	bl	800b934 <_fflush_r>
 800ae0c:	68a1      	ldr	r1, [r4, #8]
 800ae0e:	4b09      	ldr	r3, [pc, #36]	@ (800ae34 <cleanup_stdio+0x38>)
 800ae10:	4299      	cmp	r1, r3
 800ae12:	d002      	beq.n	800ae1a <cleanup_stdio+0x1e>
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 fd8d 	bl	800b934 <_fflush_r>
 800ae1a:	68e1      	ldr	r1, [r4, #12]
 800ae1c:	4b06      	ldr	r3, [pc, #24]	@ (800ae38 <cleanup_stdio+0x3c>)
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d004      	beq.n	800ae2c <cleanup_stdio+0x30>
 800ae22:	4620      	mov	r0, r4
 800ae24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae28:	f000 bd84 	b.w	800b934 <_fflush_r>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	bf00      	nop
 800ae30:	200113fc 	.word	0x200113fc
 800ae34:	20011464 	.word	0x20011464
 800ae38:	200114cc 	.word	0x200114cc

0800ae3c <global_stdio_init.part.0>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae6c <global_stdio_init.part.0+0x30>)
 800ae40:	4c0b      	ldr	r4, [pc, #44]	@ (800ae70 <global_stdio_init.part.0+0x34>)
 800ae42:	4a0c      	ldr	r2, [pc, #48]	@ (800ae74 <global_stdio_init.part.0+0x38>)
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	4620      	mov	r0, r4
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2104      	movs	r1, #4
 800ae4c:	f7ff ff94 	bl	800ad78 <std>
 800ae50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae54:	2201      	movs	r2, #1
 800ae56:	2109      	movs	r1, #9
 800ae58:	f7ff ff8e 	bl	800ad78 <std>
 800ae5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae60:	2202      	movs	r2, #2
 800ae62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae66:	2112      	movs	r1, #18
 800ae68:	f7ff bf86 	b.w	800ad78 <std>
 800ae6c:	20011534 	.word	0x20011534
 800ae70:	200113fc 	.word	0x200113fc
 800ae74:	0800ade5 	.word	0x0800ade5

0800ae78 <__sfp_lock_acquire>:
 800ae78:	4801      	ldr	r0, [pc, #4]	@ (800ae80 <__sfp_lock_acquire+0x8>)
 800ae7a:	f000 b950 	b.w	800b11e <__retarget_lock_acquire_recursive>
 800ae7e:	bf00      	nop
 800ae80:	20011539 	.word	0x20011539

0800ae84 <__sfp_lock_release>:
 800ae84:	4801      	ldr	r0, [pc, #4]	@ (800ae8c <__sfp_lock_release+0x8>)
 800ae86:	f000 b94b 	b.w	800b120 <__retarget_lock_release_recursive>
 800ae8a:	bf00      	nop
 800ae8c:	20011539 	.word	0x20011539

0800ae90 <__sinit>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	f7ff fff0 	bl	800ae78 <__sfp_lock_acquire>
 800ae98:	6a23      	ldr	r3, [r4, #32]
 800ae9a:	b11b      	cbz	r3, 800aea4 <__sinit+0x14>
 800ae9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea0:	f7ff bff0 	b.w	800ae84 <__sfp_lock_release>
 800aea4:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__sinit+0x28>)
 800aea6:	6223      	str	r3, [r4, #32]
 800aea8:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <__sinit+0x2c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1f5      	bne.n	800ae9c <__sinit+0xc>
 800aeb0:	f7ff ffc4 	bl	800ae3c <global_stdio_init.part.0>
 800aeb4:	e7f2      	b.n	800ae9c <__sinit+0xc>
 800aeb6:	bf00      	nop
 800aeb8:	0800adfd 	.word	0x0800adfd
 800aebc:	20011534 	.word	0x20011534

0800aec0 <fiprintf>:
 800aec0:	b40e      	push	{r1, r2, r3}
 800aec2:	b503      	push	{r0, r1, lr}
 800aec4:	4601      	mov	r1, r0
 800aec6:	ab03      	add	r3, sp, #12
 800aec8:	4805      	ldr	r0, [pc, #20]	@ (800aee0 <fiprintf+0x20>)
 800aeca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aece:	6800      	ldr	r0, [r0, #0]
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	f000 f965 	bl	800b1a0 <_vfiprintf_r>
 800aed6:	b002      	add	sp, #8
 800aed8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aedc:	b003      	add	sp, #12
 800aede:	4770      	bx	lr
 800aee0:	2000003c 	.word	0x2000003c

0800aee4 <_fwalk_sglue>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4607      	mov	r7, r0
 800aeea:	4688      	mov	r8, r1
 800aeec:	4614      	mov	r4, r2
 800aeee:	2600      	movs	r6, #0
 800aef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aef4:	f1b9 0901 	subs.w	r9, r9, #1
 800aef8:	d505      	bpl.n	800af06 <_fwalk_sglue+0x22>
 800aefa:	6824      	ldr	r4, [r4, #0]
 800aefc:	2c00      	cmp	r4, #0
 800aefe:	d1f7      	bne.n	800aef0 <_fwalk_sglue+0xc>
 800af00:	4630      	mov	r0, r6
 800af02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af06:	89ab      	ldrh	r3, [r5, #12]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d907      	bls.n	800af1c <_fwalk_sglue+0x38>
 800af0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af10:	3301      	adds	r3, #1
 800af12:	d003      	beq.n	800af1c <_fwalk_sglue+0x38>
 800af14:	4629      	mov	r1, r5
 800af16:	4638      	mov	r0, r7
 800af18:	47c0      	blx	r8
 800af1a:	4306      	orrs	r6, r0
 800af1c:	3568      	adds	r5, #104	@ 0x68
 800af1e:	e7e9      	b.n	800aef4 <_fwalk_sglue+0x10>

0800af20 <getc>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4b16      	ldr	r3, [pc, #88]	@ (800af7c <getc+0x5c>)
 800af24:	681d      	ldr	r5, [r3, #0]
 800af26:	4604      	mov	r4, r0
 800af28:	b125      	cbz	r5, 800af34 <getc+0x14>
 800af2a:	6a2b      	ldr	r3, [r5, #32]
 800af2c:	b913      	cbnz	r3, 800af34 <getc+0x14>
 800af2e:	4628      	mov	r0, r5
 800af30:	f7ff ffae 	bl	800ae90 <__sinit>
 800af34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af36:	07d8      	lsls	r0, r3, #31
 800af38:	d405      	bmi.n	800af46 <getc+0x26>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	0599      	lsls	r1, r3, #22
 800af3e:	d402      	bmi.n	800af46 <getc+0x26>
 800af40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af42:	f000 f8ec 	bl	800b11e <__retarget_lock_acquire_recursive>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	3b01      	subs	r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	da0f      	bge.n	800af70 <getc+0x50>
 800af50:	4628      	mov	r0, r5
 800af52:	4621      	mov	r1, r4
 800af54:	f000 f884 	bl	800b060 <__srget_r>
 800af58:	4605      	mov	r5, r0
 800af5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af5c:	07da      	lsls	r2, r3, #31
 800af5e:	d405      	bmi.n	800af6c <getc+0x4c>
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	059b      	lsls	r3, r3, #22
 800af64:	d402      	bmi.n	800af6c <getc+0x4c>
 800af66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af68:	f000 f8da 	bl	800b120 <__retarget_lock_release_recursive>
 800af6c:	4628      	mov	r0, r5
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	6022      	str	r2, [r4, #0]
 800af76:	781d      	ldrb	r5, [r3, #0]
 800af78:	e7ef      	b.n	800af5a <getc+0x3a>
 800af7a:	bf00      	nop
 800af7c:	2000003c 	.word	0x2000003c

0800af80 <iprintf>:
 800af80:	b40f      	push	{r0, r1, r2, r3}
 800af82:	b507      	push	{r0, r1, r2, lr}
 800af84:	4906      	ldr	r1, [pc, #24]	@ (800afa0 <iprintf+0x20>)
 800af86:	ab04      	add	r3, sp, #16
 800af88:	6808      	ldr	r0, [r1, #0]
 800af8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8e:	6881      	ldr	r1, [r0, #8]
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	f000 f905 	bl	800b1a0 <_vfiprintf_r>
 800af96:	b003      	add	sp, #12
 800af98:	f85d eb04 	ldr.w	lr, [sp], #4
 800af9c:	b004      	add	sp, #16
 800af9e:	4770      	bx	lr
 800afa0:	2000003c 	.word	0x2000003c

0800afa4 <_puts_r>:
 800afa4:	6a03      	ldr	r3, [r0, #32]
 800afa6:	b570      	push	{r4, r5, r6, lr}
 800afa8:	6884      	ldr	r4, [r0, #8]
 800afaa:	4605      	mov	r5, r0
 800afac:	460e      	mov	r6, r1
 800afae:	b90b      	cbnz	r3, 800afb4 <_puts_r+0x10>
 800afb0:	f7ff ff6e 	bl	800ae90 <__sinit>
 800afb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afb6:	07db      	lsls	r3, r3, #31
 800afb8:	d405      	bmi.n	800afc6 <_puts_r+0x22>
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	0598      	lsls	r0, r3, #22
 800afbe:	d402      	bmi.n	800afc6 <_puts_r+0x22>
 800afc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afc2:	f000 f8ac 	bl	800b11e <__retarget_lock_acquire_recursive>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	0719      	lsls	r1, r3, #28
 800afca:	d502      	bpl.n	800afd2 <_puts_r+0x2e>
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d135      	bne.n	800b03e <_puts_r+0x9a>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 fd63 	bl	800baa0 <__swsetup_r>
 800afda:	b380      	cbz	r0, 800b03e <_puts_r+0x9a>
 800afdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800afe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afe2:	07da      	lsls	r2, r3, #31
 800afe4:	d405      	bmi.n	800aff2 <_puts_r+0x4e>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	059b      	lsls	r3, r3, #22
 800afea:	d402      	bmi.n	800aff2 <_puts_r+0x4e>
 800afec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afee:	f000 f897 	bl	800b120 <__retarget_lock_release_recursive>
 800aff2:	4628      	mov	r0, r5
 800aff4:	bd70      	pop	{r4, r5, r6, pc}
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da04      	bge.n	800b004 <_puts_r+0x60>
 800affa:	69a2      	ldr	r2, [r4, #24]
 800affc:	429a      	cmp	r2, r3
 800affe:	dc17      	bgt.n	800b030 <_puts_r+0x8c>
 800b000:	290a      	cmp	r1, #10
 800b002:	d015      	beq.n	800b030 <_puts_r+0x8c>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	6022      	str	r2, [r4, #0]
 800b00a:	7019      	strb	r1, [r3, #0]
 800b00c:	68a3      	ldr	r3, [r4, #8]
 800b00e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b012:	3b01      	subs	r3, #1
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	2900      	cmp	r1, #0
 800b018:	d1ed      	bne.n	800aff6 <_puts_r+0x52>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	da11      	bge.n	800b042 <_puts_r+0x9e>
 800b01e:	4622      	mov	r2, r4
 800b020:	210a      	movs	r1, #10
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fcfd 	bl	800ba22 <__swbuf_r>
 800b028:	3001      	adds	r0, #1
 800b02a:	d0d7      	beq.n	800afdc <_puts_r+0x38>
 800b02c:	250a      	movs	r5, #10
 800b02e:	e7d7      	b.n	800afe0 <_puts_r+0x3c>
 800b030:	4622      	mov	r2, r4
 800b032:	4628      	mov	r0, r5
 800b034:	f000 fcf5 	bl	800ba22 <__swbuf_r>
 800b038:	3001      	adds	r0, #1
 800b03a:	d1e7      	bne.n	800b00c <_puts_r+0x68>
 800b03c:	e7ce      	b.n	800afdc <_puts_r+0x38>
 800b03e:	3e01      	subs	r6, #1
 800b040:	e7e4      	b.n	800b00c <_puts_r+0x68>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	220a      	movs	r2, #10
 800b04a:	701a      	strb	r2, [r3, #0]
 800b04c:	e7ee      	b.n	800b02c <_puts_r+0x88>
	...

0800b050 <puts>:
 800b050:	4b02      	ldr	r3, [pc, #8]	@ (800b05c <puts+0xc>)
 800b052:	4601      	mov	r1, r0
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f7ff bfa5 	b.w	800afa4 <_puts_r>
 800b05a:	bf00      	nop
 800b05c:	2000003c 	.word	0x2000003c

0800b060 <__srget_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	460c      	mov	r4, r1
 800b064:	4605      	mov	r5, r0
 800b066:	b118      	cbz	r0, 800b070 <__srget_r+0x10>
 800b068:	6a03      	ldr	r3, [r0, #32]
 800b06a:	b90b      	cbnz	r3, 800b070 <__srget_r+0x10>
 800b06c:	f7ff ff10 	bl	800ae90 <__sinit>
 800b070:	4621      	mov	r1, r4
 800b072:	4628      	mov	r0, r5
 800b074:	f000 fdda 	bl	800bc2c <__srefill_r>
 800b078:	b938      	cbnz	r0, 800b08a <__srget_r+0x2a>
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	6063      	str	r3, [r4, #4]
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	6022      	str	r2, [r4, #0]
 800b086:	7818      	ldrb	r0, [r3, #0]
 800b088:	bd38      	pop	{r3, r4, r5, pc}
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b08e:	e7fb      	b.n	800b088 <__srget_r+0x28>

0800b090 <strncpy>:
 800b090:	b510      	push	{r4, lr}
 800b092:	3901      	subs	r1, #1
 800b094:	4603      	mov	r3, r0
 800b096:	b132      	cbz	r2, 800b0a6 <strncpy+0x16>
 800b098:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b09c:	f803 4b01 	strb.w	r4, [r3], #1
 800b0a0:	3a01      	subs	r2, #1
 800b0a2:	2c00      	cmp	r4, #0
 800b0a4:	d1f7      	bne.n	800b096 <strncpy+0x6>
 800b0a6:	441a      	add	r2, r3
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d100      	bne.n	800b0b0 <strncpy+0x20>
 800b0ae:	bd10      	pop	{r4, pc}
 800b0b0:	f803 1b01 	strb.w	r1, [r3], #1
 800b0b4:	e7f9      	b.n	800b0aa <strncpy+0x1a>

0800b0b6 <memset>:
 800b0b6:	4402      	add	r2, r0
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d100      	bne.n	800b0c0 <memset+0xa>
 800b0be:	4770      	bx	lr
 800b0c0:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c4:	e7f9      	b.n	800b0ba <memset+0x4>
	...

0800b0c8 <__errno>:
 800b0c8:	4b01      	ldr	r3, [pc, #4]	@ (800b0d0 <__errno+0x8>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	2000003c 	.word	0x2000003c

0800b0d4 <__libc_init_array>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	4d0d      	ldr	r5, [pc, #52]	@ (800b10c <__libc_init_array+0x38>)
 800b0d8:	4c0d      	ldr	r4, [pc, #52]	@ (800b110 <__libc_init_array+0x3c>)
 800b0da:	1b64      	subs	r4, r4, r5
 800b0dc:	10a4      	asrs	r4, r4, #2
 800b0de:	2600      	movs	r6, #0
 800b0e0:	42a6      	cmp	r6, r4
 800b0e2:	d109      	bne.n	800b0f8 <__libc_init_array+0x24>
 800b0e4:	4d0b      	ldr	r5, [pc, #44]	@ (800b114 <__libc_init_array+0x40>)
 800b0e6:	4c0c      	ldr	r4, [pc, #48]	@ (800b118 <__libc_init_array+0x44>)
 800b0e8:	f001 fc76 	bl	800c9d8 <_init>
 800b0ec:	1b64      	subs	r4, r4, r5
 800b0ee:	10a4      	asrs	r4, r4, #2
 800b0f0:	2600      	movs	r6, #0
 800b0f2:	42a6      	cmp	r6, r4
 800b0f4:	d105      	bne.n	800b102 <__libc_init_array+0x2e>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0fc:	4798      	blx	r3
 800b0fe:	3601      	adds	r6, #1
 800b100:	e7ee      	b.n	800b0e0 <__libc_init_array+0xc>
 800b102:	f855 3b04 	ldr.w	r3, [r5], #4
 800b106:	4798      	blx	r3
 800b108:	3601      	adds	r6, #1
 800b10a:	e7f2      	b.n	800b0f2 <__libc_init_array+0x1e>
 800b10c:	0800c9f8 	.word	0x0800c9f8
 800b110:	0800c9f8 	.word	0x0800c9f8
 800b114:	0800c9f8 	.word	0x0800c9f8
 800b118:	0800ca04 	.word	0x0800ca04

0800b11c <__retarget_lock_init_recursive>:
 800b11c:	4770      	bx	lr

0800b11e <__retarget_lock_acquire_recursive>:
 800b11e:	4770      	bx	lr

0800b120 <__retarget_lock_release_recursive>:
 800b120:	4770      	bx	lr

0800b122 <memcpy>:
 800b122:	440a      	add	r2, r1
 800b124:	4291      	cmp	r1, r2
 800b126:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b12a:	d100      	bne.n	800b12e <memcpy+0xc>
 800b12c:	4770      	bx	lr
 800b12e:	b510      	push	{r4, lr}
 800b130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b138:	4291      	cmp	r1, r2
 800b13a:	d1f9      	bne.n	800b130 <memcpy+0xe>
 800b13c:	bd10      	pop	{r4, pc}

0800b13e <abort>:
 800b13e:	b508      	push	{r3, lr}
 800b140:	2006      	movs	r0, #6
 800b142:	f000 fe53 	bl	800bdec <raise>
 800b146:	2001      	movs	r0, #1
 800b148:	f000 ff28 	bl	800bf9c <_exit>

0800b14c <__sfputc_r>:
 800b14c:	6893      	ldr	r3, [r2, #8]
 800b14e:	3b01      	subs	r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	b410      	push	{r4}
 800b154:	6093      	str	r3, [r2, #8]
 800b156:	da08      	bge.n	800b16a <__sfputc_r+0x1e>
 800b158:	6994      	ldr	r4, [r2, #24]
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	db01      	blt.n	800b162 <__sfputc_r+0x16>
 800b15e:	290a      	cmp	r1, #10
 800b160:	d103      	bne.n	800b16a <__sfputc_r+0x1e>
 800b162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b166:	f000 bc5c 	b.w	800ba22 <__swbuf_r>
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	1c58      	adds	r0, r3, #1
 800b16e:	6010      	str	r0, [r2, #0]
 800b170:	7019      	strb	r1, [r3, #0]
 800b172:	4608      	mov	r0, r1
 800b174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <__sfputs_r>:
 800b17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	4614      	mov	r4, r2
 800b182:	18d5      	adds	r5, r2, r3
 800b184:	42ac      	cmp	r4, r5
 800b186:	d101      	bne.n	800b18c <__sfputs_r+0x12>
 800b188:	2000      	movs	r0, #0
 800b18a:	e007      	b.n	800b19c <__sfputs_r+0x22>
 800b18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b190:	463a      	mov	r2, r7
 800b192:	4630      	mov	r0, r6
 800b194:	f7ff ffda 	bl	800b14c <__sfputc_r>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	d1f3      	bne.n	800b184 <__sfputs_r+0xa>
 800b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1a0 <_vfiprintf_r>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	b09d      	sub	sp, #116	@ 0x74
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	4698      	mov	r8, r3
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	b118      	cbz	r0, 800b1b8 <_vfiprintf_r+0x18>
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	b90b      	cbnz	r3, 800b1b8 <_vfiprintf_r+0x18>
 800b1b4:	f7ff fe6c 	bl	800ae90 <__sinit>
 800b1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1ba:	07d9      	lsls	r1, r3, #31
 800b1bc:	d405      	bmi.n	800b1ca <_vfiprintf_r+0x2a>
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	059a      	lsls	r2, r3, #22
 800b1c2:	d402      	bmi.n	800b1ca <_vfiprintf_r+0x2a>
 800b1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1c6:	f7ff ffaa 	bl	800b11e <__retarget_lock_acquire_recursive>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	071b      	lsls	r3, r3, #28
 800b1ce:	d501      	bpl.n	800b1d4 <_vfiprintf_r+0x34>
 800b1d0:	692b      	ldr	r3, [r5, #16]
 800b1d2:	b99b      	cbnz	r3, 800b1fc <_vfiprintf_r+0x5c>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 fc62 	bl	800baa0 <__swsetup_r>
 800b1dc:	b170      	cbz	r0, 800b1fc <_vfiprintf_r+0x5c>
 800b1de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1e0:	07dc      	lsls	r4, r3, #31
 800b1e2:	d504      	bpl.n	800b1ee <_vfiprintf_r+0x4e>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1e8:	b01d      	add	sp, #116	@ 0x74
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	89ab      	ldrh	r3, [r5, #12]
 800b1f0:	0598      	lsls	r0, r3, #22
 800b1f2:	d4f7      	bmi.n	800b1e4 <_vfiprintf_r+0x44>
 800b1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1f6:	f7ff ff93 	bl	800b120 <__retarget_lock_release_recursive>
 800b1fa:	e7f3      	b.n	800b1e4 <_vfiprintf_r+0x44>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b200:	2320      	movs	r3, #32
 800b202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b206:	f8cd 800c 	str.w	r8, [sp, #12]
 800b20a:	2330      	movs	r3, #48	@ 0x30
 800b20c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3bc <_vfiprintf_r+0x21c>
 800b210:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b214:	f04f 0901 	mov.w	r9, #1
 800b218:	4623      	mov	r3, r4
 800b21a:	469a      	mov	sl, r3
 800b21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b220:	b10a      	cbz	r2, 800b226 <_vfiprintf_r+0x86>
 800b222:	2a25      	cmp	r2, #37	@ 0x25
 800b224:	d1f9      	bne.n	800b21a <_vfiprintf_r+0x7a>
 800b226:	ebba 0b04 	subs.w	fp, sl, r4
 800b22a:	d00b      	beq.n	800b244 <_vfiprintf_r+0xa4>
 800b22c:	465b      	mov	r3, fp
 800b22e:	4622      	mov	r2, r4
 800b230:	4629      	mov	r1, r5
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ffa1 	bl	800b17a <__sfputs_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	f000 80a7 	beq.w	800b38c <_vfiprintf_r+0x1ec>
 800b23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b240:	445a      	add	r2, fp
 800b242:	9209      	str	r2, [sp, #36]	@ 0x24
 800b244:	f89a 3000 	ldrb.w	r3, [sl]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 809f 	beq.w	800b38c <_vfiprintf_r+0x1ec>
 800b24e:	2300      	movs	r3, #0
 800b250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b258:	f10a 0a01 	add.w	sl, sl, #1
 800b25c:	9304      	str	r3, [sp, #16]
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b264:	931a      	str	r3, [sp, #104]	@ 0x68
 800b266:	4654      	mov	r4, sl
 800b268:	2205      	movs	r2, #5
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	4853      	ldr	r0, [pc, #332]	@ (800b3bc <_vfiprintf_r+0x21c>)
 800b270:	f7f5 f81e 	bl	80002b0 <memchr>
 800b274:	9a04      	ldr	r2, [sp, #16]
 800b276:	b9d8      	cbnz	r0, 800b2b0 <_vfiprintf_r+0x110>
 800b278:	06d1      	lsls	r1, r2, #27
 800b27a:	bf44      	itt	mi
 800b27c:	2320      	movmi	r3, #32
 800b27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b282:	0713      	lsls	r3, r2, #28
 800b284:	bf44      	itt	mi
 800b286:	232b      	movmi	r3, #43	@ 0x2b
 800b288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b28c:	f89a 3000 	ldrb.w	r3, [sl]
 800b290:	2b2a      	cmp	r3, #42	@ 0x2a
 800b292:	d015      	beq.n	800b2c0 <_vfiprintf_r+0x120>
 800b294:	9a07      	ldr	r2, [sp, #28]
 800b296:	4654      	mov	r4, sl
 800b298:	2000      	movs	r0, #0
 800b29a:	f04f 0c0a 	mov.w	ip, #10
 800b29e:	4621      	mov	r1, r4
 800b2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a4:	3b30      	subs	r3, #48	@ 0x30
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d94b      	bls.n	800b342 <_vfiprintf_r+0x1a2>
 800b2aa:	b1b0      	cbz	r0, 800b2da <_vfiprintf_r+0x13a>
 800b2ac:	9207      	str	r2, [sp, #28]
 800b2ae:	e014      	b.n	800b2da <_vfiprintf_r+0x13a>
 800b2b0:	eba0 0308 	sub.w	r3, r0, r8
 800b2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	46a2      	mov	sl, r4
 800b2be:	e7d2      	b.n	800b266 <_vfiprintf_r+0xc6>
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	1d19      	adds	r1, r3, #4
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	9103      	str	r1, [sp, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	bfbb      	ittet	lt
 800b2cc:	425b      	neglt	r3, r3
 800b2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d2:	9307      	strge	r3, [sp, #28]
 800b2d4:	9307      	strlt	r3, [sp, #28]
 800b2d6:	bfb8      	it	lt
 800b2d8:	9204      	strlt	r2, [sp, #16]
 800b2da:	7823      	ldrb	r3, [r4, #0]
 800b2dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2de:	d10a      	bne.n	800b2f6 <_vfiprintf_r+0x156>
 800b2e0:	7863      	ldrb	r3, [r4, #1]
 800b2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e4:	d132      	bne.n	800b34c <_vfiprintf_r+0x1ac>
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	1d1a      	adds	r2, r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	9203      	str	r2, [sp, #12]
 800b2ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2f2:	3402      	adds	r4, #2
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3cc <_vfiprintf_r+0x22c>
 800b2fa:	7821      	ldrb	r1, [r4, #0]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	4650      	mov	r0, sl
 800b300:	f7f4 ffd6 	bl	80002b0 <memchr>
 800b304:	b138      	cbz	r0, 800b316 <_vfiprintf_r+0x176>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	eba0 000a 	sub.w	r0, r0, sl
 800b30c:	2240      	movs	r2, #64	@ 0x40
 800b30e:	4082      	lsls	r2, r0
 800b310:	4313      	orrs	r3, r2
 800b312:	3401      	adds	r4, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31a:	4829      	ldr	r0, [pc, #164]	@ (800b3c0 <_vfiprintf_r+0x220>)
 800b31c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b320:	2206      	movs	r2, #6
 800b322:	f7f4 ffc5 	bl	80002b0 <memchr>
 800b326:	2800      	cmp	r0, #0
 800b328:	d03f      	beq.n	800b3aa <_vfiprintf_r+0x20a>
 800b32a:	4b26      	ldr	r3, [pc, #152]	@ (800b3c4 <_vfiprintf_r+0x224>)
 800b32c:	bb1b      	cbnz	r3, 800b376 <_vfiprintf_r+0x1d6>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	3308      	adds	r3, #8
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33c:	443b      	add	r3, r7
 800b33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b340:	e76a      	b.n	800b218 <_vfiprintf_r+0x78>
 800b342:	fb0c 3202 	mla	r2, ip, r2, r3
 800b346:	460c      	mov	r4, r1
 800b348:	2001      	movs	r0, #1
 800b34a:	e7a8      	b.n	800b29e <_vfiprintf_r+0xfe>
 800b34c:	2300      	movs	r3, #0
 800b34e:	3401      	adds	r4, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	4619      	mov	r1, r3
 800b354:	f04f 0c0a 	mov.w	ip, #10
 800b358:	4620      	mov	r0, r4
 800b35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35e:	3a30      	subs	r2, #48	@ 0x30
 800b360:	2a09      	cmp	r2, #9
 800b362:	d903      	bls.n	800b36c <_vfiprintf_r+0x1cc>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0c6      	beq.n	800b2f6 <_vfiprintf_r+0x156>
 800b368:	9105      	str	r1, [sp, #20]
 800b36a:	e7c4      	b.n	800b2f6 <_vfiprintf_r+0x156>
 800b36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b370:	4604      	mov	r4, r0
 800b372:	2301      	movs	r3, #1
 800b374:	e7f0      	b.n	800b358 <_vfiprintf_r+0x1b8>
 800b376:	ab03      	add	r3, sp, #12
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	462a      	mov	r2, r5
 800b37c:	4b12      	ldr	r3, [pc, #72]	@ (800b3c8 <_vfiprintf_r+0x228>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	4630      	mov	r0, r6
 800b382:	f3af 8000 	nop.w
 800b386:	4607      	mov	r7, r0
 800b388:	1c78      	adds	r0, r7, #1
 800b38a:	d1d6      	bne.n	800b33a <_vfiprintf_r+0x19a>
 800b38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d405      	bmi.n	800b39e <_vfiprintf_r+0x1fe>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d402      	bmi.n	800b39e <_vfiprintf_r+0x1fe>
 800b398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b39a:	f7ff fec1 	bl	800b120 <__retarget_lock_release_recursive>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	065b      	lsls	r3, r3, #25
 800b3a2:	f53f af1f 	bmi.w	800b1e4 <_vfiprintf_r+0x44>
 800b3a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3a8:	e71e      	b.n	800b1e8 <_vfiprintf_r+0x48>
 800b3aa:	ab03      	add	r3, sp, #12
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4b05      	ldr	r3, [pc, #20]	@ (800b3c8 <_vfiprintf_r+0x228>)
 800b3b2:	a904      	add	r1, sp, #16
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f000 f91b 	bl	800b5f0 <_printf_i>
 800b3ba:	e7e4      	b.n	800b386 <_vfiprintf_r+0x1e6>
 800b3bc:	0800c9a4 	.word	0x0800c9a4
 800b3c0:	0800c9ae 	.word	0x0800c9ae
 800b3c4:	00000000 	.word	0x00000000
 800b3c8:	0800b17b 	.word	0x0800b17b
 800b3cc:	0800c9aa 	.word	0x0800c9aa

0800b3d0 <sbrk_aligned>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	4e0f      	ldr	r6, [pc, #60]	@ (800b410 <sbrk_aligned+0x40>)
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	6831      	ldr	r1, [r6, #0]
 800b3d8:	4605      	mov	r5, r0
 800b3da:	b911      	cbnz	r1, 800b3e2 <sbrk_aligned+0x12>
 800b3dc:	f000 fd34 	bl	800be48 <_sbrk_r>
 800b3e0:	6030      	str	r0, [r6, #0]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 fd2f 	bl	800be48 <_sbrk_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d103      	bne.n	800b3f6 <sbrk_aligned+0x26>
 800b3ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	bd70      	pop	{r4, r5, r6, pc}
 800b3f6:	1cc4      	adds	r4, r0, #3
 800b3f8:	f024 0403 	bic.w	r4, r4, #3
 800b3fc:	42a0      	cmp	r0, r4
 800b3fe:	d0f8      	beq.n	800b3f2 <sbrk_aligned+0x22>
 800b400:	1a21      	subs	r1, r4, r0
 800b402:	4628      	mov	r0, r5
 800b404:	f000 fd20 	bl	800be48 <_sbrk_r>
 800b408:	3001      	adds	r0, #1
 800b40a:	d1f2      	bne.n	800b3f2 <sbrk_aligned+0x22>
 800b40c:	e7ef      	b.n	800b3ee <sbrk_aligned+0x1e>
 800b40e:	bf00      	nop
 800b410:	2001153c 	.word	0x2001153c

0800b414 <_malloc_r>:
 800b414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b418:	1ccd      	adds	r5, r1, #3
 800b41a:	f025 0503 	bic.w	r5, r5, #3
 800b41e:	3508      	adds	r5, #8
 800b420:	2d0c      	cmp	r5, #12
 800b422:	bf38      	it	cc
 800b424:	250c      	movcc	r5, #12
 800b426:	2d00      	cmp	r5, #0
 800b428:	4606      	mov	r6, r0
 800b42a:	db01      	blt.n	800b430 <_malloc_r+0x1c>
 800b42c:	42a9      	cmp	r1, r5
 800b42e:	d904      	bls.n	800b43a <_malloc_r+0x26>
 800b430:	230c      	movs	r3, #12
 800b432:	6033      	str	r3, [r6, #0]
 800b434:	2000      	movs	r0, #0
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b510 <_malloc_r+0xfc>
 800b43e:	f000 faa1 	bl	800b984 <__malloc_lock>
 800b442:	f8d8 3000 	ldr.w	r3, [r8]
 800b446:	461c      	mov	r4, r3
 800b448:	bb44      	cbnz	r4, 800b49c <_malloc_r+0x88>
 800b44a:	4629      	mov	r1, r5
 800b44c:	4630      	mov	r0, r6
 800b44e:	f7ff ffbf 	bl	800b3d0 <sbrk_aligned>
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	4604      	mov	r4, r0
 800b456:	d158      	bne.n	800b50a <_malloc_r+0xf6>
 800b458:	f8d8 4000 	ldr.w	r4, [r8]
 800b45c:	4627      	mov	r7, r4
 800b45e:	2f00      	cmp	r7, #0
 800b460:	d143      	bne.n	800b4ea <_malloc_r+0xd6>
 800b462:	2c00      	cmp	r4, #0
 800b464:	d04b      	beq.n	800b4fe <_malloc_r+0xea>
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	4639      	mov	r1, r7
 800b46a:	4630      	mov	r0, r6
 800b46c:	eb04 0903 	add.w	r9, r4, r3
 800b470:	f000 fcea 	bl	800be48 <_sbrk_r>
 800b474:	4581      	cmp	r9, r0
 800b476:	d142      	bne.n	800b4fe <_malloc_r+0xea>
 800b478:	6821      	ldr	r1, [r4, #0]
 800b47a:	1a6d      	subs	r5, r5, r1
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ffa6 	bl	800b3d0 <sbrk_aligned>
 800b484:	3001      	adds	r0, #1
 800b486:	d03a      	beq.n	800b4fe <_malloc_r+0xea>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	442b      	add	r3, r5
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	f8d8 3000 	ldr.w	r3, [r8]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	bb62      	cbnz	r2, 800b4f0 <_malloc_r+0xdc>
 800b496:	f8c8 7000 	str.w	r7, [r8]
 800b49a:	e00f      	b.n	800b4bc <_malloc_r+0xa8>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	1b52      	subs	r2, r2, r5
 800b4a0:	d420      	bmi.n	800b4e4 <_malloc_r+0xd0>
 800b4a2:	2a0b      	cmp	r2, #11
 800b4a4:	d917      	bls.n	800b4d6 <_malloc_r+0xc2>
 800b4a6:	1961      	adds	r1, r4, r5
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	6025      	str	r5, [r4, #0]
 800b4ac:	bf18      	it	ne
 800b4ae:	6059      	strne	r1, [r3, #4]
 800b4b0:	6863      	ldr	r3, [r4, #4]
 800b4b2:	bf08      	it	eq
 800b4b4:	f8c8 1000 	streq.w	r1, [r8]
 800b4b8:	5162      	str	r2, [r4, r5]
 800b4ba:	604b      	str	r3, [r1, #4]
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f000 fa67 	bl	800b990 <__malloc_unlock>
 800b4c2:	f104 000b 	add.w	r0, r4, #11
 800b4c6:	1d23      	adds	r3, r4, #4
 800b4c8:	f020 0007 	bic.w	r0, r0, #7
 800b4cc:	1ac2      	subs	r2, r0, r3
 800b4ce:	bf1c      	itt	ne
 800b4d0:	1a1b      	subne	r3, r3, r0
 800b4d2:	50a3      	strne	r3, [r4, r2]
 800b4d4:	e7af      	b.n	800b436 <_malloc_r+0x22>
 800b4d6:	6862      	ldr	r2, [r4, #4]
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	bf0c      	ite	eq
 800b4dc:	f8c8 2000 	streq.w	r2, [r8]
 800b4e0:	605a      	strne	r2, [r3, #4]
 800b4e2:	e7eb      	b.n	800b4bc <_malloc_r+0xa8>
 800b4e4:	4623      	mov	r3, r4
 800b4e6:	6864      	ldr	r4, [r4, #4]
 800b4e8:	e7ae      	b.n	800b448 <_malloc_r+0x34>
 800b4ea:	463c      	mov	r4, r7
 800b4ec:	687f      	ldr	r7, [r7, #4]
 800b4ee:	e7b6      	b.n	800b45e <_malloc_r+0x4a>
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	d1fb      	bne.n	800b4f0 <_malloc_r+0xdc>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	6053      	str	r3, [r2, #4]
 800b4fc:	e7de      	b.n	800b4bc <_malloc_r+0xa8>
 800b4fe:	230c      	movs	r3, #12
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	4630      	mov	r0, r6
 800b504:	f000 fa44 	bl	800b990 <__malloc_unlock>
 800b508:	e794      	b.n	800b434 <_malloc_r+0x20>
 800b50a:	6005      	str	r5, [r0, #0]
 800b50c:	e7d6      	b.n	800b4bc <_malloc_r+0xa8>
 800b50e:	bf00      	nop
 800b510:	20011540 	.word	0x20011540

0800b514 <_printf_common>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	4616      	mov	r6, r2
 800b51a:	4698      	mov	r8, r3
 800b51c:	688a      	ldr	r2, [r1, #8]
 800b51e:	690b      	ldr	r3, [r1, #16]
 800b520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b524:	4293      	cmp	r3, r2
 800b526:	bfb8      	it	lt
 800b528:	4613      	movlt	r3, r2
 800b52a:	6033      	str	r3, [r6, #0]
 800b52c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b530:	4607      	mov	r7, r0
 800b532:	460c      	mov	r4, r1
 800b534:	b10a      	cbz	r2, 800b53a <_printf_common+0x26>
 800b536:	3301      	adds	r3, #1
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	0699      	lsls	r1, r3, #26
 800b53e:	bf42      	ittt	mi
 800b540:	6833      	ldrmi	r3, [r6, #0]
 800b542:	3302      	addmi	r3, #2
 800b544:	6033      	strmi	r3, [r6, #0]
 800b546:	6825      	ldr	r5, [r4, #0]
 800b548:	f015 0506 	ands.w	r5, r5, #6
 800b54c:	d106      	bne.n	800b55c <_printf_common+0x48>
 800b54e:	f104 0a19 	add.w	sl, r4, #25
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	6832      	ldr	r2, [r6, #0]
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc26      	bgt.n	800b5aa <_printf_common+0x96>
 800b55c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	3b00      	subs	r3, #0
 800b564:	bf18      	it	ne
 800b566:	2301      	movne	r3, #1
 800b568:	0692      	lsls	r2, r2, #26
 800b56a:	d42b      	bmi.n	800b5c4 <_printf_common+0xb0>
 800b56c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b570:	4641      	mov	r1, r8
 800b572:	4638      	mov	r0, r7
 800b574:	47c8      	blx	r9
 800b576:	3001      	adds	r0, #1
 800b578:	d01e      	beq.n	800b5b8 <_printf_common+0xa4>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	6922      	ldr	r2, [r4, #16]
 800b57e:	f003 0306 	and.w	r3, r3, #6
 800b582:	2b04      	cmp	r3, #4
 800b584:	bf02      	ittt	eq
 800b586:	68e5      	ldreq	r5, [r4, #12]
 800b588:	6833      	ldreq	r3, [r6, #0]
 800b58a:	1aed      	subeq	r5, r5, r3
 800b58c:	68a3      	ldr	r3, [r4, #8]
 800b58e:	bf0c      	ite	eq
 800b590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b594:	2500      	movne	r5, #0
 800b596:	4293      	cmp	r3, r2
 800b598:	bfc4      	itt	gt
 800b59a:	1a9b      	subgt	r3, r3, r2
 800b59c:	18ed      	addgt	r5, r5, r3
 800b59e:	2600      	movs	r6, #0
 800b5a0:	341a      	adds	r4, #26
 800b5a2:	42b5      	cmp	r5, r6
 800b5a4:	d11a      	bne.n	800b5dc <_printf_common+0xc8>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e008      	b.n	800b5bc <_printf_common+0xa8>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	4641      	mov	r1, r8
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	47c8      	blx	r9
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d103      	bne.n	800b5c0 <_printf_common+0xac>
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	3501      	adds	r5, #1
 800b5c2:	e7c6      	b.n	800b552 <_printf_common+0x3e>
 800b5c4:	18e1      	adds	r1, r4, r3
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	2030      	movs	r0, #48	@ 0x30
 800b5ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ce:	4422      	add	r2, r4
 800b5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d8:	3302      	adds	r3, #2
 800b5da:	e7c7      	b.n	800b56c <_printf_common+0x58>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4622      	mov	r2, r4
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	47c8      	blx	r9
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	d0e6      	beq.n	800b5b8 <_printf_common+0xa4>
 800b5ea:	3601      	adds	r6, #1
 800b5ec:	e7d9      	b.n	800b5a2 <_printf_common+0x8e>
	...

0800b5f0 <_printf_i>:
 800b5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	7e0f      	ldrb	r7, [r1, #24]
 800b5f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f8:	2f78      	cmp	r7, #120	@ 0x78
 800b5fa:	4691      	mov	r9, r2
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	469a      	mov	sl, r3
 800b602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b606:	d807      	bhi.n	800b618 <_printf_i+0x28>
 800b608:	2f62      	cmp	r7, #98	@ 0x62
 800b60a:	d80a      	bhi.n	800b622 <_printf_i+0x32>
 800b60c:	2f00      	cmp	r7, #0
 800b60e:	f000 80d1 	beq.w	800b7b4 <_printf_i+0x1c4>
 800b612:	2f58      	cmp	r7, #88	@ 0x58
 800b614:	f000 80b8 	beq.w	800b788 <_printf_i+0x198>
 800b618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b61c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b620:	e03a      	b.n	800b698 <_printf_i+0xa8>
 800b622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b626:	2b15      	cmp	r3, #21
 800b628:	d8f6      	bhi.n	800b618 <_printf_i+0x28>
 800b62a:	a101      	add	r1, pc, #4	@ (adr r1, 800b630 <_printf_i+0x40>)
 800b62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b630:	0800b689 	.word	0x0800b689
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b619 	.word	0x0800b619
 800b63c:	0800b619 	.word	0x0800b619
 800b640:	0800b619 	.word	0x0800b619
 800b644:	0800b619 	.word	0x0800b619
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b619 	.word	0x0800b619
 800b650:	0800b619 	.word	0x0800b619
 800b654:	0800b619 	.word	0x0800b619
 800b658:	0800b619 	.word	0x0800b619
 800b65c:	0800b79b 	.word	0x0800b79b
 800b660:	0800b6c7 	.word	0x0800b6c7
 800b664:	0800b755 	.word	0x0800b755
 800b668:	0800b619 	.word	0x0800b619
 800b66c:	0800b619 	.word	0x0800b619
 800b670:	0800b7bd 	.word	0x0800b7bd
 800b674:	0800b619 	.word	0x0800b619
 800b678:	0800b6c7 	.word	0x0800b6c7
 800b67c:	0800b619 	.word	0x0800b619
 800b680:	0800b619 	.word	0x0800b619
 800b684:	0800b75d 	.word	0x0800b75d
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	1d1a      	adds	r2, r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6032      	str	r2, [r6, #0]
 800b690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b698:	2301      	movs	r3, #1
 800b69a:	e09c      	b.n	800b7d6 <_printf_i+0x1e6>
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6031      	str	r1, [r6, #0]
 800b6a4:	0606      	lsls	r6, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xbc>
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	e003      	b.n	800b6b4 <_printf_i+0xc4>
 800b6ac:	0645      	lsls	r5, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xb8>
 800b6b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	da03      	bge.n	800b6c0 <_printf_i+0xd0>
 800b6b8:	232d      	movs	r3, #45	@ 0x2d
 800b6ba:	426d      	negs	r5, r5
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c0:	4858      	ldr	r0, [pc, #352]	@ (800b824 <_printf_i+0x234>)
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	e011      	b.n	800b6ea <_printf_i+0xfa>
 800b6c6:	6821      	ldr	r1, [r4, #0]
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	0608      	lsls	r0, r1, #24
 800b6cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d0:	d402      	bmi.n	800b6d8 <_printf_i+0xe8>
 800b6d2:	0649      	lsls	r1, r1, #25
 800b6d4:	bf48      	it	mi
 800b6d6:	b2ad      	uxthmi	r5, r5
 800b6d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6da:	4852      	ldr	r0, [pc, #328]	@ (800b824 <_printf_i+0x234>)
 800b6dc:	6033      	str	r3, [r6, #0]
 800b6de:	bf14      	ite	ne
 800b6e0:	230a      	movne	r3, #10
 800b6e2:	2308      	moveq	r3, #8
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ea:	6866      	ldr	r6, [r4, #4]
 800b6ec:	60a6      	str	r6, [r4, #8]
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	db05      	blt.n	800b6fe <_printf_i+0x10e>
 800b6f2:	6821      	ldr	r1, [r4, #0]
 800b6f4:	432e      	orrs	r6, r5
 800b6f6:	f021 0104 	bic.w	r1, r1, #4
 800b6fa:	6021      	str	r1, [r4, #0]
 800b6fc:	d04b      	beq.n	800b796 <_printf_i+0x1a6>
 800b6fe:	4616      	mov	r6, r2
 800b700:	fbb5 f1f3 	udiv	r1, r5, r3
 800b704:	fb03 5711 	mls	r7, r3, r1, r5
 800b708:	5dc7      	ldrb	r7, [r0, r7]
 800b70a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b70e:	462f      	mov	r7, r5
 800b710:	42bb      	cmp	r3, r7
 800b712:	460d      	mov	r5, r1
 800b714:	d9f4      	bls.n	800b700 <_printf_i+0x110>
 800b716:	2b08      	cmp	r3, #8
 800b718:	d10b      	bne.n	800b732 <_printf_i+0x142>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	07df      	lsls	r7, r3, #31
 800b71e:	d508      	bpl.n	800b732 <_printf_i+0x142>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	6861      	ldr	r1, [r4, #4]
 800b724:	4299      	cmp	r1, r3
 800b726:	bfde      	ittt	le
 800b728:	2330      	movle	r3, #48	@ 0x30
 800b72a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b72e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b732:	1b92      	subs	r2, r2, r6
 800b734:	6122      	str	r2, [r4, #16]
 800b736:	f8cd a000 	str.w	sl, [sp]
 800b73a:	464b      	mov	r3, r9
 800b73c:	aa03      	add	r2, sp, #12
 800b73e:	4621      	mov	r1, r4
 800b740:	4640      	mov	r0, r8
 800b742:	f7ff fee7 	bl	800b514 <_printf_common>
 800b746:	3001      	adds	r0, #1
 800b748:	d14a      	bne.n	800b7e0 <_printf_i+0x1f0>
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b74e:	b004      	add	sp, #16
 800b750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	f043 0320 	orr.w	r3, r3, #32
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	4832      	ldr	r0, [pc, #200]	@ (800b828 <_printf_i+0x238>)
 800b75e:	2778      	movs	r7, #120	@ 0x78
 800b760:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	6831      	ldr	r1, [r6, #0]
 800b768:	061f      	lsls	r7, r3, #24
 800b76a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b76e:	d402      	bmi.n	800b776 <_printf_i+0x186>
 800b770:	065f      	lsls	r7, r3, #25
 800b772:	bf48      	it	mi
 800b774:	b2ad      	uxthmi	r5, r5
 800b776:	6031      	str	r1, [r6, #0]
 800b778:	07d9      	lsls	r1, r3, #31
 800b77a:	bf44      	itt	mi
 800b77c:	f043 0320 	orrmi.w	r3, r3, #32
 800b780:	6023      	strmi	r3, [r4, #0]
 800b782:	b11d      	cbz	r5, 800b78c <_printf_i+0x19c>
 800b784:	2310      	movs	r3, #16
 800b786:	e7ad      	b.n	800b6e4 <_printf_i+0xf4>
 800b788:	4826      	ldr	r0, [pc, #152]	@ (800b824 <_printf_i+0x234>)
 800b78a:	e7e9      	b.n	800b760 <_printf_i+0x170>
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	f023 0320 	bic.w	r3, r3, #32
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	e7f6      	b.n	800b784 <_printf_i+0x194>
 800b796:	4616      	mov	r6, r2
 800b798:	e7bd      	b.n	800b716 <_printf_i+0x126>
 800b79a:	6833      	ldr	r3, [r6, #0]
 800b79c:	6825      	ldr	r5, [r4, #0]
 800b79e:	6961      	ldr	r1, [r4, #20]
 800b7a0:	1d18      	adds	r0, r3, #4
 800b7a2:	6030      	str	r0, [r6, #0]
 800b7a4:	062e      	lsls	r6, r5, #24
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	d501      	bpl.n	800b7ae <_printf_i+0x1be>
 800b7aa:	6019      	str	r1, [r3, #0]
 800b7ac:	e002      	b.n	800b7b4 <_printf_i+0x1c4>
 800b7ae:	0668      	lsls	r0, r5, #25
 800b7b0:	d5fb      	bpl.n	800b7aa <_printf_i+0x1ba>
 800b7b2:	8019      	strh	r1, [r3, #0]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	4616      	mov	r6, r2
 800b7ba:	e7bc      	b.n	800b736 <_printf_i+0x146>
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	1d1a      	adds	r2, r3, #4
 800b7c0:	6032      	str	r2, [r6, #0]
 800b7c2:	681e      	ldr	r6, [r3, #0]
 800b7c4:	6862      	ldr	r2, [r4, #4]
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7f4 fd71 	bl	80002b0 <memchr>
 800b7ce:	b108      	cbz	r0, 800b7d4 <_printf_i+0x1e4>
 800b7d0:	1b80      	subs	r0, r0, r6
 800b7d2:	6060      	str	r0, [r4, #4]
 800b7d4:	6863      	ldr	r3, [r4, #4]
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7de:	e7aa      	b.n	800b736 <_printf_i+0x146>
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	47d0      	blx	sl
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d0ad      	beq.n	800b74a <_printf_i+0x15a>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	079b      	lsls	r3, r3, #30
 800b7f2:	d413      	bmi.n	800b81c <_printf_i+0x22c>
 800b7f4:	68e0      	ldr	r0, [r4, #12]
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	4298      	cmp	r0, r3
 800b7fa:	bfb8      	it	lt
 800b7fc:	4618      	movlt	r0, r3
 800b7fe:	e7a6      	b.n	800b74e <_printf_i+0x15e>
 800b800:	2301      	movs	r3, #1
 800b802:	4632      	mov	r2, r6
 800b804:	4649      	mov	r1, r9
 800b806:	4640      	mov	r0, r8
 800b808:	47d0      	blx	sl
 800b80a:	3001      	adds	r0, #1
 800b80c:	d09d      	beq.n	800b74a <_printf_i+0x15a>
 800b80e:	3501      	adds	r5, #1
 800b810:	68e3      	ldr	r3, [r4, #12]
 800b812:	9903      	ldr	r1, [sp, #12]
 800b814:	1a5b      	subs	r3, r3, r1
 800b816:	42ab      	cmp	r3, r5
 800b818:	dcf2      	bgt.n	800b800 <_printf_i+0x210>
 800b81a:	e7eb      	b.n	800b7f4 <_printf_i+0x204>
 800b81c:	2500      	movs	r5, #0
 800b81e:	f104 0619 	add.w	r6, r4, #25
 800b822:	e7f5      	b.n	800b810 <_printf_i+0x220>
 800b824:	0800c9b5 	.word	0x0800c9b5
 800b828:	0800c9c6 	.word	0x0800c9c6

0800b82c <__sflush_r>:
 800b82c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	0716      	lsls	r6, r2, #28
 800b836:	4605      	mov	r5, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	d454      	bmi.n	800b8e6 <__sflush_r+0xba>
 800b83c:	684b      	ldr	r3, [r1, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dc02      	bgt.n	800b848 <__sflush_r+0x1c>
 800b842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b844:	2b00      	cmp	r3, #0
 800b846:	dd48      	ble.n	800b8da <__sflush_r+0xae>
 800b848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	d045      	beq.n	800b8da <__sflush_r+0xae>
 800b84e:	2300      	movs	r3, #0
 800b850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b854:	682f      	ldr	r7, [r5, #0]
 800b856:	6a21      	ldr	r1, [r4, #32]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	d030      	beq.n	800b8be <__sflush_r+0x92>
 800b85c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	0759      	lsls	r1, r3, #29
 800b862:	d505      	bpl.n	800b870 <__sflush_r+0x44>
 800b864:	6863      	ldr	r3, [r4, #4]
 800b866:	1ad2      	subs	r2, r2, r3
 800b868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b86a:	b10b      	cbz	r3, 800b870 <__sflush_r+0x44>
 800b86c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	2300      	movs	r3, #0
 800b872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b874:	6a21      	ldr	r1, [r4, #32]
 800b876:	4628      	mov	r0, r5
 800b878:	47b0      	blx	r6
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	d106      	bne.n	800b88e <__sflush_r+0x62>
 800b880:	6829      	ldr	r1, [r5, #0]
 800b882:	291d      	cmp	r1, #29
 800b884:	d82b      	bhi.n	800b8de <__sflush_r+0xb2>
 800b886:	4a2a      	ldr	r2, [pc, #168]	@ (800b930 <__sflush_r+0x104>)
 800b888:	40ca      	lsrs	r2, r1
 800b88a:	07d6      	lsls	r6, r2, #31
 800b88c:	d527      	bpl.n	800b8de <__sflush_r+0xb2>
 800b88e:	2200      	movs	r2, #0
 800b890:	6062      	str	r2, [r4, #4]
 800b892:	04d9      	lsls	r1, r3, #19
 800b894:	6922      	ldr	r2, [r4, #16]
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	d504      	bpl.n	800b8a4 <__sflush_r+0x78>
 800b89a:	1c42      	adds	r2, r0, #1
 800b89c:	d101      	bne.n	800b8a2 <__sflush_r+0x76>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b903      	cbnz	r3, 800b8a4 <__sflush_r+0x78>
 800b8a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8a6:	602f      	str	r7, [r5, #0]
 800b8a8:	b1b9      	cbz	r1, 800b8da <__sflush_r+0xae>
 800b8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8ae:	4299      	cmp	r1, r3
 800b8b0:	d002      	beq.n	800b8b8 <__sflush_r+0x8c>
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f000 faea 	bl	800be8c <_free_r>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8bc:	e00d      	b.n	800b8da <__sflush_r+0xae>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	47b0      	blx	r6
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	1c50      	adds	r0, r2, #1
 800b8c8:	d1c9      	bne.n	800b85e <__sflush_r+0x32>
 800b8ca:	682b      	ldr	r3, [r5, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d0c6      	beq.n	800b85e <__sflush_r+0x32>
 800b8d0:	2b1d      	cmp	r3, #29
 800b8d2:	d001      	beq.n	800b8d8 <__sflush_r+0xac>
 800b8d4:	2b16      	cmp	r3, #22
 800b8d6:	d11e      	bne.n	800b916 <__sflush_r+0xea>
 800b8d8:	602f      	str	r7, [r5, #0]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e022      	b.n	800b924 <__sflush_r+0xf8>
 800b8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e2:	b21b      	sxth	r3, r3
 800b8e4:	e01b      	b.n	800b91e <__sflush_r+0xf2>
 800b8e6:	690f      	ldr	r7, [r1, #16]
 800b8e8:	2f00      	cmp	r7, #0
 800b8ea:	d0f6      	beq.n	800b8da <__sflush_r+0xae>
 800b8ec:	0793      	lsls	r3, r2, #30
 800b8ee:	680e      	ldr	r6, [r1, #0]
 800b8f0:	bf08      	it	eq
 800b8f2:	694b      	ldreq	r3, [r1, #20]
 800b8f4:	600f      	str	r7, [r1, #0]
 800b8f6:	bf18      	it	ne
 800b8f8:	2300      	movne	r3, #0
 800b8fa:	eba6 0807 	sub.w	r8, r6, r7
 800b8fe:	608b      	str	r3, [r1, #8]
 800b900:	f1b8 0f00 	cmp.w	r8, #0
 800b904:	dde9      	ble.n	800b8da <__sflush_r+0xae>
 800b906:	6a21      	ldr	r1, [r4, #32]
 800b908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b90a:	4643      	mov	r3, r8
 800b90c:	463a      	mov	r2, r7
 800b90e:	4628      	mov	r0, r5
 800b910:	47b0      	blx	r6
 800b912:	2800      	cmp	r0, #0
 800b914:	dc08      	bgt.n	800b928 <__sflush_r+0xfc>
 800b916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	4407      	add	r7, r0
 800b92a:	eba8 0800 	sub.w	r8, r8, r0
 800b92e:	e7e7      	b.n	800b900 <__sflush_r+0xd4>
 800b930:	20400001 	.word	0x20400001

0800b934 <_fflush_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	690b      	ldr	r3, [r1, #16]
 800b938:	4605      	mov	r5, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	b913      	cbnz	r3, 800b944 <_fflush_r+0x10>
 800b93e:	2500      	movs	r5, #0
 800b940:	4628      	mov	r0, r5
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	b118      	cbz	r0, 800b94e <_fflush_r+0x1a>
 800b946:	6a03      	ldr	r3, [r0, #32]
 800b948:	b90b      	cbnz	r3, 800b94e <_fflush_r+0x1a>
 800b94a:	f7ff faa1 	bl	800ae90 <__sinit>
 800b94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0f3      	beq.n	800b93e <_fflush_r+0xa>
 800b956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b958:	07d0      	lsls	r0, r2, #31
 800b95a:	d404      	bmi.n	800b966 <_fflush_r+0x32>
 800b95c:	0599      	lsls	r1, r3, #22
 800b95e:	d402      	bmi.n	800b966 <_fflush_r+0x32>
 800b960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b962:	f7ff fbdc 	bl	800b11e <__retarget_lock_acquire_recursive>
 800b966:	4628      	mov	r0, r5
 800b968:	4621      	mov	r1, r4
 800b96a:	f7ff ff5f 	bl	800b82c <__sflush_r>
 800b96e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b970:	07da      	lsls	r2, r3, #31
 800b972:	4605      	mov	r5, r0
 800b974:	d4e4      	bmi.n	800b940 <_fflush_r+0xc>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	059b      	lsls	r3, r3, #22
 800b97a:	d4e1      	bmi.n	800b940 <_fflush_r+0xc>
 800b97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b97e:	f7ff fbcf 	bl	800b120 <__retarget_lock_release_recursive>
 800b982:	e7dd      	b.n	800b940 <_fflush_r+0xc>

0800b984 <__malloc_lock>:
 800b984:	4801      	ldr	r0, [pc, #4]	@ (800b98c <__malloc_lock+0x8>)
 800b986:	f7ff bbca 	b.w	800b11e <__retarget_lock_acquire_recursive>
 800b98a:	bf00      	nop
 800b98c:	20011538 	.word	0x20011538

0800b990 <__malloc_unlock>:
 800b990:	4801      	ldr	r0, [pc, #4]	@ (800b998 <__malloc_unlock+0x8>)
 800b992:	f7ff bbc5 	b.w	800b120 <__retarget_lock_release_recursive>
 800b996:	bf00      	nop
 800b998:	20011538 	.word	0x20011538

0800b99c <__sread>:
 800b99c:	b510      	push	{r4, lr}
 800b99e:	460c      	mov	r4, r1
 800b9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a4:	f000 fa2a 	bl	800bdfc <_read_r>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	bfab      	itete	ge
 800b9ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b9b0:	181b      	addge	r3, r3, r0
 800b9b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9b6:	bfac      	ite	ge
 800b9b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9ba:	81a3      	strhlt	r3, [r4, #12]
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <__swrite>:
 800b9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	461f      	mov	r7, r3
 800b9c4:	898b      	ldrh	r3, [r1, #12]
 800b9c6:	05db      	lsls	r3, r3, #23
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	d505      	bpl.n	800b9dc <__swrite+0x1e>
 800b9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f000 f9ce 	bl	800bd78 <_lseek_r>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f2:	f000 ba39 	b.w	800be68 <_write_r>

0800b9f6 <__sseek>:
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fe:	f000 f9bb 	bl	800bd78 <_lseek_r>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	bf15      	itete	ne
 800ba08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba12:	81a3      	strheq	r3, [r4, #12]
 800ba14:	bf18      	it	ne
 800ba16:	81a3      	strhne	r3, [r4, #12]
 800ba18:	bd10      	pop	{r4, pc}

0800ba1a <__sclose>:
 800ba1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1e:	f000 b979 	b.w	800bd14 <_close_r>

0800ba22 <__swbuf_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	460e      	mov	r6, r1
 800ba26:	4614      	mov	r4, r2
 800ba28:	4605      	mov	r5, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <__swbuf_r+0x12>
 800ba2c:	6a03      	ldr	r3, [r0, #32]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <__swbuf_r+0x12>
 800ba30:	f7ff fa2e 	bl	800ae90 <__sinit>
 800ba34:	69a3      	ldr	r3, [r4, #24]
 800ba36:	60a3      	str	r3, [r4, #8]
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	071a      	lsls	r2, r3, #28
 800ba3c:	d501      	bpl.n	800ba42 <__swbuf_r+0x20>
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	b943      	cbnz	r3, 800ba54 <__swbuf_r+0x32>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4628      	mov	r0, r5
 800ba46:	f000 f82b 	bl	800baa0 <__swsetup_r>
 800ba4a:	b118      	cbz	r0, 800ba54 <__swbuf_r+0x32>
 800ba4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ba50:	4638      	mov	r0, r7
 800ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	6922      	ldr	r2, [r4, #16]
 800ba58:	1a98      	subs	r0, r3, r2
 800ba5a:	6963      	ldr	r3, [r4, #20]
 800ba5c:	b2f6      	uxtb	r6, r6
 800ba5e:	4283      	cmp	r3, r0
 800ba60:	4637      	mov	r7, r6
 800ba62:	dc05      	bgt.n	800ba70 <__swbuf_r+0x4e>
 800ba64:	4621      	mov	r1, r4
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7ff ff64 	bl	800b934 <_fflush_r>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d1ed      	bne.n	800ba4c <__swbuf_r+0x2a>
 800ba70:	68a3      	ldr	r3, [r4, #8]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	60a3      	str	r3, [r4, #8]
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	6022      	str	r2, [r4, #0]
 800ba7c:	701e      	strb	r6, [r3, #0]
 800ba7e:	6962      	ldr	r2, [r4, #20]
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d004      	beq.n	800ba90 <__swbuf_r+0x6e>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	07db      	lsls	r3, r3, #31
 800ba8a:	d5e1      	bpl.n	800ba50 <__swbuf_r+0x2e>
 800ba8c:	2e0a      	cmp	r6, #10
 800ba8e:	d1df      	bne.n	800ba50 <__swbuf_r+0x2e>
 800ba90:	4621      	mov	r1, r4
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7ff ff4e 	bl	800b934 <_fflush_r>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d0d9      	beq.n	800ba50 <__swbuf_r+0x2e>
 800ba9c:	e7d6      	b.n	800ba4c <__swbuf_r+0x2a>
	...

0800baa0 <__swsetup_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4b29      	ldr	r3, [pc, #164]	@ (800bb48 <__swsetup_r+0xa8>)
 800baa4:	4605      	mov	r5, r0
 800baa6:	6818      	ldr	r0, [r3, #0]
 800baa8:	460c      	mov	r4, r1
 800baaa:	b118      	cbz	r0, 800bab4 <__swsetup_r+0x14>
 800baac:	6a03      	ldr	r3, [r0, #32]
 800baae:	b90b      	cbnz	r3, 800bab4 <__swsetup_r+0x14>
 800bab0:	f7ff f9ee 	bl	800ae90 <__sinit>
 800bab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab8:	0719      	lsls	r1, r3, #28
 800baba:	d422      	bmi.n	800bb02 <__swsetup_r+0x62>
 800babc:	06da      	lsls	r2, r3, #27
 800babe:	d407      	bmi.n	800bad0 <__swsetup_r+0x30>
 800bac0:	2209      	movs	r2, #9
 800bac2:	602a      	str	r2, [r5, #0]
 800bac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bac8:	81a3      	strh	r3, [r4, #12]
 800baca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bace:	e033      	b.n	800bb38 <__swsetup_r+0x98>
 800bad0:	0758      	lsls	r0, r3, #29
 800bad2:	d512      	bpl.n	800bafa <__swsetup_r+0x5a>
 800bad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bad6:	b141      	cbz	r1, 800baea <__swsetup_r+0x4a>
 800bad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800badc:	4299      	cmp	r1, r3
 800bade:	d002      	beq.n	800bae6 <__swsetup_r+0x46>
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 f9d3 	bl	800be8c <_free_r>
 800bae6:	2300      	movs	r3, #0
 800bae8:	6363      	str	r3, [r4, #52]	@ 0x34
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	2300      	movs	r3, #0
 800baf4:	6063      	str	r3, [r4, #4]
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f043 0308 	orr.w	r3, r3, #8
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	b94b      	cbnz	r3, 800bb1a <__swsetup_r+0x7a>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb10:	d003      	beq.n	800bb1a <__swsetup_r+0x7a>
 800bb12:	4621      	mov	r1, r4
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 f83f 	bl	800bb98 <__smakebuf_r>
 800bb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1e:	f013 0201 	ands.w	r2, r3, #1
 800bb22:	d00a      	beq.n	800bb3a <__swsetup_r+0x9a>
 800bb24:	2200      	movs	r2, #0
 800bb26:	60a2      	str	r2, [r4, #8]
 800bb28:	6962      	ldr	r2, [r4, #20]
 800bb2a:	4252      	negs	r2, r2
 800bb2c:	61a2      	str	r2, [r4, #24]
 800bb2e:	6922      	ldr	r2, [r4, #16]
 800bb30:	b942      	cbnz	r2, 800bb44 <__swsetup_r+0xa4>
 800bb32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb36:	d1c5      	bne.n	800bac4 <__swsetup_r+0x24>
 800bb38:	bd38      	pop	{r3, r4, r5, pc}
 800bb3a:	0799      	lsls	r1, r3, #30
 800bb3c:	bf58      	it	pl
 800bb3e:	6962      	ldrpl	r2, [r4, #20]
 800bb40:	60a2      	str	r2, [r4, #8]
 800bb42:	e7f4      	b.n	800bb2e <__swsetup_r+0x8e>
 800bb44:	2000      	movs	r0, #0
 800bb46:	e7f7      	b.n	800bb38 <__swsetup_r+0x98>
 800bb48:	2000003c 	.word	0x2000003c

0800bb4c <__swhatbuf_r>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	460c      	mov	r4, r1
 800bb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb54:	2900      	cmp	r1, #0
 800bb56:	b096      	sub	sp, #88	@ 0x58
 800bb58:	4615      	mov	r5, r2
 800bb5a:	461e      	mov	r6, r3
 800bb5c:	da0d      	bge.n	800bb7a <__swhatbuf_r+0x2e>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb64:	f04f 0100 	mov.w	r1, #0
 800bb68:	bf14      	ite	ne
 800bb6a:	2340      	movne	r3, #64	@ 0x40
 800bb6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb70:	2000      	movs	r0, #0
 800bb72:	6031      	str	r1, [r6, #0]
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	b016      	add	sp, #88	@ 0x58
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
 800bb7a:	466a      	mov	r2, sp
 800bb7c:	f000 f8da 	bl	800bd34 <_fstat_r>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	dbec      	blt.n	800bb5e <__swhatbuf_r+0x12>
 800bb84:	9901      	ldr	r1, [sp, #4]
 800bb86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb8e:	4259      	negs	r1, r3
 800bb90:	4159      	adcs	r1, r3
 800bb92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb96:	e7eb      	b.n	800bb70 <__swhatbuf_r+0x24>

0800bb98 <__smakebuf_r>:
 800bb98:	898b      	ldrh	r3, [r1, #12]
 800bb9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb9c:	079d      	lsls	r5, r3, #30
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460c      	mov	r4, r1
 800bba2:	d507      	bpl.n	800bbb4 <__smakebuf_r+0x1c>
 800bba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	2301      	movs	r3, #1
 800bbae:	6163      	str	r3, [r4, #20]
 800bbb0:	b003      	add	sp, #12
 800bbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb4:	ab01      	add	r3, sp, #4
 800bbb6:	466a      	mov	r2, sp
 800bbb8:	f7ff ffc8 	bl	800bb4c <__swhatbuf_r>
 800bbbc:	9f00      	ldr	r7, [sp, #0]
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff fc26 	bl	800b414 <_malloc_r>
 800bbc8:	b948      	cbnz	r0, 800bbde <__smakebuf_r+0x46>
 800bbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbce:	059a      	lsls	r2, r3, #22
 800bbd0:	d4ee      	bmi.n	800bbb0 <__smakebuf_r+0x18>
 800bbd2:	f023 0303 	bic.w	r3, r3, #3
 800bbd6:	f043 0302 	orr.w	r3, r3, #2
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	e7e2      	b.n	800bba4 <__smakebuf_r+0xc>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	6020      	str	r0, [r4, #0]
 800bbe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbe6:	81a3      	strh	r3, [r4, #12]
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbee:	b15b      	cbz	r3, 800bc08 <__smakebuf_r+0x70>
 800bbf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f000 f8af 	bl	800bd58 <_isatty_r>
 800bbfa:	b128      	cbz	r0, 800bc08 <__smakebuf_r+0x70>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	431d      	orrs	r5, r3
 800bc0c:	81a5      	strh	r5, [r4, #12]
 800bc0e:	e7cf      	b.n	800bbb0 <__smakebuf_r+0x18>

0800bc10 <lflush>:
 800bc10:	898b      	ldrh	r3, [r1, #12]
 800bc12:	f003 0309 	and.w	r3, r3, #9
 800bc16:	2b09      	cmp	r3, #9
 800bc18:	d103      	bne.n	800bc22 <lflush+0x12>
 800bc1a:	4b03      	ldr	r3, [pc, #12]	@ (800bc28 <lflush+0x18>)
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f7ff be89 	b.w	800b934 <_fflush_r>
 800bc22:	2000      	movs	r0, #0
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	2000003c 	.word	0x2000003c

0800bc2c <__srefill_r>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	4605      	mov	r5, r0
 800bc32:	b118      	cbz	r0, 800bc3c <__srefill_r+0x10>
 800bc34:	6a03      	ldr	r3, [r0, #32]
 800bc36:	b90b      	cbnz	r3, 800bc3c <__srefill_r+0x10>
 800bc38:	f7ff f92a 	bl	800ae90 <__sinit>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc44:	069e      	lsls	r6, r3, #26
 800bc46:	d408      	bmi.n	800bc5a <__srefill_r+0x2e>
 800bc48:	0758      	lsls	r0, r3, #29
 800bc4a:	d445      	bmi.n	800bcd8 <__srefill_r+0xac>
 800bc4c:	06d9      	lsls	r1, r3, #27
 800bc4e:	d407      	bmi.n	800bc60 <__srefill_r+0x34>
 800bc50:	2209      	movs	r2, #9
 800bc52:	602a      	str	r2, [r5, #0]
 800bc54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc5e:	bd70      	pop	{r4, r5, r6, pc}
 800bc60:	071a      	lsls	r2, r3, #28
 800bc62:	d50b      	bpl.n	800bc7c <__srefill_r+0x50>
 800bc64:	4621      	mov	r1, r4
 800bc66:	4628      	mov	r0, r5
 800bc68:	f7ff fe64 	bl	800b934 <_fflush_r>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d1f4      	bne.n	800bc5a <__srefill_r+0x2e>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	60a0      	str	r0, [r4, #8]
 800bc74:	f023 0308 	bic.w	r3, r3, #8
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	61a0      	str	r0, [r4, #24]
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f043 0304 	orr.w	r3, r3, #4
 800bc82:	81a3      	strh	r3, [r4, #12]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	b91b      	cbnz	r3, 800bc90 <__srefill_r+0x64>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f7ff ff84 	bl	800bb98 <__smakebuf_r>
 800bc90:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800bc94:	07b3      	lsls	r3, r6, #30
 800bc96:	d00f      	beq.n	800bcb8 <__srefill_r+0x8c>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	4a1b      	ldr	r2, [pc, #108]	@ (800bd08 <__srefill_r+0xdc>)
 800bc9c:	491b      	ldr	r1, [pc, #108]	@ (800bd0c <__srefill_r+0xe0>)
 800bc9e:	481c      	ldr	r0, [pc, #112]	@ (800bd10 <__srefill_r+0xe4>)
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	f7ff f91f 	bl	800aee4 <_fwalk_sglue>
 800bca6:	81a6      	strh	r6, [r4, #12]
 800bca8:	f006 0609 	and.w	r6, r6, #9
 800bcac:	2e09      	cmp	r6, #9
 800bcae:	d103      	bne.n	800bcb8 <__srefill_r+0x8c>
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f7ff fdba 	bl	800b82c <__sflush_r>
 800bcb8:	6922      	ldr	r2, [r4, #16]
 800bcba:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800bcbc:	6963      	ldr	r3, [r4, #20]
 800bcbe:	6a21      	ldr	r1, [r4, #32]
 800bcc0:	6022      	str	r2, [r4, #0]
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b0      	blx	r6
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	6060      	str	r0, [r4, #4]
 800bcca:	dc17      	bgt.n	800bcfc <__srefill_r+0xd0>
 800bccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd0:	d116      	bne.n	800bd00 <__srefill_r+0xd4>
 800bcd2:	f043 0320 	orr.w	r3, r3, #32
 800bcd6:	e7bf      	b.n	800bc58 <__srefill_r+0x2c>
 800bcd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcda:	2900      	cmp	r1, #0
 800bcdc:	d0d2      	beq.n	800bc84 <__srefill_r+0x58>
 800bcde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bce2:	4299      	cmp	r1, r3
 800bce4:	d002      	beq.n	800bcec <__srefill_r+0xc0>
 800bce6:	4628      	mov	r0, r5
 800bce8:	f000 f8d0 	bl	800be8c <_free_r>
 800bcec:	2300      	movs	r3, #0
 800bcee:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcf2:	6063      	str	r3, [r4, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0c5      	beq.n	800bc84 <__srefill_r+0x58>
 800bcf8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e7ae      	b.n	800bc5e <__srefill_r+0x32>
 800bd00:	2200      	movs	r2, #0
 800bd02:	6062      	str	r2, [r4, #4]
 800bd04:	e7a6      	b.n	800bc54 <__srefill_r+0x28>
 800bd06:	bf00      	nop
 800bd08:	20000030 	.word	0x20000030
 800bd0c:	0800bc11 	.word	0x0800bc11
 800bd10:	20000040 	.word	0x20000040

0800bd14 <_close_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d06      	ldr	r5, [pc, #24]	@ (800bd30 <_close_r+0x1c>)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	602b      	str	r3, [r5, #0]
 800bd20:	f000 f8fe 	bl	800bf20 <_close>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_close_r+0x1a>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_close_r+0x1a>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	20011544 	.word	0x20011544

0800bd34 <_fstat_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d07      	ldr	r5, [pc, #28]	@ (800bd54 <_fstat_r+0x20>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	4611      	mov	r1, r2
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	f000 f8f5 	bl	800bf30 <_fstat>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	d102      	bne.n	800bd50 <_fstat_r+0x1c>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	b103      	cbz	r3, 800bd50 <_fstat_r+0x1c>
 800bd4e:	6023      	str	r3, [r4, #0]
 800bd50:	bd38      	pop	{r3, r4, r5, pc}
 800bd52:	bf00      	nop
 800bd54:	20011544 	.word	0x20011544

0800bd58 <_isatty_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4d06      	ldr	r5, [pc, #24]	@ (800bd74 <_isatty_r+0x1c>)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	4604      	mov	r4, r0
 800bd60:	4608      	mov	r0, r1
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	f000 f8f4 	bl	800bf50 <_isatty>
 800bd68:	1c43      	adds	r3, r0, #1
 800bd6a:	d102      	bne.n	800bd72 <_isatty_r+0x1a>
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	b103      	cbz	r3, 800bd72 <_isatty_r+0x1a>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	bd38      	pop	{r3, r4, r5, pc}
 800bd74:	20011544 	.word	0x20011544

0800bd78 <_lseek_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d07      	ldr	r5, [pc, #28]	@ (800bd98 <_lseek_r+0x20>)
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4608      	mov	r0, r1
 800bd80:	4611      	mov	r1, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	602a      	str	r2, [r5, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	f000 f8f2 	bl	800bf70 <_lseek>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	d102      	bne.n	800bd96 <_lseek_r+0x1e>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	b103      	cbz	r3, 800bd96 <_lseek_r+0x1e>
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	20011544 	.word	0x20011544

0800bd9c <_raise_r>:
 800bd9c:	291f      	cmp	r1, #31
 800bd9e:	b538      	push	{r3, r4, r5, lr}
 800bda0:	4605      	mov	r5, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	d904      	bls.n	800bdb0 <_raise_r+0x14>
 800bda6:	2316      	movs	r3, #22
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdb2:	b112      	cbz	r2, 800bdba <_raise_r+0x1e>
 800bdb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdb8:	b94b      	cbnz	r3, 800bdce <_raise_r+0x32>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	f000 f842 	bl	800be44 <_getpid_r>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdca:	f000 b829 	b.w	800be20 <_kill_r>
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d00a      	beq.n	800bde8 <_raise_r+0x4c>
 800bdd2:	1c59      	adds	r1, r3, #1
 800bdd4:	d103      	bne.n	800bdde <_raise_r+0x42>
 800bdd6:	2316      	movs	r3, #22
 800bdd8:	6003      	str	r3, [r0, #0]
 800bdda:	2001      	movs	r0, #1
 800bddc:	e7e7      	b.n	800bdae <_raise_r+0x12>
 800bdde:	2100      	movs	r1, #0
 800bde0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bde4:	4620      	mov	r0, r4
 800bde6:	4798      	blx	r3
 800bde8:	2000      	movs	r0, #0
 800bdea:	e7e0      	b.n	800bdae <_raise_r+0x12>

0800bdec <raise>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	@ (800bdf8 <raise+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f7ff bfd3 	b.w	800bd9c <_raise_r>
 800bdf6:	bf00      	nop
 800bdf8:	2000003c 	.word	0x2000003c

0800bdfc <_read_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	@ (800be1c <_read_r+0x20>)
 800be00:	4604      	mov	r4, r0
 800be02:	4608      	mov	r0, r1
 800be04:	4611      	mov	r1, r2
 800be06:	2200      	movs	r2, #0
 800be08:	602a      	str	r2, [r5, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	f7fb fe7c 	bl	8007b08 <_read>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_read_r+0x1e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_read_r+0x1e>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20011544 	.word	0x20011544

0800be20 <_kill_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	@ (800be40 <_kill_r+0x20>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	4611      	mov	r1, r2
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	f000 f897 	bl	800bf60 <_kill>
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	d102      	bne.n	800be3c <_kill_r+0x1c>
 800be36:	682b      	ldr	r3, [r5, #0]
 800be38:	b103      	cbz	r3, 800be3c <_kill_r+0x1c>
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	bd38      	pop	{r3, r4, r5, pc}
 800be3e:	bf00      	nop
 800be40:	20011544 	.word	0x20011544

0800be44 <_getpid_r>:
 800be44:	f000 b87c 	b.w	800bf40 <_getpid>

0800be48 <_sbrk_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d06      	ldr	r5, [pc, #24]	@ (800be64 <_sbrk_r+0x1c>)
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	602b      	str	r3, [r5, #0]
 800be54:	f000 f894 	bl	800bf80 <_sbrk>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_sbrk_r+0x1a>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_sbrk_r+0x1a>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20011544 	.word	0x20011544

0800be68 <_write_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	@ (800be88 <_write_r+0x20>)
 800be6c:	4604      	mov	r4, r0
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	2200      	movs	r2, #0
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f7fb fe7e 	bl	8007b78 <_write>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_write_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_write_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20011544 	.word	0x20011544

0800be8c <_free_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4605      	mov	r5, r0
 800be90:	2900      	cmp	r1, #0
 800be92:	d041      	beq.n	800bf18 <_free_r+0x8c>
 800be94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be98:	1f0c      	subs	r4, r1, #4
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	bfb8      	it	lt
 800be9e:	18e4      	addlt	r4, r4, r3
 800bea0:	f7ff fd70 	bl	800b984 <__malloc_lock>
 800bea4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf1c <_free_r+0x90>)
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	b933      	cbnz	r3, 800beb8 <_free_r+0x2c>
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	6014      	str	r4, [r2, #0]
 800beae:	4628      	mov	r0, r5
 800beb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beb4:	f7ff bd6c 	b.w	800b990 <__malloc_unlock>
 800beb8:	42a3      	cmp	r3, r4
 800beba:	d908      	bls.n	800bece <_free_r+0x42>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	1821      	adds	r1, r4, r0
 800bec0:	428b      	cmp	r3, r1
 800bec2:	bf01      	itttt	eq
 800bec4:	6819      	ldreq	r1, [r3, #0]
 800bec6:	685b      	ldreq	r3, [r3, #4]
 800bec8:	1809      	addeq	r1, r1, r0
 800beca:	6021      	streq	r1, [r4, #0]
 800becc:	e7ed      	b.n	800beaa <_free_r+0x1e>
 800bece:	461a      	mov	r2, r3
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	b10b      	cbz	r3, 800bed8 <_free_r+0x4c>
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	d9fa      	bls.n	800bece <_free_r+0x42>
 800bed8:	6811      	ldr	r1, [r2, #0]
 800beda:	1850      	adds	r0, r2, r1
 800bedc:	42a0      	cmp	r0, r4
 800bede:	d10b      	bne.n	800bef8 <_free_r+0x6c>
 800bee0:	6820      	ldr	r0, [r4, #0]
 800bee2:	4401      	add	r1, r0
 800bee4:	1850      	adds	r0, r2, r1
 800bee6:	4283      	cmp	r3, r0
 800bee8:	6011      	str	r1, [r2, #0]
 800beea:	d1e0      	bne.n	800beae <_free_r+0x22>
 800beec:	6818      	ldr	r0, [r3, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	6053      	str	r3, [r2, #4]
 800bef2:	4408      	add	r0, r1
 800bef4:	6010      	str	r0, [r2, #0]
 800bef6:	e7da      	b.n	800beae <_free_r+0x22>
 800bef8:	d902      	bls.n	800bf00 <_free_r+0x74>
 800befa:	230c      	movs	r3, #12
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	e7d6      	b.n	800beae <_free_r+0x22>
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	1821      	adds	r1, r4, r0
 800bf04:	428b      	cmp	r3, r1
 800bf06:	bf04      	itt	eq
 800bf08:	6819      	ldreq	r1, [r3, #0]
 800bf0a:	685b      	ldreq	r3, [r3, #4]
 800bf0c:	6063      	str	r3, [r4, #4]
 800bf0e:	bf04      	itt	eq
 800bf10:	1809      	addeq	r1, r1, r0
 800bf12:	6021      	streq	r1, [r4, #0]
 800bf14:	6054      	str	r4, [r2, #4]
 800bf16:	e7ca      	b.n	800beae <_free_r+0x22>
 800bf18:	bd38      	pop	{r3, r4, r5, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20011540 	.word	0x20011540

0800bf20 <_close>:
 800bf20:	4b02      	ldr	r3, [pc, #8]	@ (800bf2c <_close+0xc>)
 800bf22:	2258      	movs	r2, #88	@ 0x58
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf2a:	4770      	bx	lr
 800bf2c:	20011544 	.word	0x20011544

0800bf30 <_fstat>:
 800bf30:	4b02      	ldr	r3, [pc, #8]	@ (800bf3c <_fstat+0xc>)
 800bf32:	2258      	movs	r2, #88	@ 0x58
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf3a:	4770      	bx	lr
 800bf3c:	20011544 	.word	0x20011544

0800bf40 <_getpid>:
 800bf40:	4b02      	ldr	r3, [pc, #8]	@ (800bf4c <_getpid+0xc>)
 800bf42:	2258      	movs	r2, #88	@ 0x58
 800bf44:	601a      	str	r2, [r3, #0]
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf4a:	4770      	bx	lr
 800bf4c:	20011544 	.word	0x20011544

0800bf50 <_isatty>:
 800bf50:	4b02      	ldr	r3, [pc, #8]	@ (800bf5c <_isatty+0xc>)
 800bf52:	2258      	movs	r2, #88	@ 0x58
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	2000      	movs	r0, #0
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	20011544 	.word	0x20011544

0800bf60 <_kill>:
 800bf60:	4b02      	ldr	r3, [pc, #8]	@ (800bf6c <_kill+0xc>)
 800bf62:	2258      	movs	r2, #88	@ 0x58
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf6a:	4770      	bx	lr
 800bf6c:	20011544 	.word	0x20011544

0800bf70 <_lseek>:
 800bf70:	4b02      	ldr	r3, [pc, #8]	@ (800bf7c <_lseek+0xc>)
 800bf72:	2258      	movs	r2, #88	@ 0x58
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf7a:	4770      	bx	lr
 800bf7c:	20011544 	.word	0x20011544

0800bf80 <_sbrk>:
 800bf80:	4a04      	ldr	r2, [pc, #16]	@ (800bf94 <_sbrk+0x14>)
 800bf82:	4905      	ldr	r1, [pc, #20]	@ (800bf98 <_sbrk+0x18>)
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bf08      	it	eq
 800bf8a:	460b      	moveq	r3, r1
 800bf8c:	4418      	add	r0, r3
 800bf8e:	6010      	str	r0, [r2, #0]
 800bf90:	4618      	mov	r0, r3
 800bf92:	4770      	bx	lr
 800bf94:	20011548 	.word	0x20011548
 800bf98:	2001154c 	.word	0x2001154c

0800bf9c <_exit>:
 800bf9c:	e7fe      	b.n	800bf9c <_exit>
 800bf9e:	bf00      	nop
 800bfa0:	00000020 	.word	0x00000020
	...
 800bfac:	00000002 	.word	0x00000002
	...
 800bfb8:	52005020 	.word	0x52005020
	...
 800bfc4:	20000000 	.word	0x20000000
 800bfc8:	00000016 	.word	0x00000016
	...
 800bff4:	000000c0 	.word	0x000000c0
 800bff8:	80000000 	.word	0x80000000
	...
 800c004:	0000007f 	.word	0x0000007f
 800c008:	00020000 	.word	0x00020000
 800c00c:	00004000 	.word	0x00004000
	...
 800c020:	00000008 	.word	0x00000008
	...
 800c038:	00000020 	.word	0x00000020
 800c03c:	00000064 	.word	0x00000064
 800c040:	00000020 	.word	0x00000020
 800c044:	00000020 	.word	0x00000020
 800c048:	00000020 	.word	0x00000020
 800c04c:	00000000 	.word	0x00000000
 800c050:	00000200 	.word	0x00000200
 800c054:	00000000 	.word	0x00000000
 800c058:	74617453 	.word	0x74617453
 800c05c:	00203a65 	.word	0x00203a65
 800c060:	454c4449 	.word	0x454c4449
 800c064:	00000000 	.word	0x00000000
 800c068:	544e5953 	.word	0x544e5953
 800c06c:	00000048 	.word	0x00000048
 800c070:	4f434552 	.word	0x4f434552
 800c074:	00004452 	.word	0x00004452
 800c078:	59414c50 	.word	0x59414c50
 800c07c:	00000000 	.word	0x00000000
 800c080:	504f5453 	.word	0x504f5453
 800c084:	00000000 	.word	0x00000000
 800c088:	45564153 	.word	0x45564153
 800c08c:	00000000 	.word	0x00000000
 800c090:	53415245 	.word	0x53415245
 800c094:	00000045 	.word	0x00000045
 800c098:	49474542 	.word	0x49474542
 800c09c:	52575f4e 	.word	0x52575f4e
 800c0a0:	00455449 	.word	0x00455449
 800c0a4:	54495257 	.word	0x54495257
 800c0a8:	00000045 	.word	0x00000045
 800c0ac:	4d4d4f43 	.word	0x4d4d4f43
 800c0b0:	00005449 	.word	0x00005449
 800c0b4:	4e415453 	.word	0x4e415453
 800c0b8:	00594244 	.word	0x00594244
 800c0bc:	52415453 	.word	0x52415453
 800c0c0:	00505554 	.word	0x00505554
 800c0c4:	49444e45 	.word	0x49444e45
 800c0c8:	0000474e 	.word	0x0000474e
 800c0cc:	73617245 	.word	0x73617245
 800c0d0:	61662065 	.word	0x61662065
 800c0d4:	64656c69 	.word	0x64656c69
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	65766153 	.word	0x65766153
 800c0e0:	6f626120 	.word	0x6f626120
 800c0e4:	64657472 	.word	0x64657472
 800c0e8:	00000000 	.word	0x00000000
 800c0ec:	65766153 	.word	0x65766153
 800c0f0:	6d6f6320 	.word	0x6d6f6320
 800c0f4:	74656c70 	.word	0x74656c70
 800c0f8:	00006465 	.word	0x00006465
 800c0fc:	20202020 	.word	0x20202020
 800c100:	00000000 	.word	0x00000000
 800c104:	64417325 	.word	0x64417325
 800c108:	73657264 	.word	0x73657264
 800c10c:	30203a73 	.word	0x30203a73
 800c110:	38302578 	.word	0x38302578
 800c114:	000a586c 	.word	0x000a586c
 800c118:	69537325 	.word	0x69537325
 800c11c:	203a657a 	.word	0x203a657a
 800c120:	30202020 	.word	0x30202020
 800c124:	38302578 	.word	0x38302578
 800c128:	000a586c 	.word	0x000a586c
 800c12c:	52437325 	.word	0x52437325
 800c130:	3a323343 	.word	0x3a323343
 800c134:	30202020 	.word	0x30202020
 800c138:	38302578 	.word	0x38302578
 800c13c:	000a586c 	.word	0x000a586c
 800c140:	65766153 	.word	0x65766153
 800c144:	74616420 	.word	0x74616420
 800c148:	6f662061 	.word	0x6f662061
 800c14c:	3a646e75 	.word	0x3a646e75
 800c150:	00000000 	.word	0x00000000
 800c154:	73206f4e 	.word	0x73206f4e
 800c158:	20657661 	.word	0x20657661
 800c15c:	61746164 	.word	0x61746164
 800c160:	756f6620 	.word	0x756f6620
 800c164:	0000646e 	.word	0x0000646e
 800c168:	61766e49 	.word	0x61766e49
 800c16c:	2064696c 	.word	0x2064696c
 800c170:	72646461 	.word	0x72646461
 800c174:	00737365 	.word	0x00737365
 800c178:	64616f4c 	.word	0x64616f4c
 800c17c:	20676e69 	.word	0x20676e69
 800c180:	69647561 	.word	0x69647561
 800c184:	2e2e2e6f 	.word	0x2e2e2e6f
 800c188:	00000020 	.word	0x00000020
 800c18c:	656e6f64 	.word	0x656e6f64
 800c190:	00000000 	.word	0x00000000
 800c194:	61766e69 	.word	0x61766e69
 800c198:	2064696c 	.word	0x2064696c
 800c19c:	33435243 	.word	0x33435243
 800c1a0:	30203a32 	.word	0x30203a32
 800c1a4:	38302578 	.word	0x38302578
 800c1a8:	000a586c 	.word	0x000a586c
 800c1ac:	6b6361ff 	.word	0x6b6361ff
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	0a7325ff 	.word	0x0a7325ff
 800c1b8:	00000000 	.word	0x00000000
 800c1bc:	6e717269 	.word	0x6e717269
 800c1c0:	203d3e20 	.word	0x203d3e20
 800c1c4:	4d6e6f4e 	.word	0x4d6e6f4e
 800c1c8:	616b7361 	.word	0x616b7361
 800c1cc:	49656c62 	.word	0x49656c62
 800c1d0:	495f746e 	.word	0x495f746e
 800c1d4:	006e5152 	.word	0x006e5152
 800c1d8:	64696f76 	.word	0x64696f76
 800c1dc:	63657220 	.word	0x63657220
 800c1e0:	6564726f 	.word	0x6564726f
 800c1e4:	693a3a72 	.word	0x693a3a72
 800c1e8:	3a3a7172 	.word	0x3a3a7172
 800c1ec:	69676552 	.word	0x69676552
 800c1f0:	72657473 	.word	0x72657473
 800c1f4:	646e6148 	.word	0x646e6148
 800c1f8:	2872656c 	.word	0x2872656c
 800c1fc:	6e515249 	.word	0x6e515249
 800c200:	7079545f 	.word	0x7079545f
 800c204:	56202c65 	.word	0x56202c65
 800c208:	6f746365 	.word	0x6f746365
 800c20c:	00002972 	.word	0x00002972
 800c210:	76697264 	.word	0x76697264
 800c214:	2f737265 	.word	0x2f737265
 800c218:	2e717269 	.word	0x2e717269
 800c21c:	00707063 	.word	0x00707063
 800c220:	65637865 	.word	0x65637865
 800c224:	6f697470 	.word	0x6f697470
 800c228:	756e5f6e 	.word	0x756e5f6e
 800c22c:	203c206d 	.word	0x203c206d
 800c230:	6d754e6b 	.word	0x6d754e6b
 800c234:	74636556 	.word	0x74636556
 800c238:	0073726f 	.word	0x0073726f
 800c23c:	6e717269 	.word	0x6e717269
 800c240:	203d3e20 	.word	0x203d3e20
 800c244:	00000030 	.word	0x00000030
 800c248:	64696f76 	.word	0x64696f76
 800c24c:	63657220 	.word	0x63657220
 800c250:	6564726f 	.word	0x6564726f
 800c254:	693a3a72 	.word	0x693a3a72
 800c258:	3a3a7172 	.word	0x3a3a7172
 800c25c:	62616e45 	.word	0x62616e45
 800c260:	4928656c 	.word	0x4928656c
 800c264:	5f6e5152 	.word	0x5f6e5152
 800c268:	65707954 	.word	0x65707954
 800c26c:	00000029 	.word	0x00000029
 800c270:	65736552 	.word	0x65736552
 800c274:	6f732074 	.word	0x6f732074
 800c278:	65637275 	.word	0x65637275
 800c27c:	73617720 	.word	0x73617720
 800c280:	00000020 	.word	0x00000020
 800c284:	00524f50 	.word	0x00524f50
 800c288:	5453524e 	.word	0x5453524e
 800c28c:	00000000 	.word	0x00000000
 800c290:	00524f42 	.word	0x00524f42
 800c294:	00544653 	.word	0x00544653
 800c298:	00555043 	.word	0x00555043
 800c29c:	47445757 	.word	0x47445757
 800c2a0:	00000031 	.word	0x00000031
 800c2a4:	47445749 	.word	0x47445749
 800c2a8:	00000031 	.word	0x00000031
 800c2ac:	454b4157 	.word	0x454b4157
 800c2b0:	00000000 	.word	0x00000000
 800c2b4:	5257504c 	.word	0x5257504c
 800c2b8:	00000000 	.word	0x00000000
 800c2bc:	6e6b6e75 	.word	0x6e6b6e75
 800c2c0:	3a6e776f 	.word	0x3a6e776f
 800c2c4:	25783020 	.word	0x25783020
 800c2c8:	586c3830 	.word	0x586c3830
 800c2cc:	0000000a 	.word	0x0000000a
 800c2d0:	656b6157 	.word	0x656b6157
 800c2d4:	65207075 	.word	0x65207075
 800c2d8:	746e6576 	.word	0x746e6576
 800c2dc:	73617720 	.word	0x73617720
 800c2e0:	63657220 	.word	0x63657220
 800c2e4:	2064726f 	.word	0x2064726f
 800c2e8:	74747562 	.word	0x74747562
 800c2ec:	00006e6f 	.word	0x00006e6f
 800c2f0:	656b6157 	.word	0x656b6157
 800c2f4:	65207075 	.word	0x65207075
 800c2f8:	746e6576 	.word	0x746e6576
 800c2fc:	73617720 	.word	0x73617720
 800c300:	616c7020 	.word	0x616c7020
 800c304:	75622079 	.word	0x75622079
 800c308:	6e6f7474 	.word	0x6e6f7474
 800c30c:	00000000 	.word	0x00000000

0800c310 <recorder::JingleEngine::ending_jingle_>:
 800c310:	4412d333 43c47333 43a4d0a4 4382d0a4     3..D3s.C...C...C

0800c320 <recorder::JingleEngine::startup_jingle_>:
 800c320:	4382d0a4 43a4d0a4 43c47333 4412d51f     ...C...C3s.C...D

0800c330 <recorder::SynthEngine::minor_scale_chord_types_>:
 800c330:	00000001 00000002 00000000 00000001     ................
 800c340:	00000001 00000000 00000000 00000001     ................

0800c350 <recorder::SynthEngine::major_scale_chord_types_>:
 800c350:	00000000 00000001 00000001 00000000     ................
 800c360:	00000000 00000001 00000002 00000000     ................

0800c370 <recorder::SynthEngine::diminished_chord_multipliers_>:
 800c370:	3f800000 3f9837ef 3fb504f7 40000000     ...?.7.?...?...@

0800c380 <recorder::SynthEngine::minor_chord_multipliers_>:
 800c380:	3f800000 3f9837ef 3fbfc886 40000000     ...?.7.?...?...@

0800c390 <recorder::SynthEngine::major_chord_multipliers_>:
 800c390:	3f800000 3fa14517 3fbfc886 40000000     ...?.E.?...?...@

0800c3a0 <recorder::SynthEngine::minor_scale_multipliers_>:
 800c3a0:	3f800000 3f8facd6 3f9837ef 3faadc0a     ...?...?.7.?...?
 800c3b0:	3fbfc886 3fcb2ff5 3fe411ed 40000000     ...?./.?...?...@

0800c3c0 <recorder::SynthEngine::major_scale_multipliers_>:
 800c3c0:	3f800000 3f8facd6 3fa14517 3faadc0a     ...?...?.E.?...?
 800c3d0:	3fbfc886 3fd744fe 3ff1a1c2 40000000     ...?.D.?...?...@

0800c3e0 <recorder::SynthEngine::chromatic_frequencies_>:
 800c3e0:	4382d0a4 438a970a 4392d47b 439b90a4     ...C...C{..C...C
 800c3f0:	43a4d0a4 43ae9d71 43b8feb8 43c40000     ...Cq..C...C...C
 800c400:	43cfa666 43dc0000 43e9147b 43f6f0a4     f..C...C{..C...C
 800c410:	4402d000                                ...D

0800c414 <recorder::SynthEngine::kAttenuationLevels>:
 800c414:	3f666666 3f4ccccd 3f333333 3f19999a     fff?..L?333?...?
 800c424:	3f000000                                ...?

0800c428 <recorder::Adc::PotFilter::kPotCorrection>:
 800c428:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 800c438:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 800c448:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 800c458:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 800c468:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 800c478:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 800c488:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 800c498:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 800c4a8:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 800c4b8:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 800c4c8:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 800c4d8:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 800c4e8:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 800c4f8:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 800c508:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 800c518:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 800c528:	3f800000                                ...?

0800c52c <D1CorePrescTable>:
 800c52c:	00000000 04030201 04030201 09080706     ................

0800c53c <LL_DMA_STR_OFFSET_TAB>:
 800c53c:	58402810 b8a08870                       .(@Xp...

0800c544 <LL_MDMA_CH_OFFSET_TAB>:
 800c544:	00000040 00000080 000000c0 00000100     @...............
 800c554:	00000140 00000180 000001c0 00000200     @...............
 800c564:	00000240 00000280 000002c0 00000300     @...............
 800c574:	00000340 00000380 000003c0 00000400     @...............

0800c584 <LL_RCC_PrescTable>:
 800c584:	00000000 04030201 04030201 09080706     ................

0800c594 <USART_PRESCALER_TAB>:
 800c594:	00020001 00060004 000a0008 0010000c     ................
 800c5a4:	00400020 01000080 00000000               .@.........

0800c5b0 <__exp2f_data>:
 800c5b0:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 800c5c0:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 800c5d0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 800c5e0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 800c5f0:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 800c600:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 800c610:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 800c620:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 800c630:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 800c640:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 800c650:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 800c660:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 800c670:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 800c680:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 800c690:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 800c6a0:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 800c6b0:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 800c6c0:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 800c6d0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 800c6e0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 800c6f0:	ff0c52d6 3f962e42                       .R..B..?

0800c6f8 <__inv_pio4>:
 800c6f8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 800c708:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 800c718:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 800c728:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 800c738:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 800c748:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

0800c758 <__sincosf_table>:
 800c758:	00000000 3ff00000 00000000 bff00000     .......?........
 800c768:	00000000 bff00000 00000000 3ff00000     ...............?
 800c778:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800c788:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 800c798:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 800c7a8:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 800c7b8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 800c7c8:	00000000 3ff00000 00000000 bff00000     .......?........
 800c7d8:	00000000 bff00000 00000000 3ff00000     ...............?
 800c7e8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800c7f8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 800c808:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 800c818:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 800c828:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

0800c838 <tiny>:
 800c838:	0da24260                                `B..

0800c83c <two>:
 800c83c:	40000000                                ...@

0800c840 <one>:
 800c840:	3f800000 00000000                       ...?....

0800c848 <__logf_data>:
 800c848:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 800c858:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 800c868:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 800c878:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 800c888:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 800c898:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 800c8a8:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 800c8b8:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 800c8c8:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 800c8d8:	00000000 3ff00000 00000000 00000000     .......?........
 800c8e8:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 800c8f8:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 800c908:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 800c918:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 800c928:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 800c938:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 800c948:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 800c958:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......
 800c968:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 800c978:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 800c988:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 800c998:	20656e69 73256425 000a7325 2b302d23     ine %d%s%s..#-0+
 800c9a8:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
 800c9b8:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
 800c9c8:	35343332 39383736 64636261 00006665     23456789abcdef..

0800c9d8 <_init>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <_fini>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr
