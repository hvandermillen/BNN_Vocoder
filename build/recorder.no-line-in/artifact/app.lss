
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000c618  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800c8b8  0800c8b8  0000e08c  2**0
                  CONTENTS
  3 .exidx        00000008  0800c8b8  0800c8b8  0000d8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.attributes 00000030  0800c8c0  0800c8c0  0000e08c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  0800c8c0  0800c8c0  0000d8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800c8cc  0800c8cc  0000d8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000008c  20000000  0800c8d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001114c  20000400  0800c95c  0000e400  2**10
                  ALLOC
  9 .sram1        00080000  24000000  24000000  0000f000  2**2
                  ALLOC
 10 .sram2        00048000  30000000  30000000  0000f000  2**2
                  ALLOC
 11 .sram3        0000fc00  38000000  38000000  0000f000  2**2
                  ALLOC
 12 .dma          00000048  3800fc00  3800fc00  0000f000  2**2
                  ALLOC
 13 .heap         00000000  2001154c  2001154c  0000e0bc  2**0
                  CONTENTS
 14 .reserved_for_stack 00000000  2001154c  2001154c  0000e0bc  2**0
                  CONTENTS
 15 .debug_info   0004e23a  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000786a  00000000  00000000  0005c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000164aa  00000000  00000000  00063b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b78  00000000  00000000  0007a00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00005144  00000000  00000000  0007ab82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000536d1  00000000  00000000  0007fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002f4e4  00000000  00000000  000d3397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00207f28  00000000  00000000  0010287b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000044  00000000  00000000  0030a7a3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002f14  00000000  00000000  0030a7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000001d4  00000000  00000000  0030d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800c8b8 l    d  .ARM.extab	00000000 .ARM.extab
0800c8b8 l    d  .exidx	00000000 .exidx
0800c8c0 l    d  .ARM.attributes	00000000 .ARM.attributes
0800c8c0 l    d  .init_array	00000000 .init_array
0800c8cc l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
24000000 l    d  .sram1	00000000 .sram1
30000000 l    d  .sram2	00000000 .sram2
38000000 l    d  .sram3	00000000 .sram3
3800fc00 l    d  .dma	00000000 .dma
2001154c l    d  .heap	00000000 .heap
2001154c l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 crtstuff.c
080006c8 l     F .text	00000000 deregister_tm_clones
080006e4 l     F .text	00000000 register_tm_clones
08000708 l     F .text	00000000 __do_global_dtors_aux
20000400 l     O .bss	00000000 completed.1
0800c8cc l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000730 l     F .text	00000000 frame_dummy
20000404 l     O .bss	00000000 object.0
0800c8c0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
08000754 l     F .text	00000050 recorder::Analog::Start(bool) [clone .part.0]
20000424 l     O .bss	00000004 recorder::last_strum_idx
2000041c l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
080057b0 l     F .text	0000010c _GLOBAL__sub_I__ZN8recorder7analog_E
00000000 l    df *ABS*	00000000 adc.cpp
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 flash.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20011000 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
080072f4 l     F .text	00000024 NVIC_SystemReset
200112a4 l     O .bss	00000004 recorder::system::ticks_
08007334 l     F .text	000000e0 recorder::system::ConfigureClocks()
200112a8 l     O .bss	00000150 recorder::system::serial_
200112a0 l     O .bss	00000004 recorder::system::wakeup_flags_
2001129d l     O .bss	00000001 _read::prev_was_cr
2001129c l     O .bss	00000001 _write::prev
08007aa8 l     F .text	00000014 _GLOBAL__sub_I_TickHandler
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
200113f8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
080084a0 l     F .text	000000e0 RCCEx_PLL2_Config.part.0
08008580 l     F .text	000000e0 RCCEx_PLL3_Config.part.0
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
0800c404 l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_mdma.c
0800c40c l     O .text	00000040 LL_MDMA_CH_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
0800c45c l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 sf_exp.c
00000000 l    df *ABS*	00000000 sf_exp2.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
0800a51c l     F .text	0000001c with_errnof
0800a538 l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_tanh.c
0800c708 l     O .text	00000004 one
0800c700 l     O .text	00000004 tiny
0800c704 l     O .text	00000004 two
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 sf_log.c
00000000 l    df *ABS*	00000000 sf_expm1.c
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
0800ac40 l     F .text	0000006c std
0800acac l     F .text	00000018 stdio_exit_handler
0800acc4 l     F .text	00000040 cleanup_stdio
0800ad04 l     F .text	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
0800b014 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 mallocr.c
0800b298 l     F .text	00000044 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 refill.c
0800bad8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
20011548 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 sf_log_data.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 reent.c
08007abc  w    F .text	00000002 RTC_Alarm_IRQHandler
08007abc  w    F .text	00000002 HASH_RNG_IRQHandler
08007abc  w    F .text	00000002 EXTI2_IRQHandler
0800c44c g     O .text	00000010 LL_RCC_PrescTable
08007944 g     F .text	00000006 recorder::system::Reset()
08007abc  w    F .text	00000002 TIM8_CC_IRQHandler
0800bc20 g     F .text	00000020 _isatty_r
08007254 g     F .text	00000094 recorder::Serial::InterruptService()
200108e0 g     O .bss	00000004 recorder::play_button_
0800be08 g     F .text	00000010 _getpid
0800ae6c g     F .text	000000aa _puts_r
08007abc  w    F .text	00000002 HRTIM1_Master_IRQHandler
0800bc40 g     F .text	00000024 _lseek_r
08007abc  w    F .text	00000002 DebugMon_Handler
08007abc  w    F .text	00000002 UART8_IRQHandler
08007abc  w    F .text	00000002 SPI4_IRQHandler
0800c710 g     O .text	00000120 .hidden __logf_data
080069ac g     F .text	000000b8 recorder::Dac::Init()
0800a098 g     F .text	000000d0 exp2f
0800066c g     F .text	0000005a .hidden __floatdidf
0800bce8 g     F .text	00000024 _kill_r
24000000  w    O .sram1	00080000 recorder::SampleMemoryBase::buffer1_
0800ae48 g     F .text	00000024 printf
08007abc  w    F .text	00000002 TIM1_CC_IRQHandler
08007abc  w    F .text	00000002 BDMA_Channel6_IRQHandler
0800b8be g     F .text	00000024 __sseek
0800ad58 g     F .text	00000030 __sinit
08007abc  w    F .text	00000002 DMA2_Stream5_IRQHandler
0800b8ea g     F .text	0000007c __swbuf_r
08007418 g     F .text	00000010 recorder::system::ReloadWatchdog()
08007abc  w    F .text	00000002 HardFault_Handler
080009e8  w    F .text	000000d4 recorder::Flash::Writable(unsigned long, unsigned long)
08007abc  w    F .text	00000002 HRTIM1_FLT_IRQHandler
08007abc  w    F .text	00000002 JPEG_IRQHandler
20010dac  w    O .bss	00000004 recorder::Analog::instance_
08007abc  w    F .text	00000002 DMA1_Stream5_IRQHandler
0800b858 g     F .text	0000000c __malloc_unlock
08007abc  w    F .text	00000002 SysTick_Handler
08007abc  w    F .text	00000002 BDMA_Channel1_IRQHandler
08007abc  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
08007abc  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800c8d0 g       *ABS*	00000000 _sidata
08007abc  w    F .text	00000002 PendSV_Handler
08007abc  w    F .text	00000002 NMI_Handler
20010c40 g     O .bss	00000164 recorder::analog_
08007abc  w    F .text	00000002 EXTI3_IRQHandler
0800814c g     F .text	0000011c HAL_RCC_GetSysClockFreq
08007abc  w    F .text	00000002 LPTIM4_IRQHandler
0800af90 g     F .text	0000000c __errno
0800a564 g     F .text	0000000c .hidden __math_may_uflowf
20000428 g     O .bss	0000012c recorder::monitor_
08007abc  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
0800a62c g     F .text	000000f8 tanhf
20011534 g     O .bss	00000004 __stdio_exit_handler
08007abc  w    F .text	00000002 LPTIM2_IRQHandler
08007abc  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
0800781c g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
080032a8  w    F .text	000000dc recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()
0800a7e8 g     F .text	000000c8 logf
0800bbfc g     F .text	00000024 _fstat_r
08007428 g     F .text	000003f4 recorder::system::Init()
20011544 g     O .bss	00000004 errno
0800c8b8 g       .text	00000000 _etext
08007abc  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
080062a4 g     F .text	000000b4 recorder::Adc::Stop()
20010908 g     O .bss	00000004 recorder::button_2_
08007b90 g     F .text	0000000c HAL_GetREVID
08007abc  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08007abc  w    F .text	00000002 I2C3_ER_IRQHandler
08007abc  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
0800794c g     F .text	00000084 fgets
08009bf4 g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08005ca8 g     F .text	000000dc recorder::Adc::InitAudioSequence()
08007abc  w    F .text	00000002 MDMA_IRQHandler
0800c478 g     O .text	00000148 .hidden __exp2f_data
2001090c g     O .bss	00000004 recorder::button_1_
08007abc  w    F .text	00000002 LPTIM3_IRQHandler
0800ade8 g     F .text	00000060 getc
20000554 g     O .bss	0000002c recorder::io_
0800c248  w    O .text	00000010 recorder::SynthEngine::minor_chord_multipliers_
0800afea g     F .text	0000001c memcpy
2000008c g     O .data	00000000 .hidden __TMC_END__
08007abc  w    F .text	00000002 HSEM1_IRQHandler
080005f4 g     F .text	00000022 .hidden __floatsidf
08003384 g     F .text	000012ec recorder::StateMachine(bool)
08007abc  w    F .text	00000002 EXTI0_IRQHandler
08007abc  w    F .text	00000002 I2C2_EV_IRQHandler
0800af18 g     F .text	00000010 puts
08007abc  w    F .text	00000002 DMA1_Stream2_IRQHandler
08007abc  w    F .text	00000002 FPU_IRQHandler
2000002c g     O .data	00000004 SystemCoreClock
0800abb0 g     F .text	00000048 feof
08007abc  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08007abc  w    F .text	00000002 FDCAN1_IT1_IRQHandler
0800bc64 g     F .text	00000050 _raise_r
0800bdf8 g     F .text	00000010 _fstat
0800ab2c g     F .text	0000003c __assert_func
08007abc  w    F .text	00000002 UsageFault_Handler
08005f60 g     F .text	000002d0 recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
08006908 g     F .text	000000a4 recorder::Dac::InitDMA()
08007abc  w    F .text	00000002 LTDC_ER_IRQHandler
0800c268  w    O .text	00000020 recorder::SynthEngine::minor_scale_multipliers_
08007abc  w    F .text	00000002 DMA2_Stream2_IRQHandler
0800bd0c g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
08007abc  w    F .text	00000002 HRTIM1_TIME_IRQHandler
200108ec g     O .bss	00000001 recorder::state_
080005d4 g     F .text	0000001e .hidden __aeabi_ui2d
080093a8 g     F .text	0000006e LL_DAC_Init
20000000 g       .data	00000000 _sdata
08007abc  w    F .text	00000002 SPI1_IRQHandler
08006f28 g     F .text	00000050 recorder::irq::Init()
08000350 g     F .text	00000000 .hidden __aeabi_drsub
0800bd10 g     F .text	00000020 _sbrk_r
08004670  w    F .text	000002c4 recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()
0800a5a0 g     F .text	0000001e .hidden __math_invalidf
08007abc  w    F .text	00000002 TIM6_DAC_IRQHandler
0800ab1c g     F .text	0000000e fabsf
0800bcc4 g     F .text	00000024 _read_r
08006e1c g     F .text	0000010c recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)
08007abc  w    F .text	00000002 DCMI_IRQHandler
080071a4 g     F .text	00000020 recorder::Serial::GetByteBlocking()
08007abc  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
20000028 g     O .data	00000004 SystemD2Clock
08000618 g     F .text	00000042 .hidden __extendsfdf2
08007854 g     F .text	000000e0 recorder::system::Standby()
20010da8  w    O .bss	00000004 recorder::Analog::callback_
0800035c g     F .text	00000276 .hidden __adddf3
080071c4 g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
08007abc  w    F .text	00000002 DMA2_Stream3_IRQHandler
08009ea8 g     F .text	0000010c LL_USART_Init
0800be18 g     F .text	00000010 _isatty
0800c3f4 g     O .text	00000010 D1CorePrescTable
0800af9c g     F .text	00000048 __libc_init_array
080007a4  w    F .text	000001e4 recorder::Switches::Init()
08007abc  w    F .text	00000002 SAI2_IRQHandler
20010748 g     O .bss	00000144 recorder::recording_
0800b006 g     F .text	0000000e abort
080005d4 g     F .text	0000001e .hidden __floatunsidf
08005d84 g     F .text	000001dc recorder::Adc::InitPotSequence()
0800be48 g     F .text	0000001c _sbrk
08007abc  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
08007abc  w    F .text	00000002 USART6_IRQHandler
08005c18 g     F .text	0000008c recorder::Adc::InitADC(ADC_TypeDef*)
0800c8a0 g     F .text	00000000 _init
0800c620 g     O .text	000000e0 .hidden __sincosf_table
0800a348 g     F .text	000001d4 cosf
0800a724 g     F .text	000000c4 __ieee754_log10f
08007abc  w    F .text	00000002 TIM17_IRQHandler
0800c288  w    O .text	00000020 recorder::SynthEngine::major_scale_multipliers_
08007abc  w    F .text	00000002 USART3_IRQHandler
08007abc  w    F .text	00000002 CRYP_IRQHandler
08007abc  w    F .text	00000002 BDMA_Channel7_IRQHandler
2001154c g       .bss	00000000 _ebss
08007ac0 g     F .text	00000044 Reset_Handler
08007abc  w    F .text	00000002 LPTIM5_IRQHandler
08007abc  w    F .text	00000002 UART5_IRQHandler
20011538 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800c2a8  w    O .text	00000034 recorder::SynthEngine::chromatic_frequencies_
08007abc  w    F .text	00000002 ADC3_IRQHandler
08007abc  w    F .text	00000002 DMA2_Stream0_IRQHandler
080058bc g     F .text	00000350 recorder::Adc::DMAService()
200108e4 g     O .bss	00000004 recorder::playback_timeout_
200113fc g     O .bss	00000138 __sf
0800c238  w    O .text	00000010 recorder::SynthEngine::diminished_chord_multipliers_
08009ddc g     F .text	000000cc LL_TIM_Init
08006358  w    F .text	0000036c recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
0800ad88 g     F .text	00000024 fprintf
08007abc  w    F .text	00000002 TIM4_IRQHandler
0800035c g     F .text	00000276 .hidden __aeabi_dadd
30000000  w    O .sram2	00048000 recorder::SampleMemoryBase::buffer2_
08006ff0 g     F .text	00000058 recorder::irq::SetPriority(IRQn_Type, unsigned long)
08007abc  w    F .text	00000002 BDMA_Channel2_IRQHandler
08007b9c g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800065c g     F .text	0000006a .hidden __aeabi_ul2d
08007abc  w    F .text	00000002 QUADSPI_IRQHandler
08007bac g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
2001154c g       .bss	00000000 end
08007abc  w    F .text	00000002 I2C1_EV_IRQHandler
08007048 g     F .text	00000150 recorder::Serial::Init(unsigned long)
0800afe8 g     F .text	00000002 __retarget_lock_release_recursive
08007abc  w    F .text	00000002 DMA1_Stream6_IRQHandler
08009644 g     F .text	00000016 LL_GPIO_StructInit
0800a5c0 g     F .text	00000060 log10f
08004934  w    F .text	000003b0 recorder::SampleMemory<half>::Init()
20011298  w    O .bss	00000004 recorder::Serial::instance_
0800a558 g     F .text	0000000c .hidden __math_uflowf
08009734 g     F .text	00000190 LL_RCC_GetPLL1ClockFreq
08007abc  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
08007abc  w    F .text	00000002 DMA1_Stream1_IRQHandler
08007abc  w    F .text	00000002 TIM16_IRQHandler
0800b042 g     F .text	00000024 __sfputs_r
08007abc  w    F .text	00000002 UART4_IRQHandler
0800ad40 g     F .text	0000000c __sfp_lock_acquire
080002b0 g     F .text	00000000 memchr
2001154c g       .bss	00000000 __bss_end__
08007abc  w    F .text	00000002 BDMA_Channel5_IRQHandler
0800bd54 g     F .text	00000094 _free_r
08007abc  w    F .text	00000002 TIM3_IRQHandler
08007abc  w    F .text	00000002 RCC_IRQHandler
08007abc  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08007abc  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
0800af28 g     F .text	00000030 __srget_r
08000358 g     F .text	0000027a .hidden __aeabi_dsub
08007abc g     F .text	00000002 Default_Handler
08007abc  w    F .text	00000002 ECC_IRQHandler
0800abf8 g     F .text	00000048 ferror
0800065c g     F .text	0000006a .hidden __floatundidf
0800be38 g     F .text	00000010 _lseek
08007abc  w    F .text	00000002 CEC_IRQHandler
08007abc  w    F .text	00000002 EXTI15_10_IRQHandler
08007198 g     F .text	0000000c recorder::Serial::BytesAvailable()
0800965c g     F .text	000000d8 LL_MDMA_Init
08007abc  w    F .text	00000002 BDMA_Channel0_IRQHandler
08007abc  w    F .text	00000002 ADC_IRQHandler
08006fbc g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
08008268 g     F .text	00000238 HAL_RCC_ClockConfig
0800af58 g     F .text	00000026 strncpy
08007abc  w    F .text	00000002 DMA1_Stream7_IRQHandler
08007abc  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
08006808 g     F .text	00000014 recorder::Analog::StartTimer()
080098c4 g     F .text	00000190 LL_RCC_GetPLL2ClockFreq
08007abc  w    F .text	00000002 SPI5_IRQHandler
08006f78 g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
08007abc  w    F .text	00000002 TIM7_IRQHandler
08007abc  w    F .text	00000002 SDMMC1_IRQHandler
0800bbdc g     F .text	00000020 _close_r
080005f4 g     F .text	00000022 .hidden __aeabi_i2d
3800fc30  w    O .dma	00000018 recorder::Dac::dma_buffer_
08007abc  w    F .text	00000002 TIM5_IRQHandler
2001088c g     O .bss	00000054 recorder::sample_memory_
08007abc  w    F .text	00000002 DMA2_Stream7_IRQHandler
08007abc  w    F .text	00000002 TIM15_IRQHandler
08007abc  w    F .text	00000002 PVD_AVD_IRQHandler
08007abc  w    F .text	00000002 I2C3_EV_IRQHandler
0800b968 g     F .text	000000ac __swsetup_r
08007abc  w    F .text	00000002 EXTI9_5_IRQHandler
38000000  w    O .sram3	0000fc00 recorder::SampleMemoryBase::buffer3_
08007abc  w    F .text	00000002 RTC_WKUP_IRQHandler
08007abc  w    F .text	00000002 LTDC_IRQHandler
200108e8 g     O .bss	00000004 recorder::idle_timeout_
0800b864 g     F .text	00000022 __sread
08007abc  w    F .text	00000002 SAI3_IRQHandler
08007abc  w    F .text	00000002 ETH_WKUP_IRQHandler
08007b84  w    F .text	0000000c HAL_GetTick
08007abc  w    F .text	00000002 SPDIF_RX_IRQHandler
0800b84c g     F .text	0000000c __malloc_lock
08009a54 g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
0800b7fc g     F .text	00000050 _fflush_r
08007abc  w    F .text	00000002 SPI2_IRQHandler
20000000  w    O .data	00000024 recorder::SampleMemory<half>::link_info_
0800afe6 g     F .text	00000002 __retarget_lock_acquire_recursive
08007abc  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
0800af7e g     F .text	00000010 memset
08007abc  w    F .text	00000002 MemManage_Handler
08004ce4 g     F .text	00000acc main
08007abc  w    F .text	00000002 DMA1_Stream0_IRQHandler
0800afe4 g     F .text	00000002 __retarget_lock_init_recursive
0800ab68 g     F .text	00000048 clearerr
08007abc  w    F .text	00000002 SVC_Handler
0800b8e2 g     F .text	00000008 __sclose
08007abc  w    F .text	00000002 CRS_IRQHandler
0800c8cc g       .init_array	00000000 __init_array_end
0800b2dc g     F .text	00000100 _malloc_r
20000024 g     O .data	00000004 recorder::buttonIDs
080031d8 g     F .text	000000d0 recorder::Transition(recorder::State)
0800066c g     F .text	0000005a .hidden __aeabi_l2d
08007abc  w    F .text	00000002 EXTI4_IRQHandler
0800721c g     F .text	00000038 recorder::Serial::FlushTx(bool)
0800c258  w    O .text	00000010 recorder::SynthEngine::major_chord_multipliers_
08007b04 g     F .text	00000080 SystemInit
08007abc  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
0800c8ac g     F .text	00000000 _fini
0800ae48 g     F .text	00000024 iprintf
080068a8 g     F .text	00000060 recorder::Dac::Stop()
20010b34 g     O .bss	00000001 recorder::synth_inactive_
08006830 g     F .text	00000078 recorder::Dac::Start()
08007abc  w    F .text	00000002 FDCAN2_IT1_IRQHandler
0800bd30 g     F .text	00000024 _write_r
08007bcc g     F .text	0000001c HAL_PWR_EnterSLEEPMode
08007414 g     F .text	00000004 HAL_InitTick
08007abc  w    F .text	00000002 ETH_IRQHandler
0800a620 g     F .text	0000000c nanf
0800b3dc g     F .text	000000da _printf_common
2000003c g     O .data	00000004 _impure_ptr
08007abc  w    F .text	00000002 TIM1_UP_IRQHandler
08005c0c g     F .text	0000000c recorder::Adc::DMAHandler()
0800b6f4 g     F .text	00000108 __sflush_r
08007abc  w    F .text	00000002 BDMA_Channel4_IRQHandler
08007abc  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
0800adac g     F .text	0000003c _fwalk_sglue
0800c218  w    O .text	00000020 recorder::SynthEngine::major_scale_chord_types_
20010da4  w    O .bss	00000004 recorder::Adc::instance_
0800c8c0 g       .ARM.attributes	00000000 __preinit_array_end
0800baf4 g     F .text	000000e8 __srefill_r
08007abc  w    F .text	00000002 WWDG_IRQHandler
08007abc  w    F .text	00000002 SPI6_IRQHandler
20010b38 g     O .bss	00000108 recorder::switches_
08007abc  w    F .text	00000002 I2C4_EV_IRQHandler
08007abc  w    F .text	00000002 MDIOS_IRQHandler
08007abc  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08009324 g     F .text	00000034 LL_ADC_Init
08007abc  w    F .text	00000002 LPUART1_IRQHandler
08007abc  w    F .text	00000002 FDCAN1_IT0_IRQHandler
08007abc  w    F .text	00000002 TIM2_IRQHandler
0800a168 g     F .text	000001dc sinf
08006230 g     F .text	00000074 recorder::Adc::Start()
08007abc  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08007abc  w    F .text	00000002 OTG_HS_IRQHandler
08007abc  w    F .text	00000002 DMA2D_IRQHandler
08007abc  w    F .text	00000002 TIM1_BRK_IRQHandler
20010904 g     O .bss	00000004 recorder::button_3_
0800ba14 g     F .text	0000004c __swhatbuf_r
20000580 g     O .bss	000101c8 recorder::playback_
20020000 g       *ABS*	00000000 _estack
08007abc  w    F .text	00000002 EXTI1_IRQHandler
08007abc  w    F .text	00000002 SDMMC2_IRQHandler
20000030 g     O .data	0000000c __sglue
080094dc g     F .text	00000166 LL_GPIO_Init
08007a40 g     F .text	00000068 _write
2000008c g       .data	00000000 _edata
08007abc  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
20000420 g     O .bss	00000001 recorder::strum_idx_changed
08002458 g     F .text	00000d80 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20010928 g     O .bss	0000020c recorder::synth_engine_
08007abc  w    F .text	00000002 BDMA_Channel3_IRQHandler
080066c4 g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
0800c2f0  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
0800a57c g     F .text	00000024 .hidden __math_divzerof
08007abc  w    F .text	00000002 UART7_IRQHandler
08009418 g     F .text	000000c4 LL_DMA_Init
08007abc  w    F .text	00000002 MDIOS_WKUP_IRQHandler
08007abc  w    F .text	00000002 USART2_IRQHandler
0800b886 g     F .text	00000038 __swrite
08007c34  w    F .text	00000518 HAL_RCC_OscConfig
08007abc  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08007abc  w    F .text	00000002 SAI4_IRQHandler
0800ad88 g     F .text	00000024 fiprintf
0800b068 g     F .text	00000230 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
08008660 g     F .text	00000cc4 HAL_RCCEx_PeriphCLKConfig
0800be28 g     F .text	00000010 _kill
080072e8 g     F .text	0000000c recorder::Serial::InterruptHandler()
20000040 g     O .data	0000004c _impure_data
08007abc  w    F .text	00000002 I2C2_ER_IRQHandler
200108f0 g     O .bss	00000010 recorder::buttons
0800ad4c g     F .text	0000000c __sfp_lock_release
0800c1d8  w    O .text	00000010 recorder::JingleEngine::ending_jingle_
08007abc  w    F .text	00000002 DMA2_Stream1_IRQHandler
08007318 g     F .text	0000001c TickHandler
3800fc00  w    O .dma	00000030 recorder::Adc::dma_buffer_
080079d0 g     F .text	00000070 _read
0800c8c0 g       .init_array	00000000 __init_array_start
08007abc  w    F .text	00000002 FLASH_IRQHandler
0800be64 g     F .text	00000002 _exit
08009fb4 g     F .text	000000e4 expf
08007848 g     F .text	0000000c recorder::system::SerialFlushTx(bool)
08000abc  w    F .text	0000199c recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)
08007abc  w    F .text	00000002 DMA2_Stream4_IRQHandler
08007abc  w    F .text	00000002 BusFault_Handler
08007abc  w    F .text	00000002 USART1_IRQHandler
0800ba60 g     F .text	00000078 __smakebuf_r
080002a0 g       .text	00000000 _stext
0800c1e8  w    O .text	00000010 recorder::JingleEngine::startup_jingle_
0800a570 g     F .text	0000000c .hidden __math_oflowf
080002a0 g     F .text	00000010 strlen
0800c1f8  w    O .text	00000020 recorder::SynthEngine::minor_scale_chord_types_
08007abc  w    F .text	00000002 OTG_FS_IRQHandler
0800b4b8 g     F .text	0000023c _printf_i
08007abc  w    F .text	00000002 SPI3_IRQHandler
08007abc  w    F .text	00000002 WAKEUP_PIN_IRQHandler
08007abc  w    F .text	00000002 DMA1_Stream4_IRQHandler
2001153c g     O .bss	00000004 __malloc_sbrk_start
08007abc  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
20010900 g     O .bss	00000004 recorder::button_4_
08007abc  w    F .text	00000002 I2C1_ER_IRQHandler
08007bbc g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
08007abc  w    F .text	00000002 FMC_IRQHandler
08000618 g     F .text	00000042 .hidden __aeabi_f2d
0800c5c0 g     O .text	00000060 .hidden __inv_pio4
08007abc  w    F .text	00000002 FDCAN_CAL_IRQHandler
08000988  w    F .text	00000060 recorder::Analog::StartPlayback()
20011540 g     O .bss	00000004 __malloc_free_list
08007abc  w    F .text	00000002 SWPMI1_IRQHandler
08007abc  w    F .text	00000002 COMP1_IRQHandler
08007abc  w    F .text	00000002 LPTIM1_IRQHandler
08007934 g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000358 g     F .text	0000027a .hidden __subdf3
0800b068 g     F .text	00000230 _vfprintf_r
0800c8c0 g       .ARM.attributes	00000000 __preinit_array_start
08007abc  w    F .text	00000002 I2C4_ER_IRQHandler
0800c2dc  w    O .text	00000014 recorder::SynthEngine::kAttenuationLevels
0800a8b0 g     F .text	0000026c expm1f
08007be8 g     F .text	0000004c HAL_PWREx_ConfigSupply
08007abc  w    F .text	00000002 DMA2_Stream6_IRQHandler
0800681c g     F .text	00000014 recorder::Dac::DMAHandler()
08009358 g     F .text	00000050 LL_ADC_REG_Init
08007abc  w    F .text	00000002 SAI1_IRQHandler
08007abc  w    F .text	00000002 DMA1_Stream3_IRQHandler
20011539 g     O .bss	00000001 __lock___sfp_recursive_mutex
0800bde8 g     F .text	00000010 _close
0800bcb4 g     F .text	00000010 raise
20010910 g     O .bss	00000018 recorder::jingle_engine_
08006a64 g     F .text	000003b8 recorder::Flash::Init()



Disassembly of section .text:

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <deregister_tm_clones>:
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <deregister_tm_clones+0x10>)
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <deregister_tm_clones+0x14>)
 80006cc:	4283      	cmp	r3, r0
 80006ce:	d002      	beq.n	80006d6 <deregister_tm_clones+0xe>
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <deregister_tm_clones+0x18>)
 80006d2:	b103      	cbz	r3, 80006d6 <deregister_tm_clones+0xe>
 80006d4:	4718      	bx	r3
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	00000000 	.word	0x00000000

080006e4 <register_tm_clones>:
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <register_tm_clones+0x18>)
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <register_tm_clones+0x1c>)
 80006e8:	1a1b      	subs	r3, r3, r0
 80006ea:	0fd9      	lsrs	r1, r3, #31
 80006ec:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80006f0:	1049      	asrs	r1, r1, #1
 80006f2:	d002      	beq.n	80006fa <register_tm_clones+0x16>
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <register_tm_clones+0x20>)
 80006f6:	b103      	cbz	r3, 80006fa <register_tm_clones+0x16>
 80006f8:	4718      	bx	r3
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	2000008c 	.word	0x2000008c
 8000704:	00000000 	.word	0x00000000

08000708 <__do_global_dtors_aux>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4c06      	ldr	r4, [pc, #24]	@ (8000724 <__do_global_dtors_aux+0x1c>)
 800070c:	7823      	ldrb	r3, [r4, #0]
 800070e:	b943      	cbnz	r3, 8000722 <__do_global_dtors_aux+0x1a>
 8000710:	f7ff ffda 	bl	80006c8 <deregister_tm_clones>
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__do_global_dtors_aux+0x20>)
 8000716:	b113      	cbz	r3, 800071e <__do_global_dtors_aux+0x16>
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <__do_global_dtors_aux+0x24>)
 800071a:	f3af 8000 	nop.w
 800071e:	2301      	movs	r3, #1
 8000720:	7023      	strb	r3, [r4, #0]
 8000722:	bd10      	pop	{r4, pc}
 8000724:	20000400 	.word	0x20000400
 8000728:	00000000 	.word	0x00000000
 800072c:	0800c8b8 	.word	0x0800c8b8

08000730 <frame_dummy>:
 8000730:	b508      	push	{r3, lr}
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <frame_dummy+0x18>)
 8000734:	b11b      	cbz	r3, 800073e <frame_dummy+0xe>
 8000736:	4905      	ldr	r1, [pc, #20]	@ (800074c <frame_dummy+0x1c>)
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <frame_dummy+0x20>)
 800073a:	f3af 8000 	nop.w
 800073e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000742:	f7ff bfcf 	b.w	80006e4 <register_tm_clones>
 8000746:	bf00      	nop
 8000748:	00000000 	.word	0x00000000
 800074c:	20000404 	.word	0x20000404
 8000750:	0800c8b8 	.word	0x0800c8b8

08000754 <recorder::Analog::Start(bool) [clone .part.0]>:

        void Start(bool enable_amplifier)
        {
            if (state_ == STATE_STOPPED)
            {
                state_ = STATE_STARTING;
 8000754:	2201      	movs	r2, #1
                fade_position_ = 0;
 8000756:	f04f 0c00 	mov.w	ip, #0
protected:
    static constexpr uint32_t kPinMask = 1 << pin_number;

    static void SetHigh(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <recorder::Analog::Start(bool) [clone .part.0]+0x48>)
        void Start(bool enable_amplifier)
 800075c:	b510      	push	{r4, lr}
                state_ = STATE_STARTING;
 800075e:	f8a0 2160 	strh.w	r2, [r0, #352]	@ 0x160
 8000762:	f44f 7200 	mov.w	r2, #512	@ 0x200
                fade_position_ = 0;
 8000766:	f8c0 c15c 	str.w	ip, [r0, #348]	@ 0x15c
        void Start(bool enable_amplifier)
 800076a:	4604      	mov	r4, r0
 800076c:	619a      	str	r2, [r3, #24]
        state ? Set() : Clear();
 800076e:	b181      	cbz	r1, 8000792 <recorder::Analog::Start(bool) [clone .part.0]+0x3e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8000770:	f5a3 53a0 	sub.w	r3, r3, #5120	@ 0x1400
 8000774:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000778:	619a      	str	r2, [r3, #24]
                cue_stop_ = false;

                boost_enable_.Set();
                amp_enable_.Write(enable_amplifier);

                dac_.Start();
 800077a:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 800077e:	f006 f857 	bl	8006830 <recorder::Dac::Start()>
                adc_.Start();
 8000782:	1d20      	adds	r0, r4, #4
 8000784:	f005 fd54 	bl	8006230 <recorder::Adc::Start()>
                StartTimer();
 8000788:	4620      	mov	r0, r4
            {
                // re‑open the power stage even though we never fully stopped
                boost_enable_.Set();
                amp_enable_.Write(true);
            }
        }
 800078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                StartTimer();
 800078e:	f006 b83b 	b.w	8006808 <recorder::Analog::StartTimer()>
    }

    static void SetLow(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8000792:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <recorder::Analog::Start(bool) [clone .part.0]+0x4c>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000798:	619a      	str	r2, [r3, #24]
    }
 800079a:	e7ee      	b.n	800077a <recorder::Analog::Start(bool) [clone .part.0]+0x26>
 800079c:	58021800 	.word	0x58021800
 80007a0:	58020400 	.word	0x58020400

080007a4 <recorder::Switches::Init()>:
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <recorder::Switches::Init()+0x1d4>)
        LL_GPIO_SetPinPull(gpio_struct(gpio_base), 1 << pin_number, pull);
        LL_GPIO_SetPinMode(gpio_struct(gpio_base), 1 << pin_number,
            LL_GPIO_MODE_INPUT);

        gpio_base_ = gpio_base;
        pin_number_ = pin_number;
 80007a6:	f04f 0c0b 	mov.w	ip, #11
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007aa:	4a74      	ldr	r2, [pc, #464]	@ (800097c <recorder::Switches::Init()+0x1d8>)
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007ac:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007b0:	f041 0101 	orr.w	r1, r1, #1
{

class Switches
{
public:
    void Init(void)
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        pin_number_ = pin_number;
 80007c0:	2500      	movs	r5, #0
        invert_ = invert;
 80007c2:	2701      	movs	r7, #1
 80007c4:	4604      	mov	r4, r0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007c6:	f001 0101 	and.w	r1, r1, #1
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	9901      	ldr	r1, [sp, #4]
 80007ce:	68d1      	ldr	r1, [r2, #12]
 80007d0:	f021 0103 	bic.w	r1, r1, #3
 80007d4:	f041 0101 	orr.w	r1, r1, #1
 80007d8:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80007da:	6811      	ldr	r1, [r2, #0]
 80007dc:	f021 0103 	bic.w	r1, r1, #3
 80007e0:	6011      	str	r1, [r2, #0]
        invert_ = invert;
 80007e2:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
        pin_number_ = pin_number;
 80007e6:	e9c0 250f 	strd	r2, r5, [r0, #60]	@ 0x3c
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80007ea:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007ee:	4339      	orrs	r1, r7
 80007f0:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007f4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007f8:	4039      	ands	r1, r7
 80007fa:	9102      	str	r1, [sp, #8]
 80007fc:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007fe:	68d1      	ldr	r1, [r2, #12]
 8000800:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8000804:	f041 0110 	orr.w	r1, r1, #16
 8000808:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800080a:	6811      	ldr	r1, [r2, #0]
 800080c:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8000810:	6011      	str	r1, [r2, #0]
        pin_number_ = pin_number;
 8000812:	2102      	movs	r1, #2
        gpio_base_ = gpio_base;
 8000814:	6002      	str	r2, [r0, #0]
        pin_number_ = pin_number;
 8000816:	6041      	str	r1, [r0, #4]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 8000818:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        invert_ = invert;
 800081c:	7207      	strb	r7, [r0, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 800081e:	f041 0108 	orr.w	r1, r1, #8
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000822:	4857      	ldr	r0, [pc, #348]	@ (8000980 <recorder::Switches::Init()+0x1dc>)
 8000824:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8000828:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800082c:	f001 0108 	and.w	r1, r1, #8
 8000830:	9103      	str	r1, [sp, #12]
 8000832:	9903      	ldr	r1, [sp, #12]
 8000834:	68c6      	ldr	r6, [r0, #12]
 8000836:	4953      	ldr	r1, [pc, #332]	@ (8000984 <recorder::Switches::Init()+0x1e0>)
 8000838:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 800083c:	f446 0680 	orr.w	r6, r6, #4194304	@ 0x400000
 8000840:	60c6      	str	r6, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000842:	6806      	ldr	r6, [r0, #0]
 8000844:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 8000848:	6006      	str	r6, [r0, #0]
class Debouncer
{
public:
    void Init(uint32_t duration, bool initial_state = false)
    {
        duration_ = duration;
 800084a:	260a      	movs	r6, #10
        invert_ = invert;
 800084c:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
        pin_number_ = pin_number;
 8000850:	2704      	movs	r7, #4
 8000852:	e9c4 0c12 	strd	r0, ip, [r4, #72]	@ 0x48
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8000856:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800085a:	f040 0004 	orr.w	r0, r0, #4
 800085e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000862:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000866:	f000 0004 	and.w	r0, r0, #4
 800086a:	9004      	str	r0, [sp, #16]
 800086c:	9804      	ldr	r0, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800086e:	68c8      	ldr	r0, [r1, #12]
 8000870:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000874:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8000878:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800087a:	6808      	ldr	r0, [r1, #0]
 800087c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000880:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 8000882:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 8000884:	6127      	str	r7, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8000886:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 800088a:	7525      	strb	r5, [r4, #20]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800088c:	f040 0001 	orr.w	r0, r0, #1
 8000890:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000894:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000898:	f000 0001 	and.w	r0, r0, #1
 800089c:	9005      	str	r0, [sp, #20]
 800089e:	9805      	ldr	r0, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008a0:	68d0      	ldr	r0, [r2, #12]
 80008a2:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80008a6:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80008aa:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008ac:	6810      	ldr	r0, [r2, #0]
 80008ae:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80008b2:	6010      	str	r0, [r2, #0]
        pin_number_ = pin_number;
 80008b4:	2007      	movs	r0, #7
        gpio_base_ = gpio_base;
 80008b6:	61a2      	str	r2, [r4, #24]
        pin_number_ = pin_number;
 80008b8:	61e0      	str	r0, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80008ba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 80008be:	f884 5020 	strb.w	r5, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 80008c2:	4338      	orrs	r0, r7
 80008c4:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80008c8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80008cc:	4038      	ands	r0, r7
 80008ce:	9006      	str	r0, [sp, #24]
 80008d0:	9806      	ldr	r0, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008d2:	68c8      	ldr	r0, [r1, #12]
 80008d4:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80008d8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80008dc:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008de:	6808      	ldr	r0, [r1, #0]
 80008e0:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80008e4:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 80008e6:	6261      	str	r1, [r4, #36]	@ 0x24
        pin_number_ = pin_number;
 80008e8:	2103      	movs	r1, #3
        invert_ = invert;
 80008ea:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
        pin_number_ = pin_number;
 80008ee:	62a1      	str	r1, [r4, #40]	@ 0x28
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80008f0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80008f4:	f041 0101 	orr.w	r1, r1, #1
 80008f8:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	9307      	str	r3, [sp, #28]
 8000906:	9b07      	ldr	r3, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000908:	68d3      	ldr	r3, [r2, #12]
 800090a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800091a:	6013      	str	r3, [r2, #0]
        invert_ = invert;
 800091c:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        count_ = 0;
        history_ = initial_state;
 8000920:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 8000924:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 8000928:	f8a4 50b0 	strh.w	r5, [r4, #176]	@ 0xb0
 800092c:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
        pin_number_ = pin_number;
 8000930:	e9c4 270c 	strd	r2, r7, [r4, #48]	@ 0x30
        count_ = 0;
 8000934:	e9c4 6524 	strd	r6, r5, [r4, #144]	@ 0x90
 8000938:	e9c4 6527 	strd	r6, r5, [r4, #156]	@ 0x9c
 800093c:	e9c4 652a 	strd	r6, r5, [r4, #168]	@ 0xa8
 8000940:	e9c4 652d 	strd	r6, r5, [r4, #180]	@ 0xb4
 8000944:	e9c4 6530 	strd	r6, r5, [r4, #192]	@ 0xc0
        history_ = initial_state;
 8000948:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
        db_[SWITCH_KEY_3].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_KEY_4].Init(kButtonDebounceDuration_ms);


        db_[SWITCH_RECORD].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 800094c:	f006 fff2 	bl	8007934 <recorder::system::WakeupWasPlayButton()>
 8000950:	462b      	mov	r3, r5
 8000952:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8000956:	f360 0307 	bfi	r3, r0, #0, #8
 800095a:	f8a4 5104 	strh.w	r5, [r4, #260]	@ 0x104
 800095e:	f360 230f 	bfi	r3, r0, #8, #8
        count_ = 0;
 8000962:	e9c4 6521 	strd	r6, r5, [r4, #132]	@ 0x84
 8000966:	e9c4 6533 	strd	r6, r5, [r4, #204]	@ 0xcc
 800096a:	e9c4 653f 	strd	r6, r5, [r4, #252]	@ 0xfc
        history_ = initial_state;
 800096e:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
            system::WakeupWasPlayButton());
        db_[SWITCH_LOOP].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_EFFECT].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_REVERSE].Init(kButtonDebounceDuration_ms);
        db_[NUM_SWITCHES + DETECT_LINE_IN].Init(kButtonDebounceDuration_ms);
    }
 8000972:	b009      	add	sp, #36	@ 0x24
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	bf00      	nop
 8000978:	58024400 	.word	0x58024400
 800097c:	58020000 	.word	0x58020000
 8000980:	58020c00 	.word	0x58020c00
 8000984:	58020800 	.word	0x58020800

08000988 <recorder::Analog::StartPlayback()>:
            if (state_ == STATE_STOPPED)
 8000988:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 800098c:	b9db      	cbnz	r3, 80009c6 <recorder::Analog::StartPlayback()+0x3e>
                fade_position_ = 0;
 800098e:	2200      	movs	r2, #0
                state_ = STATE_STARTING;
 8000990:	2301      	movs	r3, #1
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8000992:	4913      	ldr	r1, [pc, #76]	@ (80009e0 <recorder::Analog::StartPlayback()+0x58>)
        void StartPlayback(void)
 8000994:	b510      	push	{r4, lr}
 8000996:	4604      	mov	r4, r0
 8000998:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 800099c:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
 80009a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
                state_ = STATE_STARTING;
 80009a4:	f8a4 3160 	strh.w	r3, [r4, #352]	@ 0x160
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <recorder::Analog::StartPlayback()+0x5c>)
 80009aa:	6188      	str	r0, [r1, #24]
                dac_.Start();
 80009ac:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 80009b0:	619a      	str	r2, [r3, #24]
 80009b2:	f005 ff3d 	bl	8006830 <recorder::Dac::Start()>
                adc_.Start();
 80009b6:	1d20      	adds	r0, r4, #4
 80009b8:	f005 fc3a 	bl	8006230 <recorder::Adc::Start()>
                StartTimer();
 80009bc:	4620      	mov	r0, r4
        }
 80009be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                StartTimer();
 80009c2:	f005 bf21 	b.w	8006808 <recorder::Analog::StartTimer()>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d000      	beq.n	80009cc <recorder::Analog::StartPlayback()+0x44>
 80009ca:	4770      	bx	lr
 80009cc:	4904      	ldr	r1, [pc, #16]	@ (80009e0 <recorder::Analog::StartPlayback()+0x58>)
 80009ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <recorder::Analog::StartPlayback()+0x5c>)
 80009d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009d8:	6188      	str	r0, [r1, #24]
 80009da:	619a      	str	r2, [r3, #24]
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	58021800 	.word	0x58021800
 80009e4:	58020400 	.word	0x58020400

080009e8 <recorder::Flash::Writable(unsigned long, unsigned long)>:
        WaitForWriteInProgress();
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
        return true;
    }

    bool Writable(uint32_t location, uint32_t length)
 80009e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SendCommand(CMD_WRITE_ENABLE);
    }

    uint8_t ReadStatus(void)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80009ec:	4c31      	ldr	r4, [pc, #196]	@ (8000ab4 <recorder::Flash::Writable(unsigned long, unsigned long)+0xcc>)
    bool Writable(uint32_t location, uint32_t length)
 80009ee:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 80009f2:	4682      	mov	sl, r0
 80009f4:	4689      	mov	r9, r1
 80009f6:	4617      	mov	r7, r2
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 80009f8:	4e2f      	ldr	r6, [pc, #188]	@ (8000ab8 <recorder::Flash::Writable(unsigned long, unsigned long)+0xd0>)
            QSPI_INSTRUCTION_1_LINE |
            CMD_READ_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
        uint8_t status = DataRead8();
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80009fa:	2502      	movs	r5, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80009fc:	68a3      	ldr	r3, [r4, #8]
 80009fe:	f013 0320 	ands.w	r3, r3, #32
 8000a02:	d1fb      	bne.n	80009fc <recorder::Flash::Writable(unsigned long, unsigned long)+0x14>
        QUADSPI->DLR = 0;
 8000a04:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8000a06:	6166      	str	r6, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8000a08:	68a3      	ldr	r3, [r4, #8]
 8000a0a:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8000a0e:	d0fb      	beq.n	8000a08 <recorder::Flash::Writable(unsigned long, unsigned long)+0x20>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8000a10:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000a14:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8000a16:	68a3      	ldr	r3, [r4, #8]
 8000a18:	0799      	lsls	r1, r3, #30
 8000a1a:	d5fc      	bpl.n	8000a16 <recorder::Flash::Writable(unsigned long, unsigned long)+0x2e>
        while (write_in_progress())
 8000a1c:	07d2      	lsls	r2, r2, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8000a1e:	60e5      	str	r5, [r4, #12]
        while (write_in_progress())
 8000a20:	d503      	bpl.n	8000a2a <recorder::Flash::Writable(unsigned long, unsigned long)+0x42>
            system::Delay_ms(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f006 fefa 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8000a28:	e7e8      	b.n	80009fc <recorder::Flash::Writable(unsigned long, unsigned long)+0x14>
        while (length)
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d03a      	beq.n	8000aa4 <recorder::Flash::Writable(unsigned long, unsigned long)+0xbc>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8000a2e:	4c21      	ldr	r4, [pc, #132]	@ (8000ab4 <recorder::Flash::Writable(unsigned long, unsigned long)+0xcc>)
        QUADSPI->CCR =
 8000a30:	4e21      	ldr	r6, [pc, #132]	@ (8000ab8 <recorder::Flash::Writable(unsigned long, unsigned long)+0xd0>)
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000a32:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8000a36:	46b8      	mov	r8, r7
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8000a38:	f04f 0502 	mov.w	r5, #2
 8000a3c:	bf28      	it	cs
 8000a3e:	f44f 6880 	movcs.w	r8, #1024	@ 0x400
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	f013 0320 	ands.w	r3, r3, #32
 8000a48:	d1fb      	bne.n	8000a42 <recorder::Flash::Writable(unsigned long, unsigned long)+0x5a>
        QUADSPI->DLR = 0;
 8000a4a:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8000a4c:	6166      	str	r6, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8000a4e:	68a3      	ldr	r3, [r4, #8]
 8000a50:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8000a54:	d0fb      	beq.n	8000a4e <recorder::Flash::Writable(unsigned long, unsigned long)+0x66>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8000a56:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000a5a:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8000a5c:	68a3      	ldr	r3, [r4, #8]
 8000a5e:	079b      	lsls	r3, r3, #30
 8000a60:	d5fc      	bpl.n	8000a5c <recorder::Flash::Writable(unsigned long, unsigned long)+0x74>
        while (write_in_progress())
 8000a62:	f012 0b01 	ands.w	fp, r2, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8000a66:	60e5      	str	r5, [r4, #12]
        while (write_in_progress())
 8000a68:	d003      	beq.n	8000a72 <recorder::Flash::Writable(unsigned long, unsigned long)+0x8a>
            system::Delay_ms(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f006 fed6 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8000a70:	e7e7      	b.n	8000a42 <recorder::Flash::Writable(unsigned long, unsigned long)+0x5a>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8000a72:	4643      	mov	r3, r8
 8000a74:	4669      	mov	r1, sp
 8000a76:	464a      	mov	r2, r9
 8000a78:	4650      	mov	r0, sl
 8000a7a:	f006 f9cf 	bl	8006e1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
            for (uint32_t i = 0; i < len; i++)
 8000a7e:	466b      	mov	r3, sp
 8000a80:	eb0d 0108 	add.w	r1, sp, r8
 8000a84:	e001      	b.n	8000a8a <recorder::Flash::Writable(unsigned long, unsigned long)+0xa2>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d008      	beq.n	8000a9c <recorder::Flash::Writable(unsigned long, unsigned long)+0xb4>
                if (buffer[i] != kFillByte)
 8000a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a8e:	2aff      	cmp	r2, #255	@ 0xff
 8000a90:	d0f9      	beq.n	8000a86 <recorder::Flash::Writable(unsigned long, unsigned long)+0x9e>
    }
 8000a92:	4658      	mov	r0, fp
 8000a94:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8000a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (length)
 8000a9c:	ebb7 0708 	subs.w	r7, r7, r8
            location += len;
 8000aa0:	44c1      	add	r9, r8
        while (length)
 8000aa2:	d1c6      	bne.n	8000a32 <recorder::Flash::Writable(unsigned long, unsigned long)+0x4a>
        return true;
 8000aa4:	f04f 0b01 	mov.w	fp, #1
    }
 8000aa8:	4658      	mov	r0, fp
 8000aaa:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8000aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab2:	bf00      	nop
 8000ab4:	52005000 	.word	0x52005000
 8000ab8:	05000105 	.word	0x05000105

08000abc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)>:
    }

    // mode = false → major scale, true → minor scale
    // major7: apply major seventh; minor7: apply minor seventh
    // if both major7 and minor7: apply major sixth
    void Process(float (&block)[kAudioOSFactor],
 8000abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ac0:	ed2d 8b0a 	vpush	{d8-d12}
 8000ac4:	b093      	sub	sp, #76	@ 0x4c
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	460d      	mov	r5, r1
 8000aca:	eef0 aa60 	vmov.f32	s21, s1
 8000ace:	f89d 10a0 	ldrb.w	r1, [sp, #160]	@ 0xa0
 8000ad2:	f89d 00a4 	ldrb.w	r0, [sp, #164]	@ 0xa4
 8000ad6:	f89d c09c 	ldrb.w	ip, [sp, #156]	@ 0x9c
                 bool mode,
                 bool major7,
                 bool minor7)
    {
        // Check for entering/exiting base frequency mode
        if (major7 && minor7) {
 8000ada:	ea11 0600 	ands.w	r6, r1, r0
    void Process(float (&block)[kAudioOSFactor],
 8000ade:	9101      	str	r1, [sp, #4]
        if (major7 && minor7) {
 8000ae0:	f000 815c 	beq.w	8000d9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2e0>
            seventh_hold_counter_++;
 8000ae4:	69a1      	ldr	r1, [r4, #24]
 8000ae6:	3101      	adds	r1, #1
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000ae8:	2963      	cmp	r1, #99	@ 0x63
            seventh_hold_counter_++;
 8000aea:	61a1      	str	r1, [r4, #24]
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000aec:	f300 83c9 	bgt.w	8001282 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7c6>
                // Return to normal operation
                updateChordTargets(major7, minor7);
            }
        }

        if (!in_base_freq_mode_) {
 8000af0:	7d21      	ldrb	r1, [r4, #20]
 8000af2:	2900      	cmp	r1, #0
 8000af4:	f001 82bd 	beq.w	8002072 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15b6>
                
            }
            
        } else {
            // Base frequency selection mode
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000af8:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 8000d88 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2cc>
            // Only first voice plays the base frequency
            target_freq_[0] = base_frequency_;
            
            // Turn off all other voices
            for (int v = 1; v < kNumVoices; ++v) {
                target_freq_[v] = 0.0f;
 8000afc:	2100      	movs	r1, #0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000afe:	4ba3      	ldr	r3, [pc, #652]	@ (8000d8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d0>)
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000b00:	ee20 0a27 	vmul.f32	s0, s0, s15
                target_freq_[v] = 0.0f;
 8000b04:	6621      	str	r1, [r4, #96]	@ 0x60
 8000b06:	6661      	str	r1, [r4, #100]	@ 0x64
 8000b08:	66a1      	str	r1, [r4, #104]	@ 0x68
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000b0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000b0e:	ee10 1a10 	vmov	r1, s0
 8000b12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6123      	str	r3, [r4, #16]
            target_freq_[0] = base_frequency_;
 8000b1a:	65e3      	str	r3, [r4, #92]	@ 0x5c
            }
            
            // No strum activation in base freq mode
            last_strum_ = -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b20:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
    int current_chord_;
    bool mode_;

    static inline void slew(float &c, float t, float r)
    {
        float d = t - c;
 8000b24:	edd4 6a33 	vldr	s13, [r4, #204]	@ 0xcc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
        float d = t - c;
 8000b2c:	edd4 7a39 	vldr	s15, [r4, #228]	@ 0xe4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b30:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
        phase_inc_(0.0f),
        waveform_(Waveform::SINE)
    {}

    inline void SetFrequency(float freq) {
        phase_inc_ = freq * kPhaseFactor;
 8000b34:	eddf 8a96 	vldr	s17, [pc, #600]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        float d = t - c;
 8000b38:	ee77 7ae6 	vsub.f32	s15, s15, s13
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000b3c:	ed94 5a19 	vldr	s10, [r4, #100]	@ 0x64
 8000b40:	edd4 5a1a 	vldr	s11, [r4, #104]	@ 0x68
 8000b44:	ee65 9a28 	vmul.f32	s19, s10, s17
            current_freq_[v] = target_freq_[v];
 8000b48:	ed84 5a15 	vstr	s10, [r4, #84]	@ 0x54
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000b50:	ed94 4a17 	vldr	s8, [r4, #92]	@ 0x5c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b54:	eef0 7ae7 	vabs.f32	s15, s15
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 8000b58:	edd4 4a18 	vldr	s9, [r4, #96]	@ 0x60
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b5c:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
            current_freq_[v] = target_freq_[v];
 8000b60:	edc4 5a16 	vstr	s11, [r4, #88]	@ 0x58
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            current_freq_[v] = target_freq_[v];
 8000b68:	ed84 4a13 	vstr	s8, [r4, #76]	@ 0x4c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b6c:	eef4 7ac6 	vcmpe.f32	s15, s12
        float d = t - c;
 8000b70:	edd4 7a3a 	vldr	s15, [r4, #232]	@ 0xe8
 8000b74:	ee24 aa28 	vmul.f32	s20, s8, s17
            current_freq_[v] = target_freq_[v];
 8000b78:	edc4 4a14 	vstr	s9, [r4, #80]	@ 0x50
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b7c:	bf88      	it	hi
 8000b7e:	eeb0 7a46 	vmovhi.f32	s14, s12
 8000b82:	ed9f 6a83 	vldr	s12, [pc, #524]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	edc4 9a0e 	vstr	s19, [r4, #56]	@ 0x38
 8000b8e:	ee24 9aa8 	vmul.f32	s18, s9, s17
 8000b92:	ed84 aa08 	vstr	s20, [r4, #32]
 8000b96:	ee65 8aa8 	vmul.f32	s17, s11, s17
 8000b9a:	bfc8      	it	gt
 8000b9c:	ee76 6a87 	vaddgt.f32	s13, s13, s14
        float d = t - c;
 8000ba0:	ed94 7a34 	vldr	s14, [r4, #208]	@ 0xd0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000ba4:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000ba8:	ed84 9a0b 	vstr	s18, [r4, #44]	@ 0x2c
        float d = t - c;
 8000bac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb0:	edc4 8a11 	vstr	s17, [r4, #68]	@ 0x44
 8000bb4:	ee26 6a86 	vmul.f32	s12, s13, s12
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bb8:	edc4 6a33 	vstr	s13, [r4, #204]	@ 0xcc
        float d = t - c;
 8000bbc:	edd4 6a35 	vldr	s13, [r4, #212]	@ 0xd4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bc4:	eef0 7ae7 	vabs.f32	s15, s15
 8000bc8:	ed84 6a22 	vstr	s12, [r4, #136]	@ 0x88
 8000bcc:	ed9f 6a70 	vldr	s12, [pc, #448]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd4:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000bd8:	edd4 7a3b 	vldr	s15, [r4, #236]	@ 0xec
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000bdc:	bf88      	it	hi
 8000bde:	eef0 5a45 	vmovhi.f32	s11, s10
        float d = t - c;
 8000be2:	ee77 7ae6 	vsub.f32	s15, s15, s13
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bf2:	bfc8      	it	gt
 8000bf4:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8000bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c00:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000c04:	ed84 7a34 	vstr	s14, [r4, #208]	@ 0xd0
 8000c08:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000c0c:	ed94 7a36 	vldr	s14, [r4, #216]	@ 0xd8
 8000c10:	edd4 7a3c 	vldr	s15, [r4, #240]	@ 0xf0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c14:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000c18:	ed84 6a25 	vstr	s12, [r4, #148]	@ 0x94
        float d = t - c;
 8000c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c20:	ed9f 6a5b 	vldr	s12, [pc, #364]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c24:	bf88      	it	hi
 8000c26:	eef0 5a45 	vmovhi.f32	s11, s10
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c36:	eef0 7ae7 	vabs.f32	s15, s15
 8000c3a:	bfc8      	it	gt
 8000c3c:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000c48:	eef4 7ac5 	vcmpe.f32	s15, s10
 8000c4c:	edc4 6a35 	vstr	s13, [r4, #212]	@ 0xd4
 8000c50:	ee26 6a86 	vmul.f32	s12, s13, s12
        float d = t - c;
 8000c54:	edd4 7a3d 	vldr	s15, [r4, #244]	@ 0xf4
 8000c58:	edd4 6a37 	vldr	s13, [r4, #220]	@ 0xdc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c5c:	bf88      	it	hi
 8000c5e:	eef0 5a45 	vmovhi.f32	s11, s10
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000c66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c6a:	ed84 6a28 	vstr	s12, [r4, #160]	@ 0xa0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c6e:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000c72:	ed9f 6a47 	vldr	s12, [pc, #284]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000c76:	bfc8      	it	gt
 8000c78:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000c7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c80:	eef0 7ae7 	vabs.f32	s15, s15
 8000c84:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000c88:	ed84 7a36 	vstr	s14, [r4, #216]	@ 0xd8
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000c90:	ed94 7a3e 	vldr	s14, [r4, #248]	@ 0xf8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c94:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000c98:	edd4 7a38 	vldr	s15, [r4, #224]	@ 0xe0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000c9c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000ca0:	ed84 6a2b 	vstr	s12, [r4, #172]	@ 0xac
        float d = t - c;
 8000ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ca8:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000cac:	bf88      	it	hi
 8000cae:	eef0 5a45 	vmovhi.f32	s11, s10
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000cba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000cbe:	eeb0 7ac7 	vabs.f32	s14, s14
 8000cc2:	bfc8      	it	gt
 8000cc4:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000cd0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8000cd4:	edc4 6a37 	vstr	s13, [r4, #220]	@ 0xdc
 8000cd8:	ee26 6a86 	vmul.f32	s12, s13, s12
 8000cdc:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000d94 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d8>
 8000ce0:	bf88      	it	hi
 8000ce2:	eef0 5a45 	vmovhi.f32	s11, s10
 8000ce6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2d4>
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            bool g = button[v];
 8000cee:	f892 8000 	ldrb.w	r8, [r2]
 8000cf2:	eef4 aae6 	vcmpe.f32	s21, s13
            if (g && !gate_[v])
 8000cf6:	f894 1080 	ldrb.w	r1, [r4, #128]	@ 0x80
 8000cfa:	ed84 6a2e 	vstr	s12, [r4, #184]	@ 0xb8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000cfe:	bfc8      	it	gt
 8000d00:	ee77 7aa5 	vaddgt.f32	s15, s15, s11
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d08:	edc4 7a38 	vstr	s15, [r4, #224]	@ 0xe0
 8000d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d10:	bfac      	ite	ge
 8000d12:	2303      	movge	r3, #3
 8000d14:	2304      	movlt	r3, #4
 8000d16:	edc4 7a31 	vstr	s15, [r4, #196]	@ 0xc4
            if (g && !gate_[v])
 8000d1a:	f1b8 0f00 	cmp.w	r8, #0
 8000d1e:	f000 82b8 	beq.w	8001292 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7d6>
 8000d22:	2900      	cmp	r1, #0
 8000d24:	f000 85d6 	beq.w	80018d4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe18>
            gate_[v] = g;
 8000d28:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 8000d2c:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 8000d30:	f892 9001 	ldrb.w	r9, [r2, #1]
            if (in_base_freq_mode_ && v != 0) {
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	f040 82ba 	bne.w	80012ae <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7f2>
            if (g && !gate_[v])
 8000d3a:	f1b9 0f00 	cmp.w	r9, #0
 8000d3e:	f040 8495 	bne.w	800166c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbb0>
            gate_[v] = g;
 8000d42:	f884 6081 	strb.w	r6, [r4, #129]	@ 0x81
            else if (!g && gate_[v])
 8000d46:	2900      	cmp	r1, #0
 8000d48:	f000 85cf 	beq.w	80018ea <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe2e>
            bool g = button[v];
 8000d4c:	7897      	ldrb	r7, [r2, #2]
            if (g && !gate_[v])
 8000d4e:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000d52:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (g && !gate_[v])
 8000d56:	2f00      	cmp	r7, #0
 8000d58:	f040 8495 	bne.w	8001686 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbca>
            gate_[v] = g;
 8000d5c:	f884 7082 	strb.w	r7, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8000d60:	2900      	cmp	r1, #0
 8000d62:	f000 8497 	beq.w	8001694 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbd8>
            bool g = button[v];
 8000d66:	f892 a003 	ldrb.w	sl, [r2, #3]
            if (g && !gate_[v])
 8000d6a:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000d6e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 8000d72:	f1ba 0f00 	cmp.w	sl, #0
 8000d76:	f000 82af 	beq.w	80012d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x81c>
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	f040 82b1 	bne.w	80012e2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x826>
                env_state_[v] = ENV_ATTACK;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8000d86:	e2ac      	b.n	80012e2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x826>
 8000d88:	414fd70a 	.word	0x414fd70a
 8000d8c:	0800c2a8 	.word	0x0800c2a8
 8000d90:	39cde32e 	.word	0x39cde32e
 8000d94:	3f7fbe77 	.word	0x3f7fbe77
 8000d98:	3f7ff972 	.word	0x3f7ff972
            if (in_base_freq_mode_) {
 8000d9c:	7d21      	ldrb	r1, [r4, #20]
        // Get the scale multipliers based on mode
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
        const int* chord_types = mode_ ? minor_scale_chord_types_ : major_scale_chord_types_;
        
        // Get the root frequency for this chord
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000d9e:	edd4 7a04 	vldr	s15, [r4, #16]
            seventh_hold_counter_ = 0;
 8000da2:	61a6      	str	r6, [r4, #24]
            if (in_base_freq_mode_) {
 8000da4:	2900      	cmp	r1, #0
 8000da6:	f040 84f7 	bne.w	8001798 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcdc>
 8000daa:	f080 0101 	eor.w	r1, r0, #1
 8000dae:	f894 e208 	ldrb.w	lr, [r4, #520]	@ 0x208
 8000db2:	f8d4 8204 	ldr.w	r8, [r4, #516]	@ 0x204
 8000db6:	9105      	str	r1, [sp, #20]
 8000db8:	f894 10fd 	ldrb.w	r1, [r4, #253]	@ 0xfd
 8000dbc:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
 8000dc0:	9102      	str	r1, [sp, #8]
 8000dc2:	f894 10fe 	ldrb.w	r1, [r4, #254]	@ 0xfe
 8000dc6:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8000dca:	9103      	str	r1, [sp, #12]
 8000dcc:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 8000dd0:	f894 1101 	ldrb.w	r1, [r4, #257]	@ 0x101
 8000dd4:	9104      	str	r1, [sp, #16]
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000dd6:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
        if (a < b) {
 8000dda:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 8000d98 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2dc>
            if (mode != mode_) { mode_ = mode; }
 8000dde:	45e6      	cmp	lr, ip
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000de0:	eeb4 0ac7 	vcmpe.f32	s0, s14
        if (a < b) {
 8000de4:	fe80 7a47 	vminnm.f32	s14, s0, s14
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000de8:	ee27 7a26 	vmul.f32	s14, s14, s13
            if (mode != mode_) { mode_ = mode; }
 8000dec:	bf18      	it	ne
 8000dee:	f884 c208 	strbne.w	ip, [r4, #520]	@ 0x208
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8000df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000dfa:	bfac      	ite	ge
 8000dfc:	2101      	movge	r1, #1
 8000dfe:	2100      	movlt	r1, #0
 8000e00:	ee17 ea10 	vmov	lr, s14
 8000e04:	448e      	add	lr, r1
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000e06:	49d7      	ldr	r1, [pc, #860]	@ (8001164 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6a8>)
            if (chord_idx != current_chord_)
 8000e08:	45f0      	cmp	r8, lr
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000e0a:	f8df 8378 	ldr.w	r8, [pc, #888]	@ 8001184 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c8>
                current_chord_ = chord_idx;
 8000e0e:	bf18      	it	ne
 8000e10:	f8c4 e204 	strne.w	lr, [r4, #516]	@ 0x204
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8000e14:	f1bc 0f00 	cmp.w	ip, #0
 8000e18:	f8df c36c 	ldr.w	ip, [pc, #876]	@ 8001188 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6cc>
 8000e1c:	bf08      	it	eq
 8000e1e:	4661      	moveq	r1, ip
 8000e20:	f8df c368 	ldr.w	ip, [pc, #872]	@ 800118c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d0>
 8000e24:	bf18      	it	ne
 8000e26:	46c4      	movne	ip, r8
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000e28:	eb01 018e 	add.w	r1, r1, lr, lsl #2
        
        // Determine chord type (major, minor, diminished)
        int chord_type = chord_types[current_chord_];
 8000e2c:	f85c 802e 	ldr.w	r8, [ip, lr, lsl #2]
 8000e30:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000e34:	ed91 7a00 	vldr	s14, [r1]
        const float* chord_multipliers;
        
        switch (chord_type) {
 8000e38:	f1b8 0f01 	cmp.w	r8, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000e3c:	ee27 7a87 	vmul.f32	s14, s15, s14
        switch (chord_type) {
 8000e40:	f001 807e 	beq.w	8001f40 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1484>
 8000e44:	f8df e334 	ldr.w	lr, [pc, #820]	@ 800117c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c0>
 8000e48:	4fc7      	ldr	r7, [pc, #796]	@ (8001168 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ac>)
 8000e4a:	f1b8 0f02 	cmp.w	r8, #2
 8000e4e:	bf18      	it	ne
 8000e50:	46be      	movne	lr, r7
            default:
                chord_multipliers = major_chord_multipliers_;
        }
        
        // Calculate frequencies for the first three voices
        target_freq_[0] = root_freq * chord_multipliers[0];
 8000e52:	ed84 7a17 	vstr	s14, [r4, #92]	@ 0x5c
        target_freq_[1] = root_freq * chord_multipliers[1];
 8000e56:	edde 6a01 	vldr	s13, [lr, #4]
        target_freq_[2] = root_freq * chord_multipliers[2];
        
        // Calculate the fourth voice based on seventh flags
        if (major7 && !minor7)
 8000e5a:	9f05      	ldr	r7, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8000e5c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000e60:	edc4 6a18 	vstr	s13, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 8000e64:	edde 6a02 	vldr	s13, [lr, #8]
 8000e68:	ee66 6a87 	vmul.f32	s13, s13, s14
 8000e6c:	edc4 6a19 	vstr	s13, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 8000e70:	2f00      	cmp	r7, #0
 8000e72:	f000 8415 	beq.w	80016a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbe4>
 8000e76:	9f01      	ldr	r7, [sp, #4]
 8000e78:	2f00      	cmp	r7, #0
 8000e7a:	f000 8411 	beq.w	80016a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbe4>
            target_freq_[3] = root_freq * kMajor7Ratio;
 8000e7e:	eddf 6abb 	vldr	s13, [pc, #748]	@ 800116c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b0>
 8000e82:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 8000e86:	f1b8 0f02 	cmp.w	r8, #2
        else if (minor7 && !major7)
            target_freq_[3] = root_freq * kMinor7Ratio;
        else if (major7 && minor7)
            target_freq_[3] = root_freq * kMajor6Ratio;
 8000e8a:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 8000e8e:	f000 8418 	beq.w	80016c2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc06>
 8000e92:	f1b8 0f01 	cmp.w	r8, #1
 8000e96:	f000 852d 	beq.w	80018f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe38>
            if (strum_state_[s] != ENV_IDLE)
 8000e9a:	f1b9 0f00 	cmp.w	r9, #0
 8000e9e:	d005      	beq.n	8000eac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3f0>
                strum_target_[s] = note * (1 << oct);
 8000ea0:	ed91 7a00 	vldr	s14, [r1]
 8000ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea8:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8000eac:	9802      	ldr	r0, [sp, #8]
 8000eae:	b148      	cbz	r0, 8000ec4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x408>
                strum_target_[s] = note * (1 << oct);
 8000eb0:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8001170 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b4>
 8000eb4:	ed91 7a00 	vldr	s14, [r1]
 8000eb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000ebc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ec0:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8000ec4:	9803      	ldr	r0, [sp, #12]
 8000ec6:	b148      	cbz	r0, 8000edc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x420>
                strum_target_[s] = note * (1 << oct);
 8000ec8:	eddf 6aaa 	vldr	s13, [pc, #680]	@ 8001174 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b8>
 8000ecc:	ed91 7a00 	vldr	s14, [r1]
 8000ed0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000ed4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000ed8:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	d007      	beq.n	8000ef2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x436>
                strum_target_[s] = note * (1 << oct);
 8000ee2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000ee6:	ed91 7a00 	vldr	s14, [r1]
 8000eea:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000eee:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8000ef2:	f1ba 0f00 	cmp.w	sl, #0
 8000ef6:	d007      	beq.n	8000f08 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x44c>
                strum_target_[s] = note * (1 << oct);
 8000ef8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000efc:	ed91 7a00 	vldr	s14, [r1]
 8000f00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000f04:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8000f08:	9804      	ldr	r0, [sp, #16]
 8000f0a:	b148      	cbz	r0, 8000f20 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x464>
                strum_target_[s] = note * (1 << oct);
 8000f0c:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8001178 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6bc>
 8000f10:	ed91 7a00 	vldr	s14, [r1]
 8000f14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000f1c:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
            if (strum_idx_changed)
 8000f20:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8000f22:	2800      	cmp	r0, #0
 8000f24:	f000 8416 	beq.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                int idx = strum_idx % kNumVoices;
 8000f28:	4258      	negs	r0, r3
 8000f2a:	f003 0e03 	and.w	lr, r3, #3
                last_strum_ = strum_idx;
 8000f2e:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
                int idx = strum_idx % kNumVoices;
 8000f32:	f000 0003 	and.w	r0, r0, #3
                int chord_type = chord_types[current_chord_];
 8000f36:	f8dc 7000 	ldr.w	r7, [ip]
                float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8000f3a:	edd1 5a00 	vldr	s11, [r1]
                int idx = strum_idx % kNumVoices;
 8000f3e:	bf58      	it	pl
 8000f40:	f1c0 0e00 	rsbpl	lr, r0, #0
                int oct = strum_idx / kNumVoices;
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	bfb8      	it	lt
 8000f4a:	1cd8      	addlt	r0, r3, #3
                switch (chord_type) {
 8000f4c:	2f01      	cmp	r7, #1
                int oct = strum_idx / kNumVoices;
 8000f4e:	ea4f 00a0 	mov.w	r0, r0, asr #2
                switch (chord_type) {
 8000f52:	f001 8131 	beq.w	80021b8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16fc>
                    case 0: chord_multipliers = major_chord_multipliers_; break;
 8000f56:	4e89      	ldr	r6, [pc, #548]	@ (800117c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c0>)
 8000f58:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 8001168 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ac>
 8000f5c:	2f02      	cmp	r7, #2
 8000f5e:	bf18      	it	ne
 8000f60:	4666      	movne	r6, ip
                float target_note = note * (1 << oct);
 8000f62:	f04f 0c01 	mov.w	ip, #1
                float note = root_freq * chord_multipliers[idx];
 8000f66:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8000f6a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8001180 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6c4>
 8000f6e:	2f02      	cmp	r7, #2
                float target_note = note * (1 << oct);
 8000f70:	fa0c f000 	lsl.w	r0, ip, r0
 8000f74:	ed96 6a00 	vldr	s12, [r6]
 8000f78:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8000f7c:	ee07 0a10 	vmov	s14, r0
 8000f80:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8000f84:	eb04 0686 	add.w	r6, r4, r6, lsl #2
                strum_state_[voice_idx] = ENV_ATTACK;
 8000f88:	4423      	add	r3, r4
                float target_note = note * (1 << oct);
 8000f8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000f96:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000f9a:	ee67 6a26 	vmul.f32	s13, s14, s13
                strum_current_[voice_idx] = target_note;
 8000f9e:	ed80 7a33 	vstr	s14, [r0, #204]	@ 0xcc
                strum_target_[voice_idx] = target_note;
 8000fa2:	ed80 7a39 	vstr	s14, [r0, #228]	@ 0xe4
 8000fa6:	edc6 6a22 	vstr	s13, [r6, #136]	@ 0x88
                strum_level_[voice_idx] = 0.0f;
 8000faa:	f04f 0600 	mov.w	r6, #0
 8000fae:	f8c0 6104 	str.w	r6, [r0, #260]	@ 0x104
                strum_state_[voice_idx] = ENV_ATTACK;
 8000fb2:	f883 c0fc 	strb.w	ip, [r3, #252]	@ 0xfc
                strum_activation_time_[voice_idx] = ++strum_activation_counter_;
 8000fb6:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 8000fba:	4463      	add	r3, ip
 8000fbc:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8000fc0:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
                strum_attenuation_[voice_idx] = 1.0f;
 8000fc4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fc8:	f8c0 313c 	str.w	r3, [r0, #316]	@ 0x13c
            if (strum_state_[s] != ENV_IDLE)
 8000fcc:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
 8000fd0:	f001 80a1 	beq.w	8002116 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x165a>
 8000fd4:	4567      	cmp	r7, ip
 8000fd6:	f001 813c 	beq.w	8002252 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1796>
 8000fda:	f1b9 0f00 	cmp.w	r9, #0
 8000fde:	d005      	beq.n	8000fec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x530>
                strum_target_[s] = note * (1 << oct);
 8000fe0:	ed91 7a00 	vldr	s14, [r1]
 8000fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe8:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8000fec:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	b14b      	cbz	r3, 8001008 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x54c>
                strum_target_[s] = note * (1 << oct);
 8000ff4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001170 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b4>
 8000ff8:	edd1 6a00 	vldr	s13, [r1]
 8000ffc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001000:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001004:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001008:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	b14b      	cbz	r3, 8001024 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x568>
                strum_target_[s] = note * (1 << oct);
 8001010:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001174 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6b8>
 8001014:	ed91 7a00 	vldr	s14, [r1]
 8001018:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800101c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001020:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8001024:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8001028:	f1bb 0f00 	cmp.w	fp, #0
 800102c:	d007      	beq.n	800103e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x582>
                strum_target_[s] = note * (1 << oct);
 800102e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001032:	ed91 7a00 	vldr	s14, [r1]
 8001036:	ee27 7a26 	vmul.f32	s14, s14, s13
 800103a:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800103e:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 8001042:	f1ba 0f00 	cmp.w	sl, #0
 8001046:	d007      	beq.n	8001058 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x59c>
                strum_target_[s] = note * (1 << oct);
 8001048:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800104c:	ed91 7a00 	vldr	s14, [r1]
 8001050:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001054:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8001058:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	b14b      	cbz	r3, 8001074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 8001060:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001178 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6bc>
 8001064:	ed91 7a00 	vldr	s14, [r1]
 8001068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
            if (strum_state_[s] != ENV_IDLE)
 8001074:	f1b9 0f00 	cmp.w	r9, #0
 8001078:	f001 8011 	beq.w	800209e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e2>
                active_voices[active_count].index = s;
 800107c:	2300      	movs	r3, #0
                active_count++;
 800107e:	f04f 0801 	mov.w	r8, #1
                active_voices[active_count].index = s;
 8001082:	9306      	str	r3, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001084:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001088:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 800108a:	9b02      	ldr	r3, [sp, #8]
 800108c:	b153      	cbz	r3, 80010a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5e8>
                active_voices[active_count].index = s;
 800108e:	a912      	add	r1, sp, #72	@ 0x48
 8001090:	2301      	movs	r3, #1
 8001092:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8001096:	4498      	add	r8, r3
 8001098:	f841 3c30 	str.w	r3, [r1, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800109c:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 80010a0:	f841 3c2c 	str.w	r3, [r1, #-44]
            if (strum_state_[s] != ENV_IDLE)
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	b15b      	cbz	r3, 80010c0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x604>
                active_voices[active_count].index = s;
 80010a8:	a912      	add	r1, sp, #72	@ 0x48
 80010aa:	2302      	movs	r3, #2
 80010ac:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80010b0:	f108 0801 	add.w	r8, r8, #1
 80010b4:	f841 3c30 	str.w	r3, [r1, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 80010b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 80010bc:	f841 3c2c 	str.w	r3, [r1, #-44]
            if (strum_state_[s] != ENV_IDLE)
 80010c0:	f1bb 0f00 	cmp.w	fp, #0
 80010c4:	d00b      	beq.n	80010de <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x622>
                active_voices[active_count].index = s;
 80010c6:	ab12      	add	r3, sp, #72	@ 0x48
 80010c8:	2103      	movs	r1, #3
 80010ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80010ce:	f108 0801 	add.w	r8, r8, #1
 80010d2:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 80010d6:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80010da:	f843 1c2c 	str.w	r1, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 80010de:	f1ba 0f00 	cmp.w	sl, #0
 80010e2:	d00b      	beq.n	80010fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x640>
                active_voices[active_count].index = s;
 80010e4:	ab12      	add	r3, sp, #72	@ 0x48
 80010e6:	2104      	movs	r1, #4
 80010e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80010ec:	f108 0801 	add.w	r8, r8, #1
 80010f0:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 80010f4:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
 80010f8:	f843 1c2c 	str.w	r1, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 80010fc:	9b04      	ldr	r3, [sp, #16]
 80010fe:	b15b      	cbz	r3, 8001118 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x65c>
                active_voices[active_count].index = s;
 8001100:	ab12      	add	r3, sp, #72	@ 0x48
 8001102:	2105      	movs	r1, #5
 8001104:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8001108:	f108 0801 	add.w	r8, r8, #1
 800110c:	f843 1c30 	str.w	r1, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001110:	f8d4 1134 	ldr.w	r1, [r4, #308]	@ 0x134
 8001114:	f843 1c2c 	str.w	r1, [r3, #-44]
            strum_attenuation_[s] = 1.0f;
 8001118:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 800111c:	f1b8 0f01 	cmp.w	r8, #1
            strum_attenuation_[s] = 1.0f;
 8001120:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8001124:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 8001128:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 800112c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8001130:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8001134:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 8001138:	f340 830c 	ble.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
            for (int i = 0; i < active_count - 1; i++)
 800113c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8001140:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8001144:	9e09      	ldr	r6, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 8001146:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 800114a:	463b      	mov	r3, r7
 800114c:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8001150:	f10d 0e20 	add.w	lr, sp, #32
 8001154:	e9cd 7202 	strd	r7, r2, [sp, #8]
                for (int j = 0; j < active_count - i - 1; j++)
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	2901      	cmp	r1, #1
 800115c:	dd4d      	ble.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800115e:	45b4      	cmp	ip, r6
 8001160:	d851      	bhi.n	8001206 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x74a>
 8001162:	e025      	b.n	80011b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f4>
 8001164:	0800c268 	.word	0x0800c268
 8001168:	0800c258 	.word	0x0800c258
 800116c:	3ff1a1c2 	.word	0x3ff1a1c2
 8001170:	3fa14517 	.word	0x3fa14517
 8001174:	3fbfc886 	.word	0x3fbfc886
 8001178:	40214517 	.word	0x40214517
 800117c:	0800c238 	.word	0x0800c238
 8001180:	39cde32e 	.word	0x39cde32e
 8001184:	0800c1f8 	.word	0x0800c1f8
 8001188:	0800c288 	.word	0x0800c288
 800118c:	0800c218 	.word	0x0800c218
 8001190:	412f73da 	.word	0x412f73da
 8001194:	3f7fbe77 	.word	0x3f7fbe77
 8001198:	3c4ccccd 	.word	0x3c4ccccd
 800119c:	3b4ccccd 	.word	0x3b4ccccd
 80011a0:	3f7f3333 	.word	0x3f7f3333
 80011a4:	3ca3d70a 	.word	0x3ca3d70a
 80011a8:	40c90fdb 	.word	0x40c90fdb
 80011ac:	40a7ef06 	.word	0x40a7ef06
                for (int j = 0; j < active_count - i - 1; j++)
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f000 86c9 	beq.w	8001f48 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x148c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80011b8:	42b7      	cmp	r7, r6
 80011ba:	d334      	bcc.n	8001226 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x76a>
                for (int j = 0; j < active_count - i - 1; j++)
 80011bc:	2b02      	cmp	r3, #2
 80011be:	f001 8037 	beq.w	8002230 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1774>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011c2:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80011c6:	4557      	cmp	r7, sl
 80011c8:	d83d      	bhi.n	8001246 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x78a>
                for (int j = 0; j < active_count - i - 1; j++)
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	f001 803e 	beq.w	800224c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1790>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011d0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80011d2:	45ba      	cmp	sl, r7
 80011d4:	d845      	bhi.n	8001262 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7a6>
                for (int j = 0; j < active_count - i - 1; j++)
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	f001 80aa 	beq.w	8002330 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1874>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80011dc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80011de:	42b9      	cmp	r1, r7
 80011e0:	d20b      	bcs.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 80011e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80011e4:	9201      	str	r2, [sp, #4]
                        active_voices[j] = active_voices[j + 1];
 80011e6:	aa10      	add	r2, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 80011e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 80011ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f0:	9a01      	ldr	r2, [sp, #4]
 80011f2:	e882 0003 	stmia.w	r2, {r0, r1}
                        active_voices[j + 1] = temp;
 80011f6:	e9cd a710 	strd	sl, r7, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 80011fa:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 80011fc:	1c59      	adds	r1, r3, #1
 80011fe:	2901      	cmp	r1, #1
 8001200:	ddfb      	ble.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001202:	45b4      	cmp	ip, r6
 8001204:	d9d4      	bls.n	80011b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f4>
                        VoiceInfo temp = active_voices[j];
 8001206:	9e06      	ldr	r6, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 8001208:	aa06      	add	r2, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 800120a:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 800120c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8001210:	e882 0003 	stmia.w	r2, {r0, r1}
                        active_voices[j + 1] = temp;
 8001214:	e9cd 6c08 	strd	r6, ip, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001218:	f000 8696 	beq.w	8001f48 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x148c>
 800121c:	4666      	mov	r6, ip
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800121e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001220:	468c      	mov	ip, r1
 8001222:	42b7      	cmp	r7, r6
 8001224:	d2ca      	bcs.n	80011bc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x700>
                        VoiceInfo temp = active_voices[j];
 8001226:	9f08      	ldr	r7, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001228:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 800122a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800122e:	e88e 0003 	stmia.w	lr, {r0, r1}
                        active_voices[j + 1] = temp;
 8001232:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001236:	f000 87fe 	beq.w	8002236 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x177a>
 800123a:	4637      	mov	r7, r6
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800123c:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8001240:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8001242:	4557      	cmp	r7, sl
 8001244:	d9c1      	bls.n	80011ca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x70e>
                        VoiceInfo temp = active_voices[j];
 8001246:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 800124a:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 800124c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8001250:	e889 0003 	stmia.w	r9, {r0, r1}
                        active_voices[j + 1] = temp;
 8001254:	e9cd a70c 	strd	sl, r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001258:	d0cf      	beq.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 800125a:	46ba      	mov	sl, r7
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800125c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800125e:	45ba      	cmp	sl, r7
 8001260:	d9b9      	bls.n	80011d6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x71a>
                        active_voices[j] = active_voices[j + 1];
 8001262:	a90e      	add	r1, sp, #56	@ 0x38
                        VoiceInfo temp = active_voices[j];
 8001264:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001266:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 8001268:	9101      	str	r1, [sp, #4]
 800126a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800126e:	e88b 0003 	stmia.w	fp, {r0, r1}
                        active_voices[j + 1] = temp;
 8001272:	e9cd 7a0e 	strd	r7, sl, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 8001276:	d0c0      	beq.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001278:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800127a:	458a      	cmp	sl, r1
 800127c:	d9bd      	bls.n	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
 800127e:	4657      	mov	r7, sl
 8001280:	e7b1      	b.n	80011e6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x72a>
                in_base_freq_mode_ = true;
 8001282:	2301      	movs	r3, #1
 8001284:	7523      	strb	r3, [r4, #20]
                        env_state_[v] = ENV_ATTACK;
 8001286:	f103 2304 	add.w	r3, r3, #67109888	@ 0x4000400
 800128a:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 800128e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        if (!in_base_freq_mode_) {
 8001290:	e432      	b.n	8000af8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3c>
            else if (!g && gate_[v])
 8001292:	2900      	cmp	r1, #0
 8001294:	f43f ad48 	beq.w	8000d28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x26c>
            gate_[v] = g;
 8001298:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 800129c:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 80012a0:	f892 9001 	ldrb.w	r9, [r2, #1]
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 80012a4:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (in_base_freq_mode_ && v != 0) {
 80012a8:	2e00      	cmp	r6, #0
 80012aa:	f43f ad46 	beq.w	8000d3a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x27e>
            else if (!g && gate_[v])
 80012ae:	b121      	cbz	r1, 80012ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x7fe>
            gate_[v] = g;
 80012b0:	2200      	movs	r2, #0
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 80012b2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            gate_[v] = g;
 80012b6:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
            if (g && !gate_[v])
 80012ba:	f894 9082 	ldrb.w	r9, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 80012be:	f1b9 0f00 	cmp.w	r9, #0
 80012c2:	f000 830c 	beq.w	80018de <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe22>
            gate_[v] = g;
 80012c6:	f04f 0900 	mov.w	r9, #0
            if (g && !gate_[v])
 80012ca:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 80012ce:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 80012d2:	464f      	mov	r7, r9
            gate_[v] = g;
 80012d4:	f884 9082 	strb.w	r9, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 80012d8:	b10a      	cbz	r2, 80012de <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x822>
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 80012da:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
            if (g && !gate_[v])
 80012de:	f04f 0a00 	mov.w	sl, #0
        float releaseTime = kMinRelTime * exp2f(hold_pot * kRelLog2Ratio);
 80012e2:	ed1f 0a55 	vldr	s0, [pc, #-340]	@ 8001190 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d4>
            gate_[v] = g;
 80012e6:	f884 a083 	strb.w	sl, [r4, #131]	@ 0x83
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 80012ea:	ee20 0a6a 	vnmul.f32	s0, s0, s21
 80012ee:	f008 fed3 	bl	800a098 <exp2f>
        if (hold_pot < 0.999f)
 80012f2:	ed5f 7a58 	vldr	s15, [pc, #-352]	@ 8001194 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6d8>
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 80012f6:	ed1f 7a58 	vldr	s14, [pc, #-352]	@ 8001198 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6dc>
        if (hold_pot < 0.999f)
 80012fa:	eef4 aae7 	vcmpe.f32	s21, s15
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 80012fe:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 8001302:	ee20 ba07 	vmul.f32	s22, s0, s14
        if (hold_pot < 0.999f)
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	f100 838c 	bmi.w	8001a26 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf6a>
 800130e:	f894 806d 	ldrb.w	r8, [r4, #109]	@ 0x6d
 8001312:	f894 906e 	ldrb.w	r9, [r4, #110]	@ 0x6e
 8001316:	f894 706f 	ldrb.w	r7, [r4, #111]	@ 0x6f
            switch (env_state_[v])
 800131a:	2b02      	cmp	r3, #2
 800131c:	f000 854f 	beq.w	8001dbe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1302>
 8001320:	2b04      	cmp	r3, #4
 8001322:	f000 8517 	beq.w	8001d54 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1298>
 8001326:	2b01      	cmp	r3, #1
 8001328:	f040 8340 	bne.w	80019ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xef0>
                    env_level_[v] += kAttackInc;
 800132c:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] >= 1.0f)
 8001330:	ed1f 7a65 	vldr	s14, [pc, #-404]	@ 80011a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 8001334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	f280 8642 	bge.w	8001fc4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1508>
                    env_level_[v] += kAttackInc;
 8001340:	ed1f 7a6a 	vldr	s14, [pc, #-424]	@ 800119c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 8001344:	ed5f ba69 	vldr	s23, [pc, #-420]	@ 80011a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 8001348:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134c:	ee67 baab 	vmul.f32	s23, s15, s23
 8001350:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
        waveform_ = w;
    }

    inline float Process() {
        float out;
        if (waveform_ == Waveform::SINE) {
 8001354:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            out = sinf(phase_);
 8001356:	ed94 ca07 	vldr	s24, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8511 	bne.w	8001d82 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x12c6>
            out = sinf(phase_);
 8001360:	eeb0 0a4c 	vmov.f32	s0, s24
 8001364:	f008 ff00 	bl	800a168 <sinf>
            float tri = (phi < 1.0f)
                      ? phi
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
            out = tri * 2.0f - 1.0f;
        }
        phase_ += phase_inc_;
 8001368:	ee7c 7a0a 	vadd.f32	s15, s24, s20
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 800136c:	ed1f 7a72 	vldr	s14, [pc, #-456]	@ 80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	db01      	blt.n	800137e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8c2>
 800137a:	ee77 7ac7 	vsub.f32	s15, s15, s14
            switch (env_state_[v])
 800137e:	f1b8 0f02 	cmp.w	r8, #2
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8001382:	ee20 8a2b 	vmul.f32	s16, s0, s23
 8001386:	edc4 7a07 	vstr	s15, [r4, #28]
            switch (env_state_[v])
 800138a:	f000 8318 	beq.w	80019be <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf02>
 800138e:	f1b8 0f04 	cmp.w	r8, #4
 8001392:	f000 84cc 	beq.w	8001d2e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1272>
 8001396:	f1b8 0f01 	cmp.w	r8, #1
 800139a:	f040 82fc 	bne.w	8001996 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xeda>
                    env_level_[v] += kAttackInc;
 800139e:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] >= 1.0f)
 80013a2:	ed1f 7a81 	vldr	s14, [pc, #-516]	@ 80011a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	f280 863e 	bge.w	800202e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1572>
                    env_level_[v] += kAttackInc;
 80013b2:	ed1f 7a86 	vldr	s14, [pc, #-536]	@ 800119c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 80013b6:	ed1f aa85 	vldr	s20, [pc, #-532]	@ 80011a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 80013ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013be:	ee27 aa8a 	vmul.f32	s20, s15, s20
 80013c2:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
        if (waveform_ == Waveform::SINE) {
 80013c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            out = sinf(phase_);
 80013c8:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
        if (waveform_ == Waveform::SINE) {
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f040 830d 	bne.w	80019ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf30>
            out = sinf(phase_);
 80013d2:	eeb0 0a6b 	vmov.f32	s0, s23
 80013d6:	f008 fec7 	bl	800a168 <sinf>
        phase_ += phase_inc_;
 80013da:	ee7b 7a89 	vadd.f32	s15, s23, s18
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 80013de:	ed1f 7a8e 	vldr	s14, [pc, #-568]	@ 80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	db01      	blt.n	80013f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x934>
 80013ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 80013f0:	eea0 8a0a 	vfma.f32	s16, s0, s20
 80013f4:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
            switch (env_state_[v])
 80013f8:	f1b9 0f02 	cmp.w	r9, #2
 80013fc:	f000 8484 	beq.w	8001d08 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x124c>
 8001400:	f1b9 0f04 	cmp.w	r9, #4
 8001404:	f000 844b 	beq.w	8001c9e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11e2>
 8001408:	f1b9 0f01 	cmp.w	r9, #1
 800140c:	f040 82b8 	bne.w	8001980 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xec4>
                    env_level_[v] += kAttackInc;
 8001410:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] >= 1.0f)
 8001414:	ed1f 7a9e 	vldr	s14, [pc, #-632]	@ 80011a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	f280 85ef 	bge.w	8002002 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1546>
                    env_level_[v] += kAttackInc;
 8001424:	ed1f 7aa3 	vldr	s14, [pc, #-652]	@ 800119c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e0>
 8001428:	ed1f 9aa2 	vldr	s18, [pc, #-648]	@ 80011a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 800142c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001430:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001434:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
        if (waveform_ == Waveform::SINE) {
 8001438:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
            out = sinf(phase_);
 800143a:	ed94 aa0d 	vldr	s20, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 8444 	bne.w	8001ccc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1210>
            out = sinf(phase_);
 8001444:	eeb0 0a4a 	vmov.f32	s0, s20
 8001448:	f008 fe8e 	bl	800a168 <sinf>
        phase_ += phase_inc_;
 800144c:	ee7a 7a29 	vadd.f32	s15, s20, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001450:	ed1f 7aab 	vldr	s14, [pc, #-684]	@ 80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
 8001454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	db01      	blt.n	8001462 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9a6>
 800145e:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8001462:	eea0 8a09 	vfma.f32	s16, s0, s18
 8001466:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
            switch (env_state_[v])
 800146a:	2f02      	cmp	r7, #2
 800146c:	f000 84e5 	beq.w	8001e3a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x137e>
 8001470:	2f04      	cmp	r7, #4
 8001472:	f000 84b7 	beq.w	8001de4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1328>
 8001476:	2f01      	cmp	r7, #1
 8001478:	f040 8278 	bne.w	800196c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xeb0>
                    env_level_[v] += kAttackInc;
 800147c:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] >= 1.0f)
 8001480:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 80011a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e4>
 8001484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	f2c0 85a4 	blt.w	8001fd8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x151c>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001490:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001494:	2202      	movs	r2, #2
 8001496:	ed1f 9abd 	vldr	s18, [pc, #-756]	@ 80011a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6e8>
 800149a:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
 800149e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        if (waveform_ == Waveform::SINE) {
 80014a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            out = sinf(phase_);
 80014a2:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
        if (waveform_ == Waveform::SINE) {
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 84b3 	bne.w	8001e12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1356>
            out = sinf(phase_);
 80014ac:	eeb0 0a69 	vmov.f32	s0, s19
 80014b0:	f008 fe5a 	bl	800a168 <sinf>
        phase_ += phase_inc_;
 80014b4:	ee78 7aa9 	vadd.f32	s15, s17, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 80014b8:	ed1f 7ac5 	vldr	s14, [pc, #-788]	@ 80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6ec>
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 80014bc:	eea0 8a09 	vfma.f32	s16, s0, s18
 80014c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	bfa8      	it	ge
 80014ca:	ee77 7ac7 	vsubge.f32	s15, s15, s14
        phase_ += phase_inc_;
 80014ce:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
        if (!in_base_freq_mode_) {
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d16a      	bne.n	80015ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xaf0>
        float strumReleaseTime = kStrumMinRelTime * exp2f(hold_pot * kStrumRelLog2Ratio);
 80014d6:	ed1f 0acb 	vldr	s0, [pc, #-812]	@ 80011ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x6f0>
 80014da:	f104 06fb 	add.w	r6, r4, #251	@ 0xfb
 80014de:	f504 7b82 	add.w	fp, r4, #260	@ 0x104
 80014e2:	46a0      	mov	r8, r4
 80014e4:	ee20 0a6a 	vnmul.f32	s0, s0, s21
                        if (strum_level_[s] >= 1.0f)
 80014e8:	ed9f aa9c 	vldr	s20, [pc, #624]	@ 800175c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca0>
 80014ec:	f008 fdd4 	bl	800a098 <exp2f>
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 80014f0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8001760 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca4>
                        if (strum_level_[s] <= kSustain)
 80014f4:	eddf aa9b 	vldr	s21, [pc, #620]	@ 8001764 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xca8>
 80014f8:	f204 1a01 	addw	sl, r4, #257	@ 0x101
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 80014fc:	ee60 9a27 	vmul.f32	s19, s0, s15
                        if (strum_level_[s] <= 0.0f)
 8001500:	ed9f ba99 	vldr	s22, [pc, #612]	@ 8001768 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcac>
 8001504:	e015      	b.n	8001532 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa76>
                switch (strum_state_[s])
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10d      	bne.n	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                        strum_level_[s] += kAttackInc;
 800150a:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] >= 1.0f)
 800150e:	eef4 7aca 	vcmpe.f32	s15, s20
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	f280 82a2 	bge.w	8001a5e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfa2>
                        strum_level_[s] += kAttackInc;
 800151a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800176c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb0>
 800151e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001522:	edcb 7a00 	vstr	s15, [fp]
            for (int s = 0; s < kNumStrum; ++s)
 8001526:	4556      	cmp	r6, sl
 8001528:	f10b 0b04 	add.w	fp, fp, #4
 800152c:	f108 080c 	add.w	r8, r8, #12
 8001530:	d03c      	beq.n	80015ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xaf0>
                switch (strum_state_[s])
 8001532:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8001536:	2b02      	cmp	r3, #2
 8001538:	f000 8209 	beq.w	800194e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe92>
 800153c:	2b03      	cmp	r3, #3
 800153e:	d1e2      	bne.n	8001506 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa4a>
                        strum_level_[s] -= strumRelInc;
 8001540:	eddb 8a00 	vldr	s17, [fp]
 8001544:	ee78 8ae9 	vsub.f32	s17, s17, s19
                        if (strum_level_[s] <= 0.0f)
 8001548:	eef5 8ac0 	vcmpe.f32	s17, #0.0
                        strum_level_[s] -= strumRelInc;
 800154c:	edcb 8a00 	vstr	s17, [fp]
                        if (strum_level_[s] <= 0.0f)
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	f240 82be 	bls.w	8001ad4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1018>
        if (waveform_ == Waveform::SINE) {
 8001558:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
            out = sinf(phase_);
 800155c:	ed98 9a21 	vldr	s18, [r8, #132]	@ 0x84
        if (waveform_ == Waveform::SINE) {
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 8480 	bne.w	8001e66 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13aa>
            out = sinf(phase_);
 8001566:	eeb0 0a49 	vmov.f32	s0, s18
 800156a:	f008 fdfd 	bl	800a168 <sinf>
        phase_ += phase_inc_;
 800156e:	edd8 7a22 	vldr	s15, [r8, #136]	@ 0x88
            for (int s = 0; s < kNumStrum; ++s)
 8001572:	f10b 0b04 	add.w	fp, fp, #4
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001576:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001770 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb4>
 800157a:	f108 080c 	add.w	r8, r8, #12
        phase_ += phase_inc_;
 800157e:	ee79 7a27 	vadd.f32	s15, s18, s15
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8001582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	bfa8      	it	ge
 800158c:	ee77 7ac7 	vsubge.f32	s15, s15, s14
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 8001590:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001774 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcb8>
            for (int s = 0; s < kNumStrum; ++s)
 8001594:	4556      	cmp	r6, sl
        phase_ += phase_inc_;
 8001596:	edc8 7a1e 	vstr	s15, [r8, #120]	@ 0x78
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 800159a:	eddb 7a0d 	vldr	s15, [fp, #52]	@ 0x34
 800159e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80015a6:	eea7 8a80 	vfma.f32	s16, s15, s0
            for (int s = 0; s < kNumStrum; ++s)
 80015aa:	d1c2      	bne.n	8001532 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa76>
        float absIn = fabsf(in);
 80015ac:	eef0 6ac8 	vabs.f32	s13, s16
        if (absIn > compEnv_)
 80015b0:	ed94 7a00 	vldr	s14, [r4]
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 80015b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        mix = tanh(2.5 * mix);
 80015b8:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
        if (absIn > compEnv_)
 80015bc:	eef4 6ac7 	vcmpe.f32	s13, s14
        mix = tanh(2.5 * mix);
 80015c0:	ee28 0a00 	vmul.f32	s0, s16, s0
        if (absIn > compEnv_)
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 80015c8:	bfcc      	ite	gt
 80015ca:	ed94 6a02 	vldrgt	s12, [r4, #8]
            compEnv_ = alphaRel_ * compEnv_ + (1 - alphaRel_) * absIn;
 80015ce:	ed94 6a03 	vldrle	s12, [r4, #12]
 80015d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80015d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015da:	eee7 7a06 	vfma.f32	s15, s14, s12
                            ? (kCompThreshold / compEnv_)
 80015de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	edc4 7a00 	vstr	s15, [r4]
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	bfcc      	ite	gt
 80015f0:	eec7 6a27 	vdivgt.f32	s13, s14, s15
 80015f4:	eef0 6a47 	vmovle.f32	s13, s14
        if (targetGain < compGain_)
 80015f8:	ed94 7a01 	vldr	s14, [r4, #4]
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 80015fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        if (targetGain < compGain_)
 8001600:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 8001608:	bfcc      	ite	gt
 800160a:	ed94 6a02 	vldrgt	s12, [r4, #8]
            compGain_ = alphaRel_ * compGain_ + (1 - alphaRel_) * targetGain;
 800160e:	ed94 6a03 	vldrle	s12, [r4, #12]
 8001612:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800161a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001778 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcbc>
 800161e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8001622:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800177c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc0>
 8001626:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800162a:	edc4 7a01 	vstr	s15, [r4, #4]
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
 800162e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001632:	f008 fffb 	bl	800a62c <tanhf>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001636:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8001780 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc4>
 800163a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	f100 8219 	bmi.w	8001a78 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfbc>
        mix *= kAudioOSFactor * kAudioOutputLevel;
 8001646:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001784 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcc8>
      if (__b < __a)
 800164a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800164e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001652:	fe80 0a67 	vminnm.f32	s0, s0, s15
           block[i] = mix;
 8001656:	ed85 0a00 	vstr	s0, [r5]
 800165a:	ed85 0a01 	vstr	s0, [r5, #4]
 800165e:	ed85 0a02 	vstr	s0, [r5, #8]
    }
 8001662:	b013      	add	sp, #76	@ 0x4c
 8001664:	ecbd 8b0a 	vpop	{d8-d12}
 8001668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (g && !gate_[v])
 800166c:	b911      	cbnz	r1, 8001674 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbb8>
                env_state_[v] = ENV_ATTACK;
 800166e:	2101      	movs	r1, #1
 8001670:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
            gate_[v] = g;
 8001674:	2101      	movs	r1, #1
 8001676:	f884 1081 	strb.w	r1, [r4, #129]	@ 0x81
            bool g = button[v];
 800167a:	7897      	ldrb	r7, [r2, #2]
            if (g && !gate_[v])
 800167c:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
 8001680:	2f00      	cmp	r7, #0
 8001682:	f43f ab6b 	beq.w	8000d5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2a0>
 8001686:	b911      	cbnz	r1, 800168e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xbd2>
                env_state_[v] = ENV_ATTACK;
 8001688:	2101      	movs	r1, #1
 800168a:	f884 106e 	strb.w	r1, [r4, #110]	@ 0x6e
            gate_[v] = g;
 800168e:	2101      	movs	r1, #1
 8001690:	f884 1082 	strb.w	r1, [r4, #130]	@ 0x82
            bool g = button[v];
 8001694:	f892 a003 	ldrb.w	sl, [r2, #3]
            if (g && !gate_[v])
 8001698:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 800169c:	f7ff bb69 	b.w	8000d72 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2b6>
        else if (minor7 && !major7)
 80016a0:	9f01      	ldr	r7, [sp, #4]
 80016a2:	2f01      	cmp	r7, #1
 80016a4:	f000 814a 	beq.w	800193c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe80>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	f000 8147 	beq.w	800193c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe80>
            target_freq_[3] = root_freq * kMinor7Ratio;
 80016ae:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001788 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xccc>
 80016b2:	f1b8 0f02 	cmp.w	r8, #2
 80016b6:	ee27 7a26 	vmul.f32	s14, s14, s13
            target_freq_[3] = root_freq * kMajor6Ratio;
 80016ba:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 80016be:	f47f abe8 	bne.w	8000e92 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3d6>
            if (strum_state_[s] != ENV_IDLE)
 80016c2:	f1b9 0f00 	cmp.w	r9, #0
 80016c6:	d005      	beq.n	80016d4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc18>
                strum_target_[s] = note * (1 << oct);
 80016c8:	ed91 7a00 	vldr	s14, [r1]
 80016cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d0:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80016d4:	9802      	ldr	r0, [sp, #8]
 80016d6:	b148      	cbz	r0, 80016ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc30>
                strum_target_[s] = note * (1 << oct);
 80016d8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800178c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd0>
 80016dc:	edd1 6a00 	vldr	s13, [r1]
 80016e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016e8:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 80016ec:	9803      	ldr	r0, [sp, #12]
 80016ee:	b148      	cbz	r0, 8001704 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
                strum_target_[s] = note * (1 << oct);
 80016f0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001790 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd4>
 80016f4:	edd1 6a00 	vldr	s13, [r1]
 80016f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001700:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8001704:	f1bb 0f00 	cmp.w	fp, #0
 8001708:	d007      	beq.n	800171a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc5e>
                strum_target_[s] = note * (1 << oct);
 800170a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800170e:	edd1 6a00 	vldr	s13, [r1]
 8001712:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001716:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800171a:	f1ba 0f00 	cmp.w	sl, #0
 800171e:	d007      	beq.n	8001730 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc74>
                strum_target_[s] = note * (1 << oct);
 8001720:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001724:	edd1 6a00 	vldr	s13, [r1]
 8001728:	ee27 7a26 	vmul.f32	s14, s14, s13
 800172c:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8001730:	9804      	ldr	r0, [sp, #16]
 8001732:	2800      	cmp	r0, #0
 8001734:	f43f abf4 	beq.w	8000f20 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x464>
                strum_target_[s] = note * (1 << oct);
 8001738:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001794 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xcd8>
 800173c:	edd1 6a00 	vldr	s13, [r1]
 8001740:	ee27 7a87 	vmul.f32	s14, s15, s14
            if (strum_idx_changed)
 8001744:	9826      	ldr	r0, [sp, #152]	@ 0x98
                strum_target_[s] = note * (1 << oct);
 8001746:	ee27 7a26 	vmul.f32	s14, s14, s13
 800174a:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
            if (strum_idx_changed)
 800174e:	2800      	cmp	r0, #0
 8001750:	f47f abea 	bne.w	8000f28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x46c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001754:	2600      	movs	r6, #0
 8001756:	f7ff b9e5 	b.w	8000b24 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x68>
 800175a:	bf00      	nop
 800175c:	3f7f3333 	.word	0x3f7f3333
 8001760:	3aa3d70b 	.word	0x3aa3d70b
 8001764:	3f334bc6 	.word	0x3f334bc6
 8001768:	00000000 	.word	0x00000000
 800176c:	3b4ccccd 	.word	0x3b4ccccd
 8001770:	40c90fdb 	.word	0x40c90fdb
 8001774:	3ca3d70a 	.word	0x3ca3d70a
 8001778:	3f333333 	.word	0x3f333333
 800177c:	3e99999a 	.word	0x3e99999a
 8001780:	beb3a62d 	.word	0xbeb3a62d
 8001784:	40366666 	.word	0x40366666
 8001788:	3fe411ed 	.word	0x3fe411ed
 800178c:	3f9837ef 	.word	0x3f9837ef
 8001790:	3fb504f7 	.word	0x3fb504f7
 8001794:	401837ef 	.word	0x401837ef
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8001798:	f894 e208 	ldrb.w	lr, [r4, #520]	@ 0x208
 800179c:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 8001aac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff0>
 80017a0:	f1be 0f00 	cmp.w	lr, #0
 80017a4:	f8df a308 	ldr.w	sl, [pc, #776]	@ 8001ab0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff4>
 80017a8:	49b5      	ldr	r1, [pc, #724]	@ (8001a80 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfc4>)
 80017aa:	f8df 9308 	ldr.w	r9, [pc, #776]	@ 8001ab4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xff8>
 80017ae:	bf1c      	itt	ne
 80017b0:	4641      	movne	r1, r8
 80017b2:	46d1      	movne	r9, sl
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80017b4:	f8d4 8204 	ldr.w	r8, [r4, #516]	@ 0x204
                in_base_freq_mode_ = false;
 80017b8:	7526      	strb	r6, [r4, #20]
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80017ba:	eb01 0188 	add.w	r1, r1, r8, lsl #2
        int chord_type = chord_types[current_chord_];
 80017be:	f859 a028 	ldr.w	sl, [r9, r8, lsl #2]
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80017c2:	ed91 7a00 	vldr	s14, [r1]
        switch (chord_type) {
 80017c6:	f1ba 0f01 	cmp.w	sl, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80017ca:	ee27 7a87 	vmul.f32	s14, s15, s14
        switch (chord_type) {
 80017ce:	f000 8595 	beq.w	80022fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1840>
 80017d2:	f8df 92e4 	ldr.w	r9, [pc, #740]	@ 8001ab8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xffc>
 80017d6:	f8df b2e4 	ldr.w	fp, [pc, #740]	@ 8001abc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1000>
 80017da:	f1ba 0f02 	cmp.w	sl, #2
 80017de:	bf18      	it	ne
 80017e0:	46d9      	movne	r9, fp
        target_freq_[0] = root_freq * chord_multipliers[0];
 80017e2:	ed84 7a17 	vstr	s14, [r4, #92]	@ 0x5c
        if (major7 && !minor7)
 80017e6:	f080 0701 	eor.w	r7, r0, #1
        target_freq_[1] = root_freq * chord_multipliers[1];
 80017ea:	edd9 6a01 	vldr	s13, [r9, #4]
        if (major7 && !minor7)
 80017ee:	2801      	cmp	r0, #1
 80017f0:	9705      	str	r7, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 80017f2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80017f6:	edc4 6a18 	vstr	s13, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 80017fa:	edd9 6a02 	vldr	s13, [r9, #8]
 80017fe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001802:	edc4 6a19 	vstr	s13, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 8001806:	f000 8504 	beq.w	8002212 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1756>
 800180a:	9f01      	ldr	r7, [sp, #4]
 800180c:	2f00      	cmp	r7, #0
 800180e:	f000 8500 	beq.w	8002212 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1756>
            target_freq_[3] = root_freq * kMajor7Ratio;
 8001812:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8001a84 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfc8>
 8001816:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 800181a:	f1ba 0f02 	cmp.w	sl, #2
            if (strum_state_[s] != ENV_IDLE)
 800181e:	f894 90fc 	ldrb.w	r9, [r4, #252]	@ 0xfc
            target_freq_[3] = root_freq * kMajor7Ratio;
 8001822:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 8001826:	f000 8586 	beq.w	8002336 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x187a>
 800182a:	f1ba 0f01 	cmp.w	sl, #1
 800182e:	f000 85d3 	beq.w	80023d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x191c>
            if (strum_state_[s] != ENV_IDLE)
 8001832:	f1b9 0f00 	cmp.w	r9, #0
 8001836:	d005      	beq.n	8001844 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd88>
                strum_target_[s] = note * (1 << oct);
 8001838:	ed91 7a00 	vldr	s14, [r1]
 800183c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001840:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001844:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 8001848:	9702      	str	r7, [sp, #8]
 800184a:	b14f      	cbz	r7, 8001860 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xda4>
                strum_target_[s] = note * (1 << oct);
 800184c:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8001a88 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfcc>
 8001850:	ed91 7a00 	vldr	s14, [r1]
 8001854:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001858:	ee27 7a26 	vmul.f32	s14, s14, s13
 800185c:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001860:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 8001864:	9703      	str	r7, [sp, #12]
 8001866:	b14f      	cbz	r7, 800187c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdc0>
                strum_target_[s] = note * (1 << oct);
 8001868:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8001a8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd0>
 800186c:	ed91 7a00 	vldr	s14, [r1]
 8001870:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001874:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001878:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 800187c:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8001880:	f1bb 0f00 	cmp.w	fp, #0
 8001884:	d007      	beq.n	8001896 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdda>
                strum_target_[s] = note * (1 << oct);
 8001886:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800188a:	ed91 7a00 	vldr	s14, [r1]
 800188e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001892:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8001896:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800189a:	f1ba 0f00 	cmp.w	sl, #0
 800189e:	d007      	beq.n	80018b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xdf4>
                strum_target_[s] = note * (1 << oct);
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	ed91 7a00 	vldr	s14, [r1]
 80018a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018ac:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80018b0:	f894 7101 	ldrb.w	r7, [r4, #257]	@ 0x101
 80018b4:	9704      	str	r7, [sp, #16]
 80018b6:	2f00      	cmp	r7, #0
 80018b8:	f43f aa8d 	beq.w	8000dd6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                strum_target_[s] = note * (1 << oct);
 80018bc:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001a90 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd4>
 80018c0:	ed91 7a00 	vldr	s14, [r1]
 80018c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018cc:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 80018d0:	f7ff ba81 	b.w	8000dd6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                env_state_[v] = ENV_ATTACK;
 80018d4:	2101      	movs	r1, #1
 80018d6:	f884 106c 	strb.w	r1, [r4, #108]	@ 0x6c
 80018da:	f7ff ba25 	b.w	8000d28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x26c>
            if (g && !gate_[v])
 80018de:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 80018e2:	464f      	mov	r7, r9
            gate_[v] = g;
 80018e4:	f884 9082 	strb.w	r9, [r4, #130]	@ 0x82
            if (in_base_freq_mode_ && v != 0) {
 80018e8:	e4f6      	b.n	80012d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x81c>
            if (g && !gate_[v])
 80018ea:	f894 1082 	ldrb.w	r1, [r4, #130]	@ 0x82
            bool g = button[v];
 80018ee:	7897      	ldrb	r7, [r2, #2]
            if (in_base_freq_mode_ && v != 0) {
 80018f0:	f7ff ba31 	b.w	8000d56 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x29a>
            if (strum_state_[s] != ENV_IDLE)
 80018f4:	f1b9 0f00 	cmp.w	r9, #0
 80018f8:	d005      	beq.n	8001906 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe4a>
                strum_target_[s] = note * (1 << oct);
 80018fa:	ed91 7a00 	vldr	s14, [r1]
 80018fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001902:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001906:	9802      	ldr	r0, [sp, #8]
 8001908:	b148      	cbz	r0, 800191e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xe62>
                strum_target_[s] = note * (1 << oct);
 800190a:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001a94 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd8>
 800190e:	ed91 7a00 	vldr	s14, [r1]
 8001912:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001916:	ee27 7a26 	vmul.f32	s14, s14, s13
 800191a:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 800191e:	9803      	ldr	r0, [sp, #12]
 8001920:	2800      	cmp	r0, #0
 8001922:	f43f aeef 	beq.w	8001704 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
                strum_target_[s] = note * (1 << oct);
 8001926:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001a8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfd0>
 800192a:	edd1 6a00 	vldr	s13, [r1]
 800192e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001932:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001936:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
 800193a:	e6e3      	b.n	8001704 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc48>
        else if (major7 && minor7)
 800193c:	2e00      	cmp	r6, #0
 800193e:	f000 847d 	beq.w	800223c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1780>
            target_freq_[3] = root_freq * kMajor6Ratio;
 8001942:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001a98 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfdc>
 8001946:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 800194a:	f7ff ba9c 	b.w	8000e86 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3ca>
                        strum_level_[s] -= kDecayInc;
 800194e:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] <= kSustain)
 8001952:	eef4 7aea 	vcmpe.f32	s15, s21
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	f240 8087 	bls.w	8001a6c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfb0>
                        strum_level_[s] -= kDecayInc;
 800195e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001a9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe0>
 8001962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001966:	edcb 7a00 	vstr	s15, [fp]
 800196a:	e5dc      	b.n	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
            if (env_state_[v] != ENV_IDLE)
 800196c:	2f00      	cmp	r7, #0
 800196e:	f43f adb0 	beq.w	80014d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa16>
 8001972:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
 8001976:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8001ac0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 800197a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800197e:	e58f      	b.n	80014a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
 8001980:	f1b9 0f00 	cmp.w	r9, #0
 8001984:	f43f ad71 	beq.w	800146a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9ae>
 8001988:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
 800198c:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 8001ac0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 8001990:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001994:	e550      	b.n	8001438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
 8001996:	f1b8 0f00 	cmp.w	r8, #0
 800199a:	f43f ad2d 	beq.w	80013f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x93c>
 800199e:	ed94 aa1d 	vldr	s20, [r4, #116]	@ 0x74
 80019a2:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8001ac0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
 80019a6:	ee2a aa27 	vmul.f32	s20, s20, s15
 80019aa:	e50c      	b.n	80013c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 853a 	bne.w	8002426 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x196a>
            switch (env_state_[v])
 80019b2:	f1b8 0f02 	cmp.w	r8, #2
        float mix = 0.0f;
 80019b6:	ed9f 8a3a 	vldr	s16, [pc, #232]	@ 8001aa0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe4>
            switch (env_state_[v])
 80019ba:	f47f ace8 	bne.w	800138e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8d2>
                    env_level_[v] -= kDecayInc;
 80019be:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] <= kSustain)
 80019c2:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001ad0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1014>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	f200 8338 	bhi.w	8002042 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1586>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe8>)
 80019d4:	ed9f aa34 	vldr	s20, [pc, #208]	@ 8001aa8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfec>
 80019d8:	6763      	str	r3, [r4, #116]	@ 0x74
 80019da:	2303      	movs	r3, #3
            out = sinf(phase_);
 80019dc:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
 80019e0:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
        if (waveform_ == Waveform::SINE) {
 80019e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f43f acf3 	beq.w	80013d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x916>
                      ? phi
 80019ec:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001ac4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1008>
            float phi = phase_ * kInvPi;
 80019f0:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001ac8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x100c>
                      ? phi
 80019f4:	eef4 bac7 	vcmpe.f32	s23, s14
            float phi = phase_ * kInvPi;
 80019f8:	ee6b 7aa7 	vmul.f32	s15, s23, s15
                      ? phi
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	f2c0 83f7 	blt.w	80021f2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1736>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001a04:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001acc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1010>
 8001a08:	eef4 bac7 	vcmpe.f32	s23, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	f140 847c 	bpl.w	800230c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1850>
 8001a14:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001a18:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001a20:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001a24:	e4d9      	b.n	80013da <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	f000 8282 	beq.w	8001f30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1474>
 8001a2c:	f894 806d 	ldrb.w	r8, [r4, #109]	@ 0x6d
 8001a30:	f1b8 0f03 	cmp.w	r8, #3
 8001a34:	f000 8273 	beq.w	8001f1e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1462>
 8001a38:	f894 906e 	ldrb.w	r9, [r4, #110]	@ 0x6e
 8001a3c:	f1b9 0f03 	cmp.w	r9, #3
 8001a40:	f000 8265 	beq.w	8001f0e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1452>
 8001a44:	f894 706f 	ldrb.w	r7, [r4, #111]	@ 0x6f
 8001a48:	2f03      	cmp	r7, #3
 8001a4a:	f47f ac66 	bne.w	800131a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
 8001a4e:	f1ba 0f00 	cmp.w	sl, #0
 8001a52:	f47f ac62 	bne.w	800131a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
                    env_state_[v] = ENV_RELEASE;
 8001a56:	2704      	movs	r7, #4
 8001a58:	f884 706f 	strb.w	r7, [r4, #111]	@ 0x6f
            for (int v = 0; v < kNumVoices; ++v)
 8001a5c:	e45d      	b.n	800131a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x85e>
                            { strum_level_[s] = 1.0f; strum_state_[s] = ENV_DECAY; }
 8001a5e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a62:	f8cb 3000 	str.w	r3, [fp]
 8001a66:	2302      	movs	r3, #2
 8001a68:	7033      	strb	r3, [r6, #0]
 8001a6a:	e55c      	b.n	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                            { strum_level_[s] = kSustain; strum_state_[s] = ENV_SUSTAIN; }
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xfe8>)
 8001a6e:	f8cb 3000 	str.w	r3, [fp]
 8001a72:	2303      	movs	r3, #3
 8001a74:	7033      	strb	r3, [r6, #0]
 8001a76:	e556      	b.n	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
      return __a;
 8001a78:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001a7c:	e5eb      	b.n	8001656 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xb9a>
 8001a7e:	bf00      	nop
 8001a80:	0800c288 	.word	0x0800c288
 8001a84:	3ff1a1c2 	.word	0x3ff1a1c2
 8001a88:	3fa14517 	.word	0x3fa14517
 8001a8c:	3fbfc886 	.word	0x3fbfc886
 8001a90:	40214517 	.word	0x40214517
 8001a94:	3f9837ef 	.word	0x3f9837ef
 8001a98:	3fd744fe 	.word	0x3fd744fe
 8001a9c:	39c49ba6 	.word	0x39c49ba6
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	3f333333 	.word	0x3f333333
 8001aa8:	3c656041 	.word	0x3c656041
 8001aac:	0800c268 	.word	0x0800c268
 8001ab0:	0800c1f8 	.word	0x0800c1f8
 8001ab4:	0800c218 	.word	0x0800c218
 8001ab8:	0800c238 	.word	0x0800c238
 8001abc:	0800c258 	.word	0x0800c258
 8001ac0:	3ca3d70a 	.word	0x3ca3d70a
 8001ac4:	40490fdb 	.word	0x40490fdb
 8001ac8:	3ea2f983 	.word	0x3ea2f983
 8001acc:	40c90fdb 	.word	0x40c90fdb
 8001ad0:	3f334bc6 	.word	0x3f334bc6
                            strum_state_[s] = ENV_IDLE; 
 8001ad4:	2200      	movs	r2, #0
                            strum_level_[s] = 0.0f; 
 8001ad6:	ed8b ba00 	vstr	s22, [fp]
                            strum_state_[s] = ENV_IDLE; 
 8001ada:	7032      	strb	r2, [r6, #0]
            if (strum_state_[s] != ENV_IDLE)
 8001adc:	f894 30fc 	ldrb.w	r3, [r4, #252]	@ 0xfc
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 826c 	beq.w	8001fbe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1502>
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001ae6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001aea:	2102      	movs	r1, #2
                active_count++;
 8001aec:	f04f 0c01 	mov.w	ip, #1
                active_voices[active_count].index = s;
 8001af0:	9206      	str	r2, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001af2:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 8001af4:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8001af8:	b153      	cbz	r3, 8001b10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1054>
                active_voices[active_count].index = s;
 8001afa:	ab12      	add	r3, sp, #72	@ 0x48
 8001afc:	eb03 02cc 	add.w	r2, r3, ip, lsl #3
 8001b00:	2301      	movs	r3, #1
                active_count++;
 8001b02:	468c      	mov	ip, r1
                active_voices[active_count].index = s;
 8001b04:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b08:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8001b0c:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001b10:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8001b14:	b15b      	cbz	r3, 8001b2e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1072>
                active_voices[active_count].index = s;
 8001b16:	aa12      	add	r2, sp, #72	@ 0x48
 8001b18:	2302      	movs	r3, #2
 8001b1a:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001b1e:	f10c 0c01 	add.w	ip, ip, #1
 8001b22:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b26:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 8001b2a:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001b2e:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8001b32:	b15b      	cbz	r3, 8001b4c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1090>
                active_voices[active_count].index = s;
 8001b34:	aa12      	add	r2, sp, #72	@ 0x48
 8001b36:	2303      	movs	r3, #3
 8001b38:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001b3c:	f10c 0c01 	add.w	ip, ip, #1
 8001b40:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b44:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8001b48:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001b4c:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
 8001b50:	b15b      	cbz	r3, 8001b6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x10ae>
                active_voices[active_count].index = s;
 8001b52:	aa12      	add	r2, sp, #72	@ 0x48
 8001b54:	2304      	movs	r3, #4
 8001b56:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001b5a:	f10c 0c01 	add.w	ip, ip, #1
 8001b5e:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b62:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 8001b66:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001b6a:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8001b6e:	b15b      	cbz	r3, 8001b88 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x10cc>
                active_voices[active_count].index = s;
 8001b70:	aa12      	add	r2, sp, #72	@ 0x48
 8001b72:	2305      	movs	r3, #5
 8001b74:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8001b78:	f10c 0c01 	add.w	ip, ip, #1
 8001b7c:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001b80:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
 8001b84:	f842 3c2c 	str.w	r3, [r2, #-44]
            strum_attenuation_[s] = 1.0f;
 8001b88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 8001b8c:	f1bc 0f01 	cmp.w	ip, #1
            strum_attenuation_[s] = 1.0f;
 8001b90:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8001b94:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 8001b98:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8001b9c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8001ba0:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8001ba4:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 8001ba8:	f77f acbd 	ble.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
            for (int i = 0; i < active_count - 1; i++)
 8001bac:	f10c 3eff 	add.w	lr, ip, #4294967295	@ 0xffffffff
 8001bb0:	9f07      	ldr	r7, [sp, #28]
 8001bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 8001bb4:	f10d 0920 	add.w	r9, sp, #32
 8001bb8:	4673      	mov	r3, lr
 8001bba:	9404      	str	r4, [sp, #16]
 8001bbc:	e9cd c602 	strd	ip, r6, [sp, #8]
                for (int j = 0; j < active_count - i - 1; j++)
 8001bc0:	1c59      	adds	r1, r3, #1
 8001bc2:	2901      	cmp	r1, #1
 8001bc4:	dd25      	ble.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bc6:	42ba      	cmp	r2, r7
 8001bc8:	d329      	bcc.n	8001c1e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1162>
                for (int j = 0; j < active_count - i - 1; j++)
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	f000 815f 	beq.w	8001e8e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13d2>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bd0:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8001bd4:	4562      	cmp	r2, ip
 8001bd6:	d833      	bhi.n	8001c40 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1184>
                for (int j = 0; j < active_count - i - 1; j++)
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	f000 8298 	beq.w	800210e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1652>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bde:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8001be0:	45b4      	cmp	ip, r6
 8001be2:	d83c      	bhi.n	8001c5e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11a2>
                for (int j = 0; j < active_count - i - 1; j++)
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	f000 8321 	beq.w	800222c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1770>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bea:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
 8001bee:	4566      	cmp	r6, ip
 8001bf0:	d844      	bhi.n	8001c7c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x11c0>
                for (int j = 0; j < active_count - i - 1; j++)
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	f000 8328 	beq.w	8002248 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x178c>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001bf8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001bfa:	4561      	cmp	r1, ip
 8001bfc:	d209      	bcs.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001bfe:	a90e      	add	r1, sp, #56	@ 0x38
 8001c00:	9101      	str	r1, [sp, #4]
                        active_voices[j] = active_voices[j + 1];
 8001c02:	a910      	add	r1, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 8001c04:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 8001c06:	9c01      	ldr	r4, [sp, #4]
 8001c08:	c903      	ldmia	r1, {r0, r1}
 8001c0a:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c0e:	e9cd 6c10 	strd	r6, ip, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 8001c12:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 8001c14:	1c59      	adds	r1, r3, #1
 8001c16:	2901      	cmp	r1, #1
 8001c18:	ddfb      	ble.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c1a:	42ba      	cmp	r2, r7
 8001c1c:	d2d5      	bcs.n	8001bca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x110e>
                        VoiceInfo temp = active_voices[j];
 8001c1e:	9a06      	ldr	r2, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 8001c20:	ac06      	add	r4, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 8001c22:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 8001c24:	e899 0003 	ldmia.w	r9, {r0, r1}
 8001c28:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c2c:	e9cd 2708 	strd	r2, r7, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001c30:	f000 812d 	beq.w	8001e8e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x13d2>
 8001c34:	463a      	mov	r2, r7
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c36:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8001c3a:	460f      	mov	r7, r1
 8001c3c:	4562      	cmp	r2, ip
 8001c3e:	d9cb      	bls.n	8001bd8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x111c>
                        active_voices[j] = active_voices[j + 1];
 8001c40:	a90a      	add	r1, sp, #40	@ 0x28
                        VoiceInfo temp = active_voices[j];
 8001c42:	9e08      	ldr	r6, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001c44:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 8001c46:	c903      	ldmia	r1, {r0, r1}
 8001c48:	e889 0003 	stmia.w	r9, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c4c:	e9cd 620a 	strd	r6, r2, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001c50:	f000 825f 	beq.w	8002112 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1656>
 8001c54:	4694      	mov	ip, r2
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c56:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8001c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c5a:	45b4      	cmp	ip, r6
 8001c5c:	d9c2      	bls.n	8001be4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1128>
                        active_voices[j] = active_voices[j + 1];
 8001c5e:	a90c      	add	r1, sp, #48	@ 0x30
                        VoiceInfo temp = active_voices[j];
 8001c60:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
                        active_voices[j] = active_voices[j + 1];
 8001c62:	ac0a      	add	r4, sp, #40	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001c64:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 8001c66:	c903      	ldmia	r1, {r0, r1}
 8001c68:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c6c:	e9cd 6c0c 	strd	r6, ip, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001c70:	d0cf      	beq.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001c72:	4666      	mov	r6, ip
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c74:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
 8001c78:	4566      	cmp	r6, ip
 8001c7a:	d9ba      	bls.n	8001bf2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1136>
                        active_voices[j] = active_voices[j + 1];
 8001c7c:	a90e      	add	r1, sp, #56	@ 0x38
                        VoiceInfo temp = active_voices[j];
 8001c7e:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
                        active_voices[j] = active_voices[j + 1];
 8001c82:	ac0c      	add	r4, sp, #48	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 8001c84:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 8001c86:	9101      	str	r1, [sp, #4]
 8001c88:	c903      	ldmia	r1, {r0, r1}
 8001c8a:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001c8e:	e9cd c60e 	strd	ip, r6, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 8001c92:	d0be      	beq.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001c94:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001c96:	428e      	cmp	r6, r1
 8001c98:	d9bb      	bls.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
 8001c9a:	46b4      	mov	ip, r6
 8001c9c:	e7b1      	b.n	8001c02 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1146>
                    env_level_[v] -= relInc;
 8001c9e:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
                    if (env_level_[v] <= 0.0f)
 8001ca2:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001ca4:	ee39 9a4b 	vsub.f32	s18, s18, s22
                    if (env_level_[v] <= 0.0f)
 8001ca8:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	f240 8221 	bls.w	80020f6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x163a>
 8001cb4:	ed5f 7a7e 	vldr	s15, [pc, #-504]	@ 8001ac0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1004>
        if (waveform_ == Waveform::SINE) {
 8001cb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                    env_level_[v] -= relInc;
 8001cba:	ed84 9a1e 	vstr	s18, [r4, #120]	@ 0x78
 8001cbe:	ee29 9a27 	vmul.f32	s18, s18, s15
            out = sinf(phase_);
 8001cc2:	ed94 aa0d 	vldr	s20, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f43f abbc 	beq.w	8001444 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x988>
                      ? phi
 8001ccc:	ed1f 7a83 	vldr	s14, [pc, #-524]	@ 8001ac4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1008>
            float phi = phase_ * kInvPi;
 8001cd0:	ed5f 7a83 	vldr	s15, [pc, #-524]	@ 8001ac8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x100c>
                      ? phi
 8001cd4:	eeb4 aac7 	vcmpe.f32	s20, s14
            float phi = phase_ * kInvPi;
 8001cd8:	ee6a 7a27 	vmul.f32	s15, s20, s15
                      ? phi
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	f2c0 828f 	blt.w	8002202 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1746>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001ce4:	ed1f 7a87 	vldr	s14, [pc, #-540]	@ 8001acc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1010>
 8001ce8:	eeb4 aac7 	vcmpe.f32	s20, s14
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	f140 8310 	bpl.w	8002314 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1858>
 8001cf4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001cf8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001d00:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001d04:	f7ff bba2 	b.w	800144c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
                    env_level_[v] -= kDecayInc;
 8001d08:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] <= kSustain)
 8001d0c:	ed1f 7a90 	vldr	s14, [pc, #-576]	@ 8001ad0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1014>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	f200 817d 	bhi.w	8002016 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x155a>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001d1c:	4be1      	ldr	r3, [pc, #900]	@ (80020a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001d1e:	ed9f 9ae2 	vldr	s18, [pc, #904]	@ 80020a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001d22:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001d24:	2303      	movs	r3, #3
 8001d26:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001d2a:	f7ff bb85 	b.w	8001438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                    env_level_[v] -= relInc;
 8001d2e:	ed94 aa1d 	vldr	s20, [r4, #116]	@ 0x74
                    if (env_level_[v] <= 0.0f)
 8001d32:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001d34:	ee3a aa4b 	vsub.f32	s20, s20, s22
                    if (env_level_[v] <= 0.0f)
 8001d38:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	f240 81df 	bls.w	8002102 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1646>
 8001d44:	eddf 7ad9 	vldr	s15, [pc, #868]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
                    env_level_[v] -= relInc;
 8001d48:	ed84 aa1d 	vstr	s20, [r4, #116]	@ 0x74
 8001d4c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001d50:	f7ff bb39 	b.w	80013c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 8001d54:	edd4 ba1c 	vldr	s23, [r4, #112]	@ 0x70
                    if (env_level_[v] <= 0.0f)
 8001d58:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001d5a:	ee7b bacb 	vsub.f32	s23, s23, s22
                    if (env_level_[v] <= 0.0f)
 8001d5e:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	f240 81c1 	bls.w	80020ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1630>
 8001d6a:	eddf 7ad0 	vldr	s15, [pc, #832]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
        if (waveform_ == Waveform::SINE) {
 8001d6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
                    env_level_[v] -= relInc;
 8001d70:	edc4 ba1c 	vstr	s23, [r4, #112]	@ 0x70
 8001d74:	ee6b baa7 	vmul.f32	s23, s23, s15
            out = sinf(phase_);
 8001d78:	ed94 ca07 	vldr	s24, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f43f aaef 	beq.w	8001360 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8a4>
                      ? phi
 8001d82:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 80020b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001d86:	eddf 7acb 	vldr	s15, [pc, #812]	@ 80020b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001d8a:	eeb4 cac7 	vcmpe.f32	s24, s14
            float phi = phase_ * kInvPi;
 8001d8e:	ee6c 7a27 	vmul.f32	s15, s24, s15
                      ? phi
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	f2c0 8224 	blt.w	80021e2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1726>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001d9a:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 80020b8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15fc>
 8001d9e:	eeb4 cac7 	vcmpe.f32	s24, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	f140 82b9 	bpl.w	800231c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1860>
 8001daa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001dae:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001db6:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001dba:	f7ff bad5 	b.w	8001368 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
                    env_level_[v] -= kDecayInc;
 8001dbe:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] <= kSustain)
 8001dc2:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80020bc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1600>
 8001dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	f200 8144 	bhi.w	800205a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x159e>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001dd2:	4bb4      	ldr	r3, [pc, #720]	@ (80020a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001dd4:	eddf bab4 	vldr	s23, [pc, #720]	@ 80020a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001dd8:	6723      	str	r3, [r4, #112]	@ 0x70
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001de0:	f7ff bab8 	b.w	8001354 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
                    env_level_[v] -= relInc;
 8001de4:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= 0.0f)
 8001de8:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001dea:	ee39 9a4b 	vsub.f32	s18, s18, s22
                    if (env_level_[v] <= 0.0f)
 8001dee:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	f240 8173 	bls.w	80020e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1624>
 8001dfa:	eddf 7aac 	vldr	s15, [pc, #688]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
        if (waveform_ == Waveform::SINE) {
 8001dfe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
                    env_level_[v] -= relInc;
 8001e00:	ed84 9a1f 	vstr	s18, [r4, #124]	@ 0x7c
 8001e04:	ee29 9a27 	vmul.f32	s18, s18, s15
            out = sinf(phase_);
 8001e08:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
        if (waveform_ == Waveform::SINE) {
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f43f ab4d 	beq.w	80014ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f0>
                      ? phi
 8001e12:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80020b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001e16:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 80020b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001e1a:	eef4 9ac7 	vcmpe.f32	s19, s14
            float phi = phase_ * kInvPi;
 8001e1e:	ee69 7aa7 	vmul.f32	s15, s19, s15
                      ? phi
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	f280 81ca 	bge.w	80021be <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1702>
            out = tri * 2.0f - 1.0f;
 8001e2a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e2e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001e32:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001e36:	f7ff bb3d 	b.w	80014b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
                    env_level_[v] -= kDecayInc;
 8001e3a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= kSustain)
 8001e3e:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 80020bc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1600>
 8001e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4a:	f240 80d1 	bls.w	8001ff0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1534>
                    env_level_[v] -= kDecayInc;
 8001e4e:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80020c0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8001e52:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001e56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e5a:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001e5e:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
 8001e62:	f7ff bb1d 	b.w	80014a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                      ? phi
 8001e66:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80020b0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f4>
            float phi = phase_ * kInvPi;
 8001e6a:	eddf 7a92 	vldr	s15, [pc, #584]	@ 80020b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f8>
                      ? phi
 8001e6e:	eeb4 9ac7 	vcmpe.f32	s18, s14
            float phi = phase_ * kInvPi;
 8001e72:	ee69 7a27 	vmul.f32	s15, s18, s15
                      ? phi
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	f280 80fe 	bge.w	800207a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15be>
            out = tri * 2.0f - 1.0f;
 8001e7e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e82:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001e86:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001e8a:	f7ff bb70 	b.w	800156e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e8e:	e9dd c602 	ldrd	ip, r6, [sp, #8]
 8001e92:	4a8c      	ldr	r2, [pc, #560]	@ (80020c4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1608>)
            for (int i = 0; i < active_count - 1; i++)
 8001e94:	f1be 0f01 	cmp.w	lr, #1
 8001e98:	9c04      	ldr	r4, [sp, #16]
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001e9a:	9b06      	ldr	r3, [sp, #24]
 8001e9c:	eb02 018c 	add.w	r1, r2, ip, lsl #2
 8001ea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ea4:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8001ea8:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001eac:	f43f ab3b 	beq.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001eb0:	9b08      	ldr	r3, [sp, #32]
 8001eb2:	eb02 018c 	add.w	r1, r2, ip, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001eb6:	f1be 0f02 	cmp.w	lr, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ebe:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8001ec2:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001ec6:	f43f ab2e 	beq.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001ecc:	eb02 018c 	add.w	r1, r2, ip, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001ed0:	f1be 0f03 	cmp.w	lr, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ed8:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8001edc:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001ee0:	f43f ab21 	beq.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001ee4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8001ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            for (int i = 0; i < active_count - 1; i++)
 8001eea:	f1be 0f05 	cmp.w	lr, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001eee:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001ef2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ef6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001efa:	f47f ab14 	bne.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001f00:	4a71      	ldr	r2, [pc, #452]	@ (80020c8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x160c>)
 8001f02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001f06:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f0a:	f7ff bb0c 	b.w	8001526 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa6a>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001f0e:	2f00      	cmp	r7, #0
 8001f10:	f47f ad98 	bne.w	8001a44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf88>
                    env_state_[v] = ENV_RELEASE;
 8001f14:	f04f 0904 	mov.w	r9, #4
 8001f18:	f884 906e 	strb.w	r9, [r4, #110]	@ 0x6e
 8001f1c:	e592      	b.n	8001a44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf88>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001f1e:	f1b9 0f00 	cmp.w	r9, #0
 8001f22:	f47f ad89 	bne.w	8001a38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf7c>
                    env_state_[v] = ENV_RELEASE;
 8001f26:	f04f 0804 	mov.w	r8, #4
 8001f2a:	f884 806d 	strb.w	r8, [r4, #109]	@ 0x6d
 8001f2e:	e583      	b.n	8001a38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf7c>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001f30:	f1b8 0f00 	cmp.w	r8, #0
 8001f34:	f47f ad7a 	bne.w	8001a2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf70>
                    env_state_[v] = ENV_RELEASE;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001f3e:	e575      	b.n	8001a2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xf70>
                chord_multipliers = minor_chord_multipliers_;
 8001f40:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 80020d0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1614>
 8001f44:	f7fe bf85 	b.w	8000e52 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x396>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f48:	4b5e      	ldr	r3, [pc, #376]	@ (80020c4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1608>)
 8001f4a:	9906      	ldr	r1, [sp, #24]
 8001f4c:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 8001f50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f54:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001f58:	e9dd 7202 	ldrd	r7, r2, [sp, #8]
 8001f5c:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f60:	2f01      	cmp	r7, #1
 8001f62:	f43f abf7 	beq.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f66:	9908      	ldr	r1, [sp, #32]
 8001f68:	eb03 0088 	add.w	r0, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f6c:	2f02      	cmp	r7, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f6e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f72:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 8001f76:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f7a:	f43f abeb 	beq.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001f80:	eb03 0088 	add.w	r0, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f84:	2f03      	cmp	r7, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f8a:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8001f8e:	f8c1 013c 	str.w	r0, [r1, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001f92:	f43f abdf 	beq.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f96:	eb03 0388 	add.w	r3, r3, r8, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001f9a:	2f05      	cmp	r7, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001f9c:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8001fa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001fa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001fa6:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001faa:	f47f abd3 	bne.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001fae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001fb0:	4945      	ldr	r1, [pc, #276]	@ (80020c8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x160c>)
 8001fb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001fb6:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001fba:	f7ff bbcb 	b.w	8001754 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xc98>
        int active_count = 0;
 8001fbe:	469c      	mov	ip, r3
            if (strum_state_[s] != ENV_IDLE)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	e597      	b.n	8001af4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1038>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001fc4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fc8:	eddf ba38 	vldr	s23, [pc, #224]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001fcc:	6723      	str	r3, [r4, #112]	@ 0x70
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001fd4:	f7ff b9be 	b.w	8001354 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
                    env_level_[v] += kAttackInc;
 8001fd8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80020cc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1610>
 8001fdc:	ed9f 9a33 	vldr	s18, [pc, #204]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8001fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe4:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001fe8:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
 8001fec:	f7ff ba58 	b.w	80014a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15e8>)
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	ed9f 9a2c 	vldr	s18, [pc, #176]	@ 80020a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15ec>
 8001ff8:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8001ffa:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8001ffe:	f7ff ba4f 	b.w	80014a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9e4>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8002002:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002006:	ed9f 9a29 	vldr	s18, [pc, #164]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 800200a:	67a3      	str	r3, [r4, #120]	@ 0x78
 800200c:	2302      	movs	r3, #2
 800200e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8002012:	f7ff ba11 	b.w	8001438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                    env_level_[v] -= kDecayInc;
 8002016:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80020c0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 800201a:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 800201e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002022:	ee27 9a89 	vmul.f32	s18, s15, s18
 8002026:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
 800202a:	f7ff ba05 	b.w	8001438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x97c>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 800202e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002032:	ed9f aa1e 	vldr	s20, [pc, #120]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8002036:	6763      	str	r3, [r4, #116]	@ 0x74
 8002038:	2302      	movs	r3, #2
 800203a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800203e:	f7ff b9c2 	b.w	80013c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
                    env_level_[v] -= kDecayInc;
 8002042:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80020c0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 8002046:	ed9f aa19 	vldr	s20, [pc, #100]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 800204a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800204e:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8002052:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
 8002056:	f7ff b9b6 	b.w	80013c6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x90a>
 800205a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80020c0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1604>
 800205e:	eddf ba13 	vldr	s23, [pc, #76]	@ 80020ac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15f0>
 8002062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002066:	ee67 baab 	vmul.f32	s23, s15, s23
 800206a:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
 800206e:	f7ff b971 	b.w	8001354 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
 8002072:	edd4 7a04 	vldr	s15, [r4, #16]
 8002076:	f7fe be98 	b.w	8000daa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x2ee>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800207a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80020b8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x15fc>
 800207e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	f140 8135 	bpl.w	80022f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1838>
 800208a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 800208e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002092:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8002096:	eea7 0a87 	vfma.f32	s0, s15, s14
 800209a:	f7ff ba68 	b.w	800156e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
        int active_count = 0;
 800209e:	46c8      	mov	r8, r9
 80020a0:	f7fe bff3 	b.w	800108a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5ce>
 80020a4:	3f333333 	.word	0x3f333333
 80020a8:	3c656041 	.word	0x3c656041
 80020ac:	3ca3d70a 	.word	0x3ca3d70a
 80020b0:	40490fdb 	.word	0x40490fdb
 80020b4:	3ea2f983 	.word	0x3ea2f983
 80020b8:	40c90fdb 	.word	0x40c90fdb
 80020bc:	3f334bc6 	.word	0x3f334bc6
 80020c0:	39c49ba6 	.word	0x39c49ba6
 80020c4:	0800c2dc 	.word	0x0800c2dc
 80020c8:	3f666666 	.word	0x3f666666
 80020cc:	3b4ccccd 	.word	0x3b4ccccd
 80020d0:	0800c248 	.word	0x0800c248
 80020d4:	3f9837ef 	.word	0x3f9837ef
 80020d8:	3fb504f7 	.word	0x3fb504f7
 80020dc:	401837ef 	.word	0x401837ef
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 80020e0:	2200      	movs	r2, #0
 80020e2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80020e4:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
            if (env_state_[v] != ENV_IDLE)
 80020e8:	f7ff b9f3 	b.w	80014d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xa16>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 80020ec:	6723      	str	r3, [r4, #112]	@ 0x70
 80020ee:	2300      	movs	r3, #0
 80020f0:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (env_state_[v] != ENV_IDLE)
 80020f4:	e45d      	b.n	80019b2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xef6>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 80020f6:	67a3      	str	r3, [r4, #120]	@ 0x78
 80020f8:	2300      	movs	r3, #0
 80020fa:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (env_state_[v] != ENV_IDLE)
 80020fe:	f7ff b9b4 	b.w	800146a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9ae>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8002102:	6763      	str	r3, [r4, #116]	@ 0x74
 8002104:	2300      	movs	r3, #0
 8002106:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (env_state_[v] != ENV_IDLE)
 800210a:	f7ff b975 	b.w	80013f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x93c>
            for (int i = 0; i < active_count - 1; i++)
 800210e:	2301      	movs	r3, #1
 8002110:	e556      	b.n	8001bc0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 8002112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002114:	e57d      	b.n	8001c12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1156>
            if (strum_state_[s] != ENV_IDLE)
 8002116:	f1b9 0f00 	cmp.w	r9, #0
 800211a:	d005      	beq.n	8002128 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x166c>
                strum_target_[s] = note * (1 << oct);
 800211c:	ed91 7a00 	vldr	s14, [r1]
 8002120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002124:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8002128:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	b14b      	cbz	r3, 8002144 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1688>
                strum_target_[s] = note * (1 << oct);
 8002130:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 80020d4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1618>
 8002134:	edd1 6a00 	vldr	s13, [r1]
 8002138:	ee27 7a87 	vmul.f32	s14, s15, s14
 800213c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002140:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002144:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002148:	9303      	str	r3, [sp, #12]
 800214a:	b14b      	cbz	r3, 8002160 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16a4>
                strum_target_[s] = note * (1 << oct);
 800214c:	ed1f 7a1e 	vldr	s14, [pc, #-120]	@ 80020d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x161c>
 8002150:	edd1 6a00 	vldr	s13, [r1]
 8002154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002158:	ee27 7a26 	vmul.f32	s14, s14, s13
 800215c:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8002160:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8002164:	f1bb 0f00 	cmp.w	fp, #0
 8002168:	d007      	beq.n	800217a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16be>
                strum_target_[s] = note * (1 << oct);
 800216a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800216e:	edd1 6a00 	vldr	s13, [r1]
 8002172:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002176:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800217a:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800217e:	f1ba 0f00 	cmp.w	sl, #0
 8002182:	d007      	beq.n	8002194 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x16d8>
                strum_target_[s] = note * (1 << oct);
 8002184:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002188:	edd1 6a00 	vldr	s13, [r1]
 800218c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002190:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8002194:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 8002198:	9304      	str	r3, [sp, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f43e af6a 	beq.w	8001074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 80021a0:	ed5f 6a32 	vldr	s13, [pc, #-200]	@ 80020dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1620>
 80021a4:	ed91 7a00 	vldr	s14, [r1]
 80021a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b0:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 80021b4:	f7fe bf5e 	b.w	8001074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                switch (chord_type) {
 80021b8:	4e9f      	ldr	r6, [pc, #636]	@ (8002438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x197c>)
 80021ba:	f7fe bed2 	b.w	8000f62 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x4a6>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80021be:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 800243c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1980>
 80021c2:	eef4 9ac7 	vcmpe.f32	s19, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	f140 809b 	bpl.w	8002304 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1848>
 80021ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 80021d2:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 80021d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 80021da:	eea7 0a87 	vfma.f32	s0, s15, s14
 80021de:	f7ff b969 	b.w	80014b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
 80021e2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021e6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80021ea:	eea7 0a87 	vfma.f32	s0, s15, s14
 80021ee:	f7ff b8bb 	b.w	8001368 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
 80021f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021f6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80021fa:	eea7 0a87 	vfma.f32	s0, s15, s14
 80021fe:	f7ff b8ec 	b.w	80013da <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
 8002202:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002206:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800220a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800220e:	f7ff b91d 	b.w	800144c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
        else if (minor7 && !major7)
 8002212:	9f01      	ldr	r7, [sp, #4]
 8002214:	2f01      	cmp	r7, #1
 8002216:	f000 8085 	beq.w	8002324 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1868>
 800221a:	2800      	cmp	r0, #0
 800221c:	f000 8082 	beq.w	8002324 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1868>
            target_freq_[3] = root_freq * kMinor7Ratio;
 8002220:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1984>
 8002224:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 8002228:	f7ff baf7 	b.w	800181a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd5e>
            for (int i = 0; i < active_count - 1; i++)
 800222c:	2302      	movs	r3, #2
 800222e:	e4c7      	b.n	8001bc0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 8002230:	2301      	movs	r3, #1
 8002232:	f7fe bf91 	b.w	8001158 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
 8002236:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8002238:	f7fe bfdf 	b.w	80011fa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x73e>
        else
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 800223c:	edde 6a03 	vldr	s13, [lr, #12]
 8002240:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 8002244:	f7fe be1f 	b.w	8000e86 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x3ca>
            for (int i = 0; i < active_count - 1; i++)
 8002248:	2303      	movs	r3, #3
 800224a:	e4b9      	b.n	8001bc0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1104>
 800224c:	2302      	movs	r3, #2
 800224e:	f7fe bf83 	b.w	8001158 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
            if (strum_state_[s] != ENV_IDLE)
 8002252:	f1b9 0f00 	cmp.w	r9, #0
 8002256:	d005      	beq.n	8002264 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17a8>
                strum_target_[s] = note * (1 << oct);
 8002258:	ed91 7a00 	vldr	s14, [r1]
 800225c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002260:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8002264:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	b14b      	cbz	r3, 8002280 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17c4>
                strum_target_[s] = note * (1 << oct);
 800226c:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8002444 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 8002270:	ed91 7a00 	vldr	s14, [r1]
 8002274:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002278:	ee27 7a26 	vmul.f32	s14, s14, s13
 800227c:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002280:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 8002284:	9303      	str	r3, [sp, #12]
 8002286:	b14b      	cbz	r3, 800229c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17e0>
                strum_target_[s] = note * (1 << oct);
 8002288:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002448 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x198c>
 800228c:	ed91 7a00 	vldr	s14, [r1]
 8002290:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002294:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002298:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 800229c:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 80022a0:	f1bb 0f00 	cmp.w	fp, #0
 80022a4:	d007      	beq.n	80022b6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x17fa>
                strum_target_[s] = note * (1 << oct);
 80022a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022aa:	ed91 7a00 	vldr	s14, [r1]
 80022ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022b2:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80022b6:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 80022ba:	f1ba 0f00 	cmp.w	sl, #0
 80022be:	d007      	beq.n	80022d0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1814>
                strum_target_[s] = note * (1 << oct);
 80022c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80022c4:	ed91 7a00 	vldr	s14, [r1]
 80022c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022cc:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80022d0:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 80022d4:	9304      	str	r3, [sp, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f43e aecc 	beq.w	8001074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
                strum_target_[s] = note * (1 << oct);
 80022dc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800244c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1990>
 80022e0:	edd1 6a00 	vldr	s13, [r1]
 80022e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022ec:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 80022f0:	f7fe bec0 	b.w	8001074 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x5b8>
 80022f4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80022f8:	f7ff b939 	b.w	800156e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xab2>
                chord_multipliers = minor_chord_multipliers_;
 80022fc:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x197c>
 8002300:	f7ff ba6f 	b.w	80017e2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd26>
 8002304:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002308:	f7ff b8d4 	b.w	80014b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x9f8>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800230c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 8002310:	f7ff b863 	b.w	80013da <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x91e>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002314:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 8002318:	f7ff b898 	b.w	800144c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x990>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800231c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 8002320:	f7ff b822 	b.w	8001368 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x8ac>
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 8002324:	edd9 6a03 	vldr	s13, [r9, #12]
 8002328:	ee27 7a26 	vmul.f32	s14, s14, s13
        for (int s = 0; s < kNumStrum; ++s)
 800232c:	f7ff ba75 	b.w	800181a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0xd5e>
            for (int i = 0; i < active_count - 1; i++)
 8002330:	2303      	movs	r3, #3
 8002332:	f7fe bf11 	b.w	8001158 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x69c>
            if (strum_state_[s] != ENV_IDLE)
 8002336:	f1b9 0f00 	cmp.w	r9, #0
 800233a:	d005      	beq.n	8002348 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x188c>
                strum_target_[s] = note * (1 << oct);
 800233c:	ed91 7a00 	vldr	s14, [r1]
 8002340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002344:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8002348:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 800234c:	9702      	str	r7, [sp, #8]
 800234e:	b14f      	cbz	r7, 8002364 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18a8>
                strum_target_[s] = note * (1 << oct);
 8002350:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002444 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 8002354:	edd1 6a00 	vldr	s13, [r1]
 8002358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800235c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002360:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002364:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 8002368:	9703      	str	r7, [sp, #12]
 800236a:	b14f      	cbz	r7, 8002380 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
                strum_target_[s] = note * (1 << oct);
 800236c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002450 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1994>
 8002370:	edd1 6a00 	vldr	s13, [r1]
 8002374:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002378:	ee27 7a26 	vmul.f32	s14, s14, s13
 800237c:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8002380:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8002384:	f1bb 0f00 	cmp.w	fp, #0
 8002388:	d007      	beq.n	800239a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18de>
                strum_target_[s] = note * (1 << oct);
 800238a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800238e:	edd1 6a00 	vldr	s13, [r1]
 8002392:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002396:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 800239a:	f894 a100 	ldrb.w	sl, [r4, #256]	@ 0x100
 800239e:	f1ba 0f00 	cmp.w	sl, #0
 80023a2:	d007      	beq.n	80023b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18f8>
                strum_target_[s] = note * (1 << oct);
 80023a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023a8:	edd1 6a00 	vldr	s13, [r1]
 80023ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023b0:	ed84 7a3d 	vstr	s14, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80023b4:	f894 7101 	ldrb.w	r7, [r4, #257]	@ 0x101
 80023b8:	9704      	str	r7, [sp, #16]
 80023ba:	2f00      	cmp	r7, #0
 80023bc:	f43e ad0b 	beq.w	8000dd6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
                strum_target_[s] = note * (1 << oct);
 80023c0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800244c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1990>
 80023c4:	ed91 7a00 	vldr	s14, [r1]
 80023c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80023d0:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
        if (!in_base_freq_mode_) {
 80023d4:	f7fe bcff 	b.w	8000dd6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x31a>
            if (strum_state_[s] != ENV_IDLE)
 80023d8:	f1b9 0f00 	cmp.w	r9, #0
 80023dc:	d005      	beq.n	80023ea <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x192e>
                strum_target_[s] = note * (1 << oct);
 80023de:	ed91 7a00 	vldr	s14, [r1]
 80023e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e6:	ed84 7a39 	vstr	s14, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80023ea:	f894 70fd 	ldrb.w	r7, [r4, #253]	@ 0xfd
 80023ee:	9702      	str	r7, [sp, #8]
 80023f0:	b14f      	cbz	r7, 8002406 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x194a>
                strum_target_[s] = note * (1 << oct);
 80023f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002444 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1988>
 80023f6:	edd1 6a00 	vldr	s13, [r1]
 80023fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002402:	ed84 7a3a 	vstr	s14, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002406:	f894 70fe 	ldrb.w	r7, [r4, #254]	@ 0xfe
 800240a:	9703      	str	r7, [sp, #12]
 800240c:	2f00      	cmp	r7, #0
 800240e:	d0b7      	beq.n	8002380 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
                strum_target_[s] = note * (1 << oct);
 8002410:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002448 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x198c>
 8002414:	edd1 6a00 	vldr	s13, [r1]
 8002418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800241c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002420:	ed84 7a3b 	vstr	s14, [r4, #236]	@ 0xec
 8002424:	e7ac      	b.n	8002380 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x18c4>
 8002426:	edd4 ba1c 	vldr	s23, [r4, #112]	@ 0x70
 800242a:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002454 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x1998>
 800242e:	ee6b baa7 	vmul.f32	s23, s23, s15
 8002432:	f7fe bf8f 	b.w	8001354 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)+0x898>
 8002436:	bf00      	nop
 8002438:	0800c248 	.word	0x0800c248
 800243c:	40c90fdb 	.word	0x40c90fdb
 8002440:	3fe411ed 	.word	0x3fe411ed
 8002444:	3f9837ef 	.word	0x3f9837ef
 8002448:	3fbfc886 	.word	0x3fbfc886
 800244c:	401837ef 	.word	0x401837ef
 8002450:	3fb504f7 	.word	0x3fb504f7
 8002454:	3ca3d70a 	.word	0x3ca3d70a

08002458 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            // The actual startup transition happens in main() after system wakeup
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
 800245c:	f8df e3dc 	ldr.w	lr, [pc, #988]	@ 800283c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e4>
 8002460:	460e      	mov	r6, r1
    {
 8002462:	4688      	mov	r8, r1
 8002464:	4684      	mov	ip, r0
        io_.human.in.pot = pot;
 8002466:	4674      	mov	r4, lr

        AudioOutput audio_out = {};
 8002468:	2700      	movs	r7, #0
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 800246a:	f8df 93d4 	ldr.w	r9, [pc, #980]	@ 8002840 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e8>
        io_.human.in.pot = pot;
 800246e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    {
 8002470:	ed2d 8b10 	vpush	{d8-d15}
        io_.human.in.pot = pot;
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    {
 8002476:	b091      	sub	sp, #68	@ 0x44
        io_.human.in.pot = pot;
 8002478:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
        AudioOutput audio_out = {};
 800247c:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 8002480:	970c      	str	r7, [sp, #48]	@ 0x30
 8002482:	ad0a      	add	r5, sp, #40	@ 0x28
        io_.human.in.pot = pot;
 8002484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002488:	f899 3000 	ldrb.w	r3, [r9]
 800248c:	f3bf 8f5b 	dmb	ish
        State cur = state_.load(std::memory_order_acquire);

        if (cur == STATE_SYNTH)
 8002490:	2b01      	cmp	r3, #1
 8002492:	f000 8218 	beq.w	80028c6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46e>
                synth_buttons,
                chord_pot, hold, last_strum_idx, strum_idx_changed,
                mode, seventh, minor_seventh);
        }

        if (cur == STATE_STARTUP || cur == STATE_ENDING)
 8002496:	b2dc      	uxtb	r4, r3
 8002498:	f1a4 030b 	sub.w	r3, r4, #11
 800249c:	2b01      	cmp	r3, #1
 800249e:	d862      	bhi.n	8002566 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x10e>
        }

        // Process audio samples just like SynthEngine
        void Process(float (&block)[kAudioOSFactor])
        {
            if (!is_active_)
 80024a0:	4cdc      	ldr	r4, [pc, #880]	@ (8002814 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3bc>)
 80024a2:	7b23      	ldrb	r3, [r4, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8239 	beq.w	800291c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4c4>
                }
                return;
            }

            // Update note timer and advance to next note if needed
            note_timer_++;
 80024aa:	6966      	ldr	r6, [r4, #20]
 80024ac:	3601      	adds	r6, #1
            if (note_timer_ >= kNoteDuration)
 80024ae:	f5b6 6ffa 	cmp.w	r6, #2000	@ 0x7d0
            note_timer_++;
 80024b2:	6166      	str	r6, [r4, #20]
            if (note_timer_ >= kNoteDuration)
 80024b4:	f2c0 8381 	blt.w	8002bba <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x762>
            {
                note_timer_ = 0;
                current_note_++;
 80024b8:	6923      	ldr	r3, [r4, #16]

                // Check if we've reached the end of the jingle
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 80024ba:	7b60      	ldrb	r0, [r4, #13]
                current_note_++;
 80024bc:	3301      	adds	r3, #1
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 80024be:	4ad6      	ldr	r2, [pc, #856]	@ (8002818 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c0>)
 80024c0:	49d6      	ldr	r1, [pc, #856]	@ (800281c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c4>)
                note_timer_ = 0;
 80024c2:	6167      	str	r7, [r4, #20]
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 80024c4:	2800      	cmp	r0, #0
 80024c6:	bf18      	it	ne
 80024c8:	460a      	movne	r2, r1
                int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

                if (current_note_ >= jingle_length)
 80024ca:	2b03      	cmp	r3, #3
                current_note_++;
 80024cc:	6123      	str	r3, [r4, #16]
                if (current_note_ >= jingle_length)
 80024ce:	f300 8541 	bgt.w	8002f54 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xafc>
            const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
            int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

            if (current_note_ < jingle_length)
            {
                voice_.SetFrequency(current_jingle[current_note_]);
 80024d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        phase_inc_ = freq * kPhaseFactor;
 80024d6:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002820 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3c8>
            }
            else
            {
                voice_.SetFrequency(0.0f);
            }
        }
 80024da:	463e      	mov	r6, r7
 80024dc:	edd2 7a00 	vldr	s15, [r2]
 80024e0:	ee27 8a87 	vmul.f32	s16, s15, s14
 80024e4:	ed84 8a01 	vstr	s16, [r4, #4]
        if (waveform_ == Waveform::SINE) {
 80024e8:	68a3      	ldr	r3, [r4, #8]
            out = sinf(phase_);
 80024ea:	edd4 8a00 	vldr	s17, [r4]
        if (waveform_ == Waveform::SINE) {
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 8331 	bne.w	8002b56 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6fe>
            out = sinf(phase_);
 80024f4:	eeb0 0a68 	vmov.f32	s0, s17
 80024f8:	f007 fe36 	bl	800a168 <sinf>
 80024fc:	eddf 7ac9 	vldr	s15, [pc, #804]	@ 8002824 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3cc>
 8002500:	ee20 0a27 	vmul.f32	s0, s0, s15
        phase_ += phase_inc_;
 8002504:	ee78 7a28 	vadd.f32	s15, s16, s17
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8002508:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8002828 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d0>
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	bfa8      	it	ge
 8002516:	ee77 7ac7 	vsubge.f32	s15, s15, s14
            if (note_timer_ < kFadeInSamples)
 800251a:	f5b6 7fa0 	cmp.w	r6, #320	@ 0x140
        phase_ += phase_inc_;
 800251e:	edc4 7a00 	vstr	s15, [r4]
 8002522:	f280 8339 	bge.w	8002b98 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x740>
                envelope = float(note_timer_) / float(kFadeInSamples);
 8002526:	ee07 6a90 	vmov	s15, r6
 800252a:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 800282c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d4>
 800252e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 8002536:	ee20 0a27 	vmul.f32	s0, s0, s15
 800253a:	f008 f877 	bl	800a62c <tanhf>
      if (__b < __a)
 800253e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
            sample *= kAudioOSFactor * kAudioOutputLevel;
 8002542:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002546:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8002830 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3d8>
 800254a:	ae0d      	add	r6, sp, #52	@ 0x34
 800254c:	fec0 7a67 	vminnm.f32	s15, s0, s15
 8002550:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
                block[i] = sample;
 8002558:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 800255c:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 8002560:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
            jingle_engine_.Process(audio_out[AUDIO_OUT_LINE]);
        } else if (cur == STATE_PLAY) {
            playback_.Process(audio_out[AUDIO_OUT_LINE], true, false, pot);
        }

        if (cur == STATE_RECORD)
 8002564:	e138      	b.n	80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
        } else if (cur == STATE_PLAY) {
 8002566:	2c03      	cmp	r4, #3
 8002568:	f000 81e1 	beq.w	800292e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4d6>
        if (cur == STATE_RECORD)
 800256c:	2c02      	cmp	r4, #2
 800256e:	f040 8132 	bne.w	80027d6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x37e>
        {
            AudioInputID id = io_.human.in.detect[DETECT_LINE_IN] ?
                AUDIO_IN_LINE : AUDIO_IN_MIC;
            float pitch = 1;//(1-io_.human.in.pot[POT_1]) * 2 - 1;
            recording_.Process(audio_in[id], pitch);
 8002572:	f89e 102a 	ldrb.w	r1, [lr, #42]	@ 0x2a
        }
    }

    T Process(T in)
    {
        for (int n = 0; n < num_sections_; n++)
 8002576:	4baf      	ldr	r3, [pc, #700]	@ (8002834 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3dc>)
 8002578:	4249      	negs	r1, r1
 800257a:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
 800257e:	f001 010c 	and.w	r1, r1, #12
            out += sections_[n].b[0] * x_[n][0];
            out += sections_[n].b[1] * x_[n][1];
            out += sections_[n].b[2] * x_[n][2];

            // Subtract y state
            out -= sections_[n].a[0] * x_[n+1][0];
 8002582:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002586:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800258a:	f101 020c 	add.w	r2, r1, #12
 800258e:	4461      	add	r1, ip
 8002590:	eeb1 6a46 	vneg.f32	s12, s12
            out += sections_[n].b[0] * x_[n][0];
 8002594:	edd3 2a26 	vldr	s5, [r3, #152]	@ 0x98
 8002598:	4494      	add	ip, r2
            in = out;
        }

        // Shift final section x state
        x_[num_sections_][2] = x_[num_sections_][1];
 800259a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800259e:	eef1 6a66 	vneg.f32	s13, s13
            out += sections_[n].b[1] * x_[n][1];
 80025a2:	ed93 3a27 	vldr	s6, [r3, #156]	@ 0x9c
            out += sections_[n].b[2] * x_[n][2];
 80025a6:	edd3 3a28 	vldr	s7, [r3, #160]	@ 0xa0
        x_[num_sections_][2] = x_[num_sections_][1];
 80025aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            out -= sections_[n].a[0] * x_[n+1][0];
 80025ae:	ed93 4a29 	vldr	s8, [r3, #164]	@ 0xa4
            out -= sections_[n].a[1] * x_[n+1][1];
 80025b2:	edd3 4a2a 	vldr	s9, [r3, #168]	@ 0xa8
            out += sections_[n].b[0] * x_[n][0];
 80025b6:	ed93 1a2b 	vldr	s2, [r3, #172]	@ 0xac
            out += sections_[n].b[1] * x_[n][1];
 80025ba:	ed93 5a2c 	vldr	s10, [r3, #176]	@ 0xb0
            out += sections_[n].b[2] * x_[n][2];
 80025be:	edd3 5a2d 	vldr	s11, [r3, #180]	@ 0xb4
            out -= sections_[n].a[0] * x_[n+1][0];
 80025c2:	edd3 1a2e 	vldr	s3, [r3, #184]	@ 0xb8
            out -= sections_[n].a[1] * x_[n+1][1];
 80025c6:	ed93 2a2f 	vldr	s4, [r3, #188]	@ 0xbc
            out += sections_[n].b[0] * x_[n][0];
 80025ca:	ed93 9a30 	vldr	s18, [r3, #192]	@ 0xc0
            out += sections_[n].b[1] * x_[n][1];
 80025ce:	edd3 8a31 	vldr	s17, [r3, #196]	@ 0xc4
            out += sections_[n].b[2] * x_[n][2];
 80025d2:	ed93 8a32 	vldr	s16, [r3, #200]	@ 0xc8
            out -= sections_[n].a[0] * x_[n+1][0];
 80025d6:	ed93 0a33 	vldr	s0, [r3, #204]	@ 0xcc
            out -= sections_[n].a[1] * x_[n+1][1];
 80025da:	edd3 0a34 	vldr	s1, [r3, #208]	@ 0xd0
            out += sections_[n].b[0] * x_[n][0];
 80025de:	edd3 ba35 	vldr	s23, [r3, #212]	@ 0xd4
            out += sections_[n].b[1] * x_[n][1];
 80025e2:	ed93 ba36 	vldr	s22, [r3, #216]	@ 0xd8
            out += sections_[n].b[2] * x_[n][2];
 80025e6:	edd3 aa37 	vldr	s21, [r3, #220]	@ 0xdc
            out -= sections_[n].a[0] * x_[n+1][0];
 80025ea:	ed93 aa38 	vldr	s20, [r3, #224]	@ 0xe0
            out -= sections_[n].a[1] * x_[n+1][1];
 80025ee:	edd3 9a39 	vldr	s19, [r3, #228]	@ 0xe4
            out += sections_[n].b[0] * x_[n][0];
 80025f2:	ed93 da3a 	vldr	s26, [r3, #232]	@ 0xe8
            out += sections_[n].b[1] * x_[n][1];
 80025f6:	edd3 ca3b 	vldr	s25, [r3, #236]	@ 0xec
            out += sections_[n].b[2] * x_[n][2];
 80025fa:	ed93 ca3c 	vldr	s24, [r3, #240]	@ 0xf0
        for (int n = 0; n < num_sections_; n++)
 80025fe:	2800      	cmp	r0, #0
        float ratio = std::exp2(pitch);
        float sample = 0;

        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            sample = aa_filter_.Process(block[i]);
 8002600:	ecf1 7a01 	vldmia	r1!, {s15}
 8002604:	dd79      	ble.n	80026fa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
 8002606:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 800260a:	2801      	cmp	r0, #1
 800260c:	edd3 da3f 	vldr	s27, [r3, #252]	@ 0xfc
            x_[n][2] = x_[n][1];
 8002610:	ed83 7a41 	vstr	s14, [r3, #260]	@ 0x104
            out += sections_[n].b[2] * x_[n][2];
 8002614:	ee23 7a87 	vmul.f32	s14, s7, s14
            out -= sections_[n].a[0] * x_[n+1][0];
 8002618:	ed93 ea42 	vldr	s28, [r3, #264]	@ 0x108
            out -= sections_[n].a[1] * x_[n+1][1];
 800261c:	edd3 ea43 	vldr	s29, [r3, #268]	@ 0x10c
 8002620:	eea3 7a2d 	vfma.f32	s14, s6, s27
            x_[n][1] = x_[n][0];
 8002624:	edc3 da40 	vstr	s27, [r3, #256]	@ 0x100
            out += sections_[n].b[2] * x_[n][2];
 8002628:	ee65 daae 	vmul.f32	s27, s11, s29
            x_[n][0] = in;
 800262c:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
 8002630:	eee5 da0e 	vfma.f32	s27, s10, s28
 8002634:	eeae 7a44 	vfms.f32	s14, s28, s8
 8002638:	eeae 7ae4 	vfms.f32	s14, s29, s9
            out -= sections_[n].a[1] * x_[n+1][1];
 800263c:	eea7 7aa2 	vfma.f32	s14, s15, s5
 8002640:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8002644:	d059      	beq.n	80026fa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][1] = x_[n][0];
 8002646:	ed83 ea43 	vstr	s28, [r3, #268]	@ 0x10c
        for (int n = 0; n < num_sections_; n++)
 800264a:	2802      	cmp	r0, #2
            out -= sections_[n].a[0] * x_[n+1][0];
 800264c:	ed93 ea45 	vldr	s28, [r3, #276]	@ 0x114
            x_[n][0] = in;
 8002650:	ed83 7a42 	vstr	s14, [r3, #264]	@ 0x108
 8002654:	eeee da61 	vfms.f32	s27, s28, s3
            out -= sections_[n].a[1] * x_[n+1][1];
 8002658:	ed93 7a46 	vldr	s14, [r3, #280]	@ 0x118
            x_[n][2] = x_[n][1];
 800265c:	edc3 ea44 	vstr	s29, [r3, #272]	@ 0x110
 8002660:	eee7 da42 	vfms.f32	s27, s14, s4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002664:	eee1 da27 	vfma.f32	s27, s2, s15
 8002668:	eef0 7a6d 	vmov.f32	s15, s27
        for (int n = 0; n < num_sections_; n++)
 800266c:	d045      	beq.n	80026fa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 800266e:	ed83 7a47 	vstr	s14, [r3, #284]	@ 0x11c
            out += sections_[n].b[2] * x_[n][2];
 8002672:	ee28 7a07 	vmul.f32	s14, s16, s14
            x_[n][1] = x_[n][0];
 8002676:	ed83 ea46 	vstr	s28, [r3, #280]	@ 0x118
        for (int n = 0; n < num_sections_; n++)
 800267a:	2803      	cmp	r0, #3
            x_[n][0] = in;
 800267c:	edc3 da45 	vstr	s27, [r3, #276]	@ 0x114
 8002680:	eea8 7a8e 	vfma.f32	s14, s17, s28
            out -= sections_[n].a[0] * x_[n+1][0];
 8002684:	ed93 ea48 	vldr	s28, [r3, #288]	@ 0x120
            out -= sections_[n].a[1] * x_[n+1][1];
 8002688:	edd3 da49 	vldr	s27, [r3, #292]	@ 0x124
 800268c:	eeae 7a40 	vfms.f32	s14, s28, s0
 8002690:	eead 7ae0 	vfms.f32	s14, s27, s1
 8002694:	eea9 7a27 	vfma.f32	s14, s18, s15
 8002698:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 800269c:	d02d      	beq.n	80026fa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 800269e:	edc3 da4a 	vstr	s27, [r3, #296]	@ 0x128
            out += sections_[n].b[2] * x_[n][2];
 80026a2:	ee6a daad 	vmul.f32	s27, s21, s27
            x_[n][1] = x_[n][0];
 80026a6:	ed83 ea49 	vstr	s28, [r3, #292]	@ 0x124
        for (int n = 0; n < num_sections_; n++)
 80026aa:	2804      	cmp	r0, #4
            x_[n][0] = in;
 80026ac:	ed83 7a48 	vstr	s14, [r3, #288]	@ 0x120
 80026b0:	eeeb da0e 	vfma.f32	s27, s22, s28
            out -= sections_[n].a[0] * x_[n+1][0];
 80026b4:	ed93 ea4b 	vldr	s28, [r3, #300]	@ 0x12c
            out -= sections_[n].a[1] * x_[n+1][1];
 80026b8:	ed93 7a4c 	vldr	s14, [r3, #304]	@ 0x130
 80026bc:	eeee da4a 	vfms.f32	s27, s28, s20
 80026c0:	eee7 da69 	vfms.f32	s27, s14, s19
 80026c4:	eeeb daa7 	vfma.f32	s27, s23, s15
 80026c8:	eef0 7a6d 	vmov.f32	s15, s27
        for (int n = 0; n < num_sections_; n++)
 80026cc:	d015      	beq.n	80026fa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a2>
            x_[n][2] = x_[n][1];
 80026ce:	ed83 7a4d 	vstr	s14, [r3, #308]	@ 0x134
            out += sections_[n].b[2] * x_[n][2];
 80026d2:	ee2c 7a07 	vmul.f32	s14, s24, s14
            x_[n][0] = in;
 80026d6:	edc3 da4b 	vstr	s27, [r3, #300]	@ 0x12c
 80026da:	edd3 da4e 	vldr	s27, [r3, #312]	@ 0x138
 80026de:	eeac 7a8e 	vfma.f32	s14, s25, s28
            x_[n][1] = x_[n][0];
 80026e2:	ed83 ea4c 	vstr	s28, [r3, #304]	@ 0x130
 80026e6:	eead 7a86 	vfma.f32	s14, s27, s12
 80026ea:	edd3 da4f 	vldr	s27, [r3, #316]	@ 0x13c
 80026ee:	eead 7aa6 	vfma.f32	s14, s27, s13
            out -= sections_[n].a[1] * x_[n+1][1];
 80026f2:	eead 7a27 	vfma.f32	s14, s26, s15
 80026f6:	eef0 7a47 	vmov.f32	s15, s14
        x_[num_sections_][2] = x_[num_sections_][1];
 80026fa:	f8d2 6100 	ldr.w	r6, [r2, #256]	@ 0x100
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
 80026fe:	4561      	cmp	r1, ip
        x_[num_sections_][1] = x_[num_sections_][0];
 8002700:	f8d2 40fc 	ldr.w	r4, [r2, #252]	@ 0xfc
        x_[num_sections_][2] = x_[num_sections_][1];
 8002704:	f8c2 6104 	str.w	r6, [r2, #260]	@ 0x104
        x_[num_sections_][1] = x_[num_sections_][0];
 8002708:	f8c2 4100 	str.w	r4, [r2, #256]	@ 0x100
        x_[num_sections_][0] = in;
 800270c:	edc2 7a3f 	vstr	s15, [r2, #252]	@ 0xfc
 8002710:	f47f af75 	bne.w	80025fe <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1a6>

    void Push(float sample, float ratio)
    {
        float speed = 1 / ratio;

        while (input_phase_ <= 1)
 8002714:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002718:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 800271c:	4e46      	ldr	r6, [pc, #280]	@ (8002838 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3e0>)
 800271e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	f200 808d 	bhi.w	8002844 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ec>
            if (!output_.full())
            {
                output_.Push(std::lerp(history_, sample, input_phase_));
            }

            input_phase_ += speed;
 800272a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800272e:	f1a6 0c04 	sub.w	ip, r6, #4
 8002732:	e00a      	b.n	800274a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2f2>
 8002734:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
        while (input_phase_ <= 1)
 8002738:	eeb4 7ac6 	vcmpe.f32	s14, s12
            input_phase_ += speed;
 800273c:	ee77 6a06 	vadd.f32	s13, s14, s12
        while (input_phase_ <= 1)
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            input_phase_ += speed;
 8002744:	edc3 6a23 	vstr	s13, [r3, #140]	@ 0x8c
        while (input_phase_ <= 1)
 8002748:	d87e      	bhi.n	8002848 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3f0>
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 800274a:	6832      	ldr	r2, [r6, #0]
 800274c:	f8dc 1000 	ldr.w	r1, [ip]
 8002750:	f3bf 8f5b 	dmb	ish

    bool full(void)
    {
        uint32_t tail = tail_.load(std::memory_order_relaxed);
        uint32_t head = head_.load(std::memory_order_acquire);
        return tail - head >= size;
 8002754:	1a52      	subs	r2, r2, r1
            if (!output_.full())
 8002756:	2a1f      	cmp	r2, #31
 8002758:	d8ec      	bhi.n	8002734 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
                output_.Push(std::lerp(history_, sample, input_phase_));
 800275a:	ed93 7a24 	vldr	s14, [r3, #144]	@ 0x90
 800275e:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c

  template<typename _Fp>
    constexpr _Fp
    __lerp(_Fp __a, _Fp __b, _Fp __t) noexcept
    {
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 8002762:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276e:	d942      	bls.n	80027f6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x39e>
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d947      	bls.n	8002806 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ae>
	return __t * __b + (1 - __t) * __a;

      if (__t == 1)
 8002776:	eef4 6a65 	vcmp.f32	s13, s11
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	f000 80d3 	beq.w	8002928 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4d0>
	return __b;                        // exact

      // Exact at __t=0, monotonic except near __t=1,
      // bounded, determinate, and consistent:
      const _Fp __x = __a + __t * (__b - __a);
      return (__t > 1) == (__b > __a)
 8002782:	eef4 6ae5 	vcmpe.f32	s13, s11
      const _Fp __x = __a + __t * (__b - __a);
 8002786:	ee37 5ac7 	vsub.f32	s10, s15, s14
      return (__t > 1) == (__b > __a)
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	eeb4 7ae7 	vcmpe.f32	s14, s15
      const _Fp __x = __a + __t * (__b - __a);
 8002792:	eea6 7a85 	vfma.f32	s14, s13, s10
      return (__t > 1) == (__b > __a)
 8002796:	bfcc      	ite	gt
 8002798:	2101      	movgt	r1, #1
 800279a:	2100      	movle	r1, #0
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	? (__b < __x ? __x : __b)
 80027a0:	bf4c      	ite	mi
 80027a2:	2201      	movmi	r2, #1
 80027a4:	2200      	movpl	r2, #0
 80027a6:	4291      	cmp	r1, r2
 80027a8:	f000 81d2 	beq.w	8002b50 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6f8>
 80027ac:	fe87 7a67 	vminnm.f32	s14, s14, s15
 80027b0:	6832      	ldr	r2, [r6, #0]
 80027b2:	f8dc 1000 	ldr.w	r1, [ip]
 80027b6:	f3bf 8f5b 	dmb	ish
    bool Push(T* buffer, uint32_t length)
    {
        uint32_t tail = tail_.load(std::memory_order_relaxed);
        uint32_t head = head_.load(std::memory_order_acquire);

        if (tail - head > size - length)
 80027ba:	1a51      	subs	r1, r2, r1
 80027bc:	291f      	cmp	r1, #31
 80027be:	d8b9      	bhi.n	8002734 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
            return false;
        }

        for (uint32_t i = 0; i < length; i++)
        {
            data_[(tail + i) % size] = buffer[i];
 80027c0:	f002 011f 	and.w	r1, r2, #31
        }

        tail_.store(tail + length, std::memory_order_release);
 80027c4:	3201      	adds	r2, #1
            data_[(tail + i) % size] = buffer[i];
 80027c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80027ca:	ed81 7a03 	vstr	s14, [r1, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80027ce:	f3bf 8f5b 	dmb	ish
 80027d2:	6032      	str	r2, [r6, #0]
        return true;
 80027d4:	e7ae      	b.n	8002734 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2dc>
 80027d6:	ae0d      	add	r6, sp, #52	@ 0x34
        }

        return audio_out;
 80027d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80027e0:	ed9d 0a0d 	vldr	s0, [sp, #52]	@ 0x34
 80027e4:	eddd 0a0e 	vldr	s1, [sp, #56]	@ 0x38
 80027e8:	ed9d 1a0f 	vldr	s2, [sp, #60]	@ 0x3c
    }
 80027ec:	b011      	add	sp, #68	@ 0x44
 80027ee:	ecbd 8b10 	vpop	{d8-d15}
 80027f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	da04      	bge.n	8002806 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x3ae>
 80027fc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	d1b7      	bne.n	8002776 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31e>
	return __t * __b + (1 - __t) * __a;
 8002806:	ee35 5ae6 	vsub.f32	s10, s11, s13
 800280a:	ee25 7a07 	vmul.f32	s14, s10, s14
 800280e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002812:	e7cd      	b.n	80027b0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
 8002814:	20010910 	.word	0x20010910
 8002818:	0800c1d8 	.word	0x0800c1d8
 800281c:	0800c1e8 	.word	0x0800c1e8
 8002820:	39cde32e 	.word	0x39cde32e
 8002824:	3d75c28f 	.word	0x3d75c28f
 8002828:	40c90fdb 	.word	0x40c90fdb
 800282c:	3b4ccccd 	.word	0x3b4ccccd
 8002830:	40366666 	.word	0x40366666
 8002834:	20010748 	.word	0x20010748
 8002838:	20010750 	.word	0x20010750
 800283c:	20000554 	.word	0x20000554
 8002840:	200108ec 	.word	0x200108ec
 8002844:	f1a6 0c04 	sub.w	ip, r6, #4
        }

        input_phase_ -= 1;
 8002848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
        history_ = sample;
 800284c:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
        input_phase_ -= 1;
 8002850:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8002854:	edc3 6a23 	vstr	s13, [r3, #140]	@ 0x8c
	return __atomic_load_n(&_M_i, int(__m));
 8002858:	f8dc 2000 	ldr.w	r2, [ip]
 800285c:	6831      	ldr	r1, [r6, #0]
 800285e:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8002862:	428a      	cmp	r2, r1
 8002864:	d0b7      	beq.n	80027d6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x37e>
        {
            return false;
        }

        item = data_[head % size];
 8002866:	f002 011f 	and.w	r1, r2, #31
        head_.store(head + 1, std::memory_order_release);
 800286a:	3201      	adds	r2, #1
        item = data_[head % size];
 800286c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002870:	edd1 7a03 	vldr	s15, [r1, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8002874:	f3bf 8f5b 	dmb	ish
 8002878:	f8cc 2000 	str.w	r2, [ip]

        resampler_.Push(sample, ratio);

        while (resampler_.Pop(sample))
        {
            memory_.Append(sample);
 800287c:	681f      	ldr	r7, [r3, #0]
        return audio_info_.size / sizeof(T);
    }

    void Append(T item)
    {
        if (buffer_index_ < buffer_chain_.length())
 800287e:	693a      	ldr	r2, [r7, #16]
        return total_size_;
    }

    uint32_t length(void)
    {
        return total_size_ / sizeof(T);
 8002880:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002882:	ebb2 0f51 	cmp.w	r2, r1, lsr #1
 8002886:	d2e7      	bcs.n	8002858 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x400>
        {
            buffer_chain_[buffer_index_++] = item;
 8002888:	1c51      	adds	r1, r2, #1
        for (uint32_t i = 0; i < num_links_; i++)
 800288a:	f8d7 e03c 	ldr.w	lr, [r7, #60]	@ 0x3c
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	f1be 0f00 	cmp.w	lr, #0
 8002894:	d015      	beq.n	80028c2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46a>
 8002896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002898:	2000      	movs	r0, #0
 800289a:	e005      	b.n	80028a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x450>
 800289c:	4586      	cmp	lr, r0
            index -= chain_[i].length;
 800289e:	eba2 0204 	sub.w	r2, r2, r4
        for (uint32_t i = 0; i < num_links_; i++)
 80028a2:	f101 010c 	add.w	r1, r1, #12
 80028a6:	d00c      	beq.n	80028c2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46a>
            if (index < chain_[i].length)
 80028a8:	684c      	ldr	r4, [r1, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 80028aa:	3001      	adds	r0, #1
            if (index < chain_[i].length)
 80028ac:	4294      	cmp	r4, r2
 80028ae:	d9f5      	bls.n	800289c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x444>
                return chain_[i].buffer[index];
 80028b0:	680f      	ldr	r7, [r1, #0]
 80028b2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80028b6:	eef3 7a67 	vcvtb.f16.f32	s15, s15
 80028ba:	ee17 2a90 	vmov	r2, s15
 80028be:	803a      	strh	r2, [r7, #0]
 80028c0:	e7ca      	b.n	8002858 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x400>
        return dummy_;
 80028c2:	3748      	adds	r7, #72	@ 0x48
 80028c4:	e7f7      	b.n	80028b6 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x45e>
            synth_engine_.Process(
 80028c6:	f89e 3026 	ldrb.w	r3, [lr, #38]	@ 0x26
 80028ca:	ae0d      	add	r6, sp, #52	@ 0x34
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 80028cc:	4abc      	ldr	r2, [pc, #752]	@ (8002bc0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x768>)
 80028ce:	4629      	mov	r1, r5
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	4bbc      	ldr	r3, [pc, #752]	@ (8002bc4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x76c>)
 80028d4:	edd8 0a00 	vldr	s1, [r8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	ed98 0a04 	vldr	s0, [r8, #16]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4bb9      	ldr	r3, [pc, #740]	@ (8002bc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x770>)
 80028e2:	48ba      	ldr	r0, [pc, #744]	@ (8002bcc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x774>)
 80028e4:	e9cd 7702 	strd	r7, r7, [sp, #8]
 80028e8:	6814      	ldr	r4, [r2, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f004 0401 	and.w	r4, r4, #1
                synth_buttons[i] = buttons[i].is_high();
 80028f0:	f364 0707 	bfi	r7, r4, #0, #8
 80028f4:	6854      	ldr	r4, [r2, #4]
 80028f6:	f004 0401 	and.w	r4, r4, #1
 80028fa:	f364 270f 	bfi	r7, r4, #8, #8
 80028fe:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
 8002902:	f004 0401 	and.w	r4, r4, #1
 8002906:	f002 0201 	and.w	r2, r2, #1
 800290a:	f364 4717 	bfi	r7, r4, #16, #8
 800290e:	f362 671f 	bfi	r7, r2, #24, #8
            synth_engine_.Process(
 8002912:	4632      	mov	r2, r6
                synth_buttons[i] = buttons[i].is_high();
 8002914:	970d      	str	r7, [sp, #52]	@ 0x34
            synth_engine_.Process(
 8002916:	f7fe f8d1 	bl	8000abc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, int, int, bool, bool, bool)>
        } else if (cur == STATE_PLAY) {
 800291a:	e75d      	b.n	80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
                    block[i] = 0.0f;
 800291c:	2300      	movs	r3, #0
 800291e:	ae0d      	add	r6, sp, #52	@ 0x34
 8002920:	930a      	str	r3, [sp, #40]	@ 0x28
 8002922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002924:	930c      	str	r3, [sp, #48]	@ 0x30
        if (cur == STATE_RECORD)
 8002926:	e757      	b.n	80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
	return __b;                        // exact
 8002928:	eeb0 7a67 	vmov.f32	s14, s15
 800292c:	e740      	b.n	80027b0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
        }
        void Process(float (&block)[kAudioOSFactor], bool loop, bool reverse,
                     const PotInput &pot)
        {
            float pitch;
            if (state_ != STATE_SCRUBBING)
 800292e:	4ea8      	ldr	r6, [pc, #672]	@ (8002bd0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x778>)
 8002930:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 8002934:	2b03      	cmp	r3, #3
 8002936:	f000 815b 	beq.w	8002bf0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x798>
            {
                pitch = (1 - pot[kPotPitch]) * 2 - 1; // pot values reversed due to wiring change
 800293a:	edd8 7a00 	vldr	s15, [r8]
                pitch = 1.0;
            }
            float speed = std::exp2(pitch);
            float sample = 0;

            if (state_ == STATE_STOPPED)
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 837e 	bne.w	8003040 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbe8>
            {
                if (cue_play_)
 8002944:	f896 2031 	ldrb.w	r2, [r6, #49]	@ 0x31
 8002948:	2a00      	cmp	r2, #0
 800294a:	f040 8236 	bne.w	8002dba <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x962>
 800294e:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 8002bec <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
 8002952:	4ca0      	ldr	r4, [pc, #640]	@ (8002bd4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x77c>)
        for (int n = 0; n < num_sections_; n++)
 8002954:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
            out -= sections_[n].a[1] * x_[n+1][1];
 8002958:	f04f 0c00 	mov.w	ip, #0
            out -= sections_[n].a[0] * x_[n+1][0];
 800295c:	ed94 5a5d 	vldr	s10, [r4, #372]	@ 0x174
 8002960:	46ae      	mov	lr, r5
            out -= sections_[n].a[1] * x_[n+1][1];
 8002962:	edd4 5a5e 	vldr	s11, [r4, #376]	@ 0x178
        x_[num_sections_][2] = x_[num_sections_][1];
 8002966:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800296a:	eeb1 5a45 	vneg.f32	s10, s10
            out += sections_[n].b[2] * x_[n][2];
 800296e:	ed94 7a5c 	vldr	s14, [r4, #368]	@ 0x170
 8002972:	eef1 5a65 	vneg.f32	s11, s11
            out += sections_[n].b[0] * x_[n][0];
 8002976:	edd4 2a46 	vldr	s5, [r4, #280]	@ 0x118
            out += sections_[n].b[1] * x_[n][1];
 800297a:	ed94 3a47 	vldr	s6, [r4, #284]	@ 0x11c
        x_[num_sections_][2] = x_[num_sections_][1];
 800297e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            out += sections_[n].b[2] * x_[n][2];
 8002982:	edd4 3a48 	vldr	s7, [r4, #288]	@ 0x120
            out -= sections_[n].a[1] * x_[n+1][1];
 8002986:	46e1      	mov	r9, ip
            out -= sections_[n].a[0] * x_[n+1][0];
 8002988:	ed94 4a49 	vldr	s8, [r4, #292]	@ 0x124
            out -= sections_[n].a[1] * x_[n+1][1];
 800298c:	46e3      	mov	fp, ip
 800298e:	edd4 4a4a 	vldr	s9, [r4, #296]	@ 0x128
 8002992:	4660      	mov	r0, ip
            out += sections_[n].b[0] * x_[n][0];
 8002994:	ed94 0a4b 	vldr	s0, [r4, #300]	@ 0x12c
            }

            // sample = main_filter_.Process(sample); //main filter, used to boost output in certain frequency ranges for different units (vocal, kalimba, etc.)
            sample *= kAudioOSFactor * kAudioOutputLevel;

            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8002998:	4661      	mov	r1, ip
            out += sections_[n].b[1] * x_[n][1];
 800299a:	edd4 0a4c 	vldr	s1, [r4, #304]	@ 0x130
            out -= sections_[n].a[1] * x_[n+1][1];
 800299e:	46e2      	mov	sl, ip
            out += sections_[n].b[2] * x_[n][2];
 80029a0:	ed94 1a4d 	vldr	s2, [r4, #308]	@ 0x134
 80029a4:	005f      	lsls	r7, r3, #1
            out -= sections_[n].a[0] * x_[n+1][0];
 80029a6:	edd4 1a4e 	vldr	s3, [r4, #312]	@ 0x138
            out -= sections_[n].a[1] * x_[n+1][1];
 80029aa:	ed94 2a4f 	vldr	s4, [r4, #316]	@ 0x13c
            out += sections_[n].b[0] * x_[n][0];
 80029ae:	ed94 ca50 	vldr	s24, [r4, #320]	@ 0x140
            out += sections_[n].b[1] * x_[n][1];
 80029b2:	edd4 ba51 	vldr	s23, [r4, #324]	@ 0x144
            out += sections_[n].b[2] * x_[n][2];
 80029b6:	ed94 ba52 	vldr	s22, [r4, #328]	@ 0x148
            out -= sections_[n].a[0] * x_[n+1][0];
 80029ba:	edd4 aa53 	vldr	s21, [r4, #332]	@ 0x14c
            out -= sections_[n].a[1] * x_[n+1][1];
 80029be:	ed94 aa54 	vldr	s20, [r4, #336]	@ 0x150
            out += sections_[n].b[0] * x_[n][0];
 80029c2:	edd4 ea55 	vldr	s29, [r4, #340]	@ 0x154
            out += sections_[n].b[1] * x_[n][1];
 80029c6:	ed94 ea56 	vldr	s28, [r4, #344]	@ 0x158
            out += sections_[n].b[2] * x_[n][2];
 80029ca:	edd4 da57 	vldr	s27, [r4, #348]	@ 0x15c
            out -= sections_[n].a[0] * x_[n+1][0];
 80029ce:	ed94 da58 	vldr	s26, [r4, #352]	@ 0x160
            out -= sections_[n].a[1] * x_[n+1][1];
 80029d2:	edd4 ca59 	vldr	s25, [r4, #356]	@ 0x164
            out += sections_[n].b[0] * x_[n][0];
 80029d6:	edd4 fa5a 	vldr	s31, [r4, #360]	@ 0x168
            out += sections_[n].b[1] * x_[n][1];
 80029da:	ed94 fa5b 	vldr	s30, [r4, #364]	@ 0x16c
            out += sections_[n].b[2] * x_[n][2];
 80029de:	ed8d 7a04 	vstr	s14, [sp, #16]
        for (int n = 0; n < num_sections_; n++)
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f340 8084 	ble.w	8002af0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x698>
 80029e8:	ed94 8a60 	vldr	s16, [r4, #384]	@ 0x180
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	edd4 6a5f 	vldr	s13, [r4, #380]	@ 0x17c
            out += sections_[n].b[2] * x_[n][2];
 80029f2:	ee23 7a88 	vmul.f32	s14, s7, s16
            out -= sections_[n].a[0] * x_[n+1][0];
 80029f6:	ed94 6a62 	vldr	s12, [r4, #392]	@ 0x188
            x_[n][1] = x_[n][0];
 80029fa:	edc4 6a60 	vstr	s13, [r4, #384]	@ 0x180
            x_[n][0] = in;
 80029fe:	edc4 7a5f 	vstr	s15, [r4, #380]	@ 0x17c
 8002a02:	eea3 7a26 	vfma.f32	s14, s6, s13
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a06:	edd4 6a63 	vldr	s13, [r4, #396]	@ 0x18c
 8002a0a:	eea6 7a44 	vfms.f32	s14, s12, s8
 8002a0e:	eea6 7ae4 	vfms.f32	s14, s13, s9
 8002a12:	eea7 7aa2 	vfma.f32	s14, s15, s5
 8002a16:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8002a1a:	f000 828f 	beq.w	8002f3c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xae4>
            x_[n][0] = in;
 8002a1e:	ed84 7a62 	vstr	s14, [r4, #392]	@ 0x188
            out += sections_[n].b[2] * x_[n][2];
 8002a22:	ee21 7a26 	vmul.f32	s14, s2, s13
            x_[n][1] = x_[n][0];
 8002a26:	ed84 6a63 	vstr	s12, [r4, #396]	@ 0x18c
        for (int n = 0; n < num_sections_; n++)
 8002a2a:	2b02      	cmp	r3, #2
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a2c:	edd4 8a66 	vldr	s17, [r4, #408]	@ 0x198
 8002a30:	eea0 7a86 	vfma.f32	s14, s1, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 8002a34:	ed94 6a65 	vldr	s12, [r4, #404]	@ 0x194
 8002a38:	eea6 7a61 	vfms.f32	s14, s12, s3
 8002a3c:	eea8 7ac2 	vfms.f32	s14, s17, s4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a40:	eea0 7a27 	vfma.f32	s14, s0, s15
 8002a44:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8002a48:	f000 827b 	beq.w	8002f42 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xaea>
            x_[n][0] = in;
 8002a4c:	ed84 7a65 	vstr	s14, [r4, #404]	@ 0x194
            out += sections_[n].b[2] * x_[n][2];
 8002a50:	ee2b 7a28 	vmul.f32	s14, s22, s17
            x_[n][1] = x_[n][0];
 8002a54:	ed84 6a66 	vstr	s12, [r4, #408]	@ 0x198
        for (int n = 0; n < num_sections_; n++)
 8002a58:	2b03      	cmp	r3, #3
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a5a:	ed94 9a69 	vldr	s18, [r4, #420]	@ 0x1a4
 8002a5e:	eeab 7a86 	vfma.f32	s14, s23, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 8002a62:	ed94 6a68 	vldr	s12, [r4, #416]	@ 0x1a0
 8002a66:	eea6 7a6a 	vfms.f32	s14, s12, s21
 8002a6a:	eea9 7a4a 	vfms.f32	s14, s18, s20
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a6e:	eeac 7a27 	vfma.f32	s14, s24, s15
 8002a72:	eef0 7a47 	vmov.f32	s15, s14
        for (int n = 0; n < num_sections_; n++)
 8002a76:	f000 8267 	beq.w	8002f48 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xaf0>
            out += sections_[n].b[2] * x_[n][2];
 8002a7a:	ee6d 9a89 	vmul.f32	s19, s27, s18
            x_[n][1] = x_[n][0];
 8002a7e:	ed84 6a69 	vstr	s12, [r4, #420]	@ 0x1a4
            x_[n][0] = in;
 8002a82:	ed84 7a68 	vstr	s14, [r4, #416]	@ 0x1a0
        for (int n = 0; n < num_sections_; n++)
 8002a86:	2b04      	cmp	r3, #4
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a88:	ed94 7a6c 	vldr	s14, [r4, #432]	@ 0x1b0
 8002a8c:	eeee 9a06 	vfma.f32	s19, s28, s12
            out -= sections_[n].a[0] * x_[n+1][0];
 8002a90:	ed94 6a6b 	vldr	s12, [r4, #428]	@ 0x1ac
 8002a94:	eee6 9a4d 	vfms.f32	s19, s12, s26
 8002a98:	eee7 9a6c 	vfms.f32	s19, s14, s25
            out -= sections_[n].a[1] * x_[n+1][1];
 8002a9c:	eeee 9aa7 	vfma.f32	s19, s29, s15
 8002aa0:	eef0 7a69 	vmov.f32	s15, s19
        for (int n = 0; n < num_sections_; n++)
 8002aa4:	f000 82bb 	beq.w	800301e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbc6>
            x_[n][0] = in;
 8002aa8:	edc4 9a6b 	vstr	s19, [r4, #428]	@ 0x1ac
            x_[n][2] = x_[n][1];
 8002aac:	eef0 9a49 	vmov.f32	s19, s18
 8002ab0:	eeb0 9a68 	vmov.f32	s18, s17
            out += sections_[n].b[2] * x_[n][2];
 8002ab4:	eddd 8a04 	vldr	s17, [sp, #16]
            x_[n][2] = x_[n][1];
 8002ab8:	ed8d 7a05 	vstr	s14, [sp, #20]
 8002abc:	2001      	movs	r0, #1
            out += sections_[n].b[2] * x_[n][2];
 8002abe:	ee68 8a87 	vmul.f32	s17, s17, s14
 8002ac2:	ed94 7a6e 	vldr	s14, [r4, #440]	@ 0x1b8
 8002ac6:	4682      	mov	sl, r0
 8002ac8:	4683      	mov	fp, r0
 8002aca:	4684      	mov	ip, r0
            x_[n][1] = x_[n][0];
 8002acc:	ed84 6a6c 	vstr	s12, [r4, #432]	@ 0x1b0
 8002ad0:	eeef 8a06 	vfma.f32	s17, s30, s12
 8002ad4:	eee7 8a05 	vfma.f32	s17, s14, s10
 8002ad8:	ed94 7a6f 	vldr	s14, [r4, #444]	@ 0x1bc
 8002adc:	eee5 8a87 	vfma.f32	s17, s11, s14
            out -= sections_[n].a[1] * x_[n+1][1];
 8002ae0:	eeef 8aa7 	vfma.f32	s17, s31, s15
 8002ae4:	eef0 7a68 	vmov.f32	s15, s17
 8002ae8:	eef0 8a66 	vmov.f32	s17, s13
 8002aec:	f04f 0901 	mov.w	r9, #1
 8002af0:	3101      	adds	r1, #1
        x_[num_sections_][1] = x_[num_sections_][0];
 8002af2:	f8d2 617c 	ldr.w	r6, [r2, #380]	@ 0x17c
        x_[num_sections_][2] = x_[num_sections_][1];
 8002af6:	f8d2 8180 	ldr.w	r8, [r2, #384]	@ 0x180
 8002afa:	2903      	cmp	r1, #3
            {
                sample = aa_filter_.Process((i == 0) ? sample : 0);
                block[i] = sample;
 8002afc:	ecee 7a01 	vstmia	lr!, {s15}
        x_[num_sections_][0] = in;
 8002b00:	edc2 7a5f 	vstr	s15, [r2, #380]	@ 0x17c
        x_[num_sections_][1] = x_[num_sections_][0];
 8002b04:	f8c2 6180 	str.w	r6, [r2, #384]	@ 0x180
 8002b08:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8002bec <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
            for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8002b0c:	f47f af69 	bne.w	80029e2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x58a>
 8002b10:	b108      	cbz	r0, 8002b16 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6be>
 8002b12:	edc4 9a6a 	vstr	s19, [r4, #424]	@ 0x1a8
 8002b16:	f1ba 0f00 	cmp.w	sl, #0
 8002b1a:	d001      	beq.n	8002b20 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6c8>
 8002b1c:	ed84 9a67 	vstr	s18, [r4, #412]	@ 0x19c
 8002b20:	f1bb 0f00 	cmp.w	fp, #0
 8002b24:	d001      	beq.n	8002b2a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6d2>
 8002b26:	edc4 8a64 	vstr	s17, [r4, #400]	@ 0x190
 8002b2a:	f1b9 0f00 	cmp.w	r9, #0
 8002b2e:	d001      	beq.n	8002b34 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6dc>
 8002b30:	ed84 8a61 	vstr	s16, [r4, #388]	@ 0x184
 8002b34:	f1bc 0f00 	cmp.w	ip, #0
 8002b38:	d003      	beq.n	8002b42 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x6ea>
 8002b3a:	eddd 7a05 	vldr	s15, [sp, #20]
 8002b3e:	edc4 7a6d 	vstr	s15, [r4, #436]	@ 0x1b4
 8002b42:	443b      	add	r3, r7
 8002b44:	ae0d      	add	r6, sp, #52	@ 0x34
 8002b46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002b4a:	f8c3 8184 	str.w	r8, [r3, #388]	@ 0x184
 8002b4e:	e643      	b.n	80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
	? (__b < __x ? __x : __b)
 8002b50:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 8002b54:	e62c      	b.n	80027b0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
                      ? phi
 8002b56:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002bd8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x780>
            float phi = phase_ * kInvPi;
 8002b5a:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8002bdc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x784>
                      ? phi
 8002b5e:	eef4 8ac7 	vcmpe.f32	s17, s14
            float phi = phase_ * kInvPi;
 8002b62:	ee68 7aa7 	vmul.f32	s15, s17, s15
                      ? phi
 8002b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6a:	f2c0 812d 	blt.w	8002dc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x970>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002b6e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002be0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x788>
 8002b72:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	f140 82c0 	bpl.w	80030fe <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xca6>
 8002b7e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002b82:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002be4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x78c>
            out = tri * 2.0f - 1.0f;
 8002b86:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8002b8e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002b92:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002b96:	e4b5      	b.n	8002504 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
            else if (note_timer_ > kNoteDuration - kFadeOutSamples)
 8002b98:	f5b6 6fd2 	cmp.w	r6, #1680	@ 0x690
 8002b9c:	f77f accd 	ble.w	800253a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe2>
                envelope = float(kNoteDuration - note_timer_) / float(kFadeOutSamples);
 8002ba0:	f5c6 63fa 	rsb	r3, r6, #2000	@ 0x7d0
 8002ba4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002be8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x790>
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 8002bb4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002bb8:	e4bf      	b.n	800253a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe2>
        phase_ += phase_inc_;
 8002bba:	ed94 8a01 	vldr	s16, [r4, #4]
 8002bbe:	e493      	b.n	80024e8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x90>
 8002bc0:	200108f0 	.word	0x200108f0
 8002bc4:	20000420 	.word	0x20000420
 8002bc8:	20000424 	.word	0x20000424
 8002bcc:	20010928 	.word	0x20010928
 8002bd0:	20000580 	.word	0x20000580
 8002bd4:	20010580 	.word	0x20010580
 8002bd8:	40490fdb 	.word	0x40490fdb
 8002bdc:	3ea2f983 	.word	0x3ea2f983
 8002be0:	40c90fdb 	.word	0x40c90fdb
 8002be4:	3d75c28f 	.word	0x3d75c28f
 8002be8:	3b4ccccd 	.word	0x3b4ccccd
 8002bec:	00000000 	.word	0x00000000
  { return __builtin_exp2f(__x); }
 8002bf0:	eeb0 ca00 	vmov.f32	s24, #0	@ 0x40000000  2.0
                if (cue_stop_)
 8002bf4:	f896 2032 	ldrb.w	r2, [r6, #50]	@ 0x32
        }
    }

    void Stop(void)
    {
        if (state_ == STATE_PLAYING)
 8002bf8:	7e33      	ldrb	r3, [r6, #24]
 8002bfa:	b142      	cbz	r2, 8002c0e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7b6>
                    state_ = STATE_STOPPING;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
 8002c04:	f000 8282 	beq.w	800310c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcb4>
                    cue_stop_ = false;
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f886 2032 	strb.w	r2, [r6, #50]	@ 0x32
         previous_knob_value_ = current_knob_value;
     }
    
    float Process(float speed, bool loop, bool reverse)
    {
        uint32_t length = memory_.length();
 8002c0e:	f8d6 a010 	ldr.w	sl, [r6, #16]
        float sample = 0;
        float prev_position = position_;

        
        if (state_ == STATE_STARTING)
 8002c12:	2b02      	cmp	r3, #2
        return audio_info_.size / sizeof(T);
 8002c14:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002c18:	f000 80e2 	beq.w	8002de0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x988>
        {
            position_ = reverse ? length - 1 : 0;
            state_ = STATE_PLAYING;
        }

        if (state_ != STATE_STOPPED)
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 82d0 	bne.w	80031c2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd6a>
        float sample = 0;
 8002c22:	ed1f aa0e 	vldr	s20, [pc, #-56]	@ 8002bec <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x794>
                    state_ = STATE_STOPPING;
 8002c26:	2301      	movs	r3, #1
        return envelope_;
    }

    float level(void)
    {
        return envelope_;
 8002c28:	4cdd      	ldr	r4, [pc, #884]	@ (8002fa0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb48>)
 8002c2a:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
                        if (cue_play_)
 8002c2e:	f896 3031 	ldrb.w	r3, [r6, #49]	@ 0x31
 8002c32:	edd4 aa1b 	vldr	s21, [r4, #108]	@ 0x6c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 82aa 	beq.w	8003190 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd38>
            state_ = STATE_STARTING;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	7633      	strb	r3, [r6, #24]
                            state_ = STATE_PLAYING;
 8002c40:	8633      	strh	r3, [r6, #48]	@ 0x30
        history_ = initial_value;
    }

    float Process(float input)
    {
        history_ += factor_ * (input - history_);
 8002c42:	ed94 7a1d 	vldr	s14, [r4, #116]	@ 0x74
                    float delay = pot[kPotDelayTime];
 8002c46:	edd8 6a01 	vldr	s13, [r8, #4]
 8002c4a:	eeb0 6a47 	vmov.f32	s12, s14
 8002c4e:	edd4 5a1c 	vldr	s11, [r4, #112]	@ 0x70

    float Process(float input, float delay, float feedback)
    {
        delay *= delay;
        delay = delay_time_lpf_.Process(delay);
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002c52:	eddf 7ad4 	vldr	s15, [pc, #848]	@ 8002fa4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb4c>
                    float feedback = pot[kPotDelayFeedback];
 8002c56:	ed98 5a02 	vldr	s10, [r8, #8]
 8002c5a:	ee96 6aa6 	vfnms.f32	s12, s13, s13
    OnePoleLowpass delay_time_lpf_;
    float interpolator_history_;

    uint32_t ReadIndex(uint32_t offset)
    {
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002c5e:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8002c60:	eea5 7a86 	vfma.f32	s14, s11, s12
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	ed84 7a1d 	vstr	s14, [r4, #116]	@ 0x74
      if (__a < __b)
 8002c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	f100 81db 	bmi.w	800302e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbd6>
 8002c78:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8002fa8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb50>
      if (__b < __a)
 8002c7c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        float delay_samples = time * kAudioSampleRate;
 8002c80:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 8002fac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb54>
        float time = kMinDelay + delay * (kMaxDelay - kMinDelay);
 8002c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c88:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        float delay_samples = time * kAudioSampleRate;
 8002c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 8002c90:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8002c94:	eef6 5ae7 	vrintz.f32	s11, s15
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002c98:	ee37 7a86 	vadd.f32	s14, s15, s12
        float frac = delay_samples - static_cast<uint32_t>(delay_samples);
 8002c9c:	ee77 4ae5 	vsub.f32	s9, s15, s11
        uint32_t i_a = ReadIndex(static_cast<uint32_t>(delay_samples));
 8002ca0:	ee16 2a90 	vmov	r2, s13
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002ca4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    }

    float AllpassInterpolator(float a, float b, float t)
    {
        if (t == 0)
 8002ca8:	eef5 4a40 	vcmp.f32	s9, #0.0
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002cac:	1aba      	subs	r2, r7, r2
        uint32_t i_b = ReadIndex(static_cast<uint32_t>(delay_samples + 1));
 8002cae:	ee17 3a10 	vmov	r3, s14
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002cb2:	f3c2 020d 	ubfx	r2, r2, #0, #14
        if (t == 0)
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002cba:	eba7 0303 	sub.w	r3, r7, r3
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002cbe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 8002cc2:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002cc6:	edd2 6a0d 	vldr	s13, [r2, #52]	@ 0x34
        if (t == 0)
 8002cca:	d00d      	beq.n	8002ce8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x890>
        {
            interpolator_history_ = a;
        }
        else
        {
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 8002ccc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cd0:	ed94 7a1e 	vldr	s14, [r4, #120]	@ 0x78
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8002cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
            interpolator_history_ = (1 - t) * (a - interpolator_history_) + b;
 8002cd8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002cdc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002ce0:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002ce4:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
        output = std::clamp<float>(input + output * feedback, -2, 2);
 8002cec:	eddf 4ab6 	vldr	s9, [pc, #728]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002cf0:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
        follower_.Reset();
    }

    float Process(float in)
    {
        float envelope = follower_.Process(in * pregain_);
 8002cf4:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 8002cf8:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
        if (in >= envelope_)
 8002cfc:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8002d00:	fe85 7a47 	vminnm.f32	s14, s10, s14
 8002d04:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
 8002d08:	eea7 aa26 	vfma.f32	s20, s14, s13
 8002d0c:	edc4 6a1e 	vstr	s13, [r4, #120]	@ 0x78
 8002d10:	fe8a aa65 	vminnm.f32	s20, s20, s11
 8002d14:	fe8a aa06 	vmaxnm.f32	s20, s20, s12
 8002d18:	ee6a 7a27 	vmul.f32	s15, s20, s15
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002d1c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d20:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	f2c0 8172 	blt.w	8003010 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb8>
            envelope_ += attack_rate_ * (in - envelope_);
 8002d2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002d30:	ed94 7a12 	vldr	s14, [r4, #72]	@ 0x48
            hold_count_ = 0;
 8002d34:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8002d36:	eea7 0a27 	vfma.f32	s0, s14, s15
            hold_count_ = 0;
 8002d3a:	6563      	str	r3, [r4, #84]	@ 0x54
            envelope_ += attack_rate_ * (in - envelope_);
 8002d3c:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
  { return __builtin_log10f(__x); }
 8002d40:	f007 fc3e 	bl	800a5c0 <log10f>
        float sense = 20 * std::log10(envelope);
 8002d44:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
        // h11 = t^3 - t^2
        // We multiply h01 by A = ratio * softness to provide the step from 0
        // to A. We multiply h11 by 2A to make the ending slope equal to ratio.
        // Then, the sum of the terms reduces to A*t^2.

        if (db > softness_)
 8002d48:	ed94 7a10 	vldr	s14, [r4, #64]	@ 0x40
        {
            return ratio_ * db;
 8002d4c:	edd4 6a0f 	vldr	s13, [r4, #60]	@ 0x3c
        float sense = 20 * std::log10(envelope);
 8002d50:	ee60 7a27 	vmul.f32	s15, s0, s15
        if (db > softness_)
 8002d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	f340 8109 	ble.w	8002f72 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb1a>
            return ratio_ * db;
 8002d60:	ee67 7aa6 	vmul.f32	s15, s15, s13
  { return __builtin_powf(__x, __y); }
 8002d64:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8002fb0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb58>
 8002d68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d6c:	f007 f922 	bl	8009fb4 <expf>
        output *= 0.5;
 8002d70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return in * std::pow(10.0, gain / 20);
 8002d74:	ee2a 7a00 	vmul.f32	s14, s20, s0
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d78:	1c7b      	adds	r3, r7, #1
        buffer_[write_head_] = compressor_.Process(output);
 8002d7a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
        output *= 0.5;
 8002d7e:	ee6a 7a27 	vmul.f32	s15, s20, s15
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d82:	f3c3 030d 	ubfx	r3, r3, #0, #14
        buffer_[write_head_] = compressor_.Process(output);
 8002d86:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
        write_head_ = (write_head_ + 1) % kBufferSize;
 8002d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d8c:	eeb0 7ae7 	vabs.f32	s14, s15
        if (in >= envelope_)
 8002d90:	eeb4 7aea 	vcmpe.f32	s14, s21
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	f2c0 80e3 	blt.w	8002f62 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb0a>
            envelope_ += attack_rate_ * (in - envelope_);
 8002d9c:	ee37 7a6a 	vsub.f32	s14, s14, s21
 8002da0:	edd4 6a17 	vldr	s13, [r4, #92]	@ 0x5c
            hold_count_ = 0;
 8002da4:	2300      	movs	r3, #0
            envelope_ += attack_rate_ * (in - envelope_);
 8002da6:	eee6 aa87 	vfma.f32	s21, s13, s14
            hold_count_ = 0;
 8002daa:	66a3      	str	r3, [r4, #104]	@ 0x68
            envelope_ += attack_rate_ * (in - envelope_);
 8002dac:	edc4 aa1b 	vstr	s21, [r4, #108]	@ 0x6c
            sample *= kAudioOSFactor * kAudioOutputLevel;
 8002db0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002fb4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb5c>
 8002db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db8:	e5cc      	b.n	8002954 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4fc>
 8002dba:	2202      	movs	r2, #2
                    cue_play_ = false;
 8002dbc:	f8a6 3031 	strh.w	r3, [r6, #49]	@ 0x31
 8002dc0:	7632      	strb	r2, [r6, #24]
                    state_ = STATE_PLAYING;
 8002dc2:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
 8002dc6:	e5c2      	b.n	800294e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x4f6>
            out = tri * 2.0f - 1.0f;
 8002dc8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002dcc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002fb8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb60>
 8002dd0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002dd4:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8002dd8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002ddc:	f7ff bb92 	b.w	8002504 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
            position_ = reverse ? length - 1 : 0;
 8002de0:	eddf 7a79 	vldr	s15, [pc, #484]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
            state_ = STATE_PLAYING;
 8002de4:	2303      	movs	r3, #3
 8002de6:	2701      	movs	r7, #1
 8002de8:	eef0 6a67 	vmov.f32	s13, s15
 8002dec:	7633      	strb	r3, [r6, #24]
 8002dee:	eeb0 ba67 	vmov.f32	s22, s15
 8002df2:	2300      	movs	r3, #0
            position_ = reverse ? length - 1 : 0;
 8002df4:	edc6 7a05 	vstr	s15, [r6, #20]
        for (uint32_t i = 0; i < num_links_; i++)
 8002df8:	f8da e03c 	ldr.w	lr, [sl, #60]	@ 0x3c
 8002dfc:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8002e00:	f1be 0f00 	cmp.w	lr, #0
 8002e04:	f000 81d1 	beq.w	80031aa <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd52>
 8002e08:	f8da c040 	ldr.w	ip, [sl, #64]	@ 0x40
 8002e0c:	2100      	movs	r1, #0
            if (index < chain_[i].length)
 8002e0e:	4662      	mov	r2, ip
 8002e10:	e006      	b.n	8002e20 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9c8>
        for (uint32_t i = 0; i < num_links_; i++)
 8002e12:	4571      	cmp	r1, lr
            index -= chain_[i].length;
 8002e14:	eba3 0300 	sub.w	r3, r3, r0
        for (uint32_t i = 0; i < num_links_; i++)
 8002e18:	f102 020c 	add.w	r2, r2, #12
 8002e1c:	f000 8173 	beq.w	8003106 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcae>
            if (index < chain_[i].length)
 8002e20:	6850      	ldr	r0, [r2, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 8002e22:	3101      	adds	r1, #1
            if (index < chain_[i].length)
 8002e24:	4298      	cmp	r0, r3
 8002e26:	d9f4      	bls.n	8002e12 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9ba>
                return chain_[i].buffer[index];
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        {
            uint32_t index_a = position_;
            uint32_t index_b = index_a + 1;
            float sample_a = memory_[index_a];
 8002e2e:	881b      	ldrh	r3, [r3, #0]
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8002e30:	45b9      	cmp	r9, r7
            float sample_a = memory_[index_a];
 8002e32:	ee07 3a10 	vmov	s14, r3
 8002e36:	eeb2 7a47 	vcvtb.f32.f16	s14, s14
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8002e3a:	f200 8122 	bhi.w	8003082 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc2a>
 8002e3e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
	return __t * __b + (1 - __t) * __a;
 8002e42:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002e46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002e4a:	ee77 7acb 	vsub.f32	s15, s15, s22
 8002e4e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002e52:	eeb0 aa66 	vmov.f32	s20, s13
            sample = std::lerp(sample_a, sample_b, frac);

            bool fade_in = (position_ < kFadeDuration);
            bool fade_out = (length - 1 - position_ < kFadeDuration);
    
            if (fade_in)
 8002e56:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8002fbc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb64>
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002e5a:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
            if (fade_in)
 8002e5e:	eeb4 bae7 	vcmpe.f32	s22, s15
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002e62:	ee0a 3a90 	vmov	s21, r3
 8002e66:	eef8 aa6a 	vcvt.f32.u32	s21, s21
            if (fade_in)
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            bool fade_out = (length - 1 - position_ < kFadeDuration);
 8002e6e:	ee7a bacb 	vsub.f32	s23, s21, s22
            if (fade_in)
 8002e72:	d517      	bpl.n	8002ea4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa4c>
            {
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e74:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8002fc4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
      if (__a < __b)
 8002e78:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002e7c:	ee6b 7a27 	vmul.f32	s15, s22, s15
    static constexpr float sensitivity_factor = 180.0f;

    float FadeCurve(float tau)
    {
        tau = std::clamp<float>(tau, 0, 1);
        return 0.5 * (1 - std::cos(kPi * tau));
 8002e80:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8002fcc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002e84:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
  { return __builtin_cosf(__x); }
 8002e88:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e8c:	f007 fa5c 	bl	800a348 <cosf>
 8002e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return 0.5 * (1 - std::cos(kPi * tau));
 8002e98:	ee37 7a40 	vsub.f32	s14, s14, s0
                sample *= FadeCurve(position_ / kFadeDuration);
 8002e9c:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8002ea0:	ee27 aa27 	vmul.f32	s20, s14, s15
            if (fade_out)
 8002ea4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8002fbc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb64>
 8002ea8:	eef4 bae7 	vcmpe.f32	s23, s15
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d517      	bpl.n	8002ee2 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xa8a>
                sample *= FadeCurve((length - 1 - position_) / kFadeDuration);
 8002eb2:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002fc4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
 8002eb6:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
 8002eba:	ee6b ba87 	vmul.f32	s23, s23, s14
        return 0.5 * (1 - std::cos(kPi * tau));
 8002ebe:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002fcc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002ec2:	fecb baa7 	vmaxnm.f32	s23, s23, s15
 8002ec6:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8002eca:	f007 fa3d 	bl	800a348 <cosf>
 8002ece:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ed6:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8002eda:	ee37 7a40 	vsub.f32	s14, s14, s0
                sample *= FadeCurve((length - 1 - position_) / kFadeDuration);
 8002ede:	ee27 aa27 	vmul.f32	s20, s14, s15
            if (position_ >= length)
 8002ee2:	ee07 9a90 	vmov	s15, r9
            if(state_ != STATE_SCRUBBING){
 8002ee6:	2c04      	cmp	r4, #4
            if (position_ >= length)
 8002ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
            if(state_ != STATE_SCRUBBING){
 8002eec:	f000 8128 	beq.w	8003140 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xce8>
                position_ += (reverse ? -speed : speed) * speed_multiplier_;
 8002ef0:	eef0 7a4b 	vmov.f32	s15, s22
 8002ef4:	edd6 6a07 	vldr	s13, [r6, #28]
 8002ef8:	eee6 7a8c 	vfma.f32	s15, s13, s24
            if (position_ >= length)
 8002efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	f280 8119 	bge.w	800313a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xce2>
            else if (position_ < 0)
 8002f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	bf58      	it	pl
 8002f12:	eef0 aa67 	vmovpl.f32	s21, s15
            if (state_ == STATE_STOPPING)
 8002f16:	2c01      	cmp	r4, #1
                    position_ = length - 1;
 8002f18:	edc6 aa05 	vstr	s21, [r6, #20]
            if (state_ == STATE_STOPPING)
 8002f1c:	d174      	bne.n	8003008 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                fade_out_ += 1 / kFadeDuration;
 8002f1e:	edd6 7a09 	vldr	s15, [r6, #36]	@ 0x24
                if (fade_out_ >= 1)
 8002f22:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002fc0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb68>
 8002f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	db4f      	blt.n	8002fd0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb78>
                    fade_out_ = 1;
 8002f30:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
                    state_ = STATE_STOPPED;
 8002f34:	2200      	movs	r2, #0
                    fade_out_ = 1;
 8002f36:	6273      	str	r3, [r6, #36]	@ 0x24
                    state_ = STATE_STOPPED;
 8002f38:	7632      	strb	r2, [r6, #24]
 8002f3a:	e674      	b.n	8002c26 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ce>
        for (int n = 0; n < num_sections_; n++)
 8002f3c:	eef0 6a68 	vmov.f32	s13, s17
 8002f40:	e5d2      	b.n	8002ae8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
 8002f42:	f04f 0b01 	mov.w	fp, #1
 8002f46:	e5cf      	b.n	8002ae8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
 8002f48:	f04f 0a01 	mov.w	sl, #1
            x_[n][2] = x_[n][1];
 8002f4c:	eeb0 9a68 	vmov.f32	s18, s17
        for (int n = 0; n < num_sections_; n++)
 8002f50:	46d3      	mov	fp, sl
 8002f52:	e5c9      	b.n	8002ae8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
                        block[i] = 0.0f;
 8002f54:	2300      	movs	r3, #0
 8002f56:	ae0d      	add	r6, sp, #52	@ 0x34
                    is_active_ = false;
 8002f58:	7327      	strb	r7, [r4, #12]
                        block[i] = 0.0f;
 8002f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002f60:	e43a      	b.n	80027d8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x380>
        else if (hold_count_ < hold_samples_)
 8002f62:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	@ 0x64
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f080 8082 	bcs.w	8003070 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc18>
            hold_count_++;
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002f70:	e71e      	b.n	8002db0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x958>
        }
        else
        {
            float t = std::max<float>(db * t_scaler_ + 0.5, 0);
 8002f72:	edd4 5a11 	vldr	s11, [r4, #68]	@ 0x44
 8002f76:	eebe 6a00 	vmov.f32	s12, #224	@ 0xbf000000 -0.5
 8002f7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f7e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f86:	f100 80e3 	bmi.w	8003150 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcf8>
 8002f8a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002f8e:	ee77 7a86 	vadd.f32	s15, s15, s12
            return ratio_ * softness_ * t * t;
 8002f92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	e6e1      	b.n	8002d64 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x90c>
 8002fa0:	20010580 	.word	0x20010580
 8002fa4:	3f666666 	.word	0x3f666666
 8002fa8:	3dcccccd 	.word	0x3dcccccd
 8002fac:	467a0000 	.word	0x467a0000
 8002fb0:	3debc8e3 	.word	0x3debc8e3
 8002fb4:	40366666 	.word	0x40366666
 8002fb8:	3d75c28f 	.word	0x3d75c28f
 8002fbc:	43a00000 	.word	0x43a00000
 8002fc0:	3f7f3333 	.word	0x3f7f3333
 8002fc4:	3b4ccccd 	.word	0x3b4ccccd
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	40490fdb 	.word	0x40490fdb
                fade_out_ += 1 / kFadeDuration;
 8002fd0:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8002fc4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb6c>
      if (__b < __a)
 8002fd4:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
        return 0.5 * (1 - std::cos(kPi * tau));
 8002fd8:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8002fc8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb70>
                fade_out_ += 1 / kFadeDuration;
 8002fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
        return 0.5 * (1 - std::cos(kPi * tau));
 8002fe0:	ed1f 0a06 	vldr	s0, [pc, #-24]	@ 8002fcc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb74>
 8002fe4:	fe87 7aea 	vminnm.f32	s14, s15, s21
 8002fe8:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
 8002fec:	ee27 0a00 	vmul.f32	s0, s14, s0
                fade_out_ += 1 / kFadeDuration;
 8002ff0:	edc6 7a09 	vstr	s15, [r6, #36]	@ 0x24
 8002ff4:	f007 f9a8 	bl	800a348 <cosf>
 8002ff8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
        return 0.5 * (1 - std::cos(kPi * tau));
 8002ffc:	ee7a aac0 	vsub.f32	s21, s21, s0
 8003000:	ee6a 7a27 	vmul.f32	s15, s20, s15
                sample *= FadeCurve(fade_out_);
 8003004:	ee2a aaa7 	vmul.f32	s20, s21, s15
        return envelope_;
 8003008:	4c6f      	ldr	r4, [pc, #444]	@ (80031c8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd70>)
 800300a:	edd4 aa1b 	vldr	s21, [r4, #108]	@ 0x6c
 800300e:	e618      	b.n	8002c42 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ea>
        else if (hold_count_ < hold_samples_)
 8003010:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	@ 0x50
 8003014:	4293      	cmp	r3, r2
 8003016:	d222      	bcs.n	800305e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc06>
            hold_count_++;
 8003018:	3301      	adds	r3, #1
 800301a:	6563      	str	r3, [r4, #84]	@ 0x54
 800301c:	e690      	b.n	8002d40 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8e8>
 800301e:	2001      	movs	r0, #1
            x_[n][2] = x_[n][1];
 8003020:	eef0 9a49 	vmov.f32	s19, s18
 8003024:	eeb0 9a68 	vmov.f32	s18, s17
        for (int n = 0; n < num_sections_; n++)
 8003028:	4682      	mov	sl, r0
 800302a:	4683      	mov	fp, r0
 800302c:	e55c      	b.n	8002ae8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x690>
        return (write_head_ + kBufferSize - offset) % kBufferSize;
 800302e:	f5a7 63c8 	sub.w	r3, r7, #1600	@ 0x640
 8003032:	f3c3 030d 	ubfx	r3, r3, #0, #14
        float output = AllpassInterpolator(buffer_[i_a], buffer_[i_b], frac);
 8003036:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800303a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
        if (t == 0)
 800303e:	e653      	b.n	8002ce8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x890>
                pitch = (1 - pot[kPotPitch]) * 2 - 1; // pot values reversed due to wiring change
 8003040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003044:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003048:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800304c:	ee77 7a67 	vsub.f32	s15, s14, s15
  { return __builtin_exp2f(__x); }
 8003050:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8003054:	f007 f820 	bl	800a098 <exp2f>
 8003058:	eeb0 ca40 	vmov.f32	s24, s0
 800305c:	e5ca      	b.n	8002bf4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x79c>
            envelope_ += decay_rate_ * (in - envelope_);
 800305e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003062:	ed94 7a13 	vldr	s14, [r4, #76]	@ 0x4c
 8003066:	eea7 0a27 	vfma.f32	s0, s14, s15
 800306a:	ed84 0a16 	vstr	s0, [r4, #88]	@ 0x58
 800306e:	e667      	b.n	8002d40 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x8e8>
 8003070:	ee37 7a6a 	vsub.f32	s14, s14, s21
 8003074:	edd4 6a18 	vldr	s13, [r4, #96]	@ 0x60
 8003078:	eee6 aa87 	vfma.f32	s21, s13, s14
 800307c:	edc4 aa1b 	vstr	s21, [r4, #108]	@ 0x6c
 8003080:	e696      	b.n	8002db0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x958>
        for (uint32_t i = 0; i < num_links_; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	e005      	b.n	8003092 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc3a>
 8003086:	4573      	cmp	r3, lr
            index -= chain_[i].length;
 8003088:	eba7 0702 	sub.w	r7, r7, r2
        for (uint32_t i = 0; i < num_links_; i++)
 800308c:	f10c 0c0c 	add.w	ip, ip, #12
 8003090:	d061      	beq.n	8003156 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcfe>
            if (index < chain_[i].length)
 8003092:	f8dc 2004 	ldr.w	r2, [ip, #4]
        for (uint32_t i = 0; i < num_links_; i++)
 8003096:	3301      	adds	r3, #1
            if (index < chain_[i].length)
 8003098:	42ba      	cmp	r2, r7
 800309a:	d9f4      	bls.n	8003086 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc2e>
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 800309c:	f8dc 3000 	ldr.w	r3, [ip]
 80030a0:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80030a4:	ee0a 3a10 	vmov	s20, r3
 80030a8:	eeb2 aa4a 	vcvtb.f32.f16	s20, s20
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 80030ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d956      	bls.n	8003164 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd0c>
 80030b6:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d95b      	bls.n	8003178 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd20>
      if (__t == 1)
 80030c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80030c4:	eef4 6a67 	vcmp.f32	s13, s15
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	f43f aec3 	beq.w	8002e56 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
      return (__t > 1) == (__b > __a)
 80030d0:	eef4 6ae7 	vcmpe.f32	s13, s15
      const _Fp __x = __a + __t * (__b - __a);
 80030d4:	ee7a 7a47 	vsub.f32	s15, s20, s14
      return (__t > 1) == (__b > __a)
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	eeb4 7aca 	vcmpe.f32	s14, s20
      const _Fp __x = __a + __t * (__b - __a);
 80030e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
      return (__t > 1) == (__b > __a)
 80030e4:	bfcc      	ite	gt
 80030e6:	2201      	movgt	r2, #1
 80030e8:	2200      	movle	r2, #0
 80030ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	? (__b < __x ? __x : __b)
 80030ee:	bf4c      	ite	mi
 80030f0:	2301      	movmi	r3, #1
 80030f2:	2300      	movpl	r3, #0
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d055      	beq.n	80031a4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd4c>
 80030f8:	fe8a aa47 	vminnm.f32	s20, s20, s14
 80030fc:	e6ab      	b.n	8002e56 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
 80030fe:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80031cc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd74>
 8003102:	f7ff b9ff 	b.w	8002504 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xac>
        return dummy_;
 8003106:	f10a 0348 	add.w	r3, sl, #72	@ 0x48
 800310a:	e690      	b.n	8002e2e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9d6>
            fade_out_ = 0;
 800310c:	2300      	movs	r3, #0
        uint32_t length = memory_.length();
 800310e:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8003112:	4614      	mov	r4, r2
            state_ = STATE_STOPPING;
 8003114:	7632      	strb	r2, [r6, #24]
            fade_out_ = 0;
 8003116:	6273      	str	r3, [r6, #36]	@ 0x24
                    cue_stop_ = false;
 8003118:	2300      	movs	r3, #0
 800311a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800311e:	f886 3032 	strb.w	r3, [r6, #50]	@ 0x32
            uint32_t index_a = position_;
 8003122:	ed96 ba05 	vldr	s22, [r6, #20]
 8003126:	eebc 7acb 	vcvt.u32.f32	s14, s22
            float frac = position_ - index_a;
 800312a:	eef6 7acb 	vrintz.f32	s15, s22
 800312e:	ee7b 6a67 	vsub.f32	s13, s22, s15
            uint32_t index_a = position_;
 8003132:	ee17 3a10 	vmov	r3, s14
            uint32_t index_b = index_a + 1;
 8003136:	1c5f      	adds	r7, r3, #1
 8003138:	e65e      	b.n	8002df8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9a0>
 800313a:	eddf aa25 	vldr	s21, [pc, #148]	@ 80031d0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd78>
 800313e:	e6ea      	b.n	8002f16 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xabe>
            if (position_ >= length)
 8003140:	eeb4 bac7 	vcmpe.f32	s22, s14
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	db19      	blt.n	800317e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd26>
                    position_ = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	6173      	str	r3, [r6, #20]
 800314e:	e75b      	b.n	8003008 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
 8003150:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80031d0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd78>
 8003154:	e71f      	b.n	8002f96 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xb3e>
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 8003156:	f8ba 3048 	ldrh.w	r3, [sl, #72]	@ 0x48
 800315a:	ee0a 3a10 	vmov	s20, r3
 800315e:	eeb2 aa4a 	vcvtb.f32.f16	s20, s20
 8003162:	e7a3      	b.n	80030ac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc54>
      if ((__a <= 0 && __b >= 0) || (__a >= 0 && __b <= 0))
 8003164:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	d004      	beq.n	8003178 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd20>
 800316e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	dba3      	blt.n	80030c0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc68>
	return __t * __b + (1 - __t) * __a;
 8003178:	ee66 6a8a 	vmul.f32	s13, s13, s20
 800317c:	e661      	b.n	8002e42 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9ea>
            else if (position_ < 0)
 800317e:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	f57f af3f 	bpl.w	8003008 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                    position_ = length - 1;
 800318a:	edc6 aa05 	vstr	s21, [r6, #20]
 800318e:	e73b      	b.n	8003008 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbb0>
                        else if (delay_is_quiet)
 8003190:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80031d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xd7c>
 8003194:	eef4 aae7 	vcmpe.f32	s21, s15
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                            state_ = STATE_STOPPED;
 800319c:	bf98      	it	ls
 800319e:	f886 3030 	strbls.w	r3, [r6, #48]	@ 0x30
 80031a2:	e54e      	b.n	8002c42 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x7ea>
	? (__b < __x ? __x : __b)
 80031a4:	fe8a aa07 	vmaxnm.f32	s20, s20, s14
 80031a8:	e655      	b.n	8002e56 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9fe>
            float sample_a = memory_[index_a];
 80031aa:	f8ba 3048 	ldrh.w	r3, [sl, #72]	@ 0x48
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 80031ae:	45b9      	cmp	r9, r7
            float sample_a = memory_[index_a];
 80031b0:	ee07 3a10 	vmov	s14, r3
 80031b4:	eeb2 7a47 	vcvtb.f32.f16	s14, s14
            float sample_b = (index_b < length) ? memory_[index_b] : 0;
 80031b8:	f67f ae41 	bls.w	8002e3e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x9e6>
 80031bc:	eeb0 aa47 	vmov.f32	s20, s14
 80031c0:	e774      	b.n	80030ac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xc54>
 80031c2:	461c      	mov	r4, r3
 80031c4:	e7ad      	b.n	8003122 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xcca>
 80031c6:	bf00      	nop
 80031c8:	20010580 	.word	0x20010580
 80031cc:	bd75c28f 	.word	0xbd75c28f
 80031d0:	00000000 	.word	0x00000000
 80031d4:	3a83126f 	.word	0x3a83126f

080031d8 <recorder::Transition(recorder::State)>:
    {
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
        printf("State: ");
 80031dc:	4823      	ldr	r0, [pc, #140]	@ (800326c <recorder::Transition(recorder::State)+0x94>)
 80031de:	f007 fe33 	bl	800ae48 <iprintf>
        switch (new_state)
 80031e2:	2c0c      	cmp	r4, #12
 80031e4:	d80b      	bhi.n	80031fe <recorder::Transition(recorder::State)+0x26>
 80031e6:	e8df f004 	tbb	[pc, r4]
 80031ea:	1915      	.short	0x1915
 80031ec:	2925211d 	.word	0x2925211d
 80031f0:	3935312d 	.word	0x3935312d
 80031f4:	073d      	.short	0x073d
 80031f6:	11          	.byte	0x11
 80031f7:	00          	.byte	0x00
            printf("STARTUP\n");
 80031f8:	481d      	ldr	r0, [pc, #116]	@ (8003270 <recorder::Transition(recorder::State)+0x98>)
 80031fa:	f007 fe8d 	bl	800af18 <puts>
	__atomic_store(std::__addressof(_M_i),
 80031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <recorder::Transition(recorder::State)+0x9c>)
 8003200:	f3bf 8f5b 	dmb	ish
 8003204:	701c      	strb	r4, [r3, #0]
 8003206:	f3bf 8f5b 	dmb	ish
    }
 800320a:	bd10      	pop	{r4, pc}
            printf("ENDING\n");
 800320c:	481a      	ldr	r0, [pc, #104]	@ (8003278 <recorder::Transition(recorder::State)+0xa0>)
 800320e:	f007 fe83 	bl	800af18 <puts>
            break;
 8003212:	e7f4      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("IDLE\n");
 8003214:	4819      	ldr	r0, [pc, #100]	@ (800327c <recorder::Transition(recorder::State)+0xa4>)
 8003216:	f007 fe7f 	bl	800af18 <puts>
            break;
 800321a:	e7f0      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("SYNTH\n");
 800321c:	4818      	ldr	r0, [pc, #96]	@ (8003280 <recorder::Transition(recorder::State)+0xa8>)
 800321e:	f007 fe7b 	bl	800af18 <puts>
            break;
 8003222:	e7ec      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("RECORD\n");
 8003224:	4817      	ldr	r0, [pc, #92]	@ (8003284 <recorder::Transition(recorder::State)+0xac>)
 8003226:	f007 fe77 	bl	800af18 <puts>
            break;
 800322a:	e7e8      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("PLAY\n");
 800322c:	4816      	ldr	r0, [pc, #88]	@ (8003288 <recorder::Transition(recorder::State)+0xb0>)
 800322e:	f007 fe73 	bl	800af18 <puts>
            break;
 8003232:	e7e4      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("STOP\n");
 8003234:	4815      	ldr	r0, [pc, #84]	@ (800328c <recorder::Transition(recorder::State)+0xb4>)
 8003236:	f007 fe6f 	bl	800af18 <puts>
            break;
 800323a:	e7e0      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("SAVE\n");
 800323c:	4814      	ldr	r0, [pc, #80]	@ (8003290 <recorder::Transition(recorder::State)+0xb8>)
 800323e:	f007 fe6b 	bl	800af18 <puts>
            break;
 8003242:	e7dc      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("ERASE\n");
 8003244:	4813      	ldr	r0, [pc, #76]	@ (8003294 <recorder::Transition(recorder::State)+0xbc>)
 8003246:	f007 fe67 	bl	800af18 <puts>
            break;
 800324a:	e7d8      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("BEGIN_WRITE\n");
 800324c:	4812      	ldr	r0, [pc, #72]	@ (8003298 <recorder::Transition(recorder::State)+0xc0>)
 800324e:	f007 fe63 	bl	800af18 <puts>
            break;
 8003252:	e7d4      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("WRITE\n");
 8003254:	4811      	ldr	r0, [pc, #68]	@ (800329c <recorder::Transition(recorder::State)+0xc4>)
 8003256:	f007 fe5f 	bl	800af18 <puts>
            break;
 800325a:	e7d0      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("COMMIT\n");
 800325c:	4810      	ldr	r0, [pc, #64]	@ (80032a0 <recorder::Transition(recorder::State)+0xc8>)
 800325e:	f007 fe5b 	bl	800af18 <puts>
            break;
 8003262:	e7cc      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
            printf("STANDBY\n");
 8003264:	480f      	ldr	r0, [pc, #60]	@ (80032a4 <recorder::Transition(recorder::State)+0xcc>)
 8003266:	f007 fe57 	bl	800af18 <puts>
            break;
 800326a:	e7c8      	b.n	80031fe <recorder::Transition(recorder::State)+0x26>
 800326c:	0800bf20 	.word	0x0800bf20
 8003270:	0800bf84 	.word	0x0800bf84
 8003274:	200108ec 	.word	0x200108ec
 8003278:	0800bf8c 	.word	0x0800bf8c
 800327c:	0800bf28 	.word	0x0800bf28
 8003280:	0800bf30 	.word	0x0800bf30
 8003284:	0800bf38 	.word	0x0800bf38
 8003288:	0800bf40 	.word	0x0800bf40
 800328c:	0800bf48 	.word	0x0800bf48
 8003290:	0800bf50 	.word	0x0800bf50
 8003294:	0800bf58 	.word	0x0800bf58
 8003298:	0800bf60 	.word	0x0800bf60
 800329c:	0800bf6c 	.word	0x0800bf6c
 80032a0:	0800bf74 	.word	0x0800bf74
 80032a4:	0800bf7c 	.word	0x0800bf7c

080032a8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()>:
        void Reset(void)
 80032a8:	b538      	push	{r3, r4, r5, lr}
            state_ = STATE_STOPPED;
 80032aa:	2500      	movs	r5, #0
        void Reset(void)
 80032ac:	4604      	mov	r4, r0
            buffer_[i] = 0;
 80032ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032b2:	3034      	adds	r0, #52	@ 0x34
 80032b4:	4629      	mov	r1, r5
            state_ = STATE_STOPPED;
 80032b6:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
            cue_play_ = false;
 80032ba:	f8a4 5031 	strh.w	r5, [r4, #49]	@ 0x31
        state_ = STATE_STOPPED;
 80032be:	7625      	strb	r5, [r4, #24]
 80032c0:	f007 fe5d 	bl	800af7e <memset>
        write_head_ = 0;
 80032c4:	f504 3380 	add.w	r3, r4, #65536	@ 0x10000
        envelope_ = 0;
 80032c8:	2200      	movs	r2, #0
        for (int n = 0; n < num_sections_; n++)
 80032ca:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 80032ce:	635d      	str	r5, [r3, #52]	@ 0x34
 80032d0:	42a8      	cmp	r0, r5
        hold_count_ = 0;
 80032d2:	655d      	str	r5, [r3, #84]	@ 0x54
        envelope_ = 0;
 80032d4:	659a      	str	r2, [r3, #88]	@ 0x58
        hold_count_ = 0;
 80032d6:	669d      	str	r5, [r3, #104]	@ 0x68
        envelope_ = 0;
 80032d8:	66da      	str	r2, [r3, #108]	@ 0x6c
        history_ = initial_value;
 80032da:	675a      	str	r2, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 80032dc:	679a      	str	r2, [r3, #120]	@ 0x78
 80032de:	dd42      	ble.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 80032e0:	2801      	cmp	r0, #1
            x_[n][0] = 0;
 80032e2:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 80032e6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 80032ea:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        for (int n = 0; n < num_sections_; n++)
 80032ee:	d03a      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 80032f0:	2802      	cmp	r0, #2
            x_[n][0] = 0;
 80032f2:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 80032f6:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 80032fa:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        for (int n = 0; n < num_sections_; n++)
 80032fe:	d032      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003300:	2803      	cmp	r0, #3
            x_[n][0] = 0;
 8003302:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 8003306:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 800330a:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
        for (int n = 0; n < num_sections_; n++)
 800330e:	d02a      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003310:	2804      	cmp	r0, #4
            x_[n][0] = 0;
 8003312:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
            x_[n][1] = 0;
 8003316:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
            x_[n][2] = 0;
 800331a:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
        for (int n = 0; n < num_sections_; n++)
 800331e:	d022      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003320:	2805      	cmp	r0, #5
            x_[n][0] = 0;
 8003322:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
            x_[n][1] = 0;
 8003326:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
            x_[n][2] = 0;
 800332a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
        for (int n = 0; n < num_sections_; n++)
 800332e:	d01a      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003330:	2806      	cmp	r0, #6
            x_[n][0] = 0;
 8003332:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            x_[n][1] = 0;
 8003336:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
            x_[n][2] = 0;
 800333a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
        for (int n = 0; n < num_sections_; n++)
 800333e:	d012      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003340:	2807      	cmp	r0, #7
            x_[n][0] = 0;
 8003342:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
            x_[n][1] = 0;
 8003346:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
            x_[n][2] = 0;
 800334a:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        for (int n = 0; n < num_sections_; n++)
 800334e:	d00a      	beq.n	8003366 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xbe>
 8003350:	490b      	ldr	r1, [pc, #44]	@ (8003380 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xd8>)
 8003352:	4421      	add	r1, r4
 8003354:	2407      	movs	r4, #7
 8003356:	3401      	adds	r4, #1
            x_[n][0] = 0;
 8003358:	600a      	str	r2, [r1, #0]
            x_[n][1] = 0;
 800335a:	604a      	str	r2, [r1, #4]
        for (int n = 0; n < num_sections_; n++)
 800335c:	310c      	adds	r1, #12
 800335e:	4284      	cmp	r4, r0
            x_[n][2] = 0;
 8003360:	f841 2c04 	str.w	r2, [r1, #-4]
        for (int n = 0; n < num_sections_; n++)
 8003364:	d1f7      	bne.n	8003356 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()+0xae>
        x_[num_sections_][0] = 0;
 8003366:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800336a:	2200      	movs	r2, #0
 800336c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003370:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
        x_[num_sections_][1] = 0;
 8003374:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
        x_[num_sections_][2] = 0;
 8003378:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        }
 800337c:	bd38      	pop	{r3, r4, r5, pc}
 800337e:	bf00      	nop
 8003380:	000101d0 	.word	0x000101d0

08003384 <recorder::StateMachine(bool)>:
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003384:	4bd1      	ldr	r3, [pc, #836]	@ (80036cc <recorder::StateMachine(bool)+0x348>)
    {
 8003386:	4684      	mov	ip, r0
 8003388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338c:	e9d3 1400 	ldrd	r1, r4, [r3]

        if (invert_)
 8003390:	7a1a      	ldrb	r2, [r3, #8]
 8003392:	b085      	sub	sp, #20
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003394:	6909      	ldr	r1, [r1, #16]
 8003396:	40e1      	lsrs	r1, r4
        if (invert_)
 8003398:	ea82 0001 	eor.w	r0, r2, r1
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 800339c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 80033a0:	f000 0001 	and.w	r0, r0, #1
 80033a4:	4282      	cmp	r2, r0
 80033a6:	f000 8210 	beq.w	80037ca <recorder::StateMachine(bool)+0x446>
        {
            count_ = 0;
 80033aa:	2200      	movs	r2, #0
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 80033ac:	f893 408d 	ldrb.w	r4, [r3, #141]	@ 0x8d
            count_ = 0;
 80033b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80033b4:	4ac6      	ldr	r2, [pc, #792]	@ (80036d0 <recorder::StateMachine(bool)+0x34c>)
 80033b6:	7d19      	ldrb	r1, [r3, #20]
 80033b8:	f882 4020 	strb.w	r4, [r2, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80033bc:	e9d3 6503 	ldrd	r6, r5, [r3, #12]
 80033c0:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 80033c2:	f883 008c 	strb.w	r0, [r3, #140]	@ 0x8c
 80033c6:	fa24 f005 	lsr.w	r0, r4, r5
        if (in != history_)
 80033ca:	f893 4098 	ldrb.w	r4, [r3, #152]	@ 0x98
        if (invert_)
 80033ce:	4041      	eors	r1, r0
 80033d0:	f001 0101 	and.w	r1, r1, #1
 80033d4:	428c      	cmp	r4, r1
 80033d6:	f000 81e5 	beq.w	80037a4 <recorder::StateMachine(bool)+0x420>
            count_ = 0;
 80033da:	2000      	movs	r0, #0
 80033dc:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
        return state_;
 80033e0:	f893 0099 	ldrb.w	r0, [r3, #153]	@ 0x99
 80033e4:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
        history_ = in;
 80033e8:	f883 1098 	strb.w	r1, [r3, #152]	@ 0x98
 80033ec:	f893 1020 	ldrb.w	r1, [r3, #32]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80033f0:	e9d3 5406 	ldrd	r5, r4, [r3, #24]
 80033f4:	6928      	ldr	r0, [r5, #16]
        if (in != history_)
 80033f6:	f893 50a4 	ldrb.w	r5, [r3, #164]	@ 0xa4
 80033fa:	40e0      	lsrs	r0, r4
        if (invert_)
 80033fc:	4041      	eors	r1, r0
 80033fe:	f001 0101 	and.w	r1, r1, #1
 8003402:	428d      	cmp	r5, r1
 8003404:	f000 81bb 	beq.w	800377e <recorder::StateMachine(bool)+0x3fa>
            count_ = 0;
 8003408:	2000      	movs	r0, #0
 800340a:	f8c3 00a0 	str.w	r0, [r3, #160]	@ 0xa0
        return state_;
 800340e:	f893 00a5 	ldrb.w	r0, [r3, #165]	@ 0xa5
 8003412:	f882 0022 	strb.w	r0, [r2, #34]	@ 0x22
        history_ = in;
 8003416:	f883 10a4 	strb.w	r1, [r3, #164]	@ 0xa4
 800341a:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800341e:	e9d3 5409 	ldrd	r5, r4, [r3, #36]	@ 0x24
 8003422:	6928      	ldr	r0, [r5, #16]
        if (in != history_)
 8003424:	f893 50b0 	ldrb.w	r5, [r3, #176]	@ 0xb0
 8003428:	40e0      	lsrs	r0, r4
        if (invert_)
 800342a:	4041      	eors	r1, r0
 800342c:	f001 0101 	and.w	r1, r1, #1
 8003430:	428d      	cmp	r5, r1
 8003432:	f000 8191 	beq.w	8003758 <recorder::StateMachine(bool)+0x3d4>
            count_ = 0;
 8003436:	2000      	movs	r0, #0
 8003438:	f8c3 00ac 	str.w	r0, [r3, #172]	@ 0xac
        return state_;
 800343c:	f893 00b1 	ldrb.w	r0, [r3, #177]	@ 0xb1
 8003440:	f882 0023 	strb.w	r0, [r2, #35]	@ 0x23
        history_ = in;
 8003444:	f883 10b0 	strb.w	r1, [r3, #176]	@ 0xb0
 8003448:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800344c:	e9d3 540c 	ldrd	r5, r4, [r3, #48]	@ 0x30
 8003450:	6928      	ldr	r0, [r5, #16]
        if (in != history_)
 8003452:	f893 50bc 	ldrb.w	r5, [r3, #188]	@ 0xbc
 8003456:	40e0      	lsrs	r0, r4
        if (invert_)
 8003458:	4041      	eors	r1, r0
 800345a:	f001 0101 	and.w	r1, r1, #1
 800345e:	428d      	cmp	r5, r1
 8003460:	f000 8167 	beq.w	8003732 <recorder::StateMachine(bool)+0x3ae>
            count_ = 0;
 8003464:	2000      	movs	r0, #0
 8003466:	f8c3 00b8 	str.w	r0, [r3, #184]	@ 0xb8
        return state_;
 800346a:	f893 00bd 	ldrb.w	r0, [r3, #189]	@ 0xbd
 800346e:	f882 0024 	strb.w	r0, [r2, #36]	@ 0x24
        history_ = in;
 8003472:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
 8003476:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800347a:	e9d3 540f 	ldrd	r5, r4, [r3, #60]	@ 0x3c
 800347e:	6928      	ldr	r0, [r5, #16]
        if (in != history_)
 8003480:	f893 50c8 	ldrb.w	r5, [r3, #200]	@ 0xc8
 8003484:	40e0      	lsrs	r0, r4
        if (invert_)
 8003486:	4041      	eors	r1, r0
 8003488:	f001 0101 	and.w	r1, r1, #1
 800348c:	428d      	cmp	r5, r1
 800348e:	f000 813d 	beq.w	800370c <recorder::StateMachine(bool)+0x388>
            count_ = 0;
 8003492:	2000      	movs	r0, #0
        return state_;
 8003494:	f893 70c9 	ldrb.w	r7, [r3, #201]	@ 0xc9
            count_ = 0;
 8003498:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
        history_ = in;
 800349c:	f883 10c8 	strb.w	r1, [r3, #200]	@ 0xc8
 80034a0:	f893 1050 	ldrb.w	r1, [r3, #80]	@ 0x50
 80034a4:	f882 7025 	strb.w	r7, [r2, #37]	@ 0x25
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80034a8:	e9d3 0412 	ldrd	r0, r4, [r3, #72]	@ 0x48
 80034ac:	6900      	ldr	r0, [r0, #16]
 80034ae:	40e0      	lsrs	r0, r4
        if (in != history_)
 80034b0:	f893 40d4 	ldrb.w	r4, [r3, #212]	@ 0xd4
        if (invert_)
 80034b4:	4041      	eors	r1, r0
 80034b6:	f001 0101 	and.w	r1, r1, #1
 80034ba:	428c      	cmp	r4, r1
 80034bc:	f000 80f3 	beq.w	80036a6 <recorder::StateMachine(bool)+0x322>
            count_ = 0;
 80034c0:	2000      	movs	r0, #0
        return state_;
 80034c2:	f893 60d5 	ldrb.w	r6, [r3, #213]	@ 0xd5
            count_ = 0;
 80034c6:	f8c3 00d0 	str.w	r0, [r3, #208]	@ 0xd0
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80034ca:	6d58      	ldr	r0, [r3, #84]	@ 0x54
        history_ = in;
 80034cc:	f883 10d4 	strb.w	r1, [r3, #212]	@ 0xd4
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80034d0:	6900      	ldr	r0, [r0, #16]
 80034d2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80034d4:	f882 6026 	strb.w	r6, [r2, #38]	@ 0x26
 80034d8:	40c8      	lsrs	r0, r1
        if (invert_)
 80034da:	f893 105c 	ldrb.w	r1, [r3, #92]	@ 0x5c
 80034de:	4041      	eors	r1, r0
        if (in != history_)
 80034e0:	f893 00e0 	ldrb.w	r0, [r3, #224]	@ 0xe0
 80034e4:	f001 0101 	and.w	r1, r1, #1
 80034e8:	4288      	cmp	r0, r1
 80034ea:	f000 80c9 	beq.w	8003680 <recorder::StateMachine(bool)+0x2fc>
            count_ = 0;
 80034ee:	2000      	movs	r0, #0
 80034f0:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
        return state_;
 80034f4:	f893 00e1 	ldrb.w	r0, [r3, #225]	@ 0xe1
        history_ = in;
 80034f8:	f883 10e0 	strb.w	r1, [r3, #224]	@ 0xe0
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80034fc:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80034fe:	f882 0027 	strb.w	r0, [r2, #39]	@ 0x27
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8003502:	6909      	ldr	r1, [r1, #16]
 8003504:	6e58      	ldr	r0, [r3, #100]	@ 0x64
        if (invert_)
 8003506:	f893 5068 	ldrb.w	r5, [r3, #104]	@ 0x68
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800350a:	40c1      	lsrs	r1, r0
        if (invert_)
 800350c:	404d      	eors	r5, r1
        if (in != history_)
 800350e:	f893 10ec 	ldrb.w	r1, [r3, #236]	@ 0xec
 8003512:	f005 0501 	and.w	r5, r5, #1
 8003516:	42a9      	cmp	r1, r5
 8003518:	f000 809f 	beq.w	800365a <recorder::StateMachine(bool)+0x2d6>
            count_ = 0;
 800351c:	2100      	movs	r1, #0
        return state_;
 800351e:	f893 00ed 	ldrb.w	r0, [r3, #237]	@ 0xed
            count_ = 0;
 8003522:	f8c3 10e8 	str.w	r1, [r3, #232]	@ 0xe8
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 8003526:	edd2 7a01 	vldr	s15, [r2, #4]
            }
            else
            {
                in.sw[i] = false;
 800352a:	f04f 0e00 	mov.w	lr, #0
 800352e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80036d4 <recorder::StateMachine(bool)+0x350>
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8003532:	f882 0028 	strb.w	r0, [r2, #40]	@ 0x28
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
        history_ = (history_ << kShift) | level;
 800353a:	4867      	ldr	r0, [pc, #412]	@ (80036d8 <recorder::StateMachine(bool)+0x354>)
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 800353c:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8003708 <recorder::StateMachine(bool)+0x384>
        history_ = in;
 8003540:	f883 50ec 	strb.w	r5, [r3, #236]	@ 0xec
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 8003544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003548:	6805      	ldr	r5, [r0, #0]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 800354a:	4c64      	ldr	r4, [pc, #400]	@ (80036dc <recorder::StateMachine(bool)+0x358>)
 800354c:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 8003550:	f8d8 5000 	ldr.w	r5, [r8]
        int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions 
 8003554:	ee17 3a90 	vmov	r3, s15
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003558:	f894 9000 	ldrb.w	r9, [r4]
 800355c:	4960      	ldr	r1, [pc, #384]	@ (80036e0 <recorder::StateMachine(bool)+0x35c>)
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 800355e:	1aeb      	subs	r3, r5, r3
                in.sw[i] = false;
 8003560:	f882 e029 	strb.w	lr, [r2, #41]	@ 0x29
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 8003564:	f882 e02a 	strb.w	lr, [r2, #42]	@ 0x2a
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8003568:	eb02 0e09 	add.w	lr, r2, r9
        strum_idx_changed = (strum_idx != last_strum_idx); //did we change positions
 800356c:	bf18      	it	ne
 800356e:	2301      	movne	r3, #1
 8003570:	6006      	str	r6, [r0, #0]
 8003572:	4e5c      	ldr	r6, [pc, #368]	@ (80036e4 <recorder::StateMachine(bool)+0x360>)
 8003574:	f89e e020 	ldrb.w	lr, [lr, #32]
 8003578:	7033      	strb	r3, [r6, #0]
 800357a:	680b      	ldr	r3, [r1, #0]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 800357c:	f894 9002 	ldrb.w	r9, [r4, #2]
 8003580:	ea4e 4503 	orr.w	r5, lr, r3, lsl #16
 8003584:	7863      	ldrb	r3, [r4, #1]
        last_strum_idx = strum_idx;
 8003586:	edc8 7a00 	vstr	s15, [r8]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 800358a:	4491      	add	r9, r2
 800358c:	f894 8003 	ldrb.w	r8, [r4, #3]
 8003590:	18d4      	adds	r4, r2, r3
 8003592:	684b      	ldr	r3, [r1, #4]
 8003594:	f894 e020 	ldrb.w	lr, [r4, #32]
 8003598:	4490      	add	r8, r2
 800359a:	f899 2020 	ldrb.w	r2, [r9, #32]
 800359e:	ea4e 4e03 	orr.w	lr, lr, r3, lsl #16
 80035a2:	688b      	ldr	r3, [r1, #8]
 80035a4:	68cc      	ldr	r4, [r1, #12]
 80035a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80035aa:	f898 3020 	ldrb.w	r3, [r8, #32]
 80035ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80035b2:	4c4d      	ldr	r4, [pc, #308]	@ (80036e8 <recorder::StateMachine(bool)+0x364>)
 80035b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80035b8:	e9c1 5e00 	strd	r5, lr, [r1]
 80035bc:	7823      	ldrb	r3, [r4, #0]
        if (cur == STATE_STARTUP)
 80035be:	2b0b      	cmp	r3, #11
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	f000 8115 	beq.w	80037f0 <recorder::StateMachine(bool)+0x46c>
        else if (cur == STATE_ENDING)
 80035c6:	2a0c      	cmp	r2, #12
 80035c8:	f000 813a 	beq.w	8003840 <recorder::StateMachine(bool)+0x4bc>
        if (standby)
 80035cc:	f1bc 0f00 	cmp.w	ip, #0
 80035d0:	d10e      	bne.n	80035f0 <recorder::StateMachine(bool)+0x26c>
        if (cur == STATE_IDLE)
 80035d2:	2a0a      	cmp	r2, #10
 80035d4:	d83e      	bhi.n	8003654 <recorder::StateMachine(bool)+0x2d0>
 80035d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80035da:	0310      	.short	0x0310
 80035dc:	027701b8 	.word	0x027701b8
 80035e0:	030902f1 	.word	0x030902f1
 80035e4:	045404d3 	.word	0x045404d3
 80035e8:	014704f7 	.word	0x014704f7
 80035ec:	0437033c 	.word	0x0437033c
            if (state_ == STATE_STOPPED)
 80035f0:	4d3e      	ldr	r5, [pc, #248]	@ (80036ec <recorder::StateMachine(bool)+0x368>)
 80035f2:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8116 	bne.w	8003828 <recorder::StateMachine(bool)+0x4a4>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80035fc:	493c      	ldr	r1, [pc, #240]	@ (80036f0 <recorder::StateMachine(bool)+0x36c>)
 80035fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8003602:	2200      	movs	r2, #0
 8003604:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <recorder::StateMachine(bool)+0x370>)
 8003606:	6188      	str	r0, [r1, #24]
                dac_.Start();
 8003608:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 800360c:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8003610:	2201      	movs	r2, #1
 8003612:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 8003616:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800361a:	619a      	str	r2, [r3, #24]
                dac_.Start();
 800361c:	f003 f908 	bl	8006830 <recorder::Dac::Start()>
                adc_.Start();
 8003620:	1d28      	adds	r0, r5, #4
 8003622:	f002 fe05 	bl	8006230 <recorder::Adc::Start()>
                StartTimer();
 8003626:	4628      	mov	r0, r5
 8003628:	f003 f8ee 	bl	8006808 <recorder::Analog::StartTimer()>
            is_active_ = true;
 800362c:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <recorder::StateMachine(bool)+0x374>)
 800362e:	2001      	movs	r0, #1
            current_note_ = 0;
 8003630:	2200      	movs	r2, #0
        phase_inc_ = freq * kPhaseFactor;
 8003632:	4932      	ldr	r1, [pc, #200]	@ (80036fc <recorder::StateMachine(bool)+0x378>)
            is_active_ = true;
 8003634:	8198      	strh	r0, [r3, #12]
        printf("State: ");
 8003636:	4832      	ldr	r0, [pc, #200]	@ (8003700 <recorder::StateMachine(bool)+0x37c>)
 8003638:	6059      	str	r1, [r3, #4]
            note_timer_ = 0;
 800363a:	e9c3 2204 	strd	r2, r2, [r3, #16]
 800363e:	f007 fc03 	bl	800ae48 <iprintf>
            printf("ENDING\n");
 8003642:	4830      	ldr	r0, [pc, #192]	@ (8003704 <recorder::StateMachine(bool)+0x380>)
 8003644:	f007 fc68 	bl	800af18 <puts>
	__atomic_store(std::__addressof(_M_i),
 8003648:	230c      	movs	r3, #12
 800364a:	f3bf 8f5b 	dmb	ish
 800364e:	7023      	strb	r3, [r4, #0]
 8003650:	f3bf 8f5b 	dmb	ish
    }
 8003654:	b005      	add	sp, #20
 8003656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (in != state_)
 800365a:	f893 00ed 	ldrb.w	r0, [r3, #237]	@ 0xed
 800365e:	4285      	cmp	r5, r0
 8003660:	f43f af61 	beq.w	8003526 <recorder::StateMachine(bool)+0x1a2>
            if (++count_ == duration_)
 8003664:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
 8003668:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800366c:	3401      	adds	r4, #1
 800366e:	42a1      	cmp	r1, r4
 8003670:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
 8003674:	f47f af57 	bne.w	8003526 <recorder::StateMachine(bool)+0x1a2>
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8003678:	4628      	mov	r0, r5
                state_ = in;
 800367a:	f883 50ed 	strb.w	r5, [r3, #237]	@ 0xed
 800367e:	e752      	b.n	8003526 <recorder::StateMachine(bool)+0x1a2>
        else if (in != state_)
 8003680:	f893 00e1 	ldrb.w	r0, [r3, #225]	@ 0xe1
 8003684:	4281      	cmp	r1, r0
 8003686:	f43f af37 	beq.w	80034f8 <recorder::StateMachine(bool)+0x174>
            if (++count_ == duration_)
 800368a:	f8d3 50dc 	ldr.w	r5, [r3, #220]	@ 0xdc
 800368e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
 8003692:	3501      	adds	r5, #1
 8003694:	42a5      	cmp	r5, r4
 8003696:	f8c3 50dc 	str.w	r5, [r3, #220]	@ 0xdc
 800369a:	f47f af2d 	bne.w	80034f8 <recorder::StateMachine(bool)+0x174>
 800369e:	4608      	mov	r0, r1
                state_ = in;
 80036a0:	f883 10e1 	strb.w	r1, [r3, #225]	@ 0xe1
 80036a4:	e728      	b.n	80034f8 <recorder::StateMachine(bool)+0x174>
        else if (in != state_)
 80036a6:	f893 60d5 	ldrb.w	r6, [r3, #213]	@ 0xd5
 80036aa:	42b1      	cmp	r1, r6
 80036ac:	f43f af0d 	beq.w	80034ca <recorder::StateMachine(bool)+0x146>
            if (++count_ == duration_)
 80036b0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 80036b4:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 80036b8:	3001      	adds	r0, #1
 80036ba:	42a0      	cmp	r0, r4
 80036bc:	f8c3 00d0 	str.w	r0, [r3, #208]	@ 0xd0
 80036c0:	f47f af03 	bne.w	80034ca <recorder::StateMachine(bool)+0x146>
 80036c4:	460e      	mov	r6, r1
                state_ = in;
 80036c6:	f883 10d5 	strb.w	r1, [r3, #213]	@ 0xd5
 80036ca:	e6fe      	b.n	80034ca <recorder::StateMachine(bool)+0x146>
 80036cc:	20010b38 	.word	0x20010b38
 80036d0:	20000554 	.word	0x20000554
 80036d4:	40bfae14 	.word	0x40bfae14
 80036d8:	200108e0 	.word	0x200108e0
 80036dc:	20000024 	.word	0x20000024
 80036e0:	200108f0 	.word	0x200108f0
 80036e4:	20000420 	.word	0x20000420
 80036e8:	200108ec 	.word	0x200108ec
 80036ec:	20010c40 	.word	0x20010c40
 80036f0:	58021800 	.word	0x58021800
 80036f4:	58020400 	.word	0x58020400
 80036f8:	20010910 	.word	0x20010910
 80036fc:	3e6c2ad7 	.word	0x3e6c2ad7
 8003700:	0800bf20 	.word	0x0800bf20
 8003704:	0800bf8c 	.word	0x0800bf8c
 8003708:	20000424 	.word	0x20000424
        else if (in != state_)
 800370c:	f893 70c9 	ldrb.w	r7, [r3, #201]	@ 0xc9
 8003710:	42b9      	cmp	r1, r7
 8003712:	f43f aec3 	beq.w	800349c <recorder::StateMachine(bool)+0x118>
            if (++count_ == duration_)
 8003716:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800371a:	f8d3 40c0 	ldr.w	r4, [r3, #192]	@ 0xc0
 800371e:	3001      	adds	r0, #1
 8003720:	42a0      	cmp	r0, r4
 8003722:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
 8003726:	f47f aeb9 	bne.w	800349c <recorder::StateMachine(bool)+0x118>
 800372a:	460f      	mov	r7, r1
                state_ = in;
 800372c:	f883 10c9 	strb.w	r1, [r3, #201]	@ 0xc9
 8003730:	e6b4      	b.n	800349c <recorder::StateMachine(bool)+0x118>
        else if (in != state_)
 8003732:	f893 00bd 	ldrb.w	r0, [r3, #189]	@ 0xbd
 8003736:	4281      	cmp	r1, r0
 8003738:	f43f ae99 	beq.w	800346e <recorder::StateMachine(bool)+0xea>
            if (++count_ == duration_)
 800373c:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8003740:	f8d3 50b4 	ldr.w	r5, [r3, #180]	@ 0xb4
 8003744:	3401      	adds	r4, #1
 8003746:	42ac      	cmp	r4, r5
 8003748:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
 800374c:	f47f ae8f 	bne.w	800346e <recorder::StateMachine(bool)+0xea>
 8003750:	4608      	mov	r0, r1
                state_ = in;
 8003752:	f883 10bd 	strb.w	r1, [r3, #189]	@ 0xbd
 8003756:	e68a      	b.n	800346e <recorder::StateMachine(bool)+0xea>
        else if (in != state_)
 8003758:	f893 00b1 	ldrb.w	r0, [r3, #177]	@ 0xb1
 800375c:	4281      	cmp	r1, r0
 800375e:	f43f ae6f 	beq.w	8003440 <recorder::StateMachine(bool)+0xbc>
            if (++count_ == duration_)
 8003762:	f8d3 40ac 	ldr.w	r4, [r3, #172]	@ 0xac
 8003766:	f8d3 50a8 	ldr.w	r5, [r3, #168]	@ 0xa8
 800376a:	3401      	adds	r4, #1
 800376c:	42ac      	cmp	r4, r5
 800376e:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
 8003772:	f47f ae65 	bne.w	8003440 <recorder::StateMachine(bool)+0xbc>
 8003776:	4608      	mov	r0, r1
                state_ = in;
 8003778:	f883 10b1 	strb.w	r1, [r3, #177]	@ 0xb1
 800377c:	e660      	b.n	8003440 <recorder::StateMachine(bool)+0xbc>
        else if (in != state_)
 800377e:	f893 00a5 	ldrb.w	r0, [r3, #165]	@ 0xa5
 8003782:	4281      	cmp	r1, r0
 8003784:	f43f ae45 	beq.w	8003412 <recorder::StateMachine(bool)+0x8e>
            if (++count_ == duration_)
 8003788:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 800378c:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 8003790:	3401      	adds	r4, #1
 8003792:	42ac      	cmp	r4, r5
 8003794:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
 8003798:	f47f ae3b 	bne.w	8003412 <recorder::StateMachine(bool)+0x8e>
 800379c:	4608      	mov	r0, r1
                state_ = in;
 800379e:	f883 10a5 	strb.w	r1, [r3, #165]	@ 0xa5
 80037a2:	e636      	b.n	8003412 <recorder::StateMachine(bool)+0x8e>
        else if (in != state_)
 80037a4:	f893 0099 	ldrb.w	r0, [r3, #153]	@ 0x99
 80037a8:	4281      	cmp	r1, r0
 80037aa:	f43f ae1b 	beq.w	80033e4 <recorder::StateMachine(bool)+0x60>
            if (++count_ == duration_)
 80037ae:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 80037b2:	f8d3 5090 	ldr.w	r5, [r3, #144]	@ 0x90
 80037b6:	3401      	adds	r4, #1
 80037b8:	42ac      	cmp	r4, r5
 80037ba:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
 80037be:	f47f ae11 	bne.w	80033e4 <recorder::StateMachine(bool)+0x60>
 80037c2:	4608      	mov	r0, r1
                state_ = in;
 80037c4:	f883 1099 	strb.w	r1, [r3, #153]	@ 0x99
 80037c8:	e60c      	b.n	80033e4 <recorder::StateMachine(bool)+0x60>
        else if (in != state_)
 80037ca:	f893 408d 	ldrb.w	r4, [r3, #141]	@ 0x8d
 80037ce:	42a0      	cmp	r0, r4
 80037d0:	f43f adf0 	beq.w	80033b4 <recorder::StateMachine(bool)+0x30>
            if (++count_ == duration_)
 80037d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037d8:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80037dc:	3201      	adds	r2, #1
 80037de:	428a      	cmp	r2, r1
 80037e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80037e4:	f47f ade6 	bne.w	80033b4 <recorder::StateMachine(bool)+0x30>
 80037e8:	4604      	mov	r4, r0
                state_ = in;
 80037ea:	f883 008d 	strb.w	r0, [r3, #141]	@ 0x8d
 80037ee:	e5e1      	b.n	80033b4 <recorder::StateMachine(bool)+0x30>
            return is_active_;
 80037f0:	4b9e      	ldr	r3, [pc, #632]	@ (8003a6c <recorder::StateMachine(bool)+0x6e8>)
            if (!jingle_engine_.JingleActive())
 80037f2:	7b1d      	ldrb	r5, [r3, #12]
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	f47f af2d 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 80037fa:	4b9d      	ldr	r3, [pc, #628]	@ (8003a70 <recorder::StateMachine(bool)+0x6ec>)
 80037fc:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8003800:	4a9c      	ldr	r2, [pc, #624]	@ (8003a74 <recorder::StateMachine(bool)+0x6f0>)
 8003802:	6199      	str	r1, [r3, #24]
 8003804:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
                synth_inactive_ = true;   // Set the inactive flag
 8003808:	4b9b      	ldr	r3, [pc, #620]	@ (8003a78 <recorder::StateMachine(bool)+0x6f4>)
 800380a:	6191      	str	r1, [r2, #24]
 800380c:	2201      	movs	r2, #1
        printf("State: ");
 800380e:	489b      	ldr	r0, [pc, #620]	@ (8003a7c <recorder::StateMachine(bool)+0x6f8>)
                synth_inactive_ = true;   // Set the inactive flag
 8003810:	701a      	strb	r2, [r3, #0]
        printf("State: ");
 8003812:	f007 fb19 	bl	800ae48 <iprintf>
            printf("IDLE\n");
 8003816:	489a      	ldr	r0, [pc, #616]	@ (8003a80 <recorder::StateMachine(bool)+0x6fc>)
 8003818:	f007 fb7e 	bl	800af18 <puts>
 800381c:	f3bf 8f5b 	dmb	ish
 8003820:	7025      	strb	r5, [r4, #0]
 8003822:	f3bf 8f5b 	dmb	ish
    }
 8003826:	e715      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8003828:	2b02      	cmp	r3, #2
 800382a:	f47f aeff 	bne.w	800362c <recorder::StateMachine(bool)+0x2a8>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 800382e:	4991      	ldr	r1, [pc, #580]	@ (8003a74 <recorder::StateMachine(bool)+0x6f0>)
 8003830:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003834:	4b8e      	ldr	r3, [pc, #568]	@ (8003a70 <recorder::StateMachine(bool)+0x6ec>)
 8003836:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800383a:	6188      	str	r0, [r1, #24]
 800383c:	619a      	str	r2, [r3, #24]
    }
 800383e:	e6f5      	b.n	800362c <recorder::StateMachine(bool)+0x2a8>
 8003840:	4b8a      	ldr	r3, [pc, #552]	@ (8003a6c <recorder::StateMachine(bool)+0x6e8>)
            if (!jingle_engine_.JingleActive())
 8003842:	7b1b      	ldrb	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f47f af05 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        printf("State: ");
 800384a:	488c      	ldr	r0, [pc, #560]	@ (8003a7c <recorder::StateMachine(bool)+0x6f8>)
 800384c:	f007 fafc 	bl	800ae48 <iprintf>
            printf("STANDBY\n");
 8003850:	488c      	ldr	r0, [pc, #560]	@ (8003a84 <recorder::StateMachine(bool)+0x700>)
 8003852:	f007 fb61 	bl	800af18 <puts>
 8003856:	230a      	movs	r3, #10
 8003858:	f3bf 8f5b 	dmb	ish
 800385c:	7023      	strb	r3, [r4, #0]
 800385e:	f3bf 8f5b 	dmb	ish
    }
 8003862:	b005      	add	sp, #20
 8003864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (state_.length == 0)
 8003868:	4e87      	ldr	r6, [pc, #540]	@ (8003a88 <recorder::StateMachine(bool)+0x704>)
 800386a:	6875      	ldr	r5, [r6, #4]
 800386c:	2d00      	cmp	r5, #0
 800386e:	f000 83d8 	beq.w	8004022 <recorder::StateMachine(bool)+0xc9e>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003872:	4a86      	ldr	r2, [pc, #536]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 8003874:	6893      	ldr	r3, [r2, #8]
 8003876:	f013 0320 	ands.w	r3, r3, #32
 800387a:	d1fb      	bne.n	8003874 <recorder::StateMachine(bool)+0x4f0>
        QUADSPI->DLR = 0;
 800387c:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 800387e:	4b84      	ldr	r3, [pc, #528]	@ (8003a90 <recorder::StateMachine(bool)+0x70c>)
 8003880:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003882:	4a82      	ldr	r2, [pc, #520]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 8003884:	6893      	ldr	r3, [r2, #8]
 8003886:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 800388a:	d0fb      	beq.n	8003884 <recorder::StateMachine(bool)+0x500>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 800388c:	f892 1020 	ldrb.w	r1, [r2, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003890:	4a7e      	ldr	r2, [pc, #504]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003892:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003894:	6893      	ldr	r3, [r2, #8]
 8003896:	079b      	lsls	r3, r3, #30
 8003898:	d5fc      	bpl.n	8003894 <recorder::StateMachine(bool)+0x510>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800389a:	2302      	movs	r3, #2
 800389c:	60d3      	str	r3, [r2, #12]
        if (write_in_progress())
 800389e:	07ca      	lsls	r2, r1, #31
 80038a0:	d43e      	bmi.n	8003920 <recorder::StateMachine(bool)+0x59c>
        uint32_t offset_in_page = state_.location % kPageSize;
 80038a2:	f8d6 c000 	ldr.w	ip, [r6]
        PageProgram(state_.bytes, state_.location, len, false);
 80038a6:	68b1      	ldr	r1, [r6, #8]
        uint32_t offset_in_page = state_.location % kPageSize;
 80038a8:	fa5f f38c 	uxtb.w	r3, ip
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80038ac:	4a77      	ldr	r2, [pc, #476]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
        uint32_t len = std::min(state_.length, kPageSize - offset_in_page);
 80038ae:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80038b2:	429d      	cmp	r5, r3
 80038b4:	bf28      	it	cs
 80038b6:	461d      	movcs	r5, r3
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80038b8:	6893      	ldr	r3, [r2, #8]
 80038ba:	069b      	lsls	r3, r3, #26
 80038bc:	d4fc      	bmi.n	80038b8 <recorder::StateMachine(bool)+0x534>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80038be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80038c2:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80038c4:	4a71      	ldr	r2, [pc, #452]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 80038c6:	6893      	ldr	r3, [r2, #8]
 80038c8:	079b      	lsls	r3, r3, #30
 80038ca:	d5fc      	bpl.n	80038c6 <recorder::StateMachine(bool)+0x542>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80038cc:	2302      	movs	r3, #2
 80038ce:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80038d0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 80038d2:	6893      	ldr	r3, [r2, #8]
 80038d4:	069b      	lsls	r3, r3, #26
 80038d6:	d4fc      	bmi.n	80038d2 <recorder::StateMachine(bool)+0x54e>
        QUADSPI->DLR = count - 1;
 80038d8:	1e6b      	subs	r3, r5, #1
 80038da:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 80038dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a94 <recorder::StateMachine(bool)+0x710>)
 80038de:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 80038e0:	f8c2 c018 	str.w	ip, [r2, #24]
        while (count--)
 80038e4:	eb01 0c05 	add.w	ip, r1, r5
            while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 80038e8:	4a68      	ldr	r2, [pc, #416]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 80038ea:	6893      	ldr	r3, [r2, #8]
 80038ec:	075b      	lsls	r3, r3, #29
 80038ee:	d5fc      	bpl.n	80038ea <recorder::StateMachine(bool)+0x566>
            DataWrite8(*buffer++);
 80038f0:	f811 3b01 	ldrb.w	r3, [r1], #1
        while (count--)
 80038f4:	458c      	cmp	ip, r1
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 80038f6:	f882 3020 	strb.w	r3, [r2, #32]
        while (count--)
 80038fa:	d1f6      	bne.n	80038ea <recorder::StateMachine(bool)+0x566>
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80038fc:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <recorder::StateMachine(bool)+0x708>)
 80038fe:	6893      	ldr	r3, [r2, #8]
 8003900:	079b      	lsls	r3, r3, #30
 8003902:	d5fc      	bpl.n	80038fe <recorder::StateMachine(bool)+0x57a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003904:	2302      	movs	r3, #2
 8003906:	60d3      	str	r3, [r2, #12]
        state_.bytes += len;
 8003908:	68b3      	ldr	r3, [r6, #8]
 800390a:	442b      	add	r3, r5
 800390c:	60b3      	str	r3, [r6, #8]
        state_.location += len;
 800390e:	6833      	ldr	r3, [r6, #0]
 8003910:	442b      	add	r3, r5
 8003912:	6033      	str	r3, [r6, #0]
        state_.length -= len;
 8003914:	6873      	ldr	r3, [r6, #4]
 8003916:	1b5b      	subs	r3, r3, r5
 8003918:	6073      	str	r3, [r6, #4]
        return flash_.BeginWrite(address, link.buffer, write_size);
    }

    bool FinishWrite(void)
    {
        if (flash_.FinishWrite())
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8381 	beq.w	8004022 <recorder::StateMachine(bool)+0xc9e>
            else if (record || play_button_.is_high())
 8003920:	b91f      	cbnz	r7, 800392a <recorder::StateMachine(bool)+0x5a6>
        return history_ & 1;
 8003922:	6803      	ldr	r3, [r0, #0]
            else if (record || play_button_.is_high())
 8003924:	07d8      	lsls	r0, r3, #31
 8003926:	f57f ae95 	bpl.w	8003654 <recorder::StateMachine(bool)+0x2d0>
                printf("Save aborted\n");
 800392a:	485b      	ldr	r0, [pc, #364]	@ (8003a98 <recorder::StateMachine(bool)+0x714>)
 800392c:	f007 faf4 	bl	800af18 <puts>
        printf("State: ");
 8003930:	4852      	ldr	r0, [pc, #328]	@ (8003a7c <recorder::StateMachine(bool)+0x6f8>)
 8003932:	f007 fa89 	bl	800ae48 <iprintf>
            printf("IDLE\n");
 8003936:	4852      	ldr	r0, [pc, #328]	@ (8003a80 <recorder::StateMachine(bool)+0x6fc>)
 8003938:	f007 faee 	bl	800af18 <puts>
 800393c:	2300      	movs	r3, #0
 800393e:	f3bf 8f5b 	dmb	ish
 8003942:	7023      	strb	r3, [r4, #0]
 8003944:	f3bf 8f5b 	dmb	ish
    }
 8003948:	e684      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
 800394a:	4b54      	ldr	r3, [pc, #336]	@ (8003a9c <recorder::StateMachine(bool)+0x718>)
 800394c:	681b      	ldr	r3, [r3, #0]
                button_3_.is_high() || button_4_.is_high() || strum_idx_changed)
 800394e:	07da      	lsls	r2, r3, #31
 8003950:	d40d      	bmi.n	800396e <recorder::StateMachine(bool)+0x5ea>
 8003952:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <recorder::StateMachine(bool)+0x71c>)
 8003954:	681b      	ldr	r3, [r3, #0]
            if (button_1_.is_high() || button_2_.is_high() || 
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d409      	bmi.n	800396e <recorder::StateMachine(bool)+0x5ea>
 800395a:	4b52      	ldr	r3, [pc, #328]	@ (8003aa4 <recorder::StateMachine(bool)+0x720>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	07df      	lsls	r7, r3, #31
 8003960:	d405      	bmi.n	800396e <recorder::StateMachine(bool)+0x5ea>
 8003962:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <recorder::StateMachine(bool)+0x724>)
 8003964:	681b      	ldr	r3, [r3, #0]
                button_3_.is_high() || button_4_.is_high() || strum_idx_changed)
 8003966:	07dd      	lsls	r5, r3, #31
 8003968:	d401      	bmi.n	800396e <recorder::StateMachine(bool)+0x5ea>
 800396a:	7833      	ldrb	r3, [r6, #0]
 800396c:	b113      	cbz	r3, 8003974 <recorder::StateMachine(bool)+0x5f0>
                idle_timeout_ = 0;
 800396e:	4b4f      	ldr	r3, [pc, #316]	@ (8003aac <recorder::StateMachine(bool)+0x728>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
            if (synth_inactive_)
 8003974:	4d40      	ldr	r5, [pc, #256]	@ (8003a78 <recorder::StateMachine(bool)+0x6f4>)
 8003976:	782b      	ldrb	r3, [r5, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d043      	beq.n	8003a04 <recorder::StateMachine(bool)+0x680>
 800397c:	680b      	ldr	r3, [r1, #0]
                    if (buttons[i].is_high())
 800397e:	07da      	lsls	r2, r3, #31
 8003980:	f100 8396 	bmi.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
 8003984:	684b      	ldr	r3, [r1, #4]
 8003986:	07db      	lsls	r3, r3, #31
 8003988:	f100 8392 	bmi.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
 800398c:	688b      	ldr	r3, [r1, #8]
 800398e:	07df      	lsls	r7, r3, #31
 8003990:	f100 838e 	bmi.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
 8003994:	68cb      	ldr	r3, [r1, #12]
 8003996:	07d9      	lsls	r1, r3, #31
 8003998:	f100 838a 	bmi.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
                if (anyKey || strum_idx_changed || play_button_.is_high())
 800399c:	7833      	ldrb	r3, [r6, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 8386 	bne.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	07da      	lsls	r2, r3, #31
 80039a8:	f100 8382 	bmi.w	80040b0 <recorder::StateMachine(bool)+0xd2c>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 80039ac:	4a3f      	ldr	r2, [pc, #252]	@ (8003aac <recorder::StateMachine(bool)+0x728>)
                else if (kEnableIdleStandby &&
 80039ae:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8003ab0 <recorder::StateMachine(bool)+0x72c>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	ee07 3a10 	vmov	s14, r3
                else if (kEnableIdleStandby &&
 80039ba:	6013      	str	r3, [r2, #0]
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 80039bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                else if (kEnableIdleStandby &&
 80039c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	dd1c      	ble.n	8003a04 <recorder::StateMachine(bool)+0x680>
            if (state_ == STATE_STOPPED)
 80039ca:	483a      	ldr	r0, [pc, #232]	@ (8003ab4 <recorder::StateMachine(bool)+0x730>)
 80039cc:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 8600 	bne.w	80045d6 <recorder::StateMachine(bool)+0x1252>
 80039d6:	2101      	movs	r1, #1
 80039d8:	f7fc febc 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
            is_active_ = true;
 80039dc:	4b23      	ldr	r3, [pc, #140]	@ (8003a6c <recorder::StateMachine(bool)+0x6e8>)
            current_note_ = 0;
 80039de:	2200      	movs	r2, #0
            is_active_ = true;
 80039e0:	2101      	movs	r1, #1
        printf("State: ");
 80039e2:	4826      	ldr	r0, [pc, #152]	@ (8003a7c <recorder::StateMachine(bool)+0x6f8>)
            note_timer_ = 0;
 80039e4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80039e8:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <recorder::StateMachine(bool)+0x734>)
            is_active_ = true;
 80039ea:	8199      	strh	r1, [r3, #12]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	f007 fa2b 	bl	800ae48 <iprintf>
            printf("ENDING\n");
 80039f2:	4832      	ldr	r0, [pc, #200]	@ (8003abc <recorder::StateMachine(bool)+0x738>)
 80039f4:	f007 fa90 	bl	800af18 <puts>
 80039f8:	230c      	movs	r3, #12
 80039fa:	f3bf 8f5b 	dmb	ish
 80039fe:	7023      	strb	r3, [r4, #0]
 8003a00:	f3bf 8f5b 	dmb	ish
            if (env_state_[v] != ENV_IDLE) return true;
 8003a04:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac0 <recorder::StateMachine(bool)+0x73c>)
            if (strum_state_[s] != ENV_IDLE) return true;
 8003a06:	f892 006c 	ldrb.w	r0, [r2, #108]	@ 0x6c
 8003a0a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8003a0e:	f892 106e 	ldrb.w	r1, [r2, #110]	@ 0x6e
 8003a12:	4303      	orrs	r3, r0
 8003a14:	f892 006f 	ldrb.w	r0, [r2, #111]	@ 0x6f
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	f892 10fc 	ldrb.w	r1, [r2, #252]	@ 0xfc
 8003a1e:	4303      	orrs	r3, r0
 8003a20:	f892 00fd 	ldrb.w	r0, [r2, #253]	@ 0xfd
 8003a24:	430b      	orrs	r3, r1
 8003a26:	f892 10fe 	ldrb.w	r1, [r2, #254]	@ 0xfe
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	f892 00ff 	ldrb.w	r0, [r2, #255]	@ 0xff
 8003a30:	430b      	orrs	r3, r1
 8003a32:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8003a36:	f892 2101 	ldrb.w	r2, [r2, #257]	@ 0x101
 8003a3a:	4303      	orrs	r3, r0
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f040 8326 	bne.w	8004090 <recorder::StateMachine(bool)+0xd0c>
                if (++synthReleaseCounter >= 10)
 8003a44:	491f      	ldr	r1, [pc, #124]	@ (8003ac4 <recorder::StateMachine(bool)+0x740>)
 8003a46:	680a      	ldr	r2, [r1, #0]
 8003a48:	3201      	adds	r2, #1
 8003a4a:	2a09      	cmp	r2, #9
 8003a4c:	600a      	str	r2, [r1, #0]
 8003a4e:	f67f ae01 	bls.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8003a52:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <recorder::StateMachine(bool)+0x6ec>)
 8003a54:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003a58:	6190      	str	r0, [r2, #24]
 8003a5a:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8003a5e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003a62:	6190      	str	r0, [r2, #24]
                    synth_inactive_ = true;
 8003a64:	2201      	movs	r2, #1
                    synthReleaseCounter = 0;
 8003a66:	600b      	str	r3, [r1, #0]
                    synth_inactive_ = true;
 8003a68:	702a      	strb	r2, [r5, #0]
                    synthReleaseCounter = 0;
 8003a6a:	e5f3      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
 8003a6c:	20010910 	.word	0x20010910
 8003a70:	58020400 	.word	0x58020400
 8003a74:	58021800 	.word	0x58021800
 8003a78:	20010b34 	.word	0x20010b34
 8003a7c:	0800bf20 	.word	0x0800bf20
 8003a80:	0800bf28 	.word	0x0800bf28
 8003a84:	0800bf7c 	.word	0x0800bf7c
 8003a88:	2001088c 	.word	0x2001088c
 8003a8c:	52005000 	.word	0x52005000
 8003a90:	05000105 	.word	0x05000105
 8003a94:	01002502 	.word	0x01002502
 8003a98:	0800bfa4 	.word	0x0800bfa4
 8003a9c:	2001090c 	.word	0x2001090c
 8003aa0:	20010908 	.word	0x20010908
 8003aa4:	20010904 	.word	0x20010904
 8003aa8:	20010900 	.word	0x20010900
 8003aac:	200108e8 	.word	0x200108e8
 8003ab0:	46ea6000 	.word	0x46ea6000
 8003ab4:	20010c40 	.word	0x20010c40
 8003ab8:	3e6c2ad7 	.word	0x3e6c2ad7
 8003abc:	0800bf8c 	.word	0x0800bf8c
 8003ac0:	20010928 	.word	0x20010928
 8003ac4:	2000041c 	.word	0x2000041c
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <recorder::StateMachine(bool)+0x8fc>)
 8003aca:	2204      	movs	r2, #4
 8003acc:	619a      	str	r2, [r3, #24]
            if (!record)
 8003ace:	2f00      	cmp	r7, #0
 8003ad0:	f47f adc0 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>

        void Stop(void)
        {
            if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8003ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8003c84 <recorder::StateMachine(bool)+0x900>)
 8003ad6:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
 8003ada:	2a02      	cmp	r2, #2
 8003adc:	d102      	bne.n	8003ae4 <recorder::StateMachine(bool)+0x760>
            {
                cue_stop_ = true;
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
        printf("State: ");
 8003ae4:	4868      	ldr	r0, [pc, #416]	@ (8003c88 <recorder::StateMachine(bool)+0x904>)
 8003ae6:	f04f 0900 	mov.w	r9, #0
        if (buffer_index_ > min_length)
 8003aea:	4e68      	ldr	r6, [pc, #416]	@ (8003c8c <recorder::StateMachine(bool)+0x908>)
 8003aec:	f007 f9ac 	bl	800ae48 <iprintf>
            printf("IDLE\n");
 8003af0:	4867      	ldr	r0, [pc, #412]	@ (8003c90 <recorder::StateMachine(bool)+0x90c>)
 8003af2:	f007 fa11 	bl	800af18 <puts>
 8003af6:	f3bf 8f5b 	dmb	ish
 8003afa:	f884 9000 	strb.w	r9, [r4]
 8003afe:	f3bf 8f5b 	dmb	ish
 8003b02:	6932      	ldr	r2, [r6, #16]
 8003b04:	2aa0      	cmp	r2, #160	@ 0xa0
 8003b06:	f67f ada5 	bls.w	8003654 <recorder::StateMachine(bool)+0x2d0>
            buffer_index_ -= min_length;
 8003b0a:	3aa0      	subs	r2, #160	@ 0xa0
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
  WRITE_REG(CRCx->INIT, InitCrc);
 8003b0c:	4d61      	ldr	r5, [pc, #388]	@ (8003c94 <recorder::StateMachine(bool)+0x910>)
            uint32_t address = audio_info_.address + audio_info_.size;
 8003b0e:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
            buffer_index_ -= min_length;
 8003b12:	6132      	str	r2, [r6, #16]
            uint32_t address = audio_info_.address + audio_info_.size;
 8003b14:	185c      	adds	r4, r3, r1
            uint32_t size = buffer_index_ * sizeof(T);
 8003b16:	0053      	lsls	r3, r2, #1
            address += granularity - 1;
 8003b18:	f604 74ff 	addw	r4, r4, #4095	@ 0xfff
 8003b1c:	f36f 040b 	bfc	r4, #0, #12
            if (address + size > Flash::kSize)
 8003b20:	eb04 0242 	add.w	r2, r4, r2, lsl #1
                address = kAudioBufferAddress;
 8003b24:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b2c:	612a      	str	r2, [r5, #16]
 8003b2e:	bf88      	it	hi
 8003b30:	f44f 5400 	movhi.w	r4, #8192	@ 0x2000
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003b34:	68aa      	ldr	r2, [r5, #8]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	60aa      	str	r2, [r5, #8]
    protected:
        const Link* chain_;
        uint32_t num_ = 0;
    };

    iter begin() {return iter(chain_, 0);}
 8003b3c:	e9d6 7b0f 	ldrd	r7, fp, [r6, #60]	@ 0x3c
            for (auto link : buffer_chain_)
 8003b40:	b39f      	cbz	r7, 8003baa <recorder::StateMachine(bool)+0x826>
 8003b42:	9603      	str	r6, [sp, #12]
 8003b44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003b48:	464e      	mov	r6, r9
 8003b4a:	f10b 0804 	add.w	r8, fp, #4
 8003b4e:	4699      	mov	r9, r3
 8003b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b54:	f858 a026 	ldr.w	sl, [r8, r6, lsl #2]
 8003b58:	f85b 4026 	ldr.w	r4, [fp, r6, lsl #2]
                system::ReloadWatchdog();
 8003b5c:	f003 fc5c 	bl	8007418 <recorder::system::ReloadWatchdog()>
            return length * sizeof(T);
 8003b60:	ea4f 0c4a 	mov.w	ip, sl, lsl #1
 8003b64:	45cc      	cmp	ip, r9
 8003b66:	bf28      	it	cs
 8003b68:	46cc      	movcs	ip, r9
        LL_CRC_ResetCRCCalculationUnit(CRC);
    }

    uint32_t Process(const uint8_t* data, uint32_t size)
    {
        while (size >= 4)
 8003b6a:	f1bc 0f03 	cmp.w	ip, #3
 8003b6e:	f240 83b4 	bls.w	80042da <recorder::StateMachine(bool)+0xf56>
 8003b72:	f1ac 0204 	sub.w	r2, ip, #4
 8003b76:	f022 0203 	bic.w	r2, r2, #3
 8003b7a:	3204      	adds	r2, #4
 8003b7c:	4422      	add	r2, r4
        {
            auto word = *reinterpret_cast<const uint32_t*>(data);
 8003b7e:	f854 3b04 	ldr.w	r3, [r4], #4
        while (size >= 4)
 8003b82:	42a2      	cmp	r2, r4
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	d1fa      	bne.n	8003b7e <recorder::StateMachine(bool)+0x7fa>
 8003b88:	f00c 0303 	and.w	r3, ip, #3
            LL_CRC_FeedData32(CRC, word);
            size -= 4;
            data += 4;
        }

        while (size--)
 8003b8c:	b11b      	cbz	r3, 8003b96 <recorder::StateMachine(bool)+0x812>
        {
            LL_CRC_FeedData8(CRC, *data++);
 8003b8e:	7813      	ldrb	r3, [r2, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8003b90:	702b      	strb	r3, [r5, #0]
 8003b92:	7853      	ldrb	r3, [r2, #1]
 8003b94:	702b      	strb	r3, [r5, #0]
                if (total_size == 0)
 8003b96:	ebb9 090c 	subs.w	r9, r9, ip
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	d002      	beq.n	8003ba4 <recorder::StateMachine(bool)+0x820>
            for (auto link : buffer_chain_)
 8003b9e:	3603      	adds	r6, #3
 8003ba0:	42be      	cmp	r6, r7
 8003ba2:	d1d7      	bne.n	8003b54 <recorder::StateMachine(bool)+0x7d0>
 8003ba4:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8003ba8:	9e03      	ldr	r6, [sp, #12]
 8003baa:	4a3a      	ldr	r2, [pc, #232]	@ (8003c94 <recorder::StateMachine(bool)+0x910>)
            dirty_ = true;
 8003bac:	2101      	movs	r1, #1
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	7371      	strb	r1, [r6, #13]
        return Process(reinterpret_cast<const uint8_t*>(data), size);
    }

    uint32_t value(void) const
    {
        return ~LL_CRC_ReadData32(CRC);
 8003bb2:	43d2      	mvns	r2, r2
            audio_info_ =
 8003bb4:	e9c6 4305 	strd	r4, r3, [r6, #20]
 8003bb8:	61f2      	str	r2, [r6, #28]
 8003bba:	e54b      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
 8003bbc:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <recorder::StateMachine(bool)+0x8fc>)
 8003bbe:	2504      	movs	r5, #4
            return state_ == STATE_RUNNING;
 8003bc0:	4a30      	ldr	r2, [pc, #192]	@ (8003c84 <recorder::StateMachine(bool)+0x900>)
 8003bc2:	619d      	str	r5, [r3, #24]
 8003bc4:	f892 3160 	ldrb.w	r3, [r2, #352]	@ 0x160
            if (analog_.running())
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f000 8353 	beq.w	8004274 <recorder::StateMachine(bool)+0xef0>
            else if (analog_.stopped())
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f ad40 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        printf("State: ");
 8003bd4:	482c      	ldr	r0, [pc, #176]	@ (8003c88 <recorder::StateMachine(bool)+0x904>)
 8003bd6:	f007 f937 	bl	800ae48 <iprintf>
            printf("STOP\n");
 8003bda:	482f      	ldr	r0, [pc, #188]	@ (8003c98 <recorder::StateMachine(bool)+0x914>)
 8003bdc:	f007 f99c 	bl	800af18 <puts>
 8003be0:	f3bf 8f5b 	dmb	ish
 8003be4:	7025      	strb	r5, [r4, #0]
 8003be6:	f3bf 8f5b 	dmb	ish
    }
 8003bea:	e533      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
 8003bec:	6805      	ldr	r5, [r0, #0]
            if (play_button_.is_low())
 8003bee:	f015 0501 	ands.w	r5, r5, #1
 8003bf2:	f47f ad2f 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        printf("State: ");
 8003bf6:	4824      	ldr	r0, [pc, #144]	@ (8003c88 <recorder::StateMachine(bool)+0x904>)
 8003bf8:	e60b      	b.n	8003812 <recorder::StateMachine(bool)+0x48e>
 8003bfa:	680b      	ldr	r3, [r1, #0]
            if (buttons[0].is_high() || buttons[1].is_high() || buttons[2].is_high() || buttons[3].is_high() || strum_idx_changed)
 8003bfc:	07dd      	lsls	r5, r3, #31
 8003bfe:	f100 821a 	bmi.w	8004036 <recorder::StateMachine(bool)+0xcb2>
 8003c02:	684b      	ldr	r3, [r1, #4]
 8003c04:	07da      	lsls	r2, r3, #31
 8003c06:	f100 8216 	bmi.w	8004036 <recorder::StateMachine(bool)+0xcb2>
 8003c0a:	688b      	ldr	r3, [r1, #8]
 8003c0c:	07db      	lsls	r3, r3, #31
 8003c0e:	f100 8212 	bmi.w	8004036 <recorder::StateMachine(bool)+0xcb2>
 8003c12:	68cb      	ldr	r3, [r1, #12]
 8003c14:	07dd      	lsls	r5, r3, #31
 8003c16:	f100 820e 	bmi.w	8004036 <recorder::StateMachine(bool)+0xcb2>
 8003c1a:	7833      	ldrb	r3, [r6, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 820a 	bne.w	8004036 <recorder::StateMachine(bool)+0xcb2>
            else if (record)
 8003c22:	2f00      	cmp	r7, #0
 8003c24:	f040 847a 	bne.w	800451c <recorder::StateMachine(bool)+0x1198>
 8003c28:	6803      	ldr	r3, [r0, #0]
            else if (play_button_.is_high()) {
 8003c2a:	07d9      	lsls	r1, r3, #31
 8003c2c:	f100 84f2 	bmi.w	8004614 <recorder::StateMachine(bool)+0x1290>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8003c30:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <recorder::StateMachine(bool)+0x918>)
            else if (kEnableIdleStandby &&
 8003c32:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003ca0 <recorder::StateMachine(bool)+0x91c>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	ee07 3a10 	vmov	s14, r3
 8003c3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 8003c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	f300 84d1 	bgt.w	80045f0 <recorder::StateMachine(bool)+0x126c>
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e500      	b.n	8003654 <recorder::StateMachine(bool)+0x2d0>
        }
    }

    bool Save(const T& data)
    {
        if (0 == std::memcmp(&block_.data, &data, sizeof(T)))
 8003c52:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8003ca4 <recorder::StateMachine(bool)+0x920>
 8003c56:	f8d8 2000 	ldr.w	r2, [r8]
 8003c5a:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	f000 8249 	beq.w	80040f6 <recorder::StateMachine(bool)+0xd72>
            return true;
        }

        int32_t next_block;

        if (active_block_n_ == -1)
 8003c64:	4e09      	ldr	r6, [pc, #36]	@ (8003c8c <recorder::StateMachine(bool)+0x908>)
 8003c66:	f8d6 9030 	ldr.w	r9, [r6, #48]	@ 0x30
 8003c6a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8003c6e:	f000 8253 	beq.w	8004118 <recorder::StateMachine(bool)+0xd94>
        return page_n * kPageSize + block_n * kBlockSize;
    }

    int32_t NextWritableBlock(int32_t current_block_n)
    {
        int32_t next_block_n = current_block_n;
 8003c72:	464f      	mov	r7, r9

        do
        {
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003c74:	f8df b030 	ldr.w	fp, [pc, #48]	@ 8003ca8 <recorder::StateMachine(bool)+0x924>
 8003c78:	f240 2a22 	movw	sl, #546	@ 0x222
 8003c7c:	e018      	b.n	8003cb0 <recorder::StateMachine(bool)+0x92c>
 8003c7e:	bf00      	nop
 8003c80:	58020800 	.word	0x58020800
 8003c84:	20010c40 	.word	0x20010c40
 8003c88:	0800bf20 	.word	0x0800bf20
 8003c8c:	2001088c 	.word	0x2001088c
 8003c90:	0800bf28 	.word	0x0800bf28
 8003c94:	58024c00 	.word	0x58024c00
 8003c98:	0800bf48 	.word	0x0800bf48
 8003c9c:	200108e8 	.word	0x200108e8
 8003ca0:	46ea6000 	.word	0x46ea6000
 8003ca4:	200108ac 	.word	0x200108ac
 8003ca8:	f00f00f1 	.word	0xf00f00f1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
            {
                break;
            }
        }
        while (next_block_n != current_block_n);
 8003cac:	45b9      	cmp	r9, r7
 8003cae:	d020      	beq.n	8003cf2 <recorder::StateMachine(bool)+0x96e>
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003cb0:	3701      	adds	r7, #1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003cb2:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003cb4:	087b      	lsrs	r3, r7, #1
 8003cb6:	fbab 2303 	umull	r2, r3, fp, r3
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003cba:	220f      	movs	r2, #15
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	fb0a 7713 	mls	r7, sl, r3, r7
        uint32_t page_n = block_n / kBlocksPerPage;
 8003cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8003f48 <recorder::StateMachine(bool)+0xbc4>)
 8003cc4:	fba3 1307 	umull	r1, r3, r3, r7
 8003cc8:	1af9      	subs	r1, r7, r3
 8003cca:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8003cce:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 8003cd0:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8003cd4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8003cd8:	1a79      	subs	r1, r7, r1
 8003cda:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003cde:	eb01 3503 	add.w	r5, r1, r3, lsl #12
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fe80 	bl	80009e8 <recorder::Flash::Writable(unsigned long, unsigned long)>
 8003ce8:	f080 0301 	eor.w	r3, r0, #1
        while (next_block_n != current_block_n);
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1dc      	bne.n	8003cac <recorder::StateMachine(bool)+0x928>
        sequence_++;
 8003cf2:	6b73      	ldr	r3, [r6, #52]	@ 0x34

        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8003cf4:	45b9      	cmp	r9, r7
        sequence_++;
 8003cf6:	f103 0301 	add.w	r3, r3, #1
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8003cfa:	f000 8241 	beq.w	8004180 <recorder::StateMachine(bool)+0xdfc>
        block_.sequence_num = sequence_;
 8003cfe:	fa1f fe83 	uxth.w	lr, r3
        if (!nvmem_.Write(location, &block_, kBlockSize))
 8003d02:	f8d6 c038 	ldr.w	ip, [r6, #56]	@ 0x38
        sequence_++;
 8003d06:	6373      	str	r3, [r6, #52]	@ 0x34
        std::memcpy(&block_.data, &data, sizeof(T));
 8003d08:	4a90      	ldr	r2, [pc, #576]	@ (8003f4c <recorder::StateMachine(bool)+0xbc8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003d0a:	f44f 7b83 	mov.w	fp, #262	@ 0x106
        active_block_n_ = next_block;
 8003d0e:	6337      	str	r7, [r6, #48]	@ 0x30
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003d10:	2702      	movs	r7, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003d12:	4b8f      	ldr	r3, [pc, #572]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
        QUADSPI->CCR =
 8003d14:	f8df 9258 	ldr.w	r9, [pc, #600]	@ 8003f70 <recorder::StateMachine(bool)+0xbec>
        QUADSPI->CCR =
 8003d18:	f8df a260 	ldr.w	sl, [pc, #608]	@ 8003f7c <recorder::StateMachine(bool)+0xbf8>
        std::memcpy(&block_.data, &data, sizeof(T));
 8003d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d1e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
            sum += bytes[i];
 8003d22:	f896 1020 	ldrb.w	r1, [r6, #32]
 8003d26:	f896 2021 	ldrb.w	r2, [r6, #33]	@ 0x21
        block_.sequence_num = sequence_;
 8003d2a:	f8a6 e02c 	strh.w	lr, [r6, #44]	@ 0x2c
            sum += bytes[i];
 8003d2e:	440a      	add	r2, r1
 8003d30:	f896 1022 	ldrb.w	r1, [r6, #34]	@ 0x22
 8003d34:	4411      	add	r1, r2
 8003d36:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
 8003d40:	4411      	add	r1, r2
 8003d42:	f896 2025 	ldrb.w	r2, [r6, #37]	@ 0x25
 8003d46:	440a      	add	r2, r1
 8003d48:	f896 1026 	ldrb.w	r1, [r6, #38]	@ 0x26
 8003d4c:	4411      	add	r1, r2
 8003d4e:	f896 2027 	ldrb.w	r2, [r6, #39]	@ 0x27
 8003d52:	440a      	add	r2, r1
 8003d54:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 8003d58:	4411      	add	r1, r2
 8003d5a:	f896 2029 	ldrb.w	r2, [r6, #41]	@ 0x29
 8003d5e:	440a      	add	r2, r1
 8003d60:	f896 102a 	ldrb.w	r1, [r6, #42]	@ 0x2a
 8003d64:	4411      	add	r1, r2
 8003d66:	f896 202b 	ldrb.w	r2, [r6, #43]	@ 0x2b
 8003d6a:	440a      	add	r2, r1
 8003d6c:	fa52 f28e 	uxtab	r2, r2, lr
 8003d70:	eb02 221e 	add.w	r2, r2, lr, lsr #8
        block_.checksum = kChecksum - Checksum(block_);
 8003d74:	43d2      	mvns	r2, r2
 8003d76:	f886 202e 	strb.w	r2, [r6, #46]	@ 0x2e
        state_ =
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	f8cc 5000 	str.w	r5, [ip]
 8003d80:	e9cc 2801 	strd	r2, r8, [ip, #4]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	f012 0220 	ands.w	r2, r2, #32
 8003d8a:	d1fb      	bne.n	8003d84 <recorder::StateMachine(bool)+0xa00>
        QUADSPI->DLR = 0;
 8003d8c:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 8003d8e:	f8c3 9014 	str.w	r9, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	f412 5f7c 	tst.w	r2, #16128	@ 0x3f00
 8003d98:	d0fb      	beq.n	8003d92 <recorder::StateMachine(bool)+0xa0e>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003d9a:	f893 1020 	ldrb.w	r1, [r3, #32]
 8003d9e:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	0790      	lsls	r0, r2, #30
 8003da4:	d5fc      	bpl.n	8003da0 <recorder::StateMachine(bool)+0xa1c>
        if (write_in_progress())
 8003da6:	07c9      	lsls	r1, r1, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003da8:	60df      	str	r7, [r3, #12]
        if (write_in_progress())
 8003daa:	f100 813e 	bmi.w	800402a <recorder::StateMachine(bool)+0xca6>
        PageProgram(state_.bytes, state_.location, len, false);
 8003dae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8003db2:	e9dc e500 	ldrd	lr, r5, [ip]
        uint32_t offset_in_page = state_.location % kPageSize;
 8003db6:	fa5f f08e 	uxtb.w	r0, lr
        uint32_t len = std::min(state_.length, kPageSize - offset_in_page);
 8003dba:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8003dbe:	42a8      	cmp	r0, r5
 8003dc0:	bf28      	it	cs
 8003dc2:	4628      	movcs	r0, r5
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	0692      	lsls	r2, r2, #26
 8003dc8:	d4fc      	bmi.n	8003dc4 <recorder::StateMachine(bool)+0xa40>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003dca:	f8c3 b014 	str.w	fp, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	0792      	lsls	r2, r2, #30
 8003dd2:	d5fc      	bpl.n	8003dce <recorder::StateMachine(bool)+0xa4a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003dd4:	60df      	str	r7, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	0692      	lsls	r2, r2, #26
 8003dda:	d4fc      	bmi.n	8003dd6 <recorder::StateMachine(bool)+0xa52>
        QUADSPI->DLR = count - 1;
 8003ddc:	1e42      	subs	r2, r0, #1
 8003dde:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 8003de0:	f8c3 a014 	str.w	sl, [r3, #20]
        QUADSPI->AR = address;
 8003de4:	f8c3 e018 	str.w	lr, [r3, #24]
        while (count--)
 8003de8:	b168      	cbz	r0, 8003e06 <recorder::StateMachine(bool)+0xa82>
 8003dea:	180d      	adds	r5, r1, r0
            while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	0752      	lsls	r2, r2, #29
 8003df0:	d5fc      	bpl.n	8003dec <recorder::StateMachine(bool)+0xa68>
            DataWrite8(*buffer++);
 8003df2:	f811 2b01 	ldrb.w	r2, [r1], #1
        while (count--)
 8003df6:	428d      	cmp	r5, r1
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]
        while (count--)
 8003dfc:	d1f6      	bne.n	8003dec <recorder::StateMachine(bool)+0xa68>
        state_.bytes += len;
 8003dfe:	f8dc 1008 	ldr.w	r1, [ip, #8]
        state_.length -= len;
 8003e02:	e9dc e500 	ldrd	lr, r5, [ip]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	0792      	lsls	r2, r2, #30
 8003e0a:	d5fc      	bpl.n	8003e06 <recorder::StateMachine(bool)+0xa82>
        state_.bytes += len;
 8003e0c:	4401      	add	r1, r0
        state_.location += len;
 8003e0e:	eb00 020e 	add.w	r2, r0, lr
        state_.length -= len;
 8003e12:	1a2d      	subs	r5, r5, r0
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e14:	60df      	str	r7, [r3, #12]
        state_.bytes += len;
 8003e16:	f8cc 1008 	str.w	r1, [ip, #8]
        state_.length -= len;
 8003e1a:	e9cc 2500 	strd	r2, r5, [ip]
        while (!FinishWrite());
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	d1b0      	bne.n	8003d84 <recorder::StateMachine(bool)+0xa00>
                printf("Save completed\n");
 8003e22:	484c      	ldr	r0, [pc, #304]	@ (8003f54 <recorder::StateMachine(bool)+0xbd0>)
 8003e24:	f007 f878 	bl	800af18 <puts>
        return save_.Save(audio_info_);
    }

    void PrintInfo(const char* line_prefix)
    {
        printf("%sAddress: 0x%08" PRIX32 "\n", line_prefix, audio_info_.address);
 8003e28:	6972      	ldr	r2, [r6, #20]
 8003e2a:	494b      	ldr	r1, [pc, #300]	@ (8003f58 <recorder::StateMachine(bool)+0xbd4>)
 8003e2c:	484b      	ldr	r0, [pc, #300]	@ (8003f5c <recorder::StateMachine(bool)+0xbd8>)
 8003e2e:	f007 f80b 	bl	800ae48 <iprintf>
        printf("%sSize:    0x%08" PRIX32 "\n", line_prefix, audio_info_.size);
 8003e32:	69b2      	ldr	r2, [r6, #24]
 8003e34:	4948      	ldr	r1, [pc, #288]	@ (8003f58 <recorder::StateMachine(bool)+0xbd4>)
 8003e36:	484a      	ldr	r0, [pc, #296]	@ (8003f60 <recorder::StateMachine(bool)+0xbdc>)
 8003e38:	f007 f806 	bl	800ae48 <iprintf>
        printf("%sCRC32:   0x%08" PRIX32 "\n", line_prefix, audio_info_.crc32);
 8003e3c:	4946      	ldr	r1, [pc, #280]	@ (8003f58 <recorder::StateMachine(bool)+0xbd4>)
 8003e3e:	69f2      	ldr	r2, [r6, #28]
 8003e40:	4848      	ldr	r0, [pc, #288]	@ (8003f64 <recorder::StateMachine(bool)+0xbe0>)
 8003e42:	f007 f801 	bl	800ae48 <iprintf>
        printf("State: ");
 8003e46:	e500      	b.n	800384a <recorder::StateMachine(bool)+0x4c6>
            system::SerialFlushTx();
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f003 fcfd 	bl	8007848 <recorder::system::SerialFlushTx(bool)>
            if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8003e4e:	4b46      	ldr	r3, [pc, #280]	@ (8003f68 <recorder::StateMachine(bool)+0xbe4>)
 8003e50:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
 8003e54:	2a02      	cmp	r2, #2
 8003e56:	d102      	bne.n	8003e5e <recorder::StateMachine(bool)+0xada>
                cue_stop_ = true;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e5e:	493c      	ldr	r1, [pc, #240]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003e60:	688b      	ldr	r3, [r1, #8]
 8003e62:	069a      	lsls	r2, r3, #26
 8003e64:	d4fc      	bmi.n	8003e60 <recorder::StateMachine(bool)+0xadc>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003e66:	f240 13b9 	movw	r3, #441	@ 0x1b9
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e6a:	4a39      	ldr	r2, [pc, #228]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003e6c:	614b      	str	r3, [r1, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e6e:	6893      	ldr	r3, [r2, #8]
 8003e70:	079b      	lsls	r3, r3, #30
 8003e72:	d5fc      	bpl.n	8003e6e <recorder::StateMachine(bool)+0xaea>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e74:	2302      	movs	r3, #2
 8003e76:	60d3      	str	r3, [r2, #12]
    }
 8003e78:	b005      	add	sp, #20
 8003e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            system::Standby();
 8003e7e:	f003 bce9 	b.w	8007854 <recorder::system::Standby()>
        uint32_t length = state_.length;
 8003e82:	4e3a      	ldr	r6, [pc, #232]	@ (8003f6c <recorder::StateMachine(bool)+0xbe8>)
        uint32_t location = state_.location;
 8003e84:	e9d6 5100 	ldrd	r5, r1, [r6]
        if (length == 0)
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d04a      	beq.n	8003f22 <recorder::StateMachine(bool)+0xb9e>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e8c:	4a30      	ldr	r2, [pc, #192]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003e8e:	6893      	ldr	r3, [r2, #8]
 8003e90:	f013 0320 	ands.w	r3, r3, #32
 8003e94:	d1fb      	bne.n	8003e8e <recorder::StateMachine(bool)+0xb0a>
        QUADSPI->DLR = 0;
 8003e96:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8003e98:	4b35      	ldr	r3, [pc, #212]	@ (8003f70 <recorder::StateMachine(bool)+0xbec>)
 8003e9a:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003e9e:	6893      	ldr	r3, [r2, #8]
 8003ea0:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8003ea4:	d0fb      	beq.n	8003e9e <recorder::StateMachine(bool)+0xb1a>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003ea6:	f892 c020 	ldrb.w	ip, [r2, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003eaa:	4a29      	ldr	r2, [pc, #164]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003eac:	fa5f fc8c 	uxtb.w	ip, ip
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003eb0:	6893      	ldr	r3, [r2, #8]
 8003eb2:	079b      	lsls	r3, r3, #30
 8003eb4:	d5fc      	bpl.n	8003eb0 <recorder::StateMachine(bool)+0xb2c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003eb6:	2302      	movs	r3, #2
        if (write_in_progress())
 8003eb8:	f01c 0f01 	tst.w	ip, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ebc:	60d3      	str	r3, [r2, #12]
        if (write_in_progress())
 8003ebe:	f47f ad2f 	bne.w	8003920 <recorder::StateMachine(bool)+0x59c>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 8003ec2:	b2ab      	uxth	r3, r5
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 820b 	bne.w	80042e0 <recorder::StateMachine(bool)+0xf5c>
 8003eca:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003ece:	f080 82f0 	bcs.w	80044b2 <recorder::StateMachine(bool)+0x112e>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8003ed2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003ed6:	f080 8299 	bcs.w	800440c <recorder::StateMachine(bool)+0x1088>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003eda:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003edc:	6893      	ldr	r3, [r2, #8]
 8003ede:	069b      	lsls	r3, r3, #26
 8003ee0:	d4fc      	bmi.n	8003edc <recorder::StateMachine(bool)+0xb58>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003ee2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003ee6:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003ee8:	4a19      	ldr	r2, [pc, #100]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003eea:	6893      	ldr	r3, [r2, #8]
 8003eec:	079b      	lsls	r3, r3, #30
 8003eee:	d5fc      	bpl.n	8003eea <recorder::StateMachine(bool)+0xb66>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003ef4:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003ef6:	6893      	ldr	r3, [r2, #8]
 8003ef8:	069b      	lsls	r3, r3, #26
 8003efa:	d4fc      	bmi.n	8003ef6 <recorder::StateMachine(bool)+0xb72>
        QUADSPI->CCR =
 8003efc:	f242 53d7 	movw	r3, #9687	@ 0x25d7
 8003f00:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 8003f02:	6195      	str	r5, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003f04:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <recorder::StateMachine(bool)+0xbcc>)
 8003f06:	6893      	ldr	r3, [r2, #8]
 8003f08:	079b      	lsls	r3, r3, #30
 8003f0a:	d5fc      	bpl.n	8003f06 <recorder::StateMachine(bool)+0xb82>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003f0c:	2302      	movs	r3, #2
            location += kEraseGranularity;
 8003f0e:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
            length -= kEraseGranularity;
 8003f12:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003f16:	60d3      	str	r3, [r2, #12]
        state_.length = length;
 8003f18:	e9c6 5100 	strd	r5, r1, [r6]
        if (flash_.FinishErase())
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	f47f acff 	bne.w	8003920 <recorder::StateMachine(bool)+0x59c>
            chain_iter_ = buffer_chain_.begin();
 8003f22:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8003f24:	2300      	movs	r3, #0
        printf("State: ");
 8003f26:	4813      	ldr	r0, [pc, #76]	@ (8003f74 <recorder::StateMachine(bool)+0xbf0>)
 8003f28:	64f2      	str	r2, [r6, #76]	@ 0x4c
        iter& operator++() {num_++; return *this;}
 8003f2a:	6533      	str	r3, [r6, #80]	@ 0x50
 8003f2c:	f006 ff8c 	bl	800ae48 <iprintf>
            printf("BEGIN_WRITE\n");
 8003f30:	4811      	ldr	r0, [pc, #68]	@ (8003f78 <recorder::StateMachine(bool)+0xbf4>)
 8003f32:	f006 fff1 	bl	800af18 <puts>
 8003f36:	2307      	movs	r3, #7
 8003f38:	f3bf 8f5b 	dmb	ish
 8003f3c:	7023      	strb	r3, [r4, #0]
 8003f3e:	f3bf 8f5b 	dmb	ish
    }
 8003f42:	f7ff bb87 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
 8003f46:	bf00      	nop
 8003f48:	e01e01e1 	.word	0xe01e01e1
 8003f4c:	200108a0 	.word	0x200108a0
 8003f50:	52005000 	.word	0x52005000
 8003f54:	0800bfb4 	.word	0x0800bfb4
 8003f58:	0800bfc4 	.word	0x0800bfc4
 8003f5c:	0800bfcc 	.word	0x0800bfcc
 8003f60:	0800bfe0 	.word	0x0800bfe0
 8003f64:	0800bff4 	.word	0x0800bff4
 8003f68:	20010c40 	.word	0x20010c40
 8003f6c:	2001088c 	.word	0x2001088c
 8003f70:	05000105 	.word	0x05000105
 8003f74:	0800bf20 	.word	0x0800bf20
 8003f78:	0800bf60 	.word	0x0800bf60
 8003f7c:	01002502 	.word	0x01002502
        return dirty_ && audio_info_.size > 0;
 8003f80:	4bae      	ldr	r3, [pc, #696]	@ (800423c <recorder::StateMachine(bool)+0xeb8>)
 8003f82:	7b5a      	ldrb	r2, [r3, #13]
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	f43f ac60 	beq.w	800384a <recorder::StateMachine(bool)+0x4c6>
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	f43f ac5c 	beq.w	800384a <recorder::StateMachine(bool)+0x4c6>
        return flash_.BeginErase(audio_info_.address, erase_size);
 8003f92:	6958      	ldr	r0, [r3, #20]
        if ((location % kEraseGranularity) || (length % kEraseGranularity))
 8003f94:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8003f98:	2900      	cmp	r1, #0
 8003f9a:	f040 8257 	bne.w	800444c <recorder::StateMachine(bool)+0x10c8>
        uint32_t erase_size = audio_info_.size + granularity - 1;
 8003f9e:	f602 72ff 	addw	r2, r2, #4095	@ 0xfff
        state_ =
 8003fa2:	6018      	str	r0, [r3, #0]
        printf("State: ");
 8003fa4:	48a6      	ldr	r0, [pc, #664]	@ (8004240 <recorder::StateMachine(bool)+0xebc>)
 8003fa6:	f36f 020b 	bfc	r2, #0, #12
 8003faa:	6099      	str	r1, [r3, #8]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	f006 ff4b 	bl	800ae48 <iprintf>
            printf("ERASE\n");
 8003fb2:	48a4      	ldr	r0, [pc, #656]	@ (8004244 <recorder::StateMachine(bool)+0xec0>)
 8003fb4:	f006 ffb0 	bl	800af18 <puts>
 8003fb8:	2306      	movs	r3, #6
 8003fba:	f3bf 8f5b 	dmb	ish
 8003fbe:	7023      	strb	r3, [r4, #0]
 8003fc0:	f3bf 8f5b 	dmb	ish
    }
 8003fc4:	f7ff bb46 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        bool operator==(iter other) const {return num_ == other.num_;}
 8003fc8:	4b9c      	ldr	r3, [pc, #624]	@ (800423c <recorder::StateMachine(bool)+0xeb8>)
 8003fca:	6d19      	ldr	r1, [r3, #80]	@ 0x50
        const Link& operator*() {return chain_[num_];}
 8003fcc:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8003fce:	eb01 0241 	add.w	r2, r1, r1, lsl #1
        bool done = (audio_info_.size <= (*chain_iter_).offset);
 8003fd2:	6998      	ldr	r0, [r3, #24]
 8003fd4:	eb06 0782 	add.w	r7, r6, r2, lsl #2
 8003fd8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            if (sample_memory_.write_complete())
 8003fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fde:	68bd      	ldr	r5, [r7, #8]
 8003fe0:	428a      	cmp	r2, r1
 8003fe2:	f000 816c 	beq.w	80042be <recorder::StateMachine(bool)+0xf3a>
 8003fe6:	42a8      	cmp	r0, r5
 8003fe8:	f240 8169 	bls.w	80042be <recorder::StateMachine(bool)+0xf3a>
            return length * sizeof(T);
 8003fec:	687a      	ldr	r2, [r7, #4]
        uint32_t remaining = audio_info_.size - link.offset;
 8003fee:	1b40      	subs	r0, r0, r5
        return flash_.BeginWrite(address, link.buffer, write_size);
 8003ff0:	f856 100c 	ldr.w	r1, [r6, ip]
 8003ff4:	0052      	lsls	r2, r2, #1
        state_ =
 8003ff6:	6099      	str	r1, [r3, #8]
 8003ff8:	4282      	cmp	r2, r0
 8003ffa:	bf28      	it	cs
 8003ffc:	4602      	movcs	r2, r0
        printf("State: ");
 8003ffe:	4890      	ldr	r0, [pc, #576]	@ (8004240 <recorder::StateMachine(bool)+0xebc>)
 8004000:	605a      	str	r2, [r3, #4]
        uint32_t address = audio_info_.address + link.offset;
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	442a      	add	r2, r5
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f006 ff1e 	bl	800ae48 <iprintf>
            printf("WRITE\n");
 800400c:	488e      	ldr	r0, [pc, #568]	@ (8004248 <recorder::StateMachine(bool)+0xec4>)
 800400e:	f006 ff83 	bl	800af18 <puts>
 8004012:	2308      	movs	r3, #8
 8004014:	f3bf 8f5b 	dmb	ish
 8004018:	7023      	strb	r3, [r4, #0]
 800401a:	f3bf 8f5b 	dmb	ish
    }
 800401e:	f7ff bb19 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        iter& operator++() {num_++; return *this;}
 8004022:	6d33      	ldr	r3, [r6, #80]	@ 0x50
        printf("State: ");
 8004024:	4886      	ldr	r0, [pc, #536]	@ (8004240 <recorder::StateMachine(bool)+0xebc>)
 8004026:	3301      	adds	r3, #1
 8004028:	e77f      	b.n	8003f2a <recorder::StateMachine(bool)+0xba6>
        if (state_.length == 0)
 800402a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800402e:	2a00      	cmp	r2, #0
 8004030:	f43f aef7 	beq.w	8003e22 <recorder::StateMachine(bool)+0xa9e>
 8004034:	e6a6      	b.n	8003d84 <recorder::StateMachine(bool)+0xa00>
            if (state_ == STATE_STOPPED)
 8004036:	4d85      	ldr	r5, [pc, #532]	@ (800424c <recorder::StateMachine(bool)+0xec8>)
 8004038:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 800403c:	bb6b      	cbnz	r3, 800409a <recorder::StateMachine(bool)+0xd16>
 800403e:	4984      	ldr	r1, [pc, #528]	@ (8004250 <recorder::StateMachine(bool)+0xecc>)
 8004040:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8004044:	2200      	movs	r2, #0
 8004046:	4b83      	ldr	r3, [pc, #524]	@ (8004254 <recorder::StateMachine(bool)+0xed0>)
 8004048:	6188      	str	r0, [r1, #24]
                dac_.Start();
 800404a:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 800404e:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8004052:	2201      	movs	r2, #1
 8004054:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 8004058:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800405c:	619a      	str	r2, [r3, #24]
                dac_.Start();
 800405e:	f002 fbe7 	bl	8006830 <recorder::Dac::Start()>
                adc_.Start();
 8004062:	1d28      	adds	r0, r5, #4
 8004064:	f002 f8e4 	bl	8006230 <recorder::Adc::Start()>
                StartTimer();
 8004068:	4628      	mov	r0, r5
 800406a:	f002 fbcd 	bl	8006808 <recorder::Analog::StartTimer()>
                idle_timeout_ = 0; // Reset timeout on activity
 800406e:	4b7a      	ldr	r3, [pc, #488]	@ (8004258 <recorder::StateMachine(bool)+0xed4>)
 8004070:	2200      	movs	r2, #0
        printf("State: ");
 8004072:	4873      	ldr	r0, [pc, #460]	@ (8004240 <recorder::StateMachine(bool)+0xebc>)
                idle_timeout_ = 0; // Reset timeout on activity
 8004074:	601a      	str	r2, [r3, #0]
        printf("State: ");
 8004076:	f006 fee7 	bl	800ae48 <iprintf>
            printf("SYNTH\n");
 800407a:	4878      	ldr	r0, [pc, #480]	@ (800425c <recorder::StateMachine(bool)+0xed8>)
 800407c:	f006 ff4c 	bl	800af18 <puts>
 8004080:	2301      	movs	r3, #1
 8004082:	f3bf 8f5b 	dmb	ish
 8004086:	7023      	strb	r3, [r4, #0]
 8004088:	f3bf 8f5b 	dmb	ish
    }
 800408c:	f7ff bae2 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
                synthReleaseCounter = 0;
 8004090:	4b73      	ldr	r3, [pc, #460]	@ (8004260 <recorder::StateMachine(bool)+0xedc>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	f7ff badd 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 800409a:	2b02      	cmp	r3, #2
 800409c:	d1e7      	bne.n	800406e <recorder::StateMachine(bool)+0xcea>
 800409e:	496c      	ldr	r1, [pc, #432]	@ (8004250 <recorder::StateMachine(bool)+0xecc>)
 80040a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80040a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004254 <recorder::StateMachine(bool)+0xed0>)
 80040a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040aa:	6188      	str	r0, [r1, #24]
 80040ac:	619a      	str	r2, [r3, #24]
    }
 80040ae:	e7de      	b.n	800406e <recorder::StateMachine(bool)+0xcea>
            if (state_ == STATE_STOPPED)
 80040b0:	4c66      	ldr	r4, [pc, #408]	@ (800424c <recorder::StateMachine(bool)+0xec8>)
 80040b2:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 8118 	bne.w	80042ec <recorder::StateMachine(bool)+0xf68>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80040bc:	4964      	ldr	r1, [pc, #400]	@ (8004250 <recorder::StateMachine(bool)+0xecc>)
 80040be:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b63      	ldr	r3, [pc, #396]	@ (8004254 <recorder::StateMachine(bool)+0xed0>)
 80040c6:	6188      	str	r0, [r1, #24]
                dac_.Start();
 80040c8:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
                fade_position_ = 0;
 80040cc:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
                state_ = STATE_STARTING;
 80040d0:	2201      	movs	r2, #1
 80040d2:	f8a4 2160 	strh.w	r2, [r4, #352]	@ 0x160
 80040d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040da:	619a      	str	r2, [r3, #24]
                dac_.Start();
 80040dc:	f002 fba8 	bl	8006830 <recorder::Dac::Start()>
                adc_.Start();
 80040e0:	1d20      	adds	r0, r4, #4
 80040e2:	f002 f8a5 	bl	8006230 <recorder::Adc::Start()>
                StartTimer();
 80040e6:	4620      	mov	r0, r4
 80040e8:	f002 fb8e 	bl	8006808 <recorder::Analog::StartTimer()>
                    synth_inactive_ = false;
 80040ec:	2300      	movs	r3, #0
                    idle_timeout_ = 0; // Reset timeout on activity
 80040ee:	4a5a      	ldr	r2, [pc, #360]	@ (8004258 <recorder::StateMachine(bool)+0xed4>)
                    synth_inactive_ = false;
 80040f0:	702b      	strb	r3, [r5, #0]
                    idle_timeout_ = 0; // Reset timeout on activity
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e486      	b.n	8003a04 <recorder::StateMachine(bool)+0x680>
        if (0 == std::memcmp(&block_.data, &data, sizeof(T)))
 80040f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80040fa:	f858 3c08 	ldr.w	r3, [r8, #-8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	f47f adb0 	bne.w	8003c64 <recorder::StateMachine(bool)+0x8e0>
 8004104:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8004108:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800410c:	429a      	cmp	r2, r3
 800410e:	f47f ada9 	bne.w	8003c64 <recorder::StateMachine(bool)+0x8e0>
 8004112:	f1a8 0620 	sub.w	r6, r8, #32
 8004116:	e684      	b.n	8003e22 <recorder::StateMachine(bool)+0xa9e>
        int32_t next_block_n = current_block_n;
 8004118:	f240 2721 	movw	r7, #545	@ 0x221
            next_block_n = (next_block_n + 1) % kNumBlocks;
 800411c:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800426c <recorder::StateMachine(bool)+0xee8>
 8004120:	f240 2a22 	movw	sl, #546	@ 0x222
        uint32_t page_n = block_n / kBlocksPerPage;
 8004124:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8004264 <recorder::StateMachine(bool)+0xee0>
 8004128:	e000      	b.n	800412c <recorder::StateMachine(bool)+0xda8>
        while (next_block_n != current_block_n);
 800412a:	b30b      	cbz	r3, 8004170 <recorder::StateMachine(bool)+0xdec>
            next_block_n = (next_block_n + 1) % kNumBlocks;
 800412c:	3701      	adds	r7, #1
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 800412e:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8004130:	087b      	lsrs	r3, r7, #1
 8004132:	fbab 2303 	umull	r2, r3, fp, r3
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8004136:	220f      	movs	r2, #15
            next_block_n = (next_block_n + 1) % kNumBlocks;
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	fb0a 7713 	mls	r7, sl, r3, r7
        uint32_t page_n = block_n / kBlocksPerPage;
 800413e:	fba9 1307 	umull	r1, r3, r9, r7
 8004142:	1af9      	subs	r1, r7, r3
 8004144:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004148:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 800414a:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 800414e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8004152:	1a79      	subs	r1, r7, r1
 8004154:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8004158:	eb01 3503 	add.w	r5, r1, r3, lsl #12
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc fc43 	bl	80009e8 <recorder::Flash::Writable(unsigned long, unsigned long)>
        while (next_block_n != current_block_n);
 8004162:	f240 2221 	movw	r2, #545	@ 0x221
            if (nvmem_.Writable(BlockLocation(next_block_n), kBlockSize))
 8004166:	f080 0301 	eor.w	r3, r0, #1
        while (next_block_n != current_block_n);
 800416a:	4297      	cmp	r7, r2
 800416c:	b2db      	uxtb	r3, r3
 800416e:	d1dc      	bne.n	800412a <recorder::StateMachine(bool)+0xda6>
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8004170:	f240 2221 	movw	r2, #545	@ 0x221
        sequence_++;
 8004174:	6b73      	ldr	r3, [r6, #52]	@ 0x34
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 8004176:	4297      	cmp	r7, r2
        sequence_++;
 8004178:	f103 0301 	add.w	r3, r3, #1
        return (next_block_n == current_block_n) ? -1 : next_block_n;
 800417c:	f47f adbf 	bne.w	8003cfe <recorder::StateMachine(bool)+0x97a>
            if (active_block_n_ == -1)
 8004180:	6b32      	ldr	r2, [r6, #48]	@ 0x30
                if (!nvmem_.Erase(0, kRegionSize))
 8004182:	f8d6 c038 	ldr.w	ip, [r6, #56]	@ 0x38
            if (active_block_n_ == -1)
 8004186:	1c51      	adds	r1, r2, #1
        sequence_++;
 8004188:	6373      	str	r3, [r6, #52]	@ 0x34
            if (active_block_n_ == -1)
 800418a:	f000 80c0 	beq.w	800430e <recorder::StateMachine(bool)+0xf8a>
                uint32_t current_page = active_block_n_ / kBlocksPerPage;
 800418e:	4b35      	ldr	r3, [pc, #212]	@ (8004264 <recorder::StateMachine(bool)+0xee0>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004190:	2002      	movs	r0, #2
        QUADSPI->CCR =
 8004192:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8004270 <recorder::StateMachine(bool)+0xeec>
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
        state_ =
 800419a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	f8cc 1004 	str.w	r1, [ip, #4]
 80041a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
                next_block = next_page * kBlocksPerPage;
 80041a8:	f240 1211 	movw	r2, #273	@ 0x111
                uint32_t current_page = active_block_n_ / kBlocksPerPage;
 80041ac:	0a1b      	lsrs	r3, r3, #8
                uint32_t next_page = (current_page + 1) % kNumPages;
 80041ae:	3301      	adds	r3, #1
 80041b0:	f003 0501 	and.w	r5, r3, #1
                next_block = next_page * kBlocksPerPage;
 80041b4:	f343 0300 	sbfx	r3, r3, #0, #1
                if (!nvmem_.Erase(next_page * kPageSize, kPageSize))
 80041b8:	032d      	lsls	r5, r5, #12
                next_block = next_page * kBlocksPerPage;
 80041ba:	ea03 0702 	and.w	r7, r3, r2
 80041be:	2300      	movs	r3, #0
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80041c0:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <recorder::StateMachine(bool)+0xee4>)
        state_ =
 80041c2:	f8cc 5000 	str.w	r5, [ip]
 80041c6:	f8cc 3008 	str.w	r3, [ip, #8]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80041ca:	6893      	ldr	r3, [r2, #8]
 80041cc:	f013 0320 	ands.w	r3, r3, #32
 80041d0:	d1fb      	bne.n	80041ca <recorder::StateMachine(bool)+0xe46>
        QUADSPI->DLR = 0;
 80041d2:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 80041d4:	f8c2 e014 	str.w	lr, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80041d8:	6893      	ldr	r3, [r2, #8]
 80041da:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80041de:	d0fb      	beq.n	80041d8 <recorder::StateMachine(bool)+0xe54>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80041e0:	f892 1020 	ldrb.w	r1, [r2, #32]
 80041e4:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80041e6:	6893      	ldr	r3, [r2, #8]
 80041e8:	079b      	lsls	r3, r3, #30
 80041ea:	d5fc      	bpl.n	80041e6 <recorder::StateMachine(bool)+0xe62>
        if (write_in_progress())
 80041ec:	07c9      	lsls	r1, r1, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80041ee:	60d0      	str	r0, [r2, #12]
        if (write_in_progress())
 80041f0:	d4eb      	bmi.n	80041ca <recorder::StateMachine(bool)+0xe46>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80041f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <recorder::StateMachine(bool)+0xee4>)
 80041f4:	6893      	ldr	r3, [r2, #8]
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	d4fc      	bmi.n	80041f4 <recorder::StateMachine(bool)+0xe70>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80041fa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80041fe:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004200:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <recorder::StateMachine(bool)+0xee4>)
 8004202:	6893      	ldr	r3, [r2, #8]
 8004204:	0798      	lsls	r0, r3, #30
 8004206:	d5fc      	bpl.n	8004202 <recorder::StateMachine(bool)+0xe7e>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004208:	2302      	movs	r3, #2
 800420a:	60d3      	str	r3, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800420c:	4a16      	ldr	r2, [pc, #88]	@ (8004268 <recorder::StateMachine(bool)+0xee4>)
 800420e:	6893      	ldr	r3, [r2, #8]
 8004210:	0699      	lsls	r1, r3, #26
 8004212:	d4fc      	bmi.n	800420e <recorder::StateMachine(bool)+0xe8a>
        QUADSPI->CCR =
 8004214:	f242 53d7 	movw	r3, #9687	@ 0x25d7
 8004218:	6153      	str	r3, [r2, #20]
        QUADSPI->AR = address;
 800421a:	6195      	str	r5, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800421c:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <recorder::StateMachine(bool)+0xee4>)
 800421e:	6893      	ldr	r3, [r2, #8]
 8004220:	079b      	lsls	r3, r3, #30
 8004222:	d5fc      	bpl.n	800421e <recorder::StateMachine(bool)+0xe9a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004224:	2302      	movs	r3, #2
 8004226:	60d3      	str	r3, [r2, #12]
        state_.length = length;
 8004228:	2300      	movs	r3, #0
 800422a:	f8cc 3004 	str.w	r3, [ip, #4]
            location += kEraseGranularity;
 800422e:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
        state_.location = location;
 8004232:	f8cc 3000 	str.w	r3, [ip]
        block_.sequence_num = sequence_;
 8004236:	f8b6 e034 	ldrh.w	lr, [r6, #52]	@ 0x34
 800423a:	e565      	b.n	8003d08 <recorder::StateMachine(bool)+0x984>
 800423c:	2001088c 	.word	0x2001088c
 8004240:	0800bf20 	.word	0x0800bf20
 8004244:	0800bf58 	.word	0x0800bf58
 8004248:	0800bf6c 	.word	0x0800bf6c
 800424c:	20010c40 	.word	0x20010c40
 8004250:	58021800 	.word	0x58021800
 8004254:	58020400 	.word	0x58020400
 8004258:	200108e8 	.word	0x200108e8
 800425c:	0800bf30 	.word	0x0800bf30
 8004260:	2000041c 	.word	0x2000041c
 8004264:	e01e01e1 	.word	0xe01e01e1
 8004268:	52005000 	.word	0x52005000
 800426c:	f00f00f1 	.word	0xf00f00f1
 8004270:	05000105 	.word	0x05000105
                if ((++playback_timeout_ == kPlaybackExpireTime * 1000) ||
 8004274:	499f      	ldr	r1, [pc, #636]	@ (80044f4 <recorder::StateMachine(bool)+0x1170>)
 8004276:	eddf 7aa0 	vldr	s15, [pc, #640]	@ 80044f8 <recorder::StateMachine(bool)+0x1174>
 800427a:	680b      	ldr	r3, [r1, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	ee07 3a10 	vmov	s14, r3
 8004282:	600b      	str	r3, [r1, #0]
 8004284:	4b9d      	ldr	r3, [pc, #628]	@ (80044fc <recorder::StateMachine(bool)+0x1178>)
 8004286:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800428a:	eeb4 7a67 	vcmp.f32	s14, s15
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d037      	beq.n	8004304 <recorder::StateMachine(bool)+0xf80>
 8004294:	6800      	ldr	r0, [r0, #0]
            return state_ == STATE_PLAYING;
 8004296:	f893 1030 	ldrb.w	r1, [r3, #48]	@ 0x30
 800429a:	2801      	cmp	r0, #1
 800429c:	d007      	beq.n	80042ae <recorder::StateMachine(bool)+0xf2a>
                else if (playback_.ended())
 800429e:	2900      	cmp	r1, #0
 80042a0:	f47f a9d8 	bne.w	8003654 <recorder::StateMachine(bool)+0x2d0>
                cue_stop_ = true;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            }
        }
 80042aa:	f7ff b9d3 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
                    (play_button_.rising() && playback_.playing()))
 80042ae:	2902      	cmp	r1, #2
 80042b0:	d028      	beq.n	8004304 <recorder::StateMachine(bool)+0xf80>
                else if (play_button_.rising() && playback_.stopping())
 80042b2:	2901      	cmp	r1, #1
 80042b4:	d1f3      	bne.n	800429e <recorder::StateMachine(bool)+0xf1a>
            cue_play_ = true;
 80042b6:	f883 1031 	strb.w	r1, [r3, #49]	@ 0x31
        }
 80042ba:	f7ff b9cb 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        printf("State: ");
 80042be:	4890      	ldr	r0, [pc, #576]	@ (8004500 <recorder::StateMachine(bool)+0x117c>)
 80042c0:	f006 fdc2 	bl	800ae48 <iprintf>
            printf("COMMIT\n");
 80042c4:	488f      	ldr	r0, [pc, #572]	@ (8004504 <recorder::StateMachine(bool)+0x1180>)
 80042c6:	f006 fe27 	bl	800af18 <puts>
 80042ca:	2309      	movs	r3, #9
 80042cc:	f3bf 8f5b 	dmb	ish
 80042d0:	7023      	strb	r3, [r4, #0]
 80042d2:	f3bf 8f5b 	dmb	ish
    }
 80042d6:	f7ff b9bd 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        while (size >= 4)
 80042da:	4622      	mov	r2, r4
 80042dc:	4663      	mov	r3, ip
 80042de:	e455      	b.n	8003b8c <recorder::StateMachine(bool)+0x808>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 80042e0:	f3c5 030e 	ubfx	r3, r5, #0, #15
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f adf8 	bne.w	8003eda <recorder::StateMachine(bool)+0xb56>
 80042ea:	e5f2      	b.n	8003ed2 <recorder::StateMachine(bool)+0xb4e>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	f47f aefd 	bne.w	80040ec <recorder::StateMachine(bool)+0xd68>
 80042f2:	4985      	ldr	r1, [pc, #532]	@ (8004508 <recorder::StateMachine(bool)+0x1184>)
 80042f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80042f8:	4b84      	ldr	r3, [pc, #528]	@ (800450c <recorder::StateMachine(bool)+0x1188>)
 80042fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042fe:	6188      	str	r0, [r1, #24]
 8004300:	619a      	str	r2, [r3, #24]
    }
 8004302:	e6f3      	b.n	80040ec <recorder::StateMachine(bool)+0xd68>
            cue_stop_ = true;
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        }
 800430a:	f7ff b9a3 	b.w	8003654 <recorder::StateMachine(bool)+0x2d0>
        state_ =
 800430e:	2100      	movs	r1, #0
 8004310:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004314:	4b7e      	ldr	r3, [pc, #504]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004316:	2002      	movs	r0, #2
        QUADSPI->CCR =
 8004318:	4f7e      	ldr	r7, [pc, #504]	@ (8004514 <recorder::StateMachine(bool)+0x1190>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800431a:	f44f 7983 	mov.w	r9, #262	@ 0x106
        QUADSPI->CCR =
 800431e:	f242 5ed7 	movw	lr, #9687	@ 0x25d7
        state_ =
 8004322:	f8cc 1000 	str.w	r1, [ip]
 8004326:	f8cc 1008 	str.w	r1, [ip, #8]
 800432a:	f8cc 5004 	str.w	r5, [ip, #4]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	f012 0220 	ands.w	r2, r2, #32
 8004334:	d1fb      	bne.n	800432e <recorder::StateMachine(bool)+0xfaa>
        QUADSPI->DLR = 0;
 8004336:	611a      	str	r2, [r3, #16]
        QUADSPI->CCR =
 8004338:	615f      	str	r7, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	f412 5f7c 	tst.w	r2, #16128	@ 0x3f00
 8004340:	d0fb      	beq.n	800433a <recorder::StateMachine(bool)+0xfb6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004342:	f893 a020 	ldrb.w	sl, [r3, #32]
 8004346:	fa5f fa8a 	uxtb.w	sl, sl
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	0792      	lsls	r2, r2, #30
 800434e:	d5fc      	bpl.n	800434a <recorder::StateMachine(bool)+0xfc6>
        if (write_in_progress())
 8004350:	f01a 0f01 	tst.w	sl, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004354:	60d8      	str	r0, [r3, #12]
        if (write_in_progress())
 8004356:	d1ea      	bne.n	800432e <recorder::StateMachine(bool)+0xfaa>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 8004358:	b28a      	uxth	r2, r1
 800435a:	bb22      	cbnz	r2, 80043a6 <recorder::StateMachine(bool)+0x1022>
 800435c:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8004360:	d279      	bcs.n	8004456 <recorder::StateMachine(bool)+0x10d2>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8004362:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8004366:	d223      	bcs.n	80043b0 <recorder::StateMachine(bool)+0x102c>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	0692      	lsls	r2, r2, #26
 800436c:	d4fc      	bmi.n	8004368 <recorder::StateMachine(bool)+0xfe4>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800436e:	f8c3 9014 	str.w	r9, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	0792      	lsls	r2, r2, #30
 8004376:	d5fc      	bpl.n	8004372 <recorder::StateMachine(bool)+0xfee>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004378:	60d8      	str	r0, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	0692      	lsls	r2, r2, #26
 800437e:	d4fc      	bmi.n	800437a <recorder::StateMachine(bool)+0xff6>
        QUADSPI->CCR =
 8004380:	f8c3 e014 	str.w	lr, [r3, #20]
        QUADSPI->AR = address;
 8004384:	6199      	str	r1, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	0792      	lsls	r2, r2, #30
 800438a:	d5fc      	bpl.n	8004386 <recorder::StateMachine(bool)+0x1002>
            location += kEraseGranularity;
 800438c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
            length -= kEraseGranularity;
 8004390:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004394:	60d8      	str	r0, [r3, #12]
        state_.location = location;
 8004396:	e9cc 1500 	strd	r1, r5, [ip]
        while (!FinishErase());
 800439a:	2d00      	cmp	r5, #0
 800439c:	d1c7      	bne.n	800432e <recorder::StateMachine(bool)+0xfaa>
 800439e:	46ae      	mov	lr, r5
                next_block = 0;
 80043a0:	462f      	mov	r7, r5
                sequence_ = 0;
 80043a2:	6375      	str	r5, [r6, #52]	@ 0x34
 80043a4:	e4b0      	b.n	8003d08 <recorder::StateMachine(bool)+0x984>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 80043a6:	f3c1 020e 	ubfx	r2, r1, #0, #15
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d1dc      	bne.n	8004368 <recorder::StateMachine(bool)+0xfe4>
 80043ae:	e7d8      	b.n	8004362 <recorder::StateMachine(bool)+0xfde>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80043b0:	4a57      	ldr	r2, [pc, #348]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80043b2:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80043b6:	f01a 0f20 	tst.w	sl, #32
 80043ba:	d1fa      	bne.n	80043b2 <recorder::StateMachine(bool)+0x102e>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80043bc:	f44f 7a83 	mov.w	sl, #262	@ 0x106
 80043c0:	f8c2 a014 	str.w	sl, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80043c4:	4a52      	ldr	r2, [pc, #328]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80043c6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80043ca:	f01a 0f02 	tst.w	sl, #2
 80043ce:	d0fa      	beq.n	80043c6 <recorder::StateMachine(bool)+0x1042>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80043d0:	f04f 0a02 	mov.w	sl, #2
 80043d4:	f8c2 a00c 	str.w	sl, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80043d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80043da:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80043de:	f01a 0f20 	tst.w	sl, #32
 80043e2:	d1fa      	bne.n	80043da <recorder::StateMachine(bool)+0x1056>
        QUADSPI->CCR =
 80043e4:	f242 5a52 	movw	sl, #9554	@ 0x2552
 80043e8:	f8c2 a014 	str.w	sl, [r2, #20]
        QUADSPI->AR = address;
 80043ec:	6191      	str	r1, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80043ee:	4a48      	ldr	r2, [pc, #288]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80043f0:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80043f4:	f01a 0f02 	tst.w	sl, #2
 80043f8:	d0fa      	beq.n	80043f0 <recorder::StateMachine(bool)+0x106c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80043fa:	f04f 0a02 	mov.w	sl, #2
            location += kBlock32Size;
 80043fe:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
            length -= kBlock32Size;
 8004402:	f5a5 4500 	sub.w	r5, r5, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004406:	f8c2 a00c 	str.w	sl, [r2, #12]
            length -= kBlock32Size;
 800440a:	e7c4      	b.n	8004396 <recorder::StateMachine(bool)+0x1012>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800440c:	4b40      	ldr	r3, [pc, #256]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	0692      	lsls	r2, r2, #26
 8004412:	d4fc      	bmi.n	800440e <recorder::StateMachine(bool)+0x108a>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8004414:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8004418:	615a      	str	r2, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800441a:	4b3d      	ldr	r3, [pc, #244]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	0792      	lsls	r2, r2, #30
 8004420:	d5fc      	bpl.n	800441c <recorder::StateMachine(bool)+0x1098>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004422:	2202      	movs	r2, #2
 8004424:	60da      	str	r2, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004426:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	0692      	lsls	r2, r2, #26
 800442c:	d4fc      	bmi.n	8004428 <recorder::StateMachine(bool)+0x10a4>
        QUADSPI->CCR =
 800442e:	f242 5252 	movw	r2, #9554	@ 0x2552
 8004432:	615a      	str	r2, [r3, #20]
        QUADSPI->AR = address;
 8004434:	619d      	str	r5, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004436:	4b36      	ldr	r3, [pc, #216]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	0792      	lsls	r2, r2, #30
 800443c:	d5fc      	bpl.n	8004438 <recorder::StateMachine(bool)+0x10b4>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800443e:	2202      	movs	r2, #2
            location += kBlock32Size;
 8004440:	f505 4500 	add.w	r5, r5, #32768	@ 0x8000
            length -= kBlock32Size;
 8004444:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004448:	60da      	str	r2, [r3, #12]
            length -= kBlock32Size;
 800444a:	e565      	b.n	8003f18 <recorder::StateMachine(bool)+0xb94>
                    printf("Erase failed\n");
 800444c:	4832      	ldr	r0, [pc, #200]	@ (8004518 <recorder::StateMachine(bool)+0x1194>)
 800444e:	f006 fd63 	bl	800af18 <puts>
 8004452:	f7ff b9fa 	b.w	800384a <recorder::StateMachine(bool)+0x4c6>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004456:	4a2e      	ldr	r2, [pc, #184]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 8004458:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800445c:	f01a 0f20 	tst.w	sl, #32
 8004460:	d1fa      	bne.n	8004458 <recorder::StateMachine(bool)+0x10d4>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8004462:	f44f 7a83 	mov.w	sl, #262	@ 0x106
 8004466:	f8c2 a014 	str.w	sl, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800446a:	4a29      	ldr	r2, [pc, #164]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 800446c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8004470:	f01a 0f02 	tst.w	sl, #2
 8004474:	d0fa      	beq.n	800446c <recorder::StateMachine(bool)+0x10e8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004476:	f04f 0a02 	mov.w	sl, #2
 800447a:	f8c2 a00c 	str.w	sl, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800447e:	4a24      	ldr	r2, [pc, #144]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 8004480:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8004484:	f01a 0f20 	tst.w	sl, #32
 8004488:	d1fa      	bne.n	8004480 <recorder::StateMachine(bool)+0x10fc>
        QUADSPI->CCR =
 800448a:	f242 5ad8 	movw	sl, #9688	@ 0x25d8
 800448e:	f8c2 a014 	str.w	sl, [r2, #20]
        QUADSPI->AR = address;
 8004492:	6191      	str	r1, [r2, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004494:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 8004496:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800449a:	f01a 0f02 	tst.w	sl, #2
 800449e:	d0fa      	beq.n	8004496 <recorder::StateMachine(bool)+0x1112>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044a0:	f04f 0a02 	mov.w	sl, #2
            location += kBlock64Size;
 80044a4:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
            length -= kBlock64Size;
 80044a8:	f5a5 3580 	sub.w	r5, r5, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044ac:	f8c2 a00c 	str.w	sl, [r2, #12]
            length -= kBlock64Size;
 80044b0:	e771      	b.n	8004396 <recorder::StateMachine(bool)+0x1012>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80044b2:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	0692      	lsls	r2, r2, #26
 80044b8:	d4fc      	bmi.n	80044b4 <recorder::StateMachine(bool)+0x1130>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80044ba:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80044be:	615a      	str	r2, [r3, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	0792      	lsls	r2, r2, #30
 80044c6:	d5fc      	bpl.n	80044c2 <recorder::StateMachine(bool)+0x113e>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044c8:	2202      	movs	r2, #2
 80044ca:	60da      	str	r2, [r3, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80044cc:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	0692      	lsls	r2, r2, #26
 80044d2:	d4fc      	bmi.n	80044ce <recorder::StateMachine(bool)+0x114a>
        QUADSPI->CCR =
 80044d4:	f242 52d8 	movw	r2, #9688	@ 0x25d8
 80044d8:	615a      	str	r2, [r3, #20]
        QUADSPI->AR = address;
 80044da:	619d      	str	r5, [r3, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <recorder::StateMachine(bool)+0x118c>)
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	0792      	lsls	r2, r2, #30
 80044e2:	d5fc      	bpl.n	80044de <recorder::StateMachine(bool)+0x115a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044e4:	2202      	movs	r2, #2
            location += kBlock64Size;
 80044e6:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
            length -= kBlock64Size;
 80044ea:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80044ee:	60da      	str	r2, [r3, #12]
            length -= kBlock64Size;
 80044f0:	e512      	b.n	8003f18 <recorder::StateMachine(bool)+0xb94>
 80044f2:	bf00      	nop
 80044f4:	200108e4 	.word	0x200108e4
 80044f8:	48927c00 	.word	0x48927c00
 80044fc:	20000580 	.word	0x20000580
 8004500:	0800bf20 	.word	0x0800bf20
 8004504:	0800bf74 	.word	0x0800bf74
 8004508:	58021800 	.word	0x58021800
 800450c:	58020400 	.word	0x58020400
 8004510:	52005000 	.word	0x52005000
 8004514:	05000105 	.word	0x05000105
 8004518:	0800bf94 	.word	0x0800bf94
	return __atomic_load_n(&_M_i, int(__m));
 800451c:	494b      	ldr	r1, [pc, #300]	@ (800464c <recorder::StateMachine(bool)+0x12c8>)
        input_phase_ = 1;
 800451e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
        history_ = 0;
 8004522:	2200      	movs	r2, #0
 8004524:	680c      	ldr	r4, [r1, #0]
        input_phase_ = 1;
 8004526:	f1a1 0308 	sub.w	r3, r1, #8
 800452a:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, int(__m));
 800452e:	f3bf 8f5b 	dmb	ish
 8004532:	f841 4c04 	str.w	r4, [r1, #-4]
        for (int n = 0; n < num_sections_; n++)
 8004536:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800453a:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
 800453e:	2900      	cmp	r1, #0
        history_ = 0;
 8004540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004544:	dd2e      	ble.n	80045a4 <recorder::StateMachine(bool)+0x1220>
 8004546:	2901      	cmp	r1, #1
            x_[n][0] = 0;
 8004548:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            x_[n][1] = 0;
 800454c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            x_[n][2] = 0;
 8004550:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        for (int n = 0; n < num_sections_; n++)
 8004554:	d026      	beq.n	80045a4 <recorder::StateMachine(bool)+0x1220>
 8004556:	2902      	cmp	r1, #2
            x_[n][0] = 0;
 8004558:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 800455c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 8004560:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        for (int n = 0; n < num_sections_; n++)
 8004564:	d01e      	beq.n	80045a4 <recorder::StateMachine(bool)+0x1220>
 8004566:	2903      	cmp	r1, #3
            x_[n][0] = 0;
 8004568:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 800456c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 8004570:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        for (int n = 0; n < num_sections_; n++)
 8004574:	d016      	beq.n	80045a4 <recorder::StateMachine(bool)+0x1220>
            x_[n][0] = 0;
 8004576:	2200      	movs	r2, #0
        for (int n = 0; n < num_sections_; n++)
 8004578:	2904      	cmp	r1, #4
            x_[n][0] = 0;
 800457a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 800457e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 8004582:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        for (int n = 0; n < num_sections_; n++)
 8004586:	d00d      	beq.n	80045a4 <recorder::StateMachine(bool)+0x1220>
 8004588:	2905      	cmp	r1, #5
            x_[n][0] = 0;
 800458a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 800458e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 8004592:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        for (int n = 0; n < num_sections_; n++)
 8004596:	d005      	beq.n	80045a4 <recorder::StateMachine(bool)+0x1220>
            x_[n][0] = 0;
 8004598:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
            x_[n][1] = 0;
 800459c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            x_[n][2] = 0;
 80045a0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        x_[num_sections_][0] = 0;
 80045a4:	240c      	movs	r4, #12
            if (state_ == STATE_STOPPED)
 80045a6:	482a      	ldr	r0, [pc, #168]	@ (8004650 <recorder::StateMachine(bool)+0x12cc>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	fb04 3301 	mla	r3, r4, r1, r3
 80045ae:	f890 1160 	ldrb.w	r1, [r0, #352]	@ 0x160
 80045b2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
        x_[num_sections_][1] = 0;
 80045b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        x_[num_sections_][2] = 0;
 80045ba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 80045be:	b909      	cbnz	r1, 80045c4 <recorder::StateMachine(bool)+0x1240>
 80045c0:	f7fc f8c8 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
        buffer_index_ = 0;
 80045c4:	4b23      	ldr	r3, [pc, #140]	@ (8004654 <recorder::StateMachine(bool)+0x12d0>)
 80045c6:	2200      	movs	r2, #0
                Transition(STATE_RECORD);
 80045c8:	2002      	movs	r0, #2
 80045ca:	611a      	str	r2, [r3, #16]
    }
 80045cc:	b005      	add	sp, #20
 80045ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                Transition(STATE_PLAY);
 80045d2:	f7fe be01 	b.w	80031d8 <recorder::Transition(recorder::State)>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f47f aa00 	bne.w	80039dc <recorder::StateMachine(bool)+0x658>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80045dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <recorder::StateMachine(bool)+0x12d4>)
 80045de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045e2:	4b1e      	ldr	r3, [pc, #120]	@ (800465c <recorder::StateMachine(bool)+0x12d8>)
 80045e4:	6191      	str	r1, [r2, #24]
 80045e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80045ea:	619a      	str	r2, [r3, #24]
    }
 80045ec:	f7ff b9f6 	b.w	80039dc <recorder::StateMachine(bool)+0x658>
            if (state_ == STATE_STOPPED)
 80045f0:	4817      	ldr	r0, [pc, #92]	@ (8004650 <recorder::StateMachine(bool)+0x12cc>)
                idle_timeout_ = 0;
 80045f2:	6017      	str	r7, [r2, #0]
 80045f4:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 80045f8:	b9e3      	cbnz	r3, 8004634 <recorder::StateMachine(bool)+0x12b0>
 80045fa:	2101      	movs	r1, #1
 80045fc:	f7fc f8aa 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <recorder::StateMachine(bool)+0x12dc>)
            current_note_ = 0;
 8004602:	2200      	movs	r2, #0
            is_active_ = true;
 8004604:	2401      	movs	r4, #1
 8004606:	4917      	ldr	r1, [pc, #92]	@ (8004664 <recorder::StateMachine(bool)+0x12e0>)
                Transition(STATE_ENDING);
 8004608:	200c      	movs	r0, #12
            current_note_ = 0;
 800460a:	611a      	str	r2, [r3, #16]
            is_active_ = true;
 800460c:	819c      	strh	r4, [r3, #12]
            note_timer_ = 0;
 800460e:	615a      	str	r2, [r3, #20]
 8004610:	6059      	str	r1, [r3, #4]
 8004612:	e7db      	b.n	80045cc <recorder::StateMachine(bool)+0x1248>
                playback_.Reset();
 8004614:	4c14      	ldr	r4, [pc, #80]	@ (8004668 <recorder::StateMachine(bool)+0x12e4>)
 8004616:	4620      	mov	r0, r4
 8004618:	f7fe fe46 	bl	80032a8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()>
            cue_play_ = true;
 800461c:	2301      	movs	r3, #1
                analog_.StartPlayback();
 800461e:	480c      	ldr	r0, [pc, #48]	@ (8004650 <recorder::StateMachine(bool)+0x12cc>)
 8004620:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
 8004624:	f7fc f9b0 	bl	8000988 <recorder::Analog::StartPlayback()>
        buffer_index_ = 0;
 8004628:	4a0a      	ldr	r2, [pc, #40]	@ (8004654 <recorder::StateMachine(bool)+0x12d0>)
                Transition(STATE_PLAY);
 800462a:	2003      	movs	r0, #3
                playback_timeout_ = 0;
 800462c:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <recorder::StateMachine(bool)+0x12e8>)
 800462e:	6117      	str	r7, [r2, #16]
 8004630:	601f      	str	r7, [r3, #0]
 8004632:	e7cb      	b.n	80045cc <recorder::StateMachine(bool)+0x1248>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8004634:	2b02      	cmp	r3, #2
 8004636:	d1e3      	bne.n	8004600 <recorder::StateMachine(bool)+0x127c>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004638:	4907      	ldr	r1, [pc, #28]	@ (8004658 <recorder::StateMachine(bool)+0x12d4>)
 800463a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <recorder::StateMachine(bool)+0x12d8>)
 8004640:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004644:	6188      	str	r0, [r1, #24]
 8004646:	619a      	str	r2, [r3, #24]
    }
 8004648:	e7da      	b.n	8004600 <recorder::StateMachine(bool)+0x127c>
 800464a:	bf00      	nop
 800464c:	20010750 	.word	0x20010750
 8004650:	20010c40 	.word	0x20010c40
 8004654:	2001088c 	.word	0x2001088c
 8004658:	58021800 	.word	0x58021800
 800465c:	58020400 	.word	0x58020400
 8004660:	20010910 	.word	0x20010910
 8004664:	3e6c2ad7 	.word	0x3e6c2ad7
 8004668:	20000580 	.word	0x20000580
 800466c:	200108e4 	.word	0x200108e4

08004670 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>:
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8004670:	f500 3380 	add.w	r3, r0, #65536	@ 0x10000
        position_ = 0;
 8004674:	2200      	movs	r2, #0
        state_ = STATE_STOPPED;
 8004676:	2100      	movs	r1, #0
        t_scaler_ = 0.5 / softness;
 8004678:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
        softness_ = softness;
 800467c:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8004680:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8004888 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x218>
            sections_[n].b[0] = sections[n].b[0];
 8004684:	ed9f 6a81 	vldr	s12, [pc, #516]	@ 800488c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x21c>
            buffer_[i] = 0;
 8004688:	3034      	adds	r0, #52	@ 0x34
        b0_ = (1 - cos(omega)) / 2;
        b1_ = 1 - cos(omega);
        b2_ = (1 - cos(omega)) / 2;

        // Scaling coefficients for unity gain at DC
        b0_ /= a0_;
 800468a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004890 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x220>
        void Init(void)
 800468e:	b530      	push	{r4, r5, lr}
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8004690:	4d80      	ldr	r5, [pc, #512]	@ (8004894 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x224>)
        position_ = 0;
 8004692:	f840 2c20 	str.w	r2, [r0, #-32]
        fade_out_ = 0;
 8004696:	f840 2c10 	str.w	r2, [r0, #-16]
        state_ = STATE_STOPPED;
 800469a:	f800 1c1c 	strb.w	r1, [r0, #-28]
 800469e:	639d      	str	r5, [r3, #56]	@ 0x38
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046a0:	4d7d      	ldr	r5, [pc, #500]	@ (8004898 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x228>)
        ratio_ = 1 / ratio - 1;
 80046a2:	4c7e      	ldr	r4, [pc, #504]	@ (800489c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x22c>)
 80046a4:	649d      	str	r5, [r3, #72]	@ 0x48
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 80046a6:	4d7e      	ldr	r5, [pc, #504]	@ (80048a0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x230>)
 80046a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
 80046aa:	64dd      	str	r5, [r3, #76]	@ 0x4c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046ac:	f44f 65c8 	mov.w	r5, #1600	@ 0x640
        softness_ = softness;
 80046b0:	f8c3 c040 	str.w	ip, [r3, #64]	@ 0x40
 80046b4:	651d      	str	r5, [r3, #80]	@ 0x50
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046b6:	4d7b      	ldr	r5, [pc, #492]	@ (80048a4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x234>)
        envelope_ = 0;
 80046b8:	659a      	str	r2, [r3, #88]	@ 0x58
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 80046ba:	65dd      	str	r5, [r3, #92]	@ 0x5c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046bc:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
        envelope_ = 0;
 80046c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 80046c2:	665d      	str	r5, [r3, #100]	@ 0x64
        num_sections_ = num_sections;
 80046c4:	2505      	movs	r5, #5
 80046c6:	675a      	str	r2, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 80046c8:	679a      	str	r2, [r3, #120]	@ 0x78
            x_[n][0] = 0;
 80046ca:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 80046ce:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 80046d2:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            x_[n][0] = 0;
 80046d6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 80046da:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 80046de:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            x_[n][0] = 0;
 80046e2:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 80046e6:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 80046ea:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            x_[n][0] = 0;
 80046ee:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 80046f2:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 80046f6:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
        hold_count_ = 0;
 80046fa:	6559      	str	r1, [r3, #84]	@ 0x54
 80046fc:	6699      	str	r1, [r3, #104]	@ 0x68
        write_head_ = 0;
 80046fe:	6359      	str	r1, [r3, #52]	@ 0x34
        t_scaler_ = 0.5 / softness;
 8004700:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
        num_sections_ = num_sections;
 8004704:	f8c3 5114 	str.w	r5, [r3, #276]	@ 0x114
            sections_[n].b[0] = sections[n].b[0];
 8004708:	f8c3 c12c 	str.w	ip, [r3, #300]	@ 0x12c
            sections_[n].b[2] = sections[n].b[2];
 800470c:	f8c3 c134 	str.w	ip, [r3, #308]	@ 0x134
            sections_[n].b[0] = sections[n].b[0];
 8004710:	f8c3 c140 	str.w	ip, [r3, #320]	@ 0x140
            sections_[n].b[2] = sections[n].b[2];
 8004714:	f8c3 c148 	str.w	ip, [r3, #328]	@ 0x148
            sections_[n].b[0] = sections[n].b[0];
 8004718:	f8c3 c154 	str.w	ip, [r3, #340]	@ 0x154
            sections_[n].b[2] = sections[n].b[2];
 800471c:	f8c3 c15c 	str.w	ip, [r3, #348]	@ 0x15c
            sections_[n].b[0] = sections[n].b[0];
 8004720:	f8c3 c168 	str.w	ip, [r3, #360]	@ 0x168
            sections_[n].b[2] = sections[n].b[2];
 8004724:	f8c3 c170 	str.w	ip, [r3, #368]	@ 0x170
            sections_[n].b[1] = sections[n].b[1];
 8004728:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 80048f0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x280>
        Q_ = Q;
 800472c:	4c5e      	ldr	r4, [pc, #376]	@ (80048a8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x238>)
 800472e:	f8c3 c11c 	str.w	ip, [r3, #284]	@ 0x11c
            sections_[n].a[0] = sections[n].a[0];
 8004732:	f8df c1c0 	ldr.w	ip, [pc, #448]	@ 80048f4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x284>
            x_[n][1] = 0;
 8004736:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
            sections_[n].a[0] = sections[n].a[0];
 800473a:	f8c3 c124 	str.w	ip, [r3, #292]	@ 0x124
            sections_[n].a[1] = sections[n].a[1];
 800473e:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 80048f8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x288>
            x_[n][2] = 0;
 8004742:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
            sections_[n].a[1] = sections[n].a[1];
 8004746:	f8c3 c128 	str.w	ip, [r3, #296]	@ 0x128
            sections_[n].b[1] = sections[n].b[1];
 800474a:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 80048fc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x28c>
            x_[n][0] = 0;
 800474e:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
            sections_[n].b[1] = sections[n].b[1];
 8004752:	f8c3 c130 	str.w	ip, [r3, #304]	@ 0x130
            sections_[n].a[0] = sections[n].a[0];
 8004756:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8004900 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x290>
            x_[n][1] = 0;
 800475a:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
            sections_[n].a[0] = sections[n].a[0];
 800475e:	f8c3 c138 	str.w	ip, [r3, #312]	@ 0x138
            sections_[n].a[1] = sections[n].a[1];
 8004762:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8004904 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x294>
            x_[n][2] = 0;
 8004766:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            sections_[n].a[1] = sections[n].a[1];
 800476a:	f8c3 c13c 	str.w	ip, [r3, #316]	@ 0x13c
            sections_[n].b[1] = sections[n].b[1];
 800476e:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8004908 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x298>
        x_[num_sections_][0] = 0;
 8004772:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            sections_[n].b[1] = sections[n].b[1];
 8004776:	f8c3 c144 	str.w	ip, [r3, #324]	@ 0x144
            sections_[n].a[0] = sections[n].a[0];
 800477a:	f8df c190 	ldr.w	ip, [pc, #400]	@ 800490c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x29c>
        x_[num_sections_][1] = 0;
 800477e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
            sections_[n].a[0] = sections[n].a[0];
 8004782:	f8c3 c14c 	str.w	ip, [r3, #332]	@ 0x14c
            sections_[n].a[1] = sections[n].a[1];
 8004786:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8004910 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a0>
        x_[num_sections_][2] = 0;
 800478a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
            sections_[n].a[1] = sections[n].a[1];
 800478e:	f8c3 c150 	str.w	ip, [r3, #336]	@ 0x150
            sections_[n].b[1] = sections[n].b[1];
 8004792:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8004914 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a4>
            sections_[n].b[0] = sections[n].b[0];
 8004796:	ed83 6a46 	vstr	s12, [r3, #280]	@ 0x118
            sections_[n].b[1] = sections[n].b[1];
 800479a:	f8c3 c158 	str.w	ip, [r3, #344]	@ 0x158
            sections_[n].a[0] = sections[n].a[0];
 800479e:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8004918 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a8>
            sections_[n].b[2] = sections[n].b[2];
 80047a2:	ed83 6a48 	vstr	s12, [r3, #288]	@ 0x120
            sections_[n].a[0] = sections[n].a[0];
 80047a6:	f8c3 c160 	str.w	ip, [r3, #352]	@ 0x160
            sections_[n].a[1] = sections[n].a[1];
 80047aa:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800491c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2ac>
        sampleRate_ = sampleRate;
 80047ae:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8004920 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b0>
 80047b2:	f8c3 c164 	str.w	ip, [r3, #356]	@ 0x164
            sections_[n].b[1] = sections[n].b[1];
 80047b6:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8004924 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b4>
        a1_ = -2 * cos(omega);
        a2_ = 1 - alpha / A;

        // Scaling coefficients for unity gain at the center frequency
        b0_ /= a0_;
        b1_ /= a0_;
 80047ba:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80048ac <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x23c>
 80047be:	f8c3 c16c 	str.w	ip, [r3, #364]	@ 0x16c
            sections_[n].a[0] = sections[n].a[0];
 80047c2:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8004928 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b8>
 80047c6:	f8c3 c174 	str.w	ip, [r3, #372]	@ 0x174
            sections_[n].a[1] = sections[n].a[1];
 80047ca:	f8df c160 	ldr.w	ip, [pc, #352]	@ 800492c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2bc>
 80047ce:	f8c3 c178 	str.w	ip, [r3, #376]	@ 0x178
        Q_ = Q;
 80047d2:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        centerFrequency_ = centerFrequency;
 80047d6:	4c36      	ldr	r4, [pc, #216]	@ (80048b0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x240>)
{
public:
    void Init(float sampleRate, float frequency, float mix)
    {
        sampleRate_ = sampleRate;
        phase_ = 0.0;
 80047d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80047dc:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
        gain_ = std::pow(10, gainDB / 20.0); // Convert gain from dB to linear scale
 80047e0:	4c34      	ldr	r4, [pc, #208]	@ (80048b4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x244>)
        envelope_ = 0;
 80047e2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80047e6:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
        a0_ = 1 + alpha / A;
 80047ea:	4c33      	ldr	r4, [pc, #204]	@ (80048b8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x248>)
        b2_ /= a0_;
        a1_ /= a0_;
        a2_ /= a0_;
 80047ec:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x24c>)
        a0_ = 1 + alpha / A;
 80047ee:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
        b0_ /= a0_;
 80047f2:	4c33      	ldr	r4, [pc, #204]	@ (80048c0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x250>)
        b2_ /= a0_;
 80047f4:	f8df c138 	ldr.w	ip, [pc, #312]	@ 8004930 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2c0>
        b0_ /= a0_;
 80047f8:	f8c3 40f8 	str.w	r4, [r3, #248]	@ 0xf8
        cutoffFrequency_ = cutoffFrequency;
 80047fc:	4c31      	ldr	r4, [pc, #196]	@ (80048c4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x254>)
        a2_ /= a0_;
 80047fe:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
            buffer_[i] = 0;
 8004802:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004806:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        a0_ = 1 + alpha;
 800480a:	4c2f      	ldr	r4, [pc, #188]	@ (80048c8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x258>)
        sampleRate_ = sampleRate;
 800480c:	f8c3 e07c 	str.w	lr, [r3, #124]	@ 0x7c
        a0_ = 1 + alpha;
 8004810:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        b1_ /= a0_;
 8004814:	4c2d      	ldr	r4, [pc, #180]	@ (80048cc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x25c>)
        Q_ = Q;
 8004816:	edc3 6a39 	vstr	s13, [r3, #228]	@ 0xe4
 800481a:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        b2_ /= a0_;
        a1_ /= a0_;
 800481e:	4c2c      	ldr	r4, [pc, #176]	@ (80048d0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x260>)
        b0_ /= a0_;
 8004820:	ed83 7a25 	vstr	s14, [r3, #148]	@ 0x94
        a1_ /= a0_;
 8004824:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        a2_ /= a0_;
 8004828:	4c2a      	ldr	r4, [pc, #168]	@ (80048d4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x264>)
        b2_ /= a0_;
 800482a:	ed83 7a27 	vstr	s14, [r3, #156]	@ 0x9c
        a2_ /= a0_;
 800482e:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 8004832:	4c29      	ldr	r4, [pc, #164]	@ (80048d8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x268>)
        sampleRate_ = sampleRate;
 8004834:	f8c3 e0b0 	str.w	lr, [r3, #176]	@ 0xb0
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 8004838:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
        envFollower_.Init(50, 200, 500, 16000);
    }

    void SetFrequency(float frequency)
    {
        frequency_ = frequency;
 800483c:	4c27      	ldr	r4, [pc, #156]	@ (80048dc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x26c>)
        sampleRate_ = sampleRate;
 800483e:	f8c3 e0dc 	str.w	lr, [r3, #220]	@ 0xdc
 8004842:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
        phaseIncrement_ = frequency_ * twoPiOverSampleRate_;
 8004846:	4c26      	ldr	r4, [pc, #152]	@ (80048e0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x270>)
        hold_count_ = 0;
 8004848:	f8c3 10d4 	str.w	r1, [r3, #212]	@ 0xd4
 800484c:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
    }

    void SetMix(float mix)
    {
        mix_ = mix;
 8004850:	4c24      	ldr	r4, [pc, #144]	@ (80048e4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x274>)
        b1_ /= a0_;
 8004852:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
 8004856:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800485a:	4c23      	ldr	r4, [pc, #140]	@ (80048e8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x278>)
        a1_ /= a0_;
 800485c:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
 8004860:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8004864:	4c21      	ldr	r4, [pc, #132]	@ (80048ec <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x27c>)
        b2_ /= a0_;
 8004866:	f8c3 c100 	str.w	ip, [r3, #256]	@ 0x100
 800486a:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 800486e:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8004872:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            state_ = STATE_STOPPED;
 8004876:	f800 1c04 	strb.w	r1, [r0, #-4]
            cue_play_ = false;
 800487a:	f820 1c03 	strh.w	r1, [r0, #-3]
        }
 800487e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004882:	f006 bb7c 	b.w	800af7e <memset>
 8004886:	bf00      	nop
 8004888:	3a23c800 	.word	0x3a23c800
 800488c:	3a446737 	.word	0x3a446737
 8004890:	3c97b968 	.word	0x3c97b968
 8004894:	3f642905 	.word	0x3f642905
 8004898:	3c4b8680 	.word	0x3c4b8680
 800489c:	bd430c20 	.word	0xbd430c20
 80048a0:	39831000 	.word	0x39831000
 80048a4:	3bcc2980 	.word	0x3bcc2980
 80048a8:	41200000 	.word	0x41200000
 80048ac:	bfd87b8b 	.word	0xbfd87b8b
 80048b0:	44610000 	.word	0x44610000
 80048b4:	404a62c2 	.word	0x404a62c2
 80048b8:	3f8e0284 	.word	0x3f8e0284
 80048bc:	3f4d7d3b 	.word	0x3f4d7d3b
 80048c0:	3ff1a63d 	.word	0x3ff1a63d
 80048c4:	442f0000 	.word	0x442f0000
 80048c8:	3f81bcba 	.word	0x3f81bcba
 80048cc:	3d17b968 	.word	0x3d17b968
 80048d0:	bff316de 	.word	0xbff316de
 80048d4:	3f7924e9 	.word	0x3f7924e9
 80048d8:	39cde32e 	.word	0x39cde32e
 80048dc:	43c80000 	.word	0x43c80000
 80048e0:	3e20d97c 	.word	0x3e20d97c
 80048e4:	3f333333 	.word	0x3f333333
 80048e8:	3aa3bc00 	.word	0x3aa3bc00
 80048ec:	39a3d000 	.word	0x39a3d000
 80048f0:	3a85b218 	.word	0x3a85b218
 80048f4:	bfbc65fb 	.word	0xbfbc65fb
 80048f8:	3f10296d 	.word	0x3f10296d
 80048fc:	beade39b 	.word	0xbeade39b
 8004900:	bfb80d8c 	.word	0xbfb80d8c
 8004904:	3f2d1db0 	.word	0x3f2d1db0
 8004908:	bf74e042 	.word	0xbf74e042
 800490c:	bfb33dc4 	.word	0xbfb33dc4
 8004910:	3f4f7eb1 	.word	0x3f4f7eb1
 8004914:	bf954df0 	.word	0xbf954df0
 8004918:	bfb0aec0 	.word	0xbfb0aec0
 800491c:	3f68ba72 	.word	0x3f68ba72
 8004920:	467a0000 	.word	0x467a0000
 8004924:	bf9e3e9d 	.word	0xbf9e3e9d
 8004928:	bfb140a2 	.word	0xbfb140a2
 800492c:	3f793977 	.word	0x3f793977
 8004930:	bdae79fb 	.word	0xbdae79fb

08004934 <recorder::SampleMemory<half>::Init()>:
    void Init(void)
 8004934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        dirty_ = false;
 8004938:	2400      	movs	r4, #0
    void Init(void)
 800493a:	b085      	sub	sp, #20
 800493c:	4605      	mov	r5, r0
        dirty_ = false;
 800493e:	7344      	strb	r4, [r0, #13]
        for (uint32_t i = 0; i < kNumBlocks; i++)
 8004940:	46a1      	mov	r9, r4
        buffer_index_ = 0;
 8004942:	6104      	str	r4, [r0, #16]
 8004944:	f105 0b20 	add.w	fp, r5, #32
        flash_.Init();
 8004948:	f002 f88c 	bl	8006a64 <recorder::Flash::Init()>
        __HAL_RCC_CRC_CLK_ENABLE();
 800494c:	4aae      	ldr	r2, [pc, #696]	@ (8004c08 <recorder::SampleMemory<half>::Init()+0x2d4>)
  WRITE_REG(CRCx->POL, PolynomCoef);
 800494e:	4baf      	ldr	r3, [pc, #700]	@ (8004c0c <recorder::SampleMemory<half>::Init()+0x2d8>)
 8004950:	f8d2 10e0 	ldr.w	r1, [r2, #224]	@ 0xe0
 8004954:	48ae      	ldr	r0, [pc, #696]	@ (8004c10 <recorder::SampleMemory<half>::Init()+0x2dc>)
 8004956:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800495a:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 800495e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8004962:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8004966:	9203      	str	r2, [sp, #12]
  WRITE_REG(CRCx->INIT, InitCrc);
 8004968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800496c:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800496e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004976:	6099      	str	r1, [r3, #8]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
 800497e:	6099      	str	r1, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8004980:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	f041 0101 	orr.w	r1, r1, #1
 8004988:	6099      	str	r1, [r3, #8]
        num_links_ = num_links;
 800498a:	2303      	movs	r3, #3
        chain_ = chain;
 800498c:	49a1      	ldr	r1, [pc, #644]	@ (8004c14 <recorder::SampleMemory<half>::Init()+0x2e0>)
        num_links_ = num_links;
 800498e:	63eb      	str	r3, [r5, #60]	@ 0x3c
            return length * sizeof(T);
 8004990:	684b      	ldr	r3, [r1, #4]
 8004992:	6908      	ldr	r0, [r1, #16]
 8004994:	005b      	lsls	r3, r3, #1
            link.offset = total_size_;
 8004996:	608c      	str	r4, [r1, #8]
        chain_ = chain;
 8004998:	6429      	str	r1, [r5, #64]	@ 0x40
            link.offset = total_size_;
 800499a:	614b      	str	r3, [r1, #20]
            total_size_ += link.size();
 800499c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80049a0:	4c9d      	ldr	r4, [pc, #628]	@ (8004c18 <recorder::SampleMemory<half>::Init()+0x2e4>)
            link.offset = total_size_;
 80049a2:	620b      	str	r3, [r1, #32]
            return length * sizeof(T);
 80049a4:	69c9      	ldr	r1, [r1, #28]
 80049a6:	9201      	str	r2, [sp, #4]
            total_size_ += link.size();
 80049a8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80049ac:	646b      	str	r3, [r5, #68]	@ 0x44
        uint32_t page_n = block_n / kBlocksPerPage;
 80049ae:	4b9b      	ldr	r3, [pc, #620]	@ (8004c1c <recorder::SampleMemory<half>::Init()+0x2e8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80049b0:	2702      	movs	r7, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 80049b2:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 80049b6:	fba3 2309 	umull	r2, r3, r3, r9
        QUADSPI->CCR =
 80049ba:	f8df 8264 	ldr.w	r8, [pc, #612]	@ 8004c20 <recorder::SampleMemory<half>::Init()+0x2ec>
 80049be:	eba9 0203 	sub.w	r2, r9, r3
 80049c2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80049c6:	0a1b      	lsrs	r3, r3, #8
        return page_n * kPageSize + block_n * kBlockSize;
 80049c8:	eb03 1603 	add.w	r6, r3, r3, lsl #4
 80049cc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 80049d0:	eba9 0606 	sub.w	r6, r9, r6
 80049d4:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80049d8:	eb06 3603 	add.w	r6, r6, r3, lsl #12
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	f013 0320 	ands.w	r3, r3, #32
 80049e2:	d1fb      	bne.n	80049dc <recorder::SampleMemory<half>::Init()+0xa8>
        QUADSPI->DLR = 0;
 80049e4:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 80049e6:	f8c4 8014 	str.w	r8, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80049f0:	d0fb      	beq.n	80049ea <recorder::SampleMemory<half>::Init()+0xb6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80049f2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049f6:	b2db      	uxtb	r3, r3
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80049f8:	68a2      	ldr	r2, [r4, #8]
 80049fa:	0792      	lsls	r2, r2, #30
 80049fc:	d5fc      	bpl.n	80049f8 <recorder::SampleMemory<half>::Init()+0xc4>
        while (write_in_progress())
 80049fe:	07db      	lsls	r3, r3, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004a00:	60e7      	str	r7, [r4, #12]
        while (write_in_progress())
 8004a02:	d503      	bpl.n	8004a0c <recorder::SampleMemory<half>::Init()+0xd8>
            system::Delay_ms(1);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f002 ff09 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004a0a:	e7e7      	b.n	80049dc <recorder::SampleMemory<half>::Init()+0xa8>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	230f      	movs	r3, #15
 8004a10:	4659      	mov	r1, fp
 8004a12:	4650      	mov	r0, sl
 8004a14:	f002 fa02 	bl	8006e1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
            sum += bytes[i];
 8004a18:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 8004a1c:	f895 7020 	ldrb.w	r7, [r5, #32]
 8004a20:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8004a24:	4417      	add	r7, r2
 8004a26:	f895 6023 	ldrb.w	r6, [r5, #35]	@ 0x23
 8004a2a:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8004a2e:	443b      	add	r3, r7
 8004a30:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8004a34:	f895 2026 	ldrb.w	r2, [r5, #38]	@ 0x26
 8004a38:	441e      	add	r6, r3
 8004a3a:	f895 c027 	ldrb.w	ip, [r5, #39]	@ 0x27
 8004a3e:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8004a42:	4430      	add	r0, r6
 8004a44:	f895 7029 	ldrb.w	r7, [r5, #41]	@ 0x29
 8004a48:	f895 602a 	ldrb.w	r6, [r5, #42]	@ 0x2a
 8004a4c:	4401      	add	r1, r0
 8004a4e:	f895 002b 	ldrb.w	r0, [r5, #43]	@ 0x2b
 8004a52:	440a      	add	r2, r1
 8004a54:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8004a58:	4494      	add	ip, r2
 8004a5a:	f895 202d 	ldrb.w	r2, [r5, #45]	@ 0x2d
 8004a5e:	4463      	add	r3, ip
 8004a60:	441f      	add	r7, r3
 8004a62:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 8004a66:	443e      	add	r6, r7
 8004a68:	4430      	add	r0, r6
 8004a6a:	4401      	add	r1, r0
 8004a6c:	440a      	add	r2, r1
 8004a6e:	4413      	add	r3, r2
            if (LoadBlock(i) && IsValid(block_))
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2bff      	cmp	r3, #255	@ 0xff
 8004a74:	d039      	beq.n	8004aea <recorder::SampleMemory<half>::Init()+0x1b6>
        for (uint32_t i = 0; i < kNumBlocks; i++)
 8004a76:	f109 0901 	add.w	r9, r9, #1
 8004a7a:	f240 2322 	movw	r3, #546	@ 0x222
 8004a7e:	4599      	cmp	r9, r3
 8004a80:	d195      	bne.n	80049ae <recorder::SampleMemory<half>::Init()+0x7a>
        active_block_n_ = FindFreshestBlock();
 8004a82:	9a01      	ldr	r2, [sp, #4]
        if (block_n == -1)
 8004a84:	1c54      	adds	r4, r2, #1
        active_block_n_ = FindFreshestBlock();
 8004a86:	632a      	str	r2, [r5, #48]	@ 0x30
        if (block_n == -1)
 8004a88:	d051      	beq.n	8004b2e <recorder::SampleMemory<half>::Init()+0x1fa>
        uint32_t page_n = block_n / kBlocksPerPage;
 8004a8a:	4964      	ldr	r1, [pc, #400]	@ (8004c1c <recorder::SampleMemory<half>::Init()+0x2e8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004a8c:	f04f 0a02 	mov.w	sl, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 8004a90:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 8004a94:	fba1 3102 	umull	r3, r1, r1, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004a98:	4c5f      	ldr	r4, [pc, #380]	@ (8004c18 <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 8004a9a:	4f61      	ldr	r7, [pc, #388]	@ (8004c20 <recorder::SampleMemory<half>::Init()+0x2ec>)
 8004a9c:	1a50      	subs	r0, r2, r1
 8004a9e:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 8004aa2:	0a09      	lsrs	r1, r1, #8
        return page_n * kPageSize + block_n * kBlockSize;
 8004aa4:	eb01 1001 	add.w	r0, r1, r1, lsl #4
 8004aa8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8004aac:	1a12      	subs	r2, r2, r0
 8004aae:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8004ab2:	eb02 3201 	add.w	r2, r2, r1, lsl #12
        while (write_in_progress())
 8004ab6:	4691      	mov	r9, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004ab8:	68a6      	ldr	r6, [r4, #8]
 8004aba:	f016 0620 	ands.w	r6, r6, #32
 8004abe:	d1fb      	bne.n	8004ab8 <recorder::SampleMemory<half>::Init()+0x184>
        QUADSPI->DLR = 0;
 8004ac0:	6126      	str	r6, [r4, #16]
        QUADSPI->CCR =
 8004ac2:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8004aca:	d0fb      	beq.n	8004ac4 <recorder::SampleMemory<half>::Init()+0x190>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004acc:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004ad0:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	0798      	lsls	r0, r3, #30
 8004ad6:	d5fc      	bpl.n	8004ad2 <recorder::SampleMemory<half>::Init()+0x19e>
        while (write_in_progress())
 8004ad8:	f012 0201 	ands.w	r2, r2, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004adc:	f8c4 a00c 	str.w	sl, [r4, #12]
        while (write_in_progress())
 8004ae0:	d01a      	beq.n	8004b18 <recorder::SampleMemory<half>::Init()+0x1e4>
            system::Delay_ms(1);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f002 fe9a 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004ae8:	e7e6      	b.n	8004ab8 <recorder::SampleMemory<half>::Init()+0x184>
                if ((block == -1) ||
 8004aea:	9b01      	ldr	r3, [sp, #4]
                uint32_t sn = block_.sequence_num;
 8004aec:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
                if ((block == -1) ||
 8004aee:	3301      	adds	r3, #1
 8004af0:	d007      	beq.n	8004b02 <recorder::SampleMemory<half>::Init()+0x1ce>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004af2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
                if ((block == -1) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d908      	bls.n	8004b0a <recorder::SampleMemory<half>::Init()+0x1d6>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f240 2121 	movw	r1, #545	@ 0x221
 8004afe:	428b      	cmp	r3, r1
 8004b00:	d8b9      	bhi.n	8004a76 <recorder::SampleMemory<half>::Init()+0x142>
            if (LoadBlock(i) && IsValid(block_))
 8004b02:	f8cd 9004 	str.w	r9, [sp, #4]
                    sequence_ = sn;
 8004b06:	636a      	str	r2, [r5, #52]	@ 0x34
 8004b08:	e7b5      	b.n	8004a76 <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 8004b0a:	d2b4      	bcs.n	8004a76 <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn < sequence_) && (sequence_ - sn >= kNumBlocks)))
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	f240 2121 	movw	r1, #545	@ 0x221
 8004b12:	428b      	cmp	r3, r1
 8004b14:	d9af      	bls.n	8004a76 <recorder::SampleMemory<half>::Init()+0x142>
 8004b16:	e7f4      	b.n	8004b02 <recorder::SampleMemory<half>::Init()+0x1ce>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004b18:	4613      	mov	r3, r2
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	464a      	mov	r2, r9
 8004b1e:	4659      	mov	r1, fp
 8004b20:	4699      	mov	r9, r3
 8004b22:	230f      	movs	r3, #15
 8004b24:	f002 f97a 	bl	8006e1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
        if (active_block_n_ != -1)
 8004b28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	d10a      	bne.n	8004b44 <recorder::SampleMemory<half>::Init()+0x210>
            printf("No save data found\n");
 8004b2e:	483d      	ldr	r0, [pc, #244]	@ (8004c24 <recorder::SampleMemory<half>::Init()+0x2f0>)
 8004b30:	f006 f9f2 	bl	800af18 <puts>
            audio_info_.address = kAudioBufferAddress;
 8004b34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    }
 8004b3e:	b005      	add	sp, #20
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            std::memcpy(&data, &block_.data, sizeof(T));
 8004b44:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004b48:	f8db 2004 	ldr.w	r2, [fp, #4]
 8004b4c:	6a29      	ldr	r1, [r5, #32]
 8004b4e:	61eb      	str	r3, [r5, #28]
 8004b50:	6169      	str	r1, [r5, #20]
 8004b52:	61aa      	str	r2, [r5, #24]
            printf("Save data found:\n");
 8004b54:	4834      	ldr	r0, [pc, #208]	@ (8004c28 <recorder::SampleMemory<half>::Init()+0x2f4>)
 8004b56:	f006 f9df 	bl	800af18 <puts>
        printf("%sAddress: 0x%08" PRIX32 "\n", line_prefix, audio_info_.address);
 8004b5a:	4934      	ldr	r1, [pc, #208]	@ (8004c2c <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b5c:	696a      	ldr	r2, [r5, #20]
 8004b5e:	4834      	ldr	r0, [pc, #208]	@ (8004c30 <recorder::SampleMemory<half>::Init()+0x2fc>)
 8004b60:	f006 f972 	bl	800ae48 <iprintf>
        printf("%sSize:    0x%08" PRIX32 "\n", line_prefix, audio_info_.size);
 8004b64:	4931      	ldr	r1, [pc, #196]	@ (8004c2c <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b66:	69aa      	ldr	r2, [r5, #24]
 8004b68:	4832      	ldr	r0, [pc, #200]	@ (8004c34 <recorder::SampleMemory<half>::Init()+0x300>)
 8004b6a:	f006 f96d 	bl	800ae48 <iprintf>
        printf("%sCRC32:   0x%08" PRIX32 "\n", line_prefix, audio_info_.crc32);
 8004b6e:	492f      	ldr	r1, [pc, #188]	@ (8004c2c <recorder::SampleMemory<half>::Init()+0x2f8>)
 8004b70:	69ea      	ldr	r2, [r5, #28]
 8004b72:	4831      	ldr	r0, [pc, #196]	@ (8004c38 <recorder::SampleMemory<half>::Init()+0x304>)
 8004b74:	f006 f968 	bl	800ae48 <iprintf>
            if (audio_info_.address < kAudioBufferAddress)
 8004b78:	696b      	ldr	r3, [r5, #20]
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b7e:	d339      	bcc.n	8004bf4 <recorder::SampleMemory<half>::Init()+0x2c0>
                printf("Loading audio... ");
 8004b80:	482e      	ldr	r0, [pc, #184]	@ (8004c3c <recorder::SampleMemory<half>::Init()+0x308>)
 8004b82:	f006 f961 	bl	800ae48 <iprintf>
  WRITE_REG(CRCx->INIT, InitCrc);
 8004b86:	4b21      	ldr	r3, [pc, #132]	@ (8004c0c <recorder::SampleMemory<half>::Init()+0x2d8>)
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b8c:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]
    iter end() {return iter(chain_, num_links_);}
 8004b96:	e9d5 370f 	ldrd	r3, r7, [r5, #60]	@ 0x3c
                uint32_t address = audio_info_.address;
 8004b9a:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
                for (auto link : buffer_chain_)
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8081 	beq.w	8004ca6 <recorder::SampleMemory<half>::Init()+0x372>
 8004ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ba8:	3704      	adds	r7, #4
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004baa:	4c1b      	ldr	r4, [pc, #108]	@ (8004c18 <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 8004bac:	46ab      	mov	fp, r5
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	e957 5301 	ldrd	r5, r3, [r7, #-4]
            return length * sizeof(T);
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4543      	cmp	r3, r8
 8004bb8:	bf28      	it	cs
 8004bba:	4643      	movcs	r3, r8
 8004bbc:	469a      	mov	sl, r3
                    system::ReloadWatchdog();
 8004bbe:	f002 fc2b 	bl	8007418 <recorder::system::ReloadWatchdog()>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004bc2:	68a3      	ldr	r3, [r4, #8]
 8004bc4:	f013 0320 	ands.w	r3, r3, #32
 8004bc8:	d1fb      	bne.n	8004bc2 <recorder::SampleMemory<half>::Init()+0x28e>
        QUADSPI->DLR = 0;
 8004bca:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8004bcc:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <recorder::SampleMemory<half>::Init()+0x2ec>)
 8004bce:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8004bd6:	d0fb      	beq.n	8004bd0 <recorder::SampleMemory<half>::Init()+0x29c>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8004bd8:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004bdc:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8004bde:	68a3      	ldr	r3, [r4, #8]
 8004be0:	0799      	lsls	r1, r3, #30
 8004be2:	d5fc      	bpl.n	8004bde <recorder::SampleMemory<half>::Init()+0x2aa>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8004be4:	2302      	movs	r3, #2
 8004be6:	60e3      	str	r3, [r4, #12]
        while (write_in_progress())
 8004be8:	07d3      	lsls	r3, r2, #31
 8004bea:	d52b      	bpl.n	8004c44 <recorder::SampleMemory<half>::Init()+0x310>
            system::Delay_ms(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f002 fe15 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8004bf2:	e7e6      	b.n	8004bc2 <recorder::SampleMemory<half>::Init()+0x28e>
                printf("Invalid address\n");
 8004bf4:	4812      	ldr	r0, [pc, #72]	@ (8004c40 <recorder::SampleMemory<half>::Init()+0x30c>)
 8004bf6:	f006 f98f 	bl	800af18 <puts>
                audio_info_.address = kAudioBufferAddress;
 8004bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bfe:	e9c5 3905 	strd	r3, r9, [r5, #20]
    }
 8004c02:	b005      	add	sp, #20
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	58024c00 	.word	0x58024c00
 8004c10:	04c11db7 	.word	0x04c11db7
 8004c14:	20000000 	.word	0x20000000
 8004c18:	52005000 	.word	0x52005000
 8004c1c:	e01e01e1 	.word	0xe01e01e1
 8004c20:	05000105 	.word	0x05000105
 8004c24:	0800c01c 	.word	0x0800c01c
 8004c28:	0800c008 	.word	0x0800c008
 8004c2c:	0800bfc4 	.word	0x0800bfc4
 8004c30:	0800bfcc 	.word	0x0800bfcc
 8004c34:	0800bfe0 	.word	0x0800bfe0
 8004c38:	0800bff4 	.word	0x0800bff4
 8004c3c:	0800c040 	.word	0x0800c040
 8004c40:	0800c030 	.word	0x0800c030
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8004c44:	4653      	mov	r3, sl
 8004c46:	464a      	mov	r2, r9
 8004c48:	4629      	mov	r1, r5
 8004c4a:	4658      	mov	r0, fp
 8004c4c:	f002 f8e6 	bl	8006e1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
                    system::ReloadWatchdog();
 8004c50:	f002 fbe2 	bl	8007418 <recorder::system::ReloadWatchdog()>
        while (size >= 4)
 8004c54:	f1ba 0f03 	cmp.w	sl, #3
 8004c58:	d935      	bls.n	8004cc6 <recorder::SampleMemory<half>::Init()+0x392>
 8004c5a:	f1aa 0304 	sub.w	r3, sl, #4
  WRITE_REG(CRCx->DR, InData);
 8004c5e:	481e      	ldr	r0, [pc, #120]	@ (8004cd8 <recorder::SampleMemory<half>::Init()+0x3a4>)
 8004c60:	f023 0303 	bic.w	r3, r3, #3
 8004c64:	3304      	adds	r3, #4
 8004c66:	442b      	add	r3, r5
            auto word = *reinterpret_cast<const uint32_t*>(data);
 8004c68:	f855 2b04 	ldr.w	r2, [r5], #4
        while (size >= 4)
 8004c6c:	429d      	cmp	r5, r3
 8004c6e:	6002      	str	r2, [r0, #0]
 8004c70:	d1fa      	bne.n	8004c68 <recorder::SampleMemory<half>::Init()+0x334>
 8004c72:	f00a 0303 	and.w	r3, sl, #3
        while (size--)
 8004c76:	b153      	cbz	r3, 8004c8e <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004c78:	7828      	ldrb	r0, [r5, #0]
        while (size--)
 8004c7a:	2b01      	cmp	r3, #1
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8004c7c:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <recorder::SampleMemory<half>::Init()+0x3a4>)
 8004c7e:	7010      	strb	r0, [r2, #0]
 8004c80:	d005      	beq.n	8004c8e <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004c82:	7868      	ldrb	r0, [r5, #1]
        while (size--)
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	7010      	strb	r0, [r2, #0]
 8004c88:	d001      	beq.n	8004c8e <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8004c8a:	78ab      	ldrb	r3, [r5, #2]
 8004c8c:	7013      	strb	r3, [r2, #0]
  return (uint32_t)(READ_REG(CRCx->DR));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <recorder::SampleMemory<half>::Init()+0x3a4>)
                    if (total_size == 0)
 8004c90:	ebb8 080a 	subs.w	r8, r8, sl
                    address += read_size;
 8004c94:	44d1      	add	r9, sl
 8004c96:	681b      	ldr	r3, [r3, #0]
                    if (total_size == 0)
 8004c98:	d004      	beq.n	8004ca4 <recorder::SampleMemory<half>::Init()+0x370>
                for (auto link : buffer_chain_)
 8004c9a:	3603      	adds	r6, #3
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	42b3      	cmp	r3, r6
 8004ca2:	d185      	bne.n	8004bb0 <recorder::SampleMemory<half>::Init()+0x27c>
 8004ca4:	465d      	mov	r5, fp
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd8 <recorder::SampleMemory<half>::Init()+0x3a4>)
                if (audio_info_.crc32 == crc_.value())
 8004ca8:	69e9      	ldr	r1, [r5, #28]
 8004caa:	6813      	ldr	r3, [r2, #0]
        return ~LL_CRC_ReadData32(CRC);
 8004cac:	43db      	mvns	r3, r3
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	d00b      	beq.n	8004cca <recorder::SampleMemory<half>::Init()+0x396>
 8004cb2:	6811      	ldr	r1, [r2, #0]
                    printf("invalid CRC32: 0x%08" PRIX32 "\n", crc_.value());
 8004cb4:	4809      	ldr	r0, [pc, #36]	@ (8004cdc <recorder::SampleMemory<half>::Init()+0x3a8>)
 8004cb6:	43c9      	mvns	r1, r1
 8004cb8:	f006 f8c6 	bl	800ae48 <iprintf>
                    audio_info_.size = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61ab      	str	r3, [r5, #24]
    }
 8004cc0:	b005      	add	sp, #20
 8004cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (size >= 4)
 8004cc6:	4653      	mov	r3, sl
 8004cc8:	e7d5      	b.n	8004c76 <recorder::SampleMemory<half>::Init()+0x342>
                    printf("done\n");
 8004cca:	4805      	ldr	r0, [pc, #20]	@ (8004ce0 <recorder::SampleMemory<half>::Init()+0x3ac>)
    }
 8004ccc:	b005      	add	sp, #20
 8004cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    printf("done\n");
 8004cd2:	f006 b921 	b.w	800af18 <puts>
 8004cd6:	bf00      	nop
 8004cd8:	58024c00 	.word	0x58024c00
 8004cdc:	0800c05c 	.word	0x0800c05c
 8004ce0:	0800c054 	.word	0x0800c054

08004ce4 <main>:

    extern "C" int main(void)
    {
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	b083      	sub	sp, #12
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 8004cea:	2400      	movs	r4, #0
        system::Init();
 8004cec:	f002 fb9c 	bl	8007428 <recorder::system::Init()>
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 8004cf0:	49d5      	ldr	r1, [pc, #852]	@ (8005048 <main+0x364>)
 8004cf2:	48d6      	ldr	r0, [pc, #856]	@ (800504c <main+0x368>)
 8004cf4:	f001 fce6 	bl	80066c4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
        switches_.Init();
 8004cf8:	48d5      	ldr	r0, [pc, #852]	@ (8005050 <main+0x36c>)
 8004cfa:	f7fb fd53 	bl	80007a4 <recorder::Switches::Init()>
 8004cfe:	4bd5      	ldr	r3, [pc, #852]	@ (8005054 <main+0x370>)
 8004d00:	48d5      	ldr	r0, [pc, #852]	@ (8005058 <main+0x374>)
 8004d02:	601c      	str	r4, [r3, #0]
 8004d04:	49d5      	ldr	r1, [pc, #852]	@ (800505c <main+0x378>)
 8004d06:	4bd6      	ldr	r3, [pc, #856]	@ (8005060 <main+0x37c>)
 8004d08:	4ad6      	ldr	r2, [pc, #856]	@ (8005064 <main+0x380>)
 8004d0a:	6004      	str	r4, [r0, #0]
        button_1_.Init();
        button_2_.Init();
        button_3_.Init();
        button_4_.Init();

        analog_.StartPlayback();
 8004d0c:	48cf      	ldr	r0, [pc, #828]	@ (800504c <main+0x368>)
 8004d0e:	601c      	str	r4, [r3, #0]
 8004d10:	600c      	str	r4, [r1, #0]
 8004d12:	6014      	str	r4, [r2, #0]
 8004d14:	f7fb fe38 	bl	8000988 <recorder::Analog::StartPlayback()>
 8004d18:	49d3      	ldr	r1, [pc, #844]	@ (8005068 <main+0x384>)
        num_sections_ = num_sections;
 8004d1a:	2005      	movs	r0, #5
            x_[n][0] = 0;
 8004d1c:	2200      	movs	r2, #0
            sections_[n].b[0] = sections[n].b[0];
 8004d1e:	4dd3      	ldr	r5, [pc, #844]	@ (800506c <main+0x388>)
        num_sections_ = num_sections;
 8004d20:	1f0b      	subs	r3, r1, #4
 8004d22:	600c      	str	r4, [r1, #0]
 8004d24:	604c      	str	r4, [r1, #4]
            sections_[n].a[0] = sections[n].a[0];
 8004d26:	4cd2      	ldr	r4, [pc, #840]	@ (8005070 <main+0x38c>)
        num_sections_ = num_sections;
 8004d28:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
            sections_[n].a[0] = sections[n].a[0];
 8004d2c:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
            sections_[n].a[1] = sections[n].a[1];
 8004d30:	4cd0      	ldr	r4, [pc, #832]	@ (8005074 <main+0x390>)
            sections_[n].b[1] = sections[n].b[1];
 8004d32:	48d1      	ldr	r0, [pc, #836]	@ (8005078 <main+0x394>)
            sections_[n].a[1] = sections[n].a[1];
 8004d34:	f8c3 40a8 	str.w	r4, [r3, #168]	@ 0xa8
            sections_[n].b[1] = sections[n].b[1];
 8004d38:	4cd0      	ldr	r4, [pc, #832]	@ (800507c <main+0x398>)
 8004d3a:	f8c3 009c 	str.w	r0, [r3, #156]	@ 0x9c
            sections_[n].b[0] = sections[n].b[0];
 8004d3e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
            sections_[n].b[1] = sections[n].b[1];
 8004d42:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
            sections_[n].a[0] = sections[n].a[0];
 8004d46:	4cce      	ldr	r4, [pc, #824]	@ (8005080 <main+0x39c>)
            x_[n][0] = 0;
 8004d48:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            sections_[n].a[0] = sections[n].a[0];
 8004d4c:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
            sections_[n].a[1] = sections[n].a[1];
 8004d50:	4ccc      	ldr	r4, [pc, #816]	@ (8005084 <main+0x3a0>)
            x_[n][1] = 0;
 8004d52:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            sections_[n].a[1] = sections[n].a[1];
 8004d56:	f8c3 40bc 	str.w	r4, [r3, #188]	@ 0xbc
            sections_[n].b[1] = sections[n].b[1];
 8004d5a:	4ccb      	ldr	r4, [pc, #812]	@ (8005088 <main+0x3a4>)
            x_[n][2] = 0;
 8004d5c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
            x_[n][0] = 0;
 8004d60:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 8004d64:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 8004d68:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            x_[n][0] = 0;
 8004d6c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 8004d70:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 8004d74:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
            x_[n][0] = 0;
 8004d78:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 8004d7c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 8004d80:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
            x_[n][0] = 0;
 8004d84:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 8004d88:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 8004d8c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        x_[num_sections_][0] = 0;
 8004d90:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        x_[num_sections_][1] = 0;
 8004d94:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        x_[num_sections_][2] = 0;
 8004d98:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
            sections_[n].b[0] = sections[n].b[0];
 8004d9c:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
            sections_[n].b[2] = sections[n].b[2];
 8004da0:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
            sections_[n].b[0] = sections[n].b[0];
 8004da4:	f8c3 00ac 	str.w	r0, [r3, #172]	@ 0xac
            sections_[n].b[2] = sections[n].b[2];
 8004da8:	f8c3 00b4 	str.w	r0, [r3, #180]	@ 0xb4
            sections_[n].b[0] = sections[n].b[0];
 8004dac:	f8c3 00c0 	str.w	r0, [r3, #192]	@ 0xc0
            sections_[n].b[1] = sections[n].b[1];
 8004db0:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
            sections_[n].a[0] = sections[n].a[0];
 8004db4:	4cb5      	ldr	r4, [pc, #724]	@ (800508c <main+0x3a8>)
            sections_[n].b[2] = sections[n].b[2];
 8004db6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
            sections_[n].a[0] = sections[n].a[0];
 8004dba:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
            sections_[n].a[1] = sections[n].a[1];
 8004dbe:	4cb4      	ldr	r4, [pc, #720]	@ (8005090 <main+0x3ac>)
            sections_[n].b[0] = sections[n].b[0];
 8004dc0:	f8c3 00d4 	str.w	r0, [r3, #212]	@ 0xd4
            sections_[n].a[1] = sections[n].a[1];
 8004dc4:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            sections_[n].b[1] = sections[n].b[1];
 8004dc8:	4cb2      	ldr	r4, [pc, #712]	@ (8005094 <main+0x3b0>)
            sections_[n].b[2] = sections[n].b[2];
 8004dca:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
            sections_[n].b[1] = sections[n].b[1];
 8004dce:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
            sections_[n].a[0] = sections[n].a[0];
 8004dd2:	4cb1      	ldr	r4, [pc, #708]	@ (8005098 <main+0x3b4>)
            sections_[n].b[0] = sections[n].b[0];
 8004dd4:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
            sections_[n].a[0] = sections[n].a[0];
 8004dd8:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
            sections_[n].a[1] = sections[n].a[1];
 8004ddc:	4caf      	ldr	r4, [pc, #700]	@ (800509c <main+0x3b8>)
            sections_[n].b[2] = sections[n].b[2];
 8004dde:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
            sections_[n].a[1] = sections[n].a[1];
 8004de2:	f8c3 40e4 	str.w	r4, [r3, #228]	@ 0xe4
            sections_[n].b[1] = sections[n].b[1];
 8004de6:	4cae      	ldr	r4, [pc, #696]	@ (80050a0 <main+0x3bc>)
 8004de8:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
            sections_[n].a[0] = sections[n].a[0];
 8004dec:	4cad      	ldr	r4, [pc, #692]	@ (80050a4 <main+0x3c0>)
 8004dee:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
            sections_[n].a[1] = sections[n].a[1];
 8004df2:	4cad      	ldr	r4, [pc, #692]	@ (80050a8 <main+0x3c4>)
 8004df4:	f8c3 40f8 	str.w	r4, [r3, #248]	@ 0xf8
	return __atomic_load_n(&_M_i, int(__m));
 8004df8:	684c      	ldr	r4, [r1, #4]
 8004dfa:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, int(__m));
 8004dfe:	f3bf 8f5b 	dmb	ish
 8004e02:	600c      	str	r4, [r1, #0]
        for (int n = 0; n < num_sections_; n++)
 8004e04:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
        input_phase_ = 1;
 8004e08:	f8c3 008c 	str.w	r0, [r3, #140]	@ 0x8c
 8004e0c:	2900      	cmp	r1, #0
        history_ = 0;
 8004e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004e12:	dd2d      	ble.n	8004e70 <main+0x18c>
 8004e14:	2901      	cmp	r1, #1
            x_[n][0] = 0;
 8004e16:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            x_[n][1] = 0;
 8004e1a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            x_[n][2] = 0;
 8004e1e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        for (int n = 0; n < num_sections_; n++)
 8004e22:	d025      	beq.n	8004e70 <main+0x18c>
 8004e24:	2902      	cmp	r1, #2
            x_[n][0] = 0;
 8004e26:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            x_[n][1] = 0;
 8004e2a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            x_[n][2] = 0;
 8004e2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        for (int n = 0; n < num_sections_; n++)
 8004e32:	d01d      	beq.n	8004e70 <main+0x18c>
 8004e34:	2903      	cmp	r1, #3
            x_[n][0] = 0;
 8004e36:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            x_[n][1] = 0;
 8004e3a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            x_[n][2] = 0;
 8004e3e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        for (int n = 0; n < num_sections_; n++)
 8004e42:	d015      	beq.n	8004e70 <main+0x18c>
 8004e44:	2904      	cmp	r1, #4
            x_[n][0] = 0;
 8004e46:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
            x_[n][1] = 0;
 8004e4a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            x_[n][2] = 0;
 8004e4e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        for (int n = 0; n < num_sections_; n++)
 8004e52:	d00d      	beq.n	8004e70 <main+0x18c>
 8004e54:	2905      	cmp	r1, #5
            x_[n][0] = 0;
 8004e56:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            x_[n][1] = 0;
 8004e5a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            x_[n][2] = 0;
 8004e5e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        for (int n = 0; n < num_sections_; n++)
 8004e62:	d005      	beq.n	8004e70 <main+0x18c>
            x_[n][0] = 0;
 8004e64:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
            x_[n][1] = 0;
 8004e68:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            x_[n][2] = 0;
 8004e6c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        x_[num_sections_][0] = 0;
 8004e70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        mode_ = false;
 8004e74:	4c8d      	ldr	r4, [pc, #564]	@ (80050ac <main+0x3c8>)
 8004e76:	2500      	movs	r5, #0
 8004e78:	2600      	movs	r6, #0
 8004e7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        waveform_ = w;
 8004e7e:	f04f 0801 	mov.w	r8, #1
        recording_.Init();
        playback_.Init();
 8004e82:	488b      	ldr	r0, [pc, #556]	@ (80050b0 <main+0x3cc>)
        base_frequency_ = 261.63f; // Default to middle C
 8004e84:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 80050c0 <main+0x3dc>
 8004e88:	f8c3 50fc 	str.w	r5, [r3, #252]	@ 0xfc
        x_[num_sections_][1] = 0;
 8004e8c:	f8c3 5100 	str.w	r5, [r3, #256]	@ 0x100
        x_[num_sections_][2] = 0;
 8004e90:	f8c3 5104 	str.w	r5, [r3, #260]	@ 0x104
 8004e94:	f7ff fbec 	bl	8004670 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>
            strum_current_[s] = 0.0f;
 8004e98:	2230      	movs	r2, #48	@ 0x30
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
        phase_inc_ = freq * kPhaseFactor;
 8004ea0:	6225      	str	r5, [r4, #32]
 8004ea2:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8004ea4:	63a5      	str	r5, [r4, #56]	@ 0x38
 8004ea6:	6465      	str	r5, [r4, #68]	@ 0x44
        mode_ = false;
 8004ea8:	f884 6208 	strb.w	r6, [r4, #520]	@ 0x208
        current_chord_ = 0;
 8004eac:	f8c4 6204 	str.w	r6, [r4, #516]	@ 0x204
        base_frequency_ = 261.63f; // Default to middle C
 8004eb0:	f8c4 9010 	str.w	r9, [r4, #16]
        in_base_freq_mode_ = false;
 8004eb4:	7526      	strb	r6, [r4, #20]
        seventh_hold_counter_ = 0;
 8004eb6:	61a6      	str	r6, [r4, #24]
            current_freq_[v] = 0.0f;
 8004eb8:	64e6      	str	r6, [r4, #76]	@ 0x4c
            env_state_[v] = ENV_IDLE;
 8004eba:	66e6      	str	r6, [r4, #108]	@ 0x6c
            current_freq_[v] = 0.0f;
 8004ebc:	65a6      	str	r6, [r4, #88]	@ 0x58
        waveform_ = w;
 8004ebe:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
 8004ec2:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
 8004ec6:	f8c4 803c 	str.w	r8, [r4, #60]	@ 0x3c
 8004eca:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
            env_state_[v] = ENV_IDLE;
 8004ece:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
            is_active_ = false;
 8004ed2:	4f78      	ldr	r7, [pc, #480]	@ (80050b4 <main+0x3d0>)
            current_freq_[v] = 0.0f;
 8004ed4:	e9c4 6614 	strd	r6, r6, [r4, #80]	@ 0x50
            env_state_[v] = ENV_IDLE;
 8004ed8:	e9c4 661c 	strd	r6, r6, [r4, #112]	@ 0x70
 8004edc:	e9c4 661e 	strd	r6, r6, [r4, #120]	@ 0x78
            strum_current_[s] = 0.0f;
 8004ee0:	f006 f84d 	bl	800af7e <memset>
            strum_attenuation_[s] = 1.0f;
 8004ee4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
            sections_[n].b[0] = sections[n].b[0];
 8004ee8:	4a60      	ldr	r2, [pc, #384]	@ (800506c <main+0x388>)
        last_strum_ = -1;
 8004eea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
        phase_inc_ = freq * kPhaseFactor;
 8004eee:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
 8004ef2:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8004ef6:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 8004efa:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
 8004efe:	f8c4 50b8 	str.w	r5, [r4, #184]	@ 0xb8
 8004f02:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
            strum_attenuation_[s] = 1.0f;
 8004f06:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8004f0a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 8004f0e:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 8004f12:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8004f16:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8004f1a:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
            strum_state_[s] = ENV_IDLE;
 8004f1e:	f8a4 6100 	strh.w	r6, [r4, #256]	@ 0x100
        waveform_ = w;
 8004f22:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
 8004f26:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
 8004f2a:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8004f2e:	f8c4 60b0 	str.w	r6, [r4, #176]	@ 0xb0
 8004f32:	f8c4 60bc 	str.w	r6, [r4, #188]	@ 0xbc
 8004f36:	f8c4 60c8 	str.w	r6, [r4, #200]	@ 0xc8
 8004f3a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
            strum_level_[s] = 0.0f;
 8004f3e:	f8c4 6104 	str.w	r6, [r4, #260]	@ 0x104
            strum_activation_time_[s] = 0;
 8004f42:	f8c4 6120 	str.w	r6, [r4, #288]	@ 0x120
            strum_level_[s] = 0.0f;
 8004f46:	f8c4 6118 	str.w	r6, [r4, #280]	@ 0x118
            strum_activation_time_[s] = 0;
 8004f4a:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 8004f4e:	485a      	ldr	r0, [pc, #360]	@ (80050b8 <main+0x3d4>)
            strum_level_[s] = 0.0f;
 8004f50:	e9c4 6642 	strd	r6, r6, [r4, #264]	@ 0x108
 8004f54:	e9c4 6644 	strd	r6, r6, [r4, #272]	@ 0x110
            strum_activation_time_[s] = 0;
 8004f58:	e9c4 6649 	strd	r6, r6, [r4, #292]	@ 0x124
 8004f5c:	e9c4 664b 	strd	r6, r6, [r4, #300]	@ 0x12c
        last_strum_ = -1;
 8004f60:	f8c4 111c 	str.w	r1, [r4, #284]	@ 0x11c
 8004f64:	4631      	mov	r1, r6
 8004f66:	f8c4 2158 	str.w	r2, [r4, #344]	@ 0x158
            sections_[n].b[2] = sections[n].b[2];
 8004f6a:	f8c4 2160 	str.w	r2, [r4, #352]	@ 0x160
        num_sections_ = num_sections;
 8004f6e:	2205      	movs	r2, #5
            x_[n][0] = 0;
 8004f70:	f8c4 51bc 	str.w	r5, [r4, #444]	@ 0x1bc
        num_sections_ = num_sections;
 8004f74:	f8c4 2154 	str.w	r2, [r4, #340]	@ 0x154
            sections_[n].b[1] = sections[n].b[1];
 8004f78:	4a3f      	ldr	r2, [pc, #252]	@ (8005078 <main+0x394>)
            x_[n][1] = 0;
 8004f7a:	f8c4 51c0 	str.w	r5, [r4, #448]	@ 0x1c0
            sections_[n].b[1] = sections[n].b[1];
 8004f7e:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
            sections_[n].a[0] = sections[n].a[0];
 8004f82:	4a3b      	ldr	r2, [pc, #236]	@ (8005070 <main+0x38c>)
            x_[n][2] = 0;
 8004f84:	f8c4 51c4 	str.w	r5, [r4, #452]	@ 0x1c4
            sections_[n].a[0] = sections[n].a[0];
 8004f88:	f8c4 2164 	str.w	r2, [r4, #356]	@ 0x164
            sections_[n].a[1] = sections[n].a[1];
 8004f8c:	4a39      	ldr	r2, [pc, #228]	@ (8005074 <main+0x390>)
            x_[n][0] = 0;
 8004f8e:	f8c4 51c8 	str.w	r5, [r4, #456]	@ 0x1c8
            sections_[n].a[1] = sections[n].a[1];
 8004f92:	f8c4 2168 	str.w	r2, [r4, #360]	@ 0x168
            sections_[n].b[1] = sections[n].b[1];
 8004f96:	4a39      	ldr	r2, [pc, #228]	@ (800507c <main+0x398>)
            x_[n][1] = 0;
 8004f98:	f8c4 51cc 	str.w	r5, [r4, #460]	@ 0x1cc
            sections_[n].b[1] = sections[n].b[1];
 8004f9c:	f8c4 2170 	str.w	r2, [r4, #368]	@ 0x170
            sections_[n].a[0] = sections[n].a[0];
 8004fa0:	4a37      	ldr	r2, [pc, #220]	@ (8005080 <main+0x39c>)
            x_[n][2] = 0;
 8004fa2:	f8c4 51d0 	str.w	r5, [r4, #464]	@ 0x1d0
            sections_[n].a[0] = sections[n].a[0];
 8004fa6:	f8c4 2178 	str.w	r2, [r4, #376]	@ 0x178
            sections_[n].a[1] = sections[n].a[1];
 8004faa:	4a36      	ldr	r2, [pc, #216]	@ (8005084 <main+0x3a0>)
            x_[n][0] = 0;
 8004fac:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
            sections_[n].a[1] = sections[n].a[1];
 8004fb0:	f8c4 217c 	str.w	r2, [r4, #380]	@ 0x17c
            sections_[n].b[1] = sections[n].b[1];
 8004fb4:	4a34      	ldr	r2, [pc, #208]	@ (8005088 <main+0x3a4>)
            x_[n][1] = 0;
 8004fb6:	f8c4 51d8 	str.w	r5, [r4, #472]	@ 0x1d8
            x_[n][2] = 0;
 8004fba:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
            x_[n][0] = 0;
 8004fbe:	f8c4 51e0 	str.w	r5, [r4, #480]	@ 0x1e0
            x_[n][1] = 0;
 8004fc2:	f8c4 51e4 	str.w	r5, [r4, #484]	@ 0x1e4
            x_[n][2] = 0;
 8004fc6:	f8c4 51e8 	str.w	r5, [r4, #488]	@ 0x1e8
            x_[n][0] = 0;
 8004fca:	f8c4 51ec 	str.w	r5, [r4, #492]	@ 0x1ec
            x_[n][1] = 0;
 8004fce:	f8c4 51f0 	str.w	r5, [r4, #496]	@ 0x1f0
            x_[n][2] = 0;
 8004fd2:	f8c4 51f4 	str.w	r5, [r4, #500]	@ 0x1f4
        x_[num_sections_][0] = 0;
 8004fd6:	f8c4 51f8 	str.w	r5, [r4, #504]	@ 0x1f8
        x_[num_sections_][1] = 0;
 8004fda:	f8c4 51fc 	str.w	r5, [r4, #508]	@ 0x1fc
        x_[num_sections_][2] = 0;
 8004fde:	f8c4 5200 	str.w	r5, [r4, #512]	@ 0x200
            sections_[n].b[0] = sections[n].b[0];
 8004fe2:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
            sections_[n].b[2] = sections[n].b[2];
 8004fe6:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
            sections_[n].b[0] = sections[n].b[0];
 8004fea:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
            sections_[n].b[1] = sections[n].b[1];
 8004fee:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 8004ff2:	222c      	movs	r2, #44	@ 0x2c
        strum_activation_counter_ = 0;
 8004ff4:	f8c4 6138 	str.w	r6, [r4, #312]	@ 0x138
            sections_[n].b[2] = sections[n].b[2];
 8004ff8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
            sections_[n].b[0] = sections[n].b[0];
 8004ffc:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
            sections_[n].b[2] = sections[n].b[2];
 8005000:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
            sections_[n].b[0] = sections[n].b[0];
 8005004:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
            sections_[n].b[2] = sections[n].b[2];
 8005008:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
        compGain_ = 1.0f;
 800500c:	6063      	str	r3, [r4, #4]
            sections_[n].a[0] = sections[n].a[0];
 800500e:	4b1f      	ldr	r3, [pc, #124]	@ (800508c <main+0x3a8>)
        compEnv_ = 0.0f;
 8005010:	6025      	str	r5, [r4, #0]
 8005012:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
            sections_[n].a[1] = sections[n].a[1];
 8005016:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <main+0x3ac>)
        phase_inc_ = freq * kPhaseFactor;
 8005018:	607d      	str	r5, [r7, #4]
 800501a:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
            sections_[n].b[1] = sections[n].b[1];
 800501e:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <main+0x3b0>)
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 8005020:	4d26      	ldr	r5, [pc, #152]	@ (80050bc <main+0x3d8>)
 8005022:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
            sections_[n].a[0] = sections[n].a[0];
 8005026:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <main+0x3b4>)
        target_freq_[0] = root_freq * chord_multipliers[0];
 8005028:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
 800502c:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
            sections_[n].a[1] = sections[n].a[1];
 8005030:	4b1a      	ldr	r3, [pc, #104]	@ (800509c <main+0x3b8>)
 8005032:	733e      	strb	r6, [r7, #12]
 8005034:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
            sections_[n].b[1] = sections[n].b[1];
 8005038:	4b19      	ldr	r3, [pc, #100]	@ (80050a0 <main+0x3bc>)
        waveform_ = w;
 800503a:	60be      	str	r6, [r7, #8]
 800503c:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
            sections_[n].a[0] = sections[n].a[0];
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <main+0x3c0>)
 8005042:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
 8005046:	e03d      	b.n	80050c4 <main+0x3e0>
 8005048:	08002459 	.word	0x08002459
 800504c:	20010c40 	.word	0x20010c40
 8005050:	20010b38 	.word	0x20010b38
 8005054:	2001090c 	.word	0x2001090c
 8005058:	200108e0 	.word	0x200108e0
 800505c:	20010908 	.word	0x20010908
 8005060:	20010900 	.word	0x20010900
 8005064:	20010904 	.word	0x20010904
 8005068:	2001074c 	.word	0x2001074c
 800506c:	3a446737 	.word	0x3a446737
 8005070:	bfbc65fb 	.word	0xbfbc65fb
 8005074:	3f10296d 	.word	0x3f10296d
 8005078:	3a85b218 	.word	0x3a85b218
 800507c:	beade39b 	.word	0xbeade39b
 8005080:	bfb80d8c 	.word	0xbfb80d8c
 8005084:	3f2d1db0 	.word	0x3f2d1db0
 8005088:	bf74e042 	.word	0xbf74e042
 800508c:	bfb33dc4 	.word	0xbfb33dc4
 8005090:	3f4f7eb1 	.word	0x3f4f7eb1
 8005094:	bf954df0 	.word	0xbf954df0
 8005098:	bfb0aec0 	.word	0xbfb0aec0
 800509c:	3f68ba72 	.word	0x3f68ba72
 80050a0:	bf9e3e9d 	.word	0xbf9e3e9d
 80050a4:	bfb140a2 	.word	0xbfb140a2
 80050a8:	3f793977 	.word	0x3f793977
 80050ac:	20010928 	.word	0x20010928
 80050b0:	20000580 	.word	0x20000580
 80050b4:	20010910 	.word	0x20010910
 80050b8:	20000554 	.word	0x20000554
 80050bc:	20000428 	.word	0x20000428
 80050c0:	4382d0a4 	.word	0x4382d0a4
            sections_[n].a[1] = sections[n].a[1];
 80050c4:	4b98      	ldr	r3, [pc, #608]	@ (8005328 <main+0x644>)
 80050c6:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
        alphaAtk_ = std::exp(-1.0f/(kCompAttackTime * kAudioSampleRate));
 80050ca:	4b98      	ldr	r3, [pc, #608]	@ (800532c <main+0x648>)
 80050cc:	60a3      	str	r3, [r4, #8]
        alphaRel_ = std::exp(-1.0f/(kCompReleaseTime* kAudioSampleRate));
 80050ce:	4b98      	ldr	r3, [pc, #608]	@ (8005330 <main+0x64c>)
 80050d0:	60e3      	str	r3, [r4, #12]
        target_freq_[1] = root_freq * chord_multipliers[1];
 80050d2:	4b98      	ldr	r3, [pc, #608]	@ (8005334 <main+0x650>)
 80050d4:	6623      	str	r3, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 80050d6:	4b98      	ldr	r3, [pc, #608]	@ (8005338 <main+0x654>)
 80050d8:	6663      	str	r3, [r4, #100]	@ 0x64
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 80050da:	4b98      	ldr	r3, [pc, #608]	@ (800533c <main+0x658>)
            note_timer_ = 0;
 80050dc:	e9c7 6604 	strd	r6, r6, [r7, #16]
 80050e0:	66a3      	str	r3, [r4, #104]	@ 0x68
 80050e2:	f005 ff4c 	bl	800af7e <memset>
        synth_engine_.Init();
        jingle_engine_.Init(); // Initialize jingle engine
        io_.Init();
        monitor_.Init();
        playback_.Reset();
 80050e6:	4896      	ldr	r0, [pc, #600]	@ (8005340 <main+0x65c>)
 80050e8:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
 80050ec:	f7fe f8dc 	bl	80032a8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Reset()>
        sample_memory_.Init();
 80050f0:	4894      	ldr	r0, [pc, #592]	@ (8005344 <main+0x660>)
 80050f2:	f7ff fc1f 	bl	8004934 <recorder::SampleMemory<half>::Init()>
            if (state_ == STATE_STOPPED)
 80050f6:	4894      	ldr	r0, [pc, #592]	@ (8005348 <main+0x664>)
 80050f8:	f890 3160 	ldrb.w	r3, [r0, #352]	@ 0x160
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8328 	bne.w	8005752 <main+0xa6e>
 8005102:	4641      	mov	r1, r8
 8005104:	f7fb fb26 	bl	8000754 <recorder::Analog::Start(bool) [clone .part.0]>
            current_note_ = 0;
 8005108:	2400      	movs	r4, #0
        phase_inc_ = freq * kPhaseFactor;
 800510a:	4b90      	ldr	r3, [pc, #576]	@ (800534c <main+0x668>)
            is_active_ = true;
 800510c:	f240 1201 	movw	r2, #257	@ 0x101
        
        // Start with startup jingle instead of directly to synth
        analog_.Start(true); // Ensure audio is on for jingle
        jingle_engine_.StartupJingle();
        Transition(STATE_STARTUP);
 8005110:	200b      	movs	r0, #11
 8005112:	607b      	str	r3, [r7, #4]
        
        // Initialize idle timeout counter
        idle_timeout_ = 0;

        bool expire_watchdog = false;
 8005114:	46a1      	mov	r9, r4
 8005116:	81ba      	strh	r2, [r7, #12]
            note_timer_ = 0;
 8005118:	e9c7 4404 	strd	r4, r4, [r7, #16]
        Transition(STATE_STARTUP);
 800511c:	f7fe f85c 	bl	80031d8 <recorder::Transition(recorder::State)>
        idle_timeout_ = 0;
 8005120:	4b8b      	ldr	r3, [pc, #556]	@ (8005350 <main+0x66c>)
 8005122:	601c      	str	r4, [r3, #0]
        if (kADCAlwaysOn)
 8005124:	4b8b      	ldr	r3, [pc, #556]	@ (8005354 <main+0x670>)
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005126:	4c8c      	ldr	r4, [pc, #560]	@ (8005358 <main+0x674>)
 8005128:	f103 0ba5 	add.w	fp, r3, #165	@ 0xa5
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 800512c:	4b8b      	ldr	r3, [pc, #556]	@ (800535c <main+0x678>)
  { __atomic_thread_fence(int(__m)); }
 800512e:	f3bf 8f5b 	dmb	ish
 8005132:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1c0 0180 	rsb	r1, r0, #128	@ 0x80
 800513c:	4428      	add	r0, r5
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	f002 fc04 	bl	800794c <fgets>

        if (result != nullptr)
 8005144:	b1c8      	cbz	r0, 800517a <main+0x496>
        {
            length_ = std::strlen(line_);
 8005146:	4886      	ldr	r0, [pc, #536]	@ (8005360 <main+0x67c>)
 8005148:	f7fb f8aa 	bl	80002a0 <strlen>
 800514c:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 8005150:	b118      	cbz	r0, 800515a <main+0x476>
 8005152:	1e43      	subs	r3, r0, #1
 8005154:	5cea      	ldrb	r2, [r5, r3]
 8005156:	2a0a      	cmp	r2, #10
 8005158:	d012      	beq.n	8005180 <main+0x49c>
        {
            message_.payload.type = Message::TYPE_NONE;
 800515a:	2300      	movs	r3, #0
 800515c:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
        for (;;)
        {
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 8005160:	2600      	movs	r6, #0
                system::Reset();
            }
            else if (message.type == Message::TYPE_ERASE)
                sample_memory_.Erase();

            if (!expire_watchdog)
 8005162:	f1b9 0f00 	cmp.w	r9, #0
 8005166:	d101      	bne.n	800516c <main+0x488>
                system::ReloadWatchdog();
 8005168:	f002 f956 	bl	8007418 <recorder::system::ReloadWatchdog()>

            StateMachine(standby);
 800516c:	4630      	mov	r0, r6
 800516e:	f7fe f909 	bl	8003384 <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();
            system::Delay_ms(1);
 8005172:	2001      	movs	r0, #1
 8005174:	f002 fb52 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        }
 8005178:	e7d8      	b.n	800512c <main+0x448>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 800517a:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 800517e:	e7e7      	b.n	8005150 <main+0x46c>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 8005180:	782e      	ldrb	r6, [r5, #0]
 8005182:	2801      	cmp	r0, #1
 8005184:	f1a6 06ff 	sub.w	r6, r6, #255	@ 0xff
 8005188:	fab6 f686 	clz	r6, r6
 800518c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8005190:	bf08      	it	eq
 8005192:	2600      	moveq	r6, #0
 8005194:	b966      	cbnz	r6, 80051b0 <main+0x4cc>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 8005196:	4972      	ldr	r1, [pc, #456]	@ (8005360 <main+0x67c>)
 8005198:	2280      	movs	r2, #128	@ 0x80
                line_[length_ - 1] = '\0';
 800519a:	54ee      	strb	r6, [r5, r3]
                message_.payload.type = Message::TYPE_TEXT;
 800519c:	2301      	movs	r3, #1
                std::strncpy(message_.payload.text, line_,
 800519e:	f101 0087 	add.w	r0, r1, #135	@ 0x87
                message_.payload.type = Message::TYPE_TEXT;
 80051a2:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
                std::strncpy(message_.payload.text, line_,
 80051a6:	f005 fed7 	bl	800af58 <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 80051aa:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 80051ae:	e7d7      	b.n	8005160 <main+0x47c>
                line_[length_ - 1] = '\0';
 80051b0:	2700      	movs	r7, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 80051b2:	486c      	ldr	r0, [pc, #432]	@ (8005364 <main+0x680>)
 80051b4:	54ef      	strb	r7, [r5, r3]
 80051b6:	f7fb f873 	bl	80002a0 <strlen>
    size_t num_bytes = 0;

    while (length)
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d04e      	beq.n	800525c <main+0x578>
    size_t num_bytes = 0;
 80051be:	463a      	mov	r2, r7
    while (length)
 80051c0:	4968      	ldr	r1, [pc, #416]	@ (8005364 <main+0x680>)
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 80051c2:	46ca      	mov	sl, r9
 80051c4:	9601      	str	r6, [sp, #4]
            group[i] = length ? *str - 33 : 84;
 80051c6:	780b      	ldrb	r3, [r1, #0]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80051c8:	2804      	cmp	r0, #4
            group[i] = length ? *str - 33 : 84;
 80051ca:	f1a3 0321 	sub.w	r3, r3, #33	@ 0x21
 80051ce:	b2db      	uxtb	r3, r3
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 80051d0:	f240 8268 	bls.w	80056a4 <main+0x9c0>
            group[i] = length ? *str - 33 : 84;
 80051d4:	f891 c001 	ldrb.w	ip, [r1, #1]
                length--;
 80051d8:	3805      	subs	r0, #5
            group[i] = length ? *str - 33 : 84;
 80051da:	f891 8003 	ldrb.w	r8, [r1, #3]
            word += group[i];
 80051de:	2704      	movs	r7, #4
            group[i] = length ? *str - 33 : 84;
 80051e0:	f891 9002 	ldrb.w	r9, [r1, #2]
 80051e4:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
 80051e8:	f891 e004 	ldrb.w	lr, [r1, #4]
 80051ec:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
 80051f0:	f1a9 0921 	sub.w	r9, r9, #33	@ 0x21
            word += group[i];
 80051f4:	fa5f fc8c 	uxtb.w	ip, ip
            group[i] = length ? *str - 33 : 84;
 80051f8:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
            word += group[i];
 80051fc:	fa5f f888 	uxtb.w	r8, r8
 8005200:	fa5f f989 	uxtb.w	r9, r9
                str++;
 8005204:	3105      	adds	r1, #5
            word += group[i];
 8005206:	fa5f fe8e 	uxtb.w	lr, lr
 800520a:	2655      	movs	r6, #85	@ 0x55
        }

        for (size_t i = 0; i < 4 - padding; i++)
        {
            if (num_bytes < size)
 800520c:	2a82      	cmp	r2, #130	@ 0x82
            word += group[i];
 800520e:	fb16 c303 	smlabb	r3, r6, r3, ip
            word *= 85;
 8005212:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005216:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 800521a:	444b      	add	r3, r9
            word *= 85;
 800521c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005220:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8005224:	4443      	add	r3, r8
            word *= 85;
 8005226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800522a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 800522e:	4473      	add	r3, lr
            if (num_bytes < size)
 8005230:	d810      	bhi.n	8005254 <main+0x570>
            {
                bytes[num_bytes] = word >> 24;
 8005232:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8005236:	4e47      	ldr	r6, [pc, #284]	@ (8005354 <main+0x670>)
        for (size_t i = 0; i < 4 - padding; i++)
 8005238:	2f01      	cmp	r7, #1
                num_bytes++;
 800523a:	f102 0e01 	add.w	lr, r2, #1
                bytes[num_bytes] = word >> 24;
 800523e:	f806 c002 	strb.w	ip, [r6, r2]
                word <<= 8;
 8005242:	ea4f 2c03 	mov.w	ip, r3, lsl #8
        for (size_t i = 0; i < 4 - padding; i++)
 8005246:	f000 8257 	beq.w	80056f8 <main+0xa14>
            if (num_bytes < size)
 800524a:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 800524e:	f040 8207 	bne.w	8005660 <main+0x97c>
        for (size_t i = 0; i < 4 - padding; i++)
 8005252:	2283      	movs	r2, #131	@ 0x83
    while (length)
 8005254:	2800      	cmp	r0, #0
 8005256:	d1b6      	bne.n	80051c6 <main+0x4e2>
 8005258:	46d1      	mov	r9, sl
 800525a:	9e01      	ldr	r6, [sp, #4]
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 800525c:	f895 3084 	ldrb.w	r3, [r5, #132]	@ 0x84
 8005260:	2b81      	cmp	r3, #129	@ 0x81
 8005262:	d81f      	bhi.n	80052a4 <main+0x5c0>
 8005264:	4840      	ldr	r0, [pc, #256]	@ (8005368 <main+0x684>)
 8005266:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 8005268:	f850 3b04 	ldr.w	r3, [r0], #4
 800526c:	f002 317f 	and.w	r1, r2, #2139062143	@ 0x7f7f7f7f
 8005270:	405a      	eors	r2, r3
 8005272:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005276:	f002 3280 	and.w	r2, r2, #2155905152	@ 0x80808080
 800527a:	440b      	add	r3, r1
 800527c:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 800527e:	4b3b      	ldr	r3, [pc, #236]	@ (800536c <main+0x688>)
 8005280:	4283      	cmp	r3, r0
 8005282:	d1f1      	bne.n	8005268 <main+0x584>
            sum += bytes[i];
 8005284:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005288:	f895 3106 	ldrb.w	r3, [r5, #262]	@ 0x106
 800528c:	4411      	add	r1, r2
 800528e:	440b      	add	r3, r1
 8005290:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8005294:	440b      	add	r3, r1
 8005296:	eb03 6312 	add.w	r3, r3, r2, lsr #24
                if (message_.Verify())
 800529a:	f895 2085 	ldrb.w	r2, [r5, #133]	@ 0x85
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d005      	beq.n	80052b0 <main+0x5cc>
                    message_.payload.type = Message::TYPE_NONE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 80052aa:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 80052ae:	e757      	b.n	8005160 <main+0x47c>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 80052b0:	482f      	ldr	r0, [pc, #188]	@ (8005370 <main+0x68c>)
 80052b2:	f005 fe31 	bl	800af18 <puts>
            auto message = monitor_.Receive();
 80052b6:	f895 3086 	ldrb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 80052ba:	2200      	movs	r2, #0
 80052bc:	3b65      	subs	r3, #101	@ 0x65
 80052be:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 80052c2:	2b12      	cmp	r3, #18
 80052c4:	f63f af4c 	bhi.w	8005160 <main+0x47c>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <main+0x5ec>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005515 	.word	0x08005515
 80052d4:	08005161 	.word	0x08005161
 80052d8:	08005161 	.word	0x08005161
 80052dc:	08005161 	.word	0x08005161
 80052e0:	08005161 	.word	0x08005161
 80052e4:	08005161 	.word	0x08005161
 80052e8:	08005161 	.word	0x08005161
 80052ec:	08005161 	.word	0x08005161
 80052f0:	08005161 	.word	0x08005161
 80052f4:	08005161 	.word	0x08005161
 80052f8:	08005161 	.word	0x08005161
 80052fc:	08005161 	.word	0x08005161
 8005300:	08005375 	.word	0x08005375
 8005304:	0800531d 	.word	0x0800531d
 8005308:	08005163 	.word	0x08005163
 800530c:	08005161 	.word	0x08005161
 8005310:	08005161 	.word	0x08005161
 8005314:	08005161 	.word	0x08005161
 8005318:	08005615 	.word	0x08005615
                system::SerialFlushTx();
 800531c:	2000      	movs	r0, #0
 800531e:	f002 fa93 	bl	8007848 <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8005322:	f002 fb0f 	bl	8007944 <recorder::system::Reset()>
 8005326:	e71b      	b.n	8005160 <main+0x47c>
 8005328:	3f793977 	.word	0x3f793977
 800532c:	1263ca70 	.word	0x1263ca70
 8005330:	3f7feb86 	.word	0x3f7feb86
 8005334:	43a4d10a 	.word	0x43a4d10a
 8005338:	43c40044 	.word	0x43c40044
 800533c:	4402d0a4 	.word	0x4402d0a4
 8005340:	20000580 	.word	0x20000580
 8005344:	2001088c 	.word	0x2001088c
 8005348:	20010c40 	.word	0x20010c40
 800534c:	3dd26a54 	.word	0x3dd26a54
 8005350:	200108e8 	.word	0x200108e8
 8005354:	200004ac 	.word	0x200004ac
 8005358:	52005000 	.word	0x52005000
 800535c:	2000003c 	.word	0x2000003c
 8005360:	20000428 	.word	0x20000428
 8005364:	20000429 	.word	0x20000429
 8005368:	200004ae 	.word	0x200004ae
 800536c:	2000052e 	.word	0x2000052e
 8005370:	0800c074 	.word	0x0800c074
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 8005374:	48b2      	ldr	r0, [pc, #712]	@ (8005640 <main+0x95c>)
            state.pot[i] = human.pot[i];
 8005376:	6802      	ldr	r2, [r0, #0]
        state.play = human.sw[SWITCH_PLAY];
 8005378:	f890 1025 	ldrb.w	r1, [r0, #37]	@ 0x25
            state.pot[i] = human.pot[i];
 800537c:	f8c5 2109 	str.w	r2, [r5, #265]	@ 0x109
 8005380:	6842      	ldr	r2, [r0, #4]
        state.play = human.sw[SWITCH_PLAY];
 8005382:	f890 3020 	ldrb.w	r3, [r0, #32]
            state.pot[i] = human.pot[i];
 8005386:	f8c5 210d 	str.w	r2, [r5, #269]	@ 0x10d
 800538a:	6882      	ldr	r2, [r0, #8]
        state.play = human.sw[SWITCH_PLAY];
 800538c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005390:	49ac      	ldr	r1, [pc, #688]	@ (8005644 <main+0x960>)
            state.pot[i] = human.pot[i];
 8005392:	f8c5 2111 	str.w	r2, [r5, #273]	@ 0x111
 8005396:	68c2      	ldr	r2, [r0, #12]
 8005398:	f8c5 2115 	str.w	r2, [r5, #277]	@ 0x115
 800539c:	6902      	ldr	r2, [r0, #16]
 800539e:	f8c5 2119 	str.w	r2, [r5, #281]	@ 0x119
 80053a2:	6942      	ldr	r2, [r0, #20]
 80053a4:	f8c5 211d 	str.w	r2, [r5, #285]	@ 0x11d
 80053a8:	6982      	ldr	r2, [r0, #24]
 80053aa:	f8c5 2121 	str.w	r2, [r5, #289]	@ 0x121
 80053ae:	69c2      	ldr	r2, [r0, #28]
 80053b0:	f8c5 2125 	str.w	r2, [r5, #293]	@ 0x125
        state.play = human.sw[SWITCH_PLAY];
 80053b4:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80053b8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80053bc:	f890 2029 	ldrb.w	r2, [r0, #41]	@ 0x29
 80053c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053c4:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
 80053c8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80053cc:	f895 2129 	ldrb.w	r2, [r5, #297]	@ 0x129
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	f022 021f 	bic.w	r2, r2, #31
 80053d8:	4313      	orrs	r3, r2
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 80053da:	2221      	movs	r2, #33	@ 0x21
 80053dc:	f885 3129 	strb.w	r3, [r5, #297]	@ 0x129
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8a5 2107 	strh.w	r2, [r5, #263]	@ 0x107
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 80053e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80053ea:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 80053ec:	4559      	cmp	r1, fp
            checksum += bytes[i];
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f885 3108 	strb.w	r3, [r5, #264]	@ 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 80053f4:	d1f7      	bne.n	80053e6 <main+0x702>
 80053f6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80053fa:	2021      	movs	r0, #33	@ 0x21
    size_t num_chars = 0;
 80053fc:	2700      	movs	r7, #0
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 80053fe:	f8df c25c 	ldr.w	ip, [pc, #604]	@ 800565c <main+0x978>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8005402:	f1be 0f03 	cmp.w	lr, #3
 8005406:	f8cd 9004 	str.w	r9, [sp, #4]
 800540a:	d975      	bls.n	80054f8 <main+0x814>
                word |= *bytes++;
 800540c:	f8bc 3000 	ldrh.w	r3, [ip]
                data_size--;
 8005410:	f1ae 0e04 	sub.w	lr, lr, #4
                word |= *bytes++;
 8005414:	f89c 2002 	ldrb.w	r2, [ip, #2]
                data_size--;
 8005418:	f04f 0805 	mov.w	r8, #5
 800541c:	ba5b      	rev16	r3, r3
                word |= *bytes++;
 800541e:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8005422:	f10c 0c04 	add.w	ip, ip, #4
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800542c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            if (num_chars < buf_size - 1)
 8005430:	2f7e      	cmp	r7, #126	@ 0x7e
 8005432:	d858      	bhi.n	80054e6 <main+0x802>
            word /= 85;
 8005434:	4984      	ldr	r1, [pc, #528]	@ (8005648 <main+0x964>)
                num_chars++;
 8005436:	f107 0901 	add.w	r9, r7, #1
            word /= 85;
 800543a:	fba1 2300 	umull	r2, r3, r1, r0
 800543e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005442:	fba1 2603 	umull	r2, r6, r1, r3
 8005446:	ea4f 1696 	mov.w	r6, r6, lsr #6
 800544a:	fba1 2106 	umull	r2, r1, r1, r6
 800544e:	4a7e      	ldr	r2, [pc, #504]	@ (8005648 <main+0x964>)
 8005450:	ea4f 1191 	mov.w	r1, r1, lsr #6
 8005454:	fba2 a201 	umull	sl, r2, r2, r1
 8005458:	ea4f 1292 	mov.w	r2, r2, lsr #6
                buf[num_chars] = group[i] + 33;
 800545c:	f102 0a21 	add.w	sl, r2, #33	@ 0x21
 8005460:	f805 a007 	strb.w	sl, [r5, r7]
            if (num_chars < buf_size - 1)
 8005464:	f000 80d9 	beq.w	800561a <main+0x936>
            group[4 - i] = (word % 85);
 8005468:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 800546c:	f1b8 0f02 	cmp.w	r8, #2
            group[4 - i] = (word % 85);
 8005470:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8005474:	eba1 0202 	sub.w	r2, r1, r2
                buf[num_chars] = group[i] + 33;
 8005478:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 800547c:	f805 2009 	strb.w	r2, [r5, r9]
                num_chars++;
 8005480:	f107 0202 	add.w	r2, r7, #2
        for (size_t i = 0; i < 5 - padding; i++)
 8005484:	f000 811b 	beq.w	80056be <main+0x9da>
            if (num_chars < buf_size - 1)
 8005488:	2a7f      	cmp	r2, #127	@ 0x7f
 800548a:	f000 80c6 	beq.w	800561a <main+0x936>
            group[4 - i] = (word % 85);
 800548e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 8005492:	f1b8 0f03 	cmp.w	r8, #3
            group[4 - i] = (word % 85);
 8005496:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800549a:	eba6 0101 	sub.w	r1, r6, r1
                buf[num_chars] = group[i] + 33;
 800549e:	f101 0121 	add.w	r1, r1, #33	@ 0x21
 80054a2:	54a9      	strb	r1, [r5, r2]
                num_chars++;
 80054a4:	f107 0103 	add.w	r1, r7, #3
        for (size_t i = 0; i < 5 - padding; i++)
 80054a8:	f000 8124 	beq.w	80056f4 <main+0xa10>
            if (num_chars < buf_size - 1)
 80054ac:	297f      	cmp	r1, #127	@ 0x7f
 80054ae:	f000 80b4 	beq.w	800561a <main+0x936>
            group[4 - i] = (word % 85);
 80054b2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 80054b6:	f1b8 0f05 	cmp.w	r8, #5
            group[4 - i] = (word % 85);
 80054ba:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80054be:	eba3 0206 	sub.w	r2, r3, r6
                buf[num_chars] = group[i] + 33;
 80054c2:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 80054c6:	546a      	strb	r2, [r5, r1]
                num_chars++;
 80054c8:	f107 0204 	add.w	r2, r7, #4
        for (size_t i = 0; i < 5 - padding; i++)
 80054cc:	f040 80f7 	bne.w	80056be <main+0x9da>
            if (num_chars < buf_size - 1)
 80054d0:	2a7f      	cmp	r2, #127	@ 0x7f
 80054d2:	f000 80a2 	beq.w	800561a <main+0x936>
            group[4 - i] = (word % 85);
 80054d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                num_chars++;
 80054da:	3705      	adds	r7, #5
            group[4 - i] = (word % 85);
 80054dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80054e0:	1ac3      	subs	r3, r0, r3
                buf[num_chars] = group[i] + 33;
 80054e2:	3321      	adds	r3, #33	@ 0x21
 80054e4:	54ab      	strb	r3, [r5, r2]
    while (data_size)
 80054e6:	f1be 0f00 	cmp.w	lr, #0
 80054ea:	f000 809b 	beq.w	8005624 <main+0x940>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 80054ee:	f1be 0f03 	cmp.w	lr, #3
                word |= *bytes++;
 80054f2:	f89c 0000 	ldrb.w	r0, [ip]
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 80054f6:	d889      	bhi.n	800540c <main+0x728>
            if (data_size)
 80054f8:	f1be 0f01 	cmp.w	lr, #1
                word |= *bytes++;
 80054fc:	f10c 0301 	add.w	r3, ip, #1
            if (data_size)
 8005500:	f040 80df 	bne.w	80056c2 <main+0x9de>
            word <<= 8;
 8005504:	0400      	lsls	r0, r0, #16
 8005506:	469c      	mov	ip, r3
 8005508:	f04f 0802 	mov.w	r8, #2
 800550c:	0200      	lsls	r0, r0, #8
 800550e:	f04f 0e00 	mov.w	lr, #0
 8005512:	e78d      	b.n	8005430 <main+0x74c>
        return nvmem_.Erase(0, kRegionSize);
 8005514:	4b4d      	ldr	r3, [pc, #308]	@ (800564c <main+0x968>)
        state_ =
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
        QUADSPI->CCR =
 800551c:	4f4c      	ldr	r7, [pc, #304]	@ (8005650 <main+0x96c>)
 800551e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005520:	2002      	movs	r0, #2
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005522:	f44f 7e83 	mov.w	lr, #262	@ 0x106
        QUADSPI->CCR =
 8005526:	f242 5cd7 	movw	ip, #9687	@ 0x25d7
        state_ =
 800552a:	60b2      	str	r2, [r6, #8]
 800552c:	e9c6 2100 	strd	r2, r1, [r6]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	f013 0320 	ands.w	r3, r3, #32
 8005536:	d1fb      	bne.n	8005530 <main+0x84c>
        QUADSPI->DLR = 0;
 8005538:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 800553a:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 800553c:	68a3      	ldr	r3, [r4, #8]
 800553e:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8005542:	d0fb      	beq.n	800553c <main+0x858>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8005544:	f894 8020 	ldrb.w	r8, [r4, #32]
 8005548:	fa5f f888 	uxtb.w	r8, r8
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800554c:	68a3      	ldr	r3, [r4, #8]
 800554e:	079b      	lsls	r3, r3, #30
 8005550:	d5fc      	bpl.n	800554c <main+0x868>
        if (write_in_progress())
 8005552:	f018 0f01 	tst.w	r8, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005556:	60e0      	str	r0, [r4, #12]
        if (write_in_progress())
 8005558:	d1ea      	bne.n	8005530 <main+0x84c>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 800555a:	b293      	uxth	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d16a      	bne.n	8005636 <main+0x952>
 8005560:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005564:	d23a      	bcs.n	80055dc <main+0x8f8>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8005566:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800556a:	d21b      	bcs.n	80055a4 <main+0x8c0>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	069b      	lsls	r3, r3, #26
 8005570:	d4fc      	bmi.n	800556c <main+0x888>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005572:	f8c4 e014 	str.w	lr, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005576:	68a3      	ldr	r3, [r4, #8]
 8005578:	079b      	lsls	r3, r3, #30
 800557a:	d5fc      	bpl.n	8005576 <main+0x892>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800557c:	60e0      	str	r0, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800557e:	68a3      	ldr	r3, [r4, #8]
 8005580:	069b      	lsls	r3, r3, #26
 8005582:	d4fc      	bmi.n	800557e <main+0x89a>
        QUADSPI->CCR =
 8005584:	f8c4 c014 	str.w	ip, [r4, #20]
        QUADSPI->AR = address;
 8005588:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800558a:	68a3      	ldr	r3, [r4, #8]
 800558c:	079b      	lsls	r3, r3, #30
 800558e:	d5fc      	bpl.n	800558a <main+0x8a6>
            location += kEraseGranularity;
 8005590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
            length -= kEraseGranularity;
 8005594:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005598:	60e0      	str	r0, [r4, #12]
        state_.location = location;
 800559a:	e9c6 2100 	strd	r2, r1, [r6]
        while (!FinishErase());
 800559e:	2900      	cmp	r1, #0
 80055a0:	d1c6      	bne.n	8005530 <main+0x84c>
 80055a2:	e5dd      	b.n	8005160 <main+0x47c>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055a4:	68a3      	ldr	r3, [r4, #8]
 80055a6:	069b      	lsls	r3, r3, #26
 80055a8:	d4fc      	bmi.n	80055a4 <main+0x8c0>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80055aa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80055ae:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80055b0:	68a3      	ldr	r3, [r4, #8]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	d5fc      	bpl.n	80055b0 <main+0x8cc>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055b6:	2302      	movs	r3, #2
 80055b8:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	069b      	lsls	r3, r3, #26
 80055be:	d4fc      	bmi.n	80055ba <main+0x8d6>
        QUADSPI->CCR =
 80055c0:	f242 5352 	movw	r3, #9554	@ 0x2552
 80055c4:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 80055c6:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80055c8:	68a3      	ldr	r3, [r4, #8]
 80055ca:	079b      	lsls	r3, r3, #30
 80055cc:	d5fc      	bpl.n	80055c8 <main+0x8e4>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055ce:	2302      	movs	r3, #2
            location += kBlock32Size;
 80055d0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
            length -= kBlock32Size;
 80055d4:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055d8:	60e3      	str	r3, [r4, #12]
            length -= kBlock32Size;
 80055da:	e7de      	b.n	800559a <main+0x8b6>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055dc:	68a3      	ldr	r3, [r4, #8]
 80055de:	069b      	lsls	r3, r3, #26
 80055e0:	d4fc      	bmi.n	80055dc <main+0x8f8>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 80055e2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80055e6:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	d5fc      	bpl.n	80055e8 <main+0x904>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055ee:	2302      	movs	r3, #2
 80055f0:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055f2:	68a3      	ldr	r3, [r4, #8]
 80055f4:	069b      	lsls	r3, r3, #26
 80055f6:	d4fc      	bmi.n	80055f2 <main+0x90e>
        QUADSPI->CCR =
 80055f8:	f242 53d8 	movw	r3, #9688	@ 0x25d8
 80055fc:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 80055fe:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005600:	68a3      	ldr	r3, [r4, #8]
 8005602:	079b      	lsls	r3, r3, #30
 8005604:	d5fc      	bpl.n	8005600 <main+0x91c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005606:	2302      	movs	r3, #2
            location += kBlock64Size;
 8005608:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
            length -= kBlock64Size;
 800560c:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005610:	60e3      	str	r3, [r4, #12]
            length -= kBlock64Size;
 8005612:	e7c2      	b.n	800559a <main+0x8b6>
            length_ = 0;
 8005614:	46b1      	mov	r9, r6
 8005616:	2600      	movs	r6, #0
 8005618:	e5a8      	b.n	800516c <main+0x488>
                num_chars++;
 800561a:	277f      	movs	r7, #127	@ 0x7f
    while (data_size)
 800561c:	f1be 0f00 	cmp.w	lr, #0
 8005620:	f47f af65 	bne.w	80054ee <main+0x80a>
        printf("\xff%s\n", line_);
 8005624:	490b      	ldr	r1, [pc, #44]	@ (8005654 <main+0x970>)
    buf[num_chars] = '\0';
 8005626:	f805 e007 	strb.w	lr, [r5, r7]
 800562a:	480b      	ldr	r0, [pc, #44]	@ (8005658 <main+0x974>)
 800562c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005630:	f005 fc0a 	bl	800ae48 <iprintf>
    }
 8005634:	e594      	b.n	8005160 <main+0x47c>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8005636:	f3c2 030e 	ubfx	r3, r2, #0, #15
 800563a:	2b00      	cmp	r3, #0
 800563c:	d196      	bne.n	800556c <main+0x888>
 800563e:	e792      	b.n	8005566 <main+0x882>
 8005640:	20000554 	.word	0x20000554
 8005644:	20000530 	.word	0x20000530
 8005648:	c0c0c0c1 	.word	0xc0c0c0c1
 800564c:	2001088c 	.word	0x2001088c
 8005650:	05000105 	.word	0x05000105
 8005654:	20000428 	.word	0x20000428
 8005658:	0800c07c 	.word	0x0800c07c
 800565c:	2000052f 	.word	0x2000052f
                bytes[num_bytes] = word >> 24;
 8005660:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8005664:	4e4e      	ldr	r6, [pc, #312]	@ (80057a0 <main+0xabc>)
        for (size_t i = 0; i < 4 - padding; i++)
 8005666:	2f02      	cmp	r7, #2
                bytes[num_bytes] = word >> 24;
 8005668:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 800566c:	f102 0e02 	add.w	lr, r2, #2
                word <<= 8;
 8005670:	ea4f 4c03 	mov.w	ip, r3, lsl #16
        for (size_t i = 0; i < 4 - padding; i++)
 8005674:	d040      	beq.n	80056f8 <main+0xa14>
            if (num_bytes < size)
 8005676:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 800567a:	f43f adea 	beq.w	8005252 <main+0x56e>
                bytes[num_bytes] = word >> 24;
 800567e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        for (size_t i = 0; i < 4 - padding; i++)
 8005682:	2f04      	cmp	r7, #4
                bytes[num_bytes] = word >> 24;
 8005684:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 8005688:	f102 0c03 	add.w	ip, r2, #3
        for (size_t i = 0; i < 4 - padding; i++)
 800568c:	d15c      	bne.n	8005748 <main+0xa64>
            if (num_bytes < size)
 800568e:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 8005692:	f43f adde 	beq.w	8005252 <main+0x56e>
                num_bytes++;
 8005696:	3204      	adds	r2, #4
                bytes[num_bytes] = word >> 24;
 8005698:	f806 300c 	strb.w	r3, [r6, ip]
    while (length)
 800569c:	2800      	cmp	r0, #0
 800569e:	f47f ad92 	bne.w	80051c6 <main+0x4e2>
 80056a2:	e5d9      	b.n	8005258 <main+0x574>
            group[i] = length ? *str - 33 : 84;
 80056a4:	2801      	cmp	r0, #1
                str++;
 80056a6:	f101 0701 	add.w	r7, r1, #1
            group[i] = length ? *str - 33 : 84;
 80056aa:	d12a      	bne.n	8005702 <main+0xa1e>
 80056ac:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 80056b0:	4639      	mov	r1, r7
 80056b2:	2000      	movs	r0, #0
 80056b4:	2704      	movs	r7, #4
 80056b6:	46f0      	mov	r8, lr
 80056b8:	46f1      	mov	r9, lr
 80056ba:	46f4      	mov	ip, lr
 80056bc:	e5a5      	b.n	800520a <main+0x526>
                num_chars++;
 80056be:	4617      	mov	r7, r2
 80056c0:	e711      	b.n	80054e6 <main+0x802>
                word |= *bytes++;
 80056c2:	4663      	mov	r3, ip
            if (data_size)
 80056c4:	f1be 0f02 	cmp.w	lr, #2
 80056c8:	f833 0b02 	ldrh.w	r0, [r3], #2
 80056cc:	ba40      	rev16	r0, r0
 80056ce:	b280      	uxth	r0, r0
            word <<= 8;
 80056d0:	ea4f 2000 	mov.w	r0, r0, lsl #8
            if (data_size)
 80056d4:	d103      	bne.n	80056de <main+0x9fa>
 80056d6:	469c      	mov	ip, r3
 80056d8:	f04f 0803 	mov.w	r8, #3
 80056dc:	e716      	b.n	800550c <main+0x828>
                word |= *bytes++;
 80056de:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80056e2:	f04f 0804 	mov.w	r8, #4
 80056e6:	f10c 0c03 	add.w	ip, ip, #3
 80056ea:	f04f 0e00 	mov.w	lr, #0
 80056ee:	4303      	orrs	r3, r0
            word <<= 8;
 80056f0:	0218      	lsls	r0, r3, #8
            if (data_size)
 80056f2:	e69d      	b.n	8005430 <main+0x74c>
                num_chars++;
 80056f4:	460f      	mov	r7, r1
 80056f6:	e6f6      	b.n	80054e6 <main+0x802>
        for (size_t i = 0; i < 4 - padding; i++)
 80056f8:	4672      	mov	r2, lr
    while (length)
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f47f ad63 	bne.w	80051c6 <main+0x4e2>
 8005700:	e5aa      	b.n	8005258 <main+0x574>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005702:	4247      	negs	r7, r0
 8005704:	4e27      	ldr	r6, [pc, #156]	@ (80057a4 <main+0xac0>)
            group[i] = length ? *str - 33 : 84;
 8005706:	f891 c001 	ldrb.w	ip, [r1, #1]
 800570a:	3802      	subs	r0, #2
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 800570c:	fba6 8e07 	umull	r8, lr, r6, r7
                str++;
 8005710:	f101 0902 	add.w	r9, r1, #2
            group[i] = length ? *str - 33 : 84;
 8005714:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005718:	f02e 0803 	bic.w	r8, lr, #3
            word += group[i];
 800571c:	fa5f fc8c 	uxtb.w	ip, ip
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8005720:	eb08 089e 	add.w	r8, r8, lr, lsr #2
 8005724:	eba7 0708 	sub.w	r7, r7, r8
 8005728:	ea4f 0787 	mov.w	r7, r7, lsl #2
 800572c:	fba6 e707 	umull	lr, r7, r6, r7
 8005730:	ea4f 0797 	mov.w	r7, r7, lsr #2
        for (size_t i = 0; i < 4 - padding; i++)
 8005734:	f1c7 0704 	rsb	r7, r7, #4
            group[i] = length ? *str - 33 : 84;
 8005738:	d117      	bne.n	800576a <main+0xa86>
 800573a:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 800573e:	4649      	mov	r1, r9
 8005740:	2701      	movs	r7, #1
 8005742:	46f0      	mov	r8, lr
 8005744:	46f1      	mov	r9, lr
 8005746:	e560      	b.n	800520a <main+0x526>
        for (size_t i = 0; i < 4 - padding; i++)
 8005748:	4662      	mov	r2, ip
    while (length)
 800574a:	2800      	cmp	r0, #0
 800574c:	f47f ad3b 	bne.w	80051c6 <main+0x4e2>
 8005750:	e582      	b.n	8005258 <main+0x574>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8005752:	2b02      	cmp	r3, #2
 8005754:	f47f acd8 	bne.w	8005108 <main+0x424>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8005758:	4a13      	ldr	r2, [pc, #76]	@ (80057a8 <main+0xac4>)
 800575a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800575e:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <main+0xac8>)
 8005760:	6191      	str	r1, [r2, #24]
 8005762:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005766:	619a      	str	r2, [r3, #24]
    }
 8005768:	e4ce      	b.n	8005108 <main+0x424>
            group[i] = length ? *str - 33 : 84;
 800576a:	f891 e002 	ldrb.w	lr, [r1, #2]
 800576e:	2801      	cmp	r0, #1
 8005770:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
 8005774:	fa5f fe8e 	uxtb.w	lr, lr
 8005778:	d106      	bne.n	8005788 <main+0xaa4>
            word += group[i];
 800577a:	46f1      	mov	r9, lr
 800577c:	f04f 0e54 	mov.w	lr, #84	@ 0x54
                str++;
 8005780:	3103      	adds	r1, #3
            word += group[i];
 8005782:	2000      	movs	r0, #0
 8005784:	46f0      	mov	r8, lr
 8005786:	e540      	b.n	800520a <main+0x526>
            group[i] = length ? *str - 33 : 84;
 8005788:	f899 8001 	ldrb.w	r8, [r9, #1]
                str++;
 800578c:	3104      	adds	r1, #4
            word += group[i];
 800578e:	46f1      	mov	r9, lr
 8005790:	2000      	movs	r0, #0
            group[i] = length ? *str - 33 : 84;
 8005792:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
            word += group[i];
 8005796:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 800579a:	fa5f f888 	uxtb.w	r8, r8
 800579e:	e534      	b.n	800520a <main+0x526>
 80057a0:	200004ac 	.word	0x200004ac
 80057a4:	cccccccd 	.word	0xcccccccd
 80057a8:	58021800 	.word	0x58021800
 80057ac:	58020400 	.word	0x58020400

080057b0 <_GLOBAL__sub_I__ZN8recorder7analog_E>:
    SynthEngine() = default;
 80057b0:	4b37      	ldr	r3, [pc, #220]	@ (8005890 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe0>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	4837      	ldr	r0, [pc, #220]	@ (8005894 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe4>)
    }
 80057b8:	b4f0      	push	{r4, r5, r6, r7}
 80057ba:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	605c      	str	r4, [r3, #4]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	6118      	str	r0, [r3, #16]
      : phase_(0.0f),
 80057c8:	61da      	str	r2, [r3, #28]
 80057ca:	4833      	ldr	r0, [pc, #204]	@ (8005898 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe8>)
        phase_inc_(0.0f),
 80057cc:	621a      	str	r2, [r3, #32]
      : phase_(0.0f),
 80057ce:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 80057d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      : phase_(0.0f),
 80057d2:	635a      	str	r2, [r3, #52]	@ 0x34
        phase_inc_(0.0f),
 80057d4:	639a      	str	r2, [r3, #56]	@ 0x38
      : phase_(0.0f),
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40
        phase_inc_(0.0f),
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
      : phase_(0.0f),
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        phase_inc_(0.0f),
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      : phase_(0.0f),
 80057e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        phase_inc_(0.0f),
 80057e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      : phase_(0.0f),
 80057ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        phase_inc_(0.0f),
 80057ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      : phase_(0.0f),
 80057f2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        phase_inc_(0.0f),
 80057f6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80057fa:	7519      	strb	r1, [r3, #20]
 80057fc:	6199      	str	r1, [r3, #24]
        waveform_(Waveform::SINE)
 80057fe:	6259      	str	r1, [r3, #36]	@ 0x24
 8005800:	6319      	str	r1, [r3, #48]	@ 0x30
 8005802:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8005804:	6499      	str	r1, [r3, #72]	@ 0x48
 8005806:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
 800580a:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
 800580e:	f8c3 10a4 	str.w	r1, [r3, #164]	@ 0xa4
 8005812:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
      : phase_(0.0f),
 8005816:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        phase_inc_(0.0f),
 800581a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      : phase_(0.0f),
 800581e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        phase_inc_(0.0f),
 8005822:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        waveform_(Waveform::SINE)
 8005826:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
 800582a:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
        PlaybackEngine(T &memory) : memory_{memory} {}
 800582e:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <_GLOBAL__sub_I__ZN8recorder7analog_E+0xec>)
      : phase_(0.0f),
 8005830:	6002      	str	r2, [r0, #0]
    SamplePlayer(T& memory) : memory_{memory} {}
 8005832:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 8005834:	6042      	str	r2, [r0, #4]
 8005836:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800583a:	61dc      	str	r4, [r3, #28]
 800583c:	f882 11c4 	strb.w	r1, [r2, #452]	@ 0x1c4
    EdgeDetector buttons[numButtons] = {button_1_, button_2_, button_3_, button_4_};
 8005840:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf0>)
 8005842:	621c      	str	r4, [r3, #32]
 8005844:	6817      	ldr	r7, [r2, #0]
 8005846:	4a17      	ldr	r2, [pc, #92]	@ (80058a4 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf4>)
 8005848:	4c17      	ldr	r4, [pc, #92]	@ (80058a8 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf8>)
 800584a:	6816      	ldr	r6, [r2, #0]
 800584c:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <_GLOBAL__sub_I__ZN8recorder7analog_E+0xfc>)
 800584e:	f8d4 c000 	ldr.w	ip, [r4]
 8005852:	6815      	ldr	r5, [r2, #0]
 8005854:	4c16      	ldr	r4, [pc, #88]	@ (80058b0 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x100>)
    SaveData(NVMem& nvmem) : nvmem_{nvmem} {}
 8005856:	4a17      	ldr	r2, [pc, #92]	@ (80058b4 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x104>)
        waveform_(Waveform::SINE)
 8005858:	6081      	str	r1, [r0, #8]
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]
 800585e:	6392      	str	r2, [r2, #56]	@ 0x38
        iter() {}
 8005860:	6511      	str	r1, [r2, #80]	@ 0x50
	typedef _Clock						clock;
	typedef _Dur						duration;
	typedef typename duration::rep				rep;
	typedef typename duration::period			period;

	constexpr time_point() : __d(duration::zero())
 8005862:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8005888 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xd8>
 8005866:	e9c4 c700 	strd	ip, r7, [r4]
 800586a:	e9c4 6502 	strd	r6, r5, [r4, #8]
 800586e:	ed83 7b02 	vstr	d7, [r3, #8]
    RecordingEngine(T& memory) : memory_{memory} {}
 8005872:	4c11      	ldr	r4, [pc, #68]	@ (80058b8 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x108>)
        JingleEngine() = default;
 8005874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005878:	e9c0 1104 	strd	r1, r1, [r0, #16]
      __atomic_base() noexcept = default;
 800587c:	e9c4 2100 	strd	r2, r1, [r4]
 8005880:	60a1      	str	r1, [r4, #8]
 8005882:	8183      	strh	r3, [r0, #12]
 8005884:	bcf0      	pop	{r4, r5, r6, r7}
 8005886:	4770      	bx	lr
	...
 8005890:	20010928 	.word	0x20010928
 8005894:	4382d0a4 	.word	0x4382d0a4
 8005898:	20010910 	.word	0x20010910
 800589c:	20000580 	.word	0x20000580
 80058a0:	20010908 	.word	0x20010908
 80058a4:	20010904 	.word	0x20010904
 80058a8:	2001090c 	.word	0x2001090c
 80058ac:	20010900 	.word	0x20010900
 80058b0:	200108f0 	.word	0x200108f0
 80058b4:	2001088c 	.word	0x2001088c
 80058b8:	20010748 	.word	0x20010748

080058bc <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}


void Adc::DMAService(void)
{
 80058bc:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80058be:	49c7      	ldr	r1, [pc, #796]	@ (8005bdc <recorder::Adc::DMAService()+0x320>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80058c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80058c4:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058c8:	4ac5      	ldr	r2, [pc, #788]	@ (8005be0 <recorder::Adc::DMAService()+0x324>)
 80058ca:	b08e      	sub	sp, #56	@ 0x38
 80058cc:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80058ce:	608b      	str	r3, [r1, #8]
 80058d0:	4603      	mov	r3, r0
 80058d2:	6891      	ldr	r1, [r2, #8]
 80058d4:	0749      	lsls	r1, r1, #29
 80058d6:	f100 809a 	bmi.w	8005a0e <recorder::Adc::DMAService()+0x152>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80058da:	6c10      	ldr	r0, [r2, #64]	@ 0x40
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 80058dc:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
  MODIFY_REG(ADCx->CR,
 80058e0:	6894      	ldr	r4, [r2, #8]
 80058e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
    LL_DMA_ClearFlag_TC1(DMA1);
    LL_DMA_ClearFlag_HT1(DMA1);

    if (!LL_ADC_REG_IsConversionOngoing(ADC1))
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 80058e6:	b280      	uxth	r0, r0
 80058e8:	49be      	ldr	r1, [pc, #760]	@ (8005be4 <recorder::Adc::DMAService()+0x328>)
 80058ea:	eddf 5abf 	vldr	s11, [pc, #764]	@ 8005be8 <recorder::Adc::DMAService()+0x32c>
 80058ee:	ee07 0a90 	vmov	s15, r0
 80058f2:	4021      	ands	r1, r4
 80058f4:	ed9f 6abd 	vldr	s12, [pc, #756]	@ 8005bec <recorder::Adc::DMAService()+0x330>
 80058f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fc:	f041 0104 	orr.w	r1, r1, #4
 8005900:	6091      	str	r1, [r2, #8]
 8005902:	eee7 6aa5 	vfma.f32	s13, s15, s11
        if (kEnableReverse && current_pot_ == POT_7)
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 8005906:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 800590a:	eef0 7a47 	vmov.f32	s15, s14
 800590e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005912:	0090      	lsls	r0, r2, #2
 8005914:	00c9      	lsls	r1, r1, #3
 8005916:	eee6 7a86 	vfma.f32	s15, s13, s12
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 800591a:	185d      	adds	r5, r3, r1
 800591c:	f101 0408 	add.w	r4, r1, #8
 8005920:	3114      	adds	r1, #20
 8005922:	ed95 7a08 	vldr	s14, [r5, #32]

        if (delta >= threshold_)
 8005926:	edd5 6a07 	vldr	s13, [r5, #28]
 800592a:	441c      	add	r4, r3
 800592c:	4419      	add	r1, r3
        float delta = input - position_;
 800592e:	ee37 6ac7 	vsub.f32	s12, s15, s14
        if (delta >= threshold_)
 8005932:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593a:	f2c0 8142 	blt.w	8005bc2 <recorder::Adc::DMAService()+0x306>
        {
            position_ = input - threshold_;
 800593e:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005942:	ed85 7a08 	vstr	s14, [r5, #32]
 8005946:	ed91 6a01 	vldr	s12, [r1, #4]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 800594a:	1881      	adds	r1, r0, r2
 800594c:	3201      	adds	r2, #1
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 800594e:	edd4 4a01 	vldr	s9, [r4, #4]
 8005952:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8005956:	ed9f 5aa6 	vldr	s10, [pc, #664]	@ 8005bf0 <recorder::Adc::DMAService()+0x334>
 800595a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800595e:	edd1 5a0a 	vldr	s11, [r1, #40]	@ 0x28
 8005962:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005966:	edd1 7a05 	vldr	s15, [r1, #20]
 800596a:	ee37 7a65 	vsub.f32	s14, s14, s11
 800596e:	edd1 6a09 	vldr	s13, [r1, #36]	@ 0x24
 8005972:	edd0 5a01 	vldr	s11, [r0, #4]
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
            float frac = sample - index;
            float a = kPotCorrection[index];
 8005976:	489f      	ldr	r0, [pc, #636]	@ (8005bf4 <recorder::Adc::DMAService()+0x338>)
 8005978:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800597c:	eef0 5a67 	vmov.f32	s11, s15
 8005980:	eee7 5a26 	vfma.f32	s11, s14, s13
        increment_ = (sample - history_) * step_;
 8005984:	edd4 6a00 	vldr	s13, [r4]
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8005988:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
      if (__a < __b)
 800598c:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
      if (__b < __a)
 8005990:	eef4 7ac6 	vcmpe.f32	s15, s12
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8005994:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 8005bf8 <recorder::Adc::DMAService()+0x33c>
 8005998:	eddf 5a98 	vldr	s11, [pc, #608]	@ 8005bfc <recorder::Adc::DMAService()+0x340>
 800599c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return std::clamp(x, out_min_, out_max_);
 80059a0:	bfc8      	it	gt
 80059a2:	edd1 7a06 	vldrgt	s15, [r1, #24]
 80059a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059aa:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 80059ae:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 80059b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059b6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80059ba:	ee17 1a10 	vmov	r1, s14
 80059be:	293f      	cmp	r1, #63	@ 0x3f
 80059c0:	bfa8      	it	ge
 80059c2:	213f      	movge	r1, #63	@ 0x3f
            float frac = sample - index;
 80059c4:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 80059c8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 80059cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = kPotCorrection[index + 1];
            return a + (b - a) * frac;
 80059d0:	ed95 6a01 	vldr	s12, [r5, #4]
            float frac = sample - index;
 80059d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 80059d8:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 80059dc:	ee36 6a47 	vsub.f32	s12, s12, s14
 80059e0:	eea7 7a86 	vfma.f32	s14, s15, s12
 80059e4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80059e8:	ee67 7aa4 	vmul.f32	s15, s15, s9
  { return __builtin_fabsf(__x); }
 80059ec:	eef0 6ae7 	vabs.f32	s13, s15
 80059f0:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 80059f4:	eef4 6ac5 	vcmpe.f32	s13, s10
 80059f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fc:	d803      	bhi.n	8005a06 <recorder::Adc::DMAService()+0x14a>
        {
            history_ = sample;
 80059fe:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 8005a02:	edc4 5a02 	vstr	s11, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 8005a06:	f002 0207 	and.w	r2, r2, #7
 8005a0a:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 8005a0e:	ed93 0a02 	vldr	s0, [r3, #8]
 8005a12:	edd3 0a0c 	vldr	s1, [r3, #48]	@ 0x30
 8005a16:	ed93 1a16 	vldr	s2, [r3, #88]	@ 0x58
 8005a1a:	edd3 1a20 	vldr	s3, [r3, #128]	@ 0x80
 8005a1e:	ed93 2a2a 	vldr	s4, [r3, #168]	@ 0xa8
 8005a22:	edd3 2a34 	vldr	s5, [r3, #208]	@ 0xd0
 8005a26:	ed93 3a3e 	vldr	s6, [r3, #248]	@ 0xf8
 8005a2a:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8005a2e:	ed93 4a04 	vldr	s8, [r3, #16]
 8005a32:	edd3 4a0e 	vldr	s9, [r3, #56]	@ 0x38
 8005a36:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8005a3a:	ee34 4a00 	vadd.f32	s8, s8, s0
 8005a3e:	edd3 5a22 	vldr	s11, [r3, #136]	@ 0x88
 8005a42:	ee74 4aa0 	vadd.f32	s9, s9, s1
 8005a46:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 8005a4a:	ee35 5a01 	vadd.f32	s10, s10, s2
 8005a4e:	edd3 6a36 	vldr	s13, [r3, #216]	@ 0xd8
 8005a52:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8005a56:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 8005a5a:	ee36 6a02 	vadd.f32	s12, s12, s4
 8005a5e:	edd3 3a4a 	vldr	s7, [r3, #296]	@ 0x128
 8005a62:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005a66:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 8005a6a:	4e65      	ldr	r6, [pc, #404]	@ (8005c00 <recorder::Adc::DMAService()+0x344>)
 8005a6c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005a70:	ed83 6a2a 	vstr	s12, [r3, #168]	@ 0xa8
 8005a74:	edc3 6a34 	vstr	s13, [r3, #208]	@ 0xd0
 8005a78:	ed83 7a3e 	vstr	s14, [r3, #248]	@ 0xf8
 8005a7c:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
 8005a80:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8005a84:	ed8d 4a06 	vstr	s8, [sp, #24]
 8005a88:	edc3 4a0c 	vstr	s9, [r3, #48]	@ 0x30
 8005a8c:	edcd 4a07 	vstr	s9, [sp, #28]
 8005a90:	ed83 5a16 	vstr	s10, [r3, #88]	@ 0x58
 8005a94:	ed8d 5a08 	vstr	s10, [sp, #32]
 8005a98:	edc3 5a20 	vstr	s11, [r3, #128]	@ 0x80
 8005a9c:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8005aa0:	ed8d 6a0a 	vstr	s12, [sp, #40]	@ 0x28
 8005aa4:	edcd 6a0b 	vstr	s13, [sp, #44]	@ 0x2c
 8005aa8:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8005aac:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005ab0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8005ab4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ab8:	4c52      	ldr	r4, [pc, #328]	@ (8005c04 <recorder::Adc::DMAService()+0x348>)
 8005aba:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 8005abc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005ac0:	eeb0 6a67 	vmov.f32	s12, s15
 8005ac4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005c08 <recorder::Adc::DMAService()+0x34c>
                float sample = dma_buffer_[read_index_];
 8005ac8:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005acc:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ad4:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005ad6:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ada:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005ade:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ae2:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 8005ae6:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ae8:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005aec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005af0:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005af4:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005af8:	ed8d 6a00 	vstr	s12, [sp]
 8005afc:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b00:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005b02:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b0a:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b0e:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005b12:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005b16:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005b1a:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b1e:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b22:	ed8d 6a03 	vstr	s12, [sp, #12]
 8005b26:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b2a:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005b2c:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b34:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b38:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005b3c:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005b40:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005b44:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b48:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b4c:	ed8d 6a01 	vstr	s12, [sp, #4]
 8005b50:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b54:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005b56:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b5e:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b62:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8005b66:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 8005b6a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005b6e:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b72:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b76:	ed8d 6a04 	vstr	s12, [sp, #16]
 8005b7a:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b7e:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8005b80:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b88:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b8c:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8005b90:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b94:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8005b96:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005b9a:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005b9e:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8005ba2:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005ba6:	08e4      	lsrs	r4, r4, #3
 8005ba8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005bac:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8005bb0:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8005bb4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8005bb8:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 8005bbc:	47a8      	blx	r5
    }

    PerformCallback();
}
 8005bbe:	b00e      	add	sp, #56	@ 0x38
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
        else if (delta <= -threshold_)
 8005bc2:	eef1 5a66 	vneg.f32	s11, s13
 8005bc6:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	f63f aeba 	bhi.w	8005946 <recorder::Adc::DMAService()+0x8a>
            position_ = input + threshold_;
 8005bd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005bd6:	ed85 7a08 	vstr	s14, [r5, #32]
 8005bda:	e6b4      	b.n	8005946 <recorder::Adc::DMAService()+0x8a>
 8005bdc:	40020000 	.word	0x40020000
 8005be0:	40022000 	.word	0x40022000
 8005be4:	7fffffc0 	.word	0x7fffffc0
 8005be8:	37800080 	.word	0x37800080
 8005bec:	3f8051ec 	.word	0x3f8051ec
 8005bf0:	34000000 	.word	0x34000000
 8005bf4:	0800c2f0 	.word	0x0800c2f0
 8005bf8:	42800000 	.word	0x42800000
 8005bfc:	00000000 	.word	0x00000000
 8005c00:	3800fc00 	.word	0x3800fc00
 8005c04:	aaaaaaab 	.word	0xaaaaaaab
 8005c08:	38000080 	.word	0x38000080

08005c0c <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 8005c0c:	4b01      	ldr	r3, [pc, #4]	@ (8005c14 <recorder::Adc::DMAHandler()+0x8>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	f7ff be54 	b.w	80058bc <recorder::Adc::DMAService()>
 8005c14:	20010da4 	.word	0x20010da4

08005c18 <recorder::Adc::InitADC(ADC_TypeDef*)>:
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8005c18:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <recorder::Adc::InitADC(ADC_TypeDef*)+0x78>)
void Adc::InitADC(ADC_TypeDef* adc)
{
    LL_ADC_SetBoostMode(adc, LL_ADC_BOOST_MODE_50MHZ);
    LL_ADC_DisableDeepPowerDown(adc);
    LL_ADC_EnableInternalRegulator(adc);
    system::Delay_ms(1);
 8005c1a:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c94 <recorder::Adc::InitADC(ADC_TypeDef*)+0x7c>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 8005c28:	688b      	ldr	r3, [r1, #8]
 8005c2a:	bf0c      	ite	eq
 8005c2c:	f443 73e0 	orreq.w	r3, r3, #448	@ 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 8005c30:	f443 7340 	orrne.w	r3, r3, #768	@ 0x300
{
 8005c34:	b510      	push	{r4, lr}
 8005c36:	460c      	mov	r4, r1
 8005c38:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005c3a:	6889      	ldr	r1, [r1, #8]
 8005c3c:	b084      	sub	sp, #16
  MODIFY_REG(ADCx->CR,
 8005c3e:	4b16      	ldr	r3, [pc, #88]	@ (8005c98 <recorder::Adc::InitADC(ADC_TypeDef*)+0x80>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005c40:	400a      	ands	r2, r1
 8005c42:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(ADCx->CR,
 8005c44:	68a2      	ldr	r2, [r4, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	60a3      	str	r3, [r4, #8]
    system::Delay_ms(1);
 8005c4e:	f001 fde5 	bl	800781c <recorder::system::Delay_ms(unsigned long)>

    LL_ADC_InitTypeDef adc_init =
 8005c52:	2300      	movs	r3, #0
        .Resolution   = LL_ADC_RESOLUTION_16B,
        .LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE,
        .LowPowerMode = LL_ADC_LP_MODE_NONE,
    };

    LL_ADC_Init(adc, &adc_init);
 8005c54:	4669      	mov	r1, sp
 8005c56:	4620      	mov	r0, r4
    LL_ADC_InitTypeDef adc_init =
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8005c88 <recorder::Adc::InitADC(ADC_TypeDef*)+0x70>
 8005c5e:	ed8d 7b00 	vstr	d7, [sp]
    LL_ADC_Init(adc, &adc_init);
 8005c62:	f003 fb5f 	bl	8009324 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8005c66:	68a1      	ldr	r1, [r4, #8]
 8005c68:	4a0c      	ldr	r2, [pc, #48]	@ (8005c9c <recorder::Adc::InitADC(ADC_TypeDef*)+0x84>)
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <recorder::Adc::InitADC(ADC_TypeDef*)+0x88>)
 8005c6c:	400a      	ands	r2, r1
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dbfc      	blt.n	8005c72 <recorder::Adc::InitADC(ADC_TypeDef*)+0x5a>
    LL_ADC_StartCalibration(adc,
        LL_ADC_CALIB_OFFSET_LINEARITY, LL_ADC_SINGLE_ENDED);
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
 8005c78:	2001      	movs	r0, #1
 8005c7a:	f001 fdcf 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
}
 8005c7e:	b004      	add	sp, #16
 8005c80:	bd10      	pop	{r4, pc}
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
	...
 8005c90:	5c001000 	.word	0x5c001000
 8005c94:	5fffffc0 	.word	0x5fffffc0
 8005c98:	6fffffc0 	.word	0x6fffffc0
 8005c9c:	3ffeffc0 	.word	0x3ffeffc0
 8005ca0:	80010000 	.word	0x80010000
 8005ca4:	00000000 	.word	0x00000000

08005ca8 <recorder::Adc::InitAudioSequence()>:

void Adc::InitAudioSequence(void)
{
 8005ca8:	b510      	push	{r4, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 8005caa:	2300      	movs	r3, #0
{
 8005cac:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8005cae:	4c2e      	ldr	r4, [pc, #184]	@ (8005d68 <recorder::Adc::InitAudioSequence()+0xc0>)
    };
 8005cb0:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8005cb4:	4669      	mov	r1, sp
 8005cb6:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8005cb8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8005d60 <recorder::Adc::InitAudioSequence()+0xb8>
 8005cbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8005cc0:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8005cc2:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8005cc6:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 8005cca:	f003 fb45 	bl	8009358 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	4b27      	ldr	r3, [pc, #156]	@ (8005d6c <recorder::Adc::InitAudioSequence()+0xc4>)
 8005cd0:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	69e0      	ldr	r0, [r4, #28]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
  MODIFY_REG(*preg,
 8005ce0:	4a23      	ldr	r2, [pc, #140]	@ (8005d70 <recorder::Adc::InitAudioSequence()+0xc8>)
 8005ce2:	4303      	orrs	r3, r0
 8005ce4:	61e3      	str	r3, [r4, #28]
 8005ce6:	f8d2 0130 	ldr.w	r0, [r2, #304]	@ 0x130
 8005cea:	4b22      	ldr	r3, [pc, #136]	@ (8005d74 <recorder::Adc::InitAudioSequence()+0xcc>)
 8005cec:	f420 60f8 	bic.w	r0, r0, #1984	@ 0x7c0
 8005cf0:	f440 7070 	orr.w	r0, r0, #960	@ 0x3c0
 8005cf4:	f8c2 0130 	str.w	r0, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 8005cf8:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8005cfc:	f420 3060 	bic.w	r0, r0, #229376	@ 0x38000
 8005d00:	f440 3020 	orr.w	r0, r0, #163840	@ 0x28000
 8005d04:	f8c2 0118 	str.w	r0, [r2, #280]	@ 0x118
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	fab3 f383 	clz	r3, r3
 8005d10:	69e0      	ldr	r0, [r4, #28]
 8005d12:	4099      	lsls	r1, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005d14:	4b18      	ldr	r3, [pc, #96]	@ (8005d78 <recorder::Adc::InitAudioSequence()+0xd0>)
 8005d16:	4301      	orrs	r1, r0
 8005d18:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005d1a:	f8d2 1130 	ldr.w	r1, [r2, #304]	@ 0x130
 8005d1e:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8005d22:	f441 4130 	orr.w	r1, r1, #45056	@ 0xb000
 8005d26:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 8005d2a:	f8d2 1118 	ldr.w	r1, [r2, #280]	@ 0x118
 8005d2e:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8005d32:	f041 0128 	orr.w	r1, r1, #40	@ 0x28
 8005d36:	f8c2 1118 	str.w	r1, [r2, #280]	@ 0x118
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005d3a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005d3c:	490f      	ldr	r1, [pc, #60]	@ (8005d7c <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005d3e:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005d40:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <recorder::Adc::InitAudioSequence()+0xd8>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005d42:	f043 0303 	orr.w	r3, r3, #3
 8005d46:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d4e:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	4019      	ands	r1, r3
 8005d54:	430a      	orrs	r2, r1
 8005d56:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8005d58:	b006      	add	sp, #24
 8005d5a:	bd10      	pop	{r4, pc}
 8005d5c:	f3af 8000 	nop.w
 8005d60:	00000003 	.word	0x00000003
 8005d64:	00001000 	.word	0x00001000
 8005d68:	40022100 	.word	0x40022100
 8005d6c:	3ef08000 	.word	0x3ef08000
 8005d70:	40022000 	.word	0x40022000
 8005d74:	2e300800 	.word	0x2e300800
 8005d78:	fffffbfc 	.word	0xfffffbfc
 8005d7c:	fc00fe1f 	.word	0xfc00fe1f
 8005d80:	00010020 	.word	0x00010020

08005d84 <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8005d84:	b510      	push	{r4, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8005d86:	2300      	movs	r3, #0
{
 8005d88:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 8005d8a:	4c69      	ldr	r4, [pc, #420]	@ (8005f30 <recorder::Adc::InitPotSequence()+0x1ac>)
    LL_ADC_REG_InitTypeDef reg_init =
 8005d8c:	2007      	movs	r0, #7
 8005d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	9001      	str	r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8005d96:	4669      	mov	r1, sp
 8005d98:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8005d9a:	9202      	str	r2, [sp, #8]
 8005d9c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005da4:	9305      	str	r3, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8005da6:	f003 fad7 	bl	8009358 <LL_ADC_REG_Init>
 8005daa:	4a62      	ldr	r2, [pc, #392]	@ (8005f34 <recorder::Adc::InitPotSequence()+0x1b0>)
 8005dac:	fa92 f2a2 	rbit	r2, r2

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8005db0:	2301      	movs	r3, #1
 8005db2:	fab2 f282 	clz	r2, r2
 8005db6:	69e0      	ldr	r0, [r4, #28]
 8005db8:	fa03 f202 	lsl.w	r2, r3, r2
 8005dbc:	495e      	ldr	r1, [pc, #376]	@ (8005f38 <recorder::Adc::InitPotSequence()+0x1b4>)
 8005dbe:	4302      	orrs	r2, r0
 8005dc0:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005dc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005dc4:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8005dc8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005dcc:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005dce:	6962      	ldr	r2, [r4, #20]
 8005dd0:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005dd4:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 8005dd8:	6162      	str	r2, [r4, #20]
 8005dda:	fa91 f1a1 	rbit	r1, r1
 8005dde:	fab1 f181 	clz	r1, r1
 8005de2:	69e0      	ldr	r0, [r4, #28]
 8005de4:	4a55      	ldr	r2, [pc, #340]	@ (8005f3c <recorder::Adc::InitPotSequence()+0x1b8>)
 8005de6:	fa03 f101 	lsl.w	r1, r3, r1
 8005dea:	4301      	orrs	r1, r0
 8005dec:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005dee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005df0:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 8005df4:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 8005df8:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005dfa:	69a1      	ldr	r1, [r4, #24]
 8005dfc:	f021 0107 	bic.w	r1, r1, #7
 8005e00:	f041 0105 	orr.w	r1, r1, #5
 8005e04:	61a1      	str	r1, [r4, #24]
 8005e06:	fa92 f2a2 	rbit	r2, r2
 8005e0a:	fab2 f282 	clz	r2, r2
 8005e0e:	69e0      	ldr	r0, [r4, #28]
 8005e10:	494b      	ldr	r1, [pc, #300]	@ (8005f40 <recorder::Adc::InitPotSequence()+0x1bc>)
 8005e12:	fa03 f202 	lsl.w	r2, r3, r2
 8005e16:	4302      	orrs	r2, r0
 8005e18:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005e1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005e1c:	f422 02f8 	bic.w	r2, r2, #8126464	@ 0x7c0000
 8005e20:	f442 12e0 	orr.w	r2, r2, #1835008	@ 0x1c0000
 8005e24:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005e26:	6962      	ldr	r2, [r4, #20]
 8005e28:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 8005e2c:	f442 0220 	orr.w	r2, r2, #10485760	@ 0xa00000
 8005e30:	6162      	str	r2, [r4, #20]
 8005e32:	fa91 f1a1 	rbit	r1, r1
 8005e36:	fab1 f181 	clz	r1, r1
 8005e3a:	69e0      	ldr	r0, [r4, #28]
 8005e3c:	4a41      	ldr	r2, [pc, #260]	@ (8005f44 <recorder::Adc::InitPotSequence()+0x1c0>)
 8005e3e:	fa03 f101 	lsl.w	r1, r3, r1
 8005e42:	4301      	orrs	r1, r0
 8005e44:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005e46:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e48:	f021 51f8 	bic.w	r1, r1, #520093696	@ 0x1f000000
 8005e4c:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8005e50:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8005e52:	6961      	ldr	r1, [r4, #20]
 8005e54:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005e58:	f441 41a0 	orr.w	r1, r1, #20480	@ 0x5000
 8005e5c:	6161      	str	r1, [r4, #20]
 8005e5e:	fa92 f2a2 	rbit	r2, r2
 8005e62:	fab2 f282 	clz	r2, r2
 8005e66:	69e0      	ldr	r0, [r4, #28]
 8005e68:	4937      	ldr	r1, [pc, #220]	@ (8005f48 <recorder::Adc::InitPotSequence()+0x1c4>)
 8005e6a:	fa03 f202 	lsl.w	r2, r3, r2
 8005e6e:	4302      	orrs	r2, r0
 8005e70:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005e72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005e74:	f022 021f 	bic.w	r2, r2, #31
 8005e78:	f042 020c 	orr.w	r2, r2, #12
 8005e7c:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005e7e:	69a2      	ldr	r2, [r4, #24]
 8005e80:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8005e84:	f442 72a0 	orr.w	r2, r2, #320	@ 0x140
 8005e88:	61a2      	str	r2, [r4, #24]
 8005e8a:	fa91 f1a1 	rbit	r1, r1
 8005e8e:	fab1 f181 	clz	r1, r1
 8005e92:	69e0      	ldr	r0, [r4, #28]
 8005e94:	4a2d      	ldr	r2, [pc, #180]	@ (8005f4c <recorder::Adc::InitPotSequence()+0x1c8>)
 8005e96:	fa03 f101 	lsl.w	r1, r3, r1
 8005e9a:	4301      	orrs	r1, r0
 8005e9c:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 8005e9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ea0:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8005ea4:	f441 7150 	orr.w	r1, r1, #832	@ 0x340
 8005ea8:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005eaa:	69a1      	ldr	r1, [r4, #24]
 8005eac:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8005eb0:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
 8005eb4:	61a1      	str	r1, [r4, #24]
 8005eb6:	fa92 f2a2 	rbit	r2, r2
 8005eba:	fab2 f282 	clz	r2, r2
 8005ebe:	69e0      	ldr	r0, [r4, #28]
 8005ec0:	4923      	ldr	r1, [pc, #140]	@ (8005f50 <recorder::Adc::InitPotSequence()+0x1cc>)
 8005ec2:	fa03 f202 	lsl.w	r2, r3, r2
 8005ec6:	4302      	orrs	r2, r0
 8005ec8:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8005eca:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005ecc:	f422 32f8 	bic.w	r2, r2, #126976	@ 0x1f000
 8005ed0:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
 8005ed4:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005ed6:	69a2      	ldr	r2, [r4, #24]
 8005ed8:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8005edc:	f042 62a0 	orr.w	r2, r2, #83886080	@ 0x5000000
 8005ee0:	61a2      	str	r2, [r4, #24]
 8005ee2:	fa91 f1a1 	rbit	r1, r1
 8005ee6:	fab1 f181 	clz	r1, r1
 8005eea:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005eec:	4a19      	ldr	r2, [pc, #100]	@ (8005f54 <recorder::Adc::InitPotSequence()+0x1d0>)
 8005eee:	408b      	lsls	r3, r1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005ef0:	4919      	ldr	r1, [pc, #100]	@ (8005f58 <recorder::Adc::InitPotSequence()+0x1d4>)
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	4819      	ldr	r0, [pc, #100]	@ (8005f5c <recorder::Adc::InitPotSequence()+0x1d8>)
 8005ef6:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 8005ef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005efa:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 8005efe:	f443 0388 	orr.w	r3, r3, #4456448	@ 0x440000
 8005f02:	6363      	str	r3, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8005f04:	69a3      	ldr	r3, [r4, #24]
 8005f06:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8005f0a:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8005f0e:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	401a      	ands	r2, r3
 8005f14:	f042 0203 	orr.w	r2, r2, #3
 8005f18:	6122      	str	r2, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f20:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	4018      	ands	r0, r3
 8005f26:	4301      	orrs	r1, r0
 8005f28:	6121      	str	r1, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	bf00      	nop
 8005f30:	40022000 	.word	0x40022000
 8005f34:	0c900008 	.word	0x0c900008
 8005f38:	2a000400 	.word	0x2a000400
 8005f3c:	1d500080 	.word	0x1d500080
 8005f40:	10c00010 	.word	0x10c00010
 8005f44:	32601000 	.word	0x32601000
 8005f48:	36902000 	.word	0x36902000
 8005f4c:	4b840000 	.word	0x4b840000
 8005f50:	47520000 	.word	0x47520000
 8005f54:	fffffbfc 	.word	0xfffffbfc
 8005f58:	000f0080 	.word	0x000f0080
 8005f5c:	fc00fe1f 	.word	0xfc00fe1f

08005f60 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8005f60:	4aa4      	ldr	r2, [pc, #656]	@ (80061f4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x294>)
        history_ = 0;
 8005f62:	2300      	movs	r3, #0
{
 8005f64:	b5f0      	push	{r4, r5, r6, r7, lr}
        out_max_ = max;
 8005f66:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
        step_ = 1.f / period;
 8005f6a:	f04f 5678 	mov.w	r6, #1040187392	@ 0x3e000000
    callback_ = callback;
    started_ = false;
 8005f6e:	2700      	movs	r7, #0
    instance_ = this;
 8005f70:	6010      	str	r0, [r2, #0]
        threshold_ = threshold;
 8005f72:	4aa1      	ldr	r2, [pc, #644]	@ (80061f8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x298>)
{
 8005f74:	b095      	sub	sp, #84	@ 0x54
    callback_ = callback;
 8005f76:	6001      	str	r1, [r0, #0]
{
 8005f78:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005f7a:	49a0      	ldr	r1, [pc, #640]	@ (80061fc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x29c>)
        threshold_ = threshold;
 8005f7c:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 8005f7e:	6282      	str	r2, [r0, #40]	@ 0x28
        threshold_ = threshold;
 8005f80:	6442      	str	r2, [r0, #68]	@ 0x44
        in_min_ = out_min_ + threshold_;
 8005f82:	6502      	str	r2, [r0, #80]	@ 0x50
        threshold_ = threshold;
 8005f84:	66c2      	str	r2, [r0, #108]	@ 0x6c
        in_min_ = out_min_ + threshold_;
 8005f86:	6782      	str	r2, [r0, #120]	@ 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005f88:	62c1      	str	r1, [r0, #44]	@ 0x2c
    started_ = false;
 8005f8a:	7107      	strb	r7, [r0, #4]
 8005f8c:	60c6      	str	r6, [r0, #12]
        history_ = 0;
 8005f8e:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8005f90:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 8005f92:	6143      	str	r3, [r0, #20]
        out_max_ = max;
 8005f94:	6185      	str	r5, [r0, #24]
        position_ = initial_value;
 8005f96:	6203      	str	r3, [r0, #32]
        out_range_ = out_max_ - out_min_;
 8005f98:	6245      	str	r5, [r0, #36]	@ 0x24
        step_ = 1.f / period;
 8005f9a:	6346      	str	r6, [r0, #52]	@ 0x34
        history_ = 0;
 8005f9c:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 8005f9e:	6383      	str	r3, [r0, #56]	@ 0x38
        out_min_ = min;
 8005fa0:	63c3      	str	r3, [r0, #60]	@ 0x3c
        out_max_ = max;
 8005fa2:	6405      	str	r5, [r0, #64]	@ 0x40
        position_ = initial_value;
 8005fa4:	6483      	str	r3, [r0, #72]	@ 0x48
        out_range_ = out_max_ - out_min_;
 8005fa6:	64c5      	str	r5, [r0, #76]	@ 0x4c
        step_ = 1.f / period;
 8005fa8:	65c6      	str	r6, [r0, #92]	@ 0x5c
        history_ = 0;
 8005faa:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 8005fac:	6603      	str	r3, [r0, #96]	@ 0x60
        out_min_ = min;
 8005fae:	6643      	str	r3, [r0, #100]	@ 0x64
        out_max_ = max;
 8005fb0:	6685      	str	r5, [r0, #104]	@ 0x68
        position_ = initial_value;
 8005fb2:	6703      	str	r3, [r0, #112]	@ 0x70
        out_range_ = out_max_ - out_min_;
 8005fb4:	6745      	str	r5, [r0, #116]	@ 0x74
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005fb6:	6541      	str	r1, [r0, #84]	@ 0x54
 8005fb8:	67c1      	str	r1, [r0, #124]	@ 0x7c
        threshold_ = threshold;
 8005fba:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
        in_min_ = out_min_ + threshold_;
 8005fbe:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005fc2:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
        threshold_ = threshold;
 8005fc6:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
        in_min_ = out_min_ + threshold_;
 8005fca:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005fce:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
        threshold_ = threshold;
 8005fd2:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
        in_min_ = out_min_ + threshold_;
 8005fd6:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8005fda:	f8c0 10f4 	str.w	r1, [r0, #244]	@ 0xf4
        step_ = 1.f / period;
 8005fde:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
        history_ = 0;
 8005fe2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 8005fe6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        out_min_ = min;
 8005fea:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        out_max_ = max;
 8005fee:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
        position_ = initial_value;
 8005ff2:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        out_range_ = out_max_ - out_min_;
 8005ff6:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
        step_ = 1.f / period;
 8005ffa:	f8c0 60ac 	str.w	r6, [r0, #172]	@ 0xac
        history_ = 0;
 8005ffe:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 8006002:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        out_min_ = min;
 8006006:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
        out_max_ = max;
 800600a:	f8c0 50b8 	str.w	r5, [r0, #184]	@ 0xb8
        position_ = initial_value;
 800600e:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
        out_range_ = out_max_ - out_min_;
 8006012:	f8c0 50c4 	str.w	r5, [r0, #196]	@ 0xc4
        step_ = 1.f / period;
 8006016:	f8c0 60d4 	str.w	r6, [r0, #212]	@ 0xd4
        history_ = 0;
 800601a:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 800601e:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        out_min_ = min;
 8006022:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
        out_max_ = max;
 8006026:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
        position_ = initial_value;
 800602a:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
        out_range_ = out_max_ - out_min_;
 800602e:	f8c0 50ec 	str.w	r5, [r0, #236]	@ 0xec
        step_ = 1.f / period;
 8006032:	f8c0 60fc 	str.w	r6, [r0, #252]	@ 0xfc
        history_ = 0;
 8006036:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        step_ = 1.f / period;
 800603a:	f8c0 6124 	str.w	r6, [r0, #292]	@ 0x124
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603e:	4e70      	ldr	r6, [pc, #448]	@ (8006200 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
        increment_ = 0;
 8006040:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        out_min_ = min;
 8006044:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
        position_ = initial_value;
 8006048:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
        history_ = 0;
 800604c:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 8006050:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        out_min_ = min;
 8006054:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
        position_ = initial_value;
 8006058:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
        out_max_ = max;
 800605c:	f8c0 5108 	str.w	r5, [r0, #264]	@ 0x108
        threshold_ = threshold;
 8006060:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
        out_range_ = out_max_ - out_min_;
 8006064:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
        in_min_ = out_min_ + threshold_;
 8006068:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800606c:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
 8006070:	f8c0 1144 	str.w	r1, [r0, #324]	@ 0x144
        out_max_ = max;
 8006074:	f8c0 5130 	str.w	r5, [r0, #304]	@ 0x130
        threshold_ = threshold;
 8006078:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
        out_range_ = out_max_ - out_min_;
 800607c:	f8c0 513c 	str.w	r5, [r0, #316]	@ 0x13c
        in_min_ = out_min_ + threshold_;
 8006080:	f8c0 2140 	str.w	r2, [r0, #320]	@ 0x140
  MODIFY_REG(ADCx->CR,
 8006084:	4d5f      	ldr	r5, [pc, #380]	@ (8006204 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a4>)
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0; 
 8006086:	e9c0 7752 	strd	r7, r7, [r0, #328]	@ 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800608a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
    LL_GPIO_StructInit(&gpio_init);
 800608e:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8006098:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060a4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80060a8:	f043 0304 	orr.w	r3, r3, #4
 80060ac:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80060b0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	9302      	str	r3, [sp, #8]
 80060ba:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 80060bc:	f003 fac2 	bl	8009644 <LL_GPIO_StructInit>
        gpio_init.Pin |= LL_GPIO_PIN_4;
 80060c0:	22da      	movs	r2, #218	@ 0xda
 80060c2:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	4850      	ldr	r0, [pc, #320]	@ (8006208 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a8>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 80060c8:	9708      	str	r7, [sp, #32]
 80060ca:	4f50      	ldr	r7, [pc, #320]	@ (800620c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ac>)
        gpio_init.Pin |= LL_GPIO_PIN_4;
 80060cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 80060d0:	f003 fa04 	bl	80094dc <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 80060d4:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	484d      	ldr	r0, [pc, #308]	@ (8006210 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b0>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 80060da:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 80060dc:	f003 f9fe 	bl	80094dc <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 80060e0:	4a4c      	ldr	r2, [pc, #304]	@ (8006214 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b4>)
    InitADC(ADC1);
 80060e2:	4629      	mov	r1, r5
 80060e4:	4620      	mov	r0, r4
 80060e6:	6853      	ldr	r3, [r2, #4]
 80060e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ec:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 80060ee:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060f2:	4a49      	ldr	r2, [pc, #292]	@ (8006218 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b8>)
 80060f4:	f043 0320 	orr.w	r3, r3, #32
 80060f8:	f8c6 30d8 	str.w	r3, [r6, #216]	@ 0xd8
 80060fc:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCx->CR,
 8006100:	f106 4668 	add.w	r6, r6, #3892314112	@ 0xe8000000
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	f5a6 560c 	sub.w	r6, r6, #8960	@ 0x2300
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006110:	6893      	ldr	r3, [r2, #8]
 8006112:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8006116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800611a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 800611c:	68ab      	ldr	r3, [r5, #8]
 800611e:	403b      	ands	r3, r7
 8006120:	f043 0302 	orr.w	r3, r3, #2
 8006124:	60ab      	str	r3, [r5, #8]
 8006126:	68b3      	ldr	r3, [r6, #8]
 8006128:	403b      	ands	r3, r7
 800612a:	f043 0302 	orr.w	r3, r3, #2
 800612e:	60b3      	str	r3, [r6, #8]
    InitADC(ADC1);
 8006130:	f7ff fd72 	bl	8005c18 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitADC(ADC2);
 8006134:	4631      	mov	r1, r6
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fd6e 	bl	8005c18 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitAudioSequence();
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff fdb3 	bl	8005ca8 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 8006142:	4620      	mov	r0, r4
 8006144:	f7ff fe1e 	bl	8005d84 <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 8006148:	68ab      	ldr	r3, [r5, #8]
 800614a:	403b      	ands	r3, r7
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	60ab      	str	r3, [r5, #8]
 8006152:	68b3      	ldr	r3, [r6, #8]
 8006154:	403b      	ands	r3, r7
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	60b3      	str	r3, [r6, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	07da      	lsls	r2, r3, #31
 8006160:	d5fc      	bpl.n	800615c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x1fc>
 8006162:	4a2e      	ldr	r2, [pc, #184]	@ (800621c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2bc>)
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	07db      	lsls	r3, r3, #31
 8006168:	d5fc      	bpl.n	8006164 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x204>
    LL_DMA_InitTypeDef dma_init =
 800616a:	2234      	movs	r2, #52	@ 0x34
 800616c:	2100      	movs	r1, #0
 800616e:	a806      	add	r0, sp, #24
 8006170:	250c      	movs	r5, #12
 8006172:	f004 ff04 	bl	800af7e <memset>
 8006176:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800617a:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 800617e:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006182:	4b1f      	ldr	r3, [pc, #124]	@ (8006200 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
    LL_DMA_InitTypeDef dma_init =
 8006184:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
 8006188:	240a      	movs	r4, #10
 800618a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
    };
 800618e:	4924      	ldr	r1, [pc, #144]	@ (8006220 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c0>)
 8006190:	4a24      	ldr	r2, [pc, #144]	@ (8006224 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c4>)
    LL_DMA_InitTypeDef dma_init =
 8006192:	f8cd e01c 	str.w	lr, [sp, #28]
 8006196:	e9cd c709 	strd	ip, r7, [sp, #36]	@ 0x24
 800619a:	e9cd 400d 	strd	r4, r0, [sp, #52]	@ 0x34
    };
 800619e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    LL_DMA_InitTypeDef dma_init =
 80061a2:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80061a6:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 80061a8:	f8d3 60d8 	ldr.w	r6, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80061ac:	4c1e      	ldr	r4, [pc, #120]	@ (8006228 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c8>)
 80061ae:	aa04      	add	r2, sp, #16
    __HAL_RCC_DMA1_CLK_ENABLE();
 80061b0:	430e      	orrs	r6, r1
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80061b2:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 80061b4:	f8c3 60d8 	str.w	r6, [r3, #216]	@ 0xd8
 80061b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061bc:	400b      	ands	r3, r1
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 80061c2:	f003 f929 	bl	8009418 <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80061c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 80061c8:	4628      	mov	r0, r5
 80061ca:	4918      	ldr	r1, [pc, #96]	@ (800622c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2cc>)
 80061cc:	f023 0310 	bic.w	r3, r3, #16
 80061d0:	62a3      	str	r3, [r4, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80061d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061d4:	f023 0308 	bic.w	r3, r3, #8
 80061d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061da:	f000 fecd 	bl	8006f78 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 80061de:	4628      	mov	r0, r5
 80061e0:	2101      	movs	r1, #1
 80061e2:	f000 ff05 	bl	8006ff0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 80061e6:	4628      	mov	r0, r5
}
 80061e8:	b015      	add	sp, #84	@ 0x54
 80061ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 80061ee:	f000 bee5 	b.w	8006fbc <recorder::irq::Enable(IRQn_Type)>
 80061f2:	bf00      	nop
 80061f4:	20010da4 	.word	0x20010da4
 80061f8:	3a83126f 	.word	0x3a83126f
 80061fc:	3f8041ab 	.word	0x3f8041ab
 8006200:	58024400 	.word	0x58024400
 8006204:	40022000 	.word	0x40022000
 8006208:	58020000 	.word	0x58020000
 800620c:	7fffffc0 	.word	0x7fffffc0
 8006210:	58020800 	.word	0x58020800
 8006214:	58000400 	.word	0x58000400
 8006218:	40022300 	.word	0x40022300
 800621c:	40022100 	.word	0x40022100
 8006220:	40022140 	.word	0x40022140
 8006224:	3800fc00 	.word	0x3800fc00
 8006228:	40020000 	.word	0x40020000
 800622c:	08005c0d 	.word	0x08005c0d

08006230 <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 8006230:	7903      	ldrb	r3, [r0, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12d      	bne.n	8006292 <recorder::Adc::Start()+0x62>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8006236:	4b17      	ldr	r3, [pc, #92]	@ (8006294 <recorder::Adc::Start()+0x64>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8006238:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800623c:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <recorder::Adc::Start()+0x68>)
{
 800623e:	b470      	push	{r4, r5, r6}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8006240:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8006244:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8006246:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8006248:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800624a:	f041 0110 	orr.w	r1, r1, #16
 800624e:	6299      	str	r1, [r3, #40]	@ 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8006250:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006252:	f041 0108 	orr.w	r1, r1, #8
 8006256:	6299      	str	r1, [r3, #40]	@ 0x28
 8006258:	6893      	ldr	r3, [r2, #8]
 800625a:	075b      	lsls	r3, r3, #29
 800625c:	d4fc      	bmi.n	8006258 <recorder::Adc::Start()+0x28>
  MODIFY_REG(ADCx->CR,
 800625e:	6893      	ldr	r3, [r2, #8]
        while (LL_ADC_REG_IsConversionOngoing(ADC1));
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();
        LL_ADC_REG_StartConversion(ADC1);
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 8006260:	f44f 46fa 	mov.w	r6, #32000	@ 0x7d00
 8006264:	4d0d      	ldr	r5, [pc, #52]	@ (800629c <recorder::Adc::Start()+0x6c>)
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 8006266:	f04f 0c01 	mov.w	ip, #1
 800626a:	4c0d      	ldr	r4, [pc, #52]	@ (80062a0 <recorder::Adc::Start()+0x70>)
 800626c:	402b      	ands	r3, r5
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 800626e:	4909      	ldr	r1, [pc, #36]	@ (8006294 <recorder::Adc::Start()+0x64>)
 8006270:	f043 0304 	orr.w	r3, r3, #4
 8006274:	6093      	str	r3, [r2, #8]
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	402b      	ands	r3, r5
 800627a:	f043 0304 	orr.w	r3, r3, #4
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	608e      	str	r6, [r1, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8006282:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8006284:	ea43 030c 	orr.w	r3, r3, ip
    }
}
 8006288:	bc70      	pop	{r4, r5, r6}
 800628a:	628b      	str	r3, [r1, #40]	@ 0x28
        started_ = true;
 800628c:	f880 c004 	strb.w	ip, [r0, #4]
}
 8006290:	4770      	bx	lr
 8006292:	4770      	bx	lr
 8006294:	40020000 	.word	0x40020000
 8006298:	40022000 	.word	0x40022000
 800629c:	7fffffc0 	.word	0x7fffffc0
 80062a0:	40022100 	.word	0x40022100

080062a4 <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 80062a4:	7903      	ldrb	r3, [r0, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d04c      	beq.n	8006344 <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80062aa:	4a27      	ldr	r2, [pc, #156]	@ (8006348 <recorder::Adc::Stop()+0xa4>)
 80062ac:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80062ae:	f023 0301 	bic.w	r3, r3, #1
{
 80062b2:	b470      	push	{r4, r5, r6}
 80062b4:	6293      	str	r3, [r2, #40]	@ 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80062b6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80062b8:	07d9      	lsls	r1, r3, #31
 80062ba:	d4fc      	bmi.n	80062b6 <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 80062bc:	4a23      	ldr	r2, [pc, #140]	@ (800634c <recorder::Adc::Stop()+0xa8>)
 80062be:	4c24      	ldr	r4, [pc, #144]	@ (8006350 <recorder::Adc::Stop()+0xac>)
 80062c0:	6893      	ldr	r3, [r2, #8]
 80062c2:	4924      	ldr	r1, [pc, #144]	@ (8006354 <recorder::Adc::Stop()+0xb0>)
 80062c4:	4023      	ands	r3, r4
 80062c6:	f043 0310 	orr.w	r3, r3, #16
 80062ca:	6093      	str	r3, [r2, #8]
 80062cc:	688b      	ldr	r3, [r1, #8]
 80062ce:	4023      	ands	r3, r4
 80062d0:	f043 0310 	orr.w	r3, r3, #16
 80062d4:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062d6:	6893      	ldr	r3, [r2, #8]
 80062d8:	075b      	lsls	r3, r3, #29
 80062da:	d4fc      	bmi.n	80062d6 <recorder::Adc::Stop()+0x32>
 80062dc:	491d      	ldr	r1, [pc, #116]	@ (8006354 <recorder::Adc::Stop()+0xb0>)
 80062de:	688a      	ldr	r2, [r1, #8]
 80062e0:	f012 0204 	ands.w	r2, r2, #4
 80062e4:	d1fb      	bne.n	80062de <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80062e6:	4918      	ldr	r1, [pc, #96]	@ (8006348 <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 80062e8:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 80062ea:	f44f 6600 	mov.w	r6, #2048	@ 0x800
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 80062ee:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80062f2:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80062f4:	f024 0410 	bic.w	r4, r4, #16
 80062f8:	628c      	str	r4, [r1, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80062fa:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80062fc:	f024 0408 	bic.w	r4, r4, #8
 8006300:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8006302:	608e      	str	r6, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8006304:	608d      	str	r5, [r1, #8]
 8006306:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8006308:	6103      	str	r3, [r0, #16]
        history_ = 0;
 800630a:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 800630c:	6383      	str	r3, [r0, #56]	@ 0x38
        history_ = 0;
 800630e:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 8006310:	6603      	str	r3, [r0, #96]	@ 0x60
        history_ = 0;
 8006312:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 8006316:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        history_ = 0;
 800631a:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 800631e:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        history_ = 0;
 8006322:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 8006326:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        history_ = 0;
 800632a:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        increment_ = 0;
 800632e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        history_ = 0;
 8006332:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 8006336:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 800633a:	7102      	strb	r2, [r0, #4]
    }
}
 800633c:	bc70      	pop	{r4, r5, r6}
    current_pot_ = 0; 
 800633e:	e9c0 2252 	strd	r2, r2, [r0, #328]	@ 0x148
}
 8006342:	4770      	bx	lr
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40020000 	.word	0x40020000
 800634c:	40022000 	.word	0x40022000
 8006350:	7fffffc0 	.word	0x7fffffc0
 8006354:	40022100 	.word	0x40022100

08006358 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
        void StopTimer(void);
        static void TimerHandler(void);

        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
        {
            instance_->Service(in, pot);
 8006358:	4bc8      	ldr	r3, [pc, #800]	@ (800667c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 800635a:	b510      	push	{r4, lr}
            instance_->Service(in, pot);
 800635c:	681c      	ldr	r4, [r3, #0]

        void Service(const AudioInput &in, const PotInput &pot)
        {
            AudioOutput out;

            if (state_ == STATE_STARTING)
 800635e:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 8006362:	2b01      	cmp	r3, #1
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 8006364:	ed2d 8b04 	vpush	{d8-d9}
 8006368:	b084      	sub	sp, #16
            if (state_ == STATE_STARTING)
 800636a:	f000 8082 	beq.w	8006472 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11a>
                if (fade_position_ >= 1)
                {
                    state_ = STATE_RUNNING;
                }
            }
            else if (state_ == STATE_RUNNING)
 800636e:	2b02      	cmp	r3, #2
 8006370:	d066      	beq.n	8006440 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe8>
                    // Disable the amplifier at the start of the soft-off curve
                    // instead of the end, otherwise the speaker will pop.
                    amp_enable_.Clear();
                }
            }
            else if (state_ == STATE_STOPPING)
 8006372:	2b03      	cmp	r3, #3
 8006374:	f000 80dd 	beq.w	8006532 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1da>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8006378:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800637c:	ed9d 6a01 	vldr	s12, [sp, #4]
 8006380:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
            uint32_t code = 0.5 + 0xFFF * sample;
 8006384:	ed9f 4abe 	vldr	s8, [pc, #760]	@ 8006680 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x328>
 8006388:	eddf 4abe 	vldr	s9, [pc, #760]	@ 8006684 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x32c>
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800638c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8006390:	eddd 6a02 	vldr	s13, [sp, #8]
            uint32_t code = 0.5 + 0xFFF * sample;
 8006394:	eeb0 5a67 	vmov.f32	s10, s15
 8006398:	f8d4 2154 	ldr.w	r2, [r4, #340]	@ 0x154
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 800639c:	ee76 6aa5 	vadd.f32	s13, s13, s11
            dma_buffer_[write_index_] = code;
 80063a0:	48b9      	ldr	r0, [pc, #740]	@ (8006688 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x330>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80063a2:	ee26 6a27 	vmul.f32	s12, s12, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80063a6:	49b9      	ldr	r1, [pc, #740]	@ (800668c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x334>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80063a8:	ed9d 7a03 	vldr	s14, [sp, #12]
 80063ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80063b0:	fe86 6a65 	vminnm.f32	s12, s12, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 80063b4:	fe86 6a04 	vmaxnm.f32	s12, s12, s8
 80063b8:	eea6 5a24 	vfma.f32	s10, s12, s9
 80063bc:	eeb0 6a67 	vmov.f32	s12, s15
 80063c0:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 80063c4:	fec6 6a84 	vmaxnm.f32	s13, s13, s8
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80063c8:	ee37 7a25 	vadd.f32	s14, s14, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 80063cc:	eea6 6aa4 	vfma.f32	s12, s13, s9
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 80063d0:	ee27 7a27 	vmul.f32	s14, s14, s15
            uint32_t code = 0.5 + 0xFFF * sample;
 80063d4:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80063d8:	fe87 7a65 	vminnm.f32	s14, s14, s11
 80063dc:	fe87 7a04 	vmaxnm.f32	s14, s14, s8
 80063e0:	ee15 3a10 	vmov	r3, s10
 80063e4:	eee7 7a24 	vfma.f32	s15, s14, s9
 80063e8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80063ec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80063f0:	3201      	adds	r2, #1
 80063f2:	fba1 c302 	umull	ip, r3, r1, r2
 80063f6:	089b      	lsrs	r3, r3, #2
            uint32_t code = 0.5 + 0xFFF * sample;
 80063f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 80063fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006400:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 8006404:	ee16 2a10 	vmov	r2, s12
 8006408:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	fba1 c302 	umull	ip, r3, r1, r2
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006418:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 800641c:	ee17 2a90 	vmov	r2, s15
 8006420:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8006424:	3301      	adds	r3, #1
 8006426:	fba1 2103 	umull	r2, r1, r1, r3
 800642a:	0889      	lsrs	r1, r1, #2
 800642c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006430:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006434:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        }
 8006438:	b004      	add	sp, #16
 800643a:	ecbd 8b04 	vpop	{d8-d9}
 800643e:	bd10      	pop	{r4, pc}
                out = callback_(in, pot);
 8006440:	4b93      	ldr	r3, [pc, #588]	@ (8006690 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x338>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4798      	blx	r3
                if (cue_stop_)
 8006446:	f894 3161 	ldrb.w	r3, [r4, #353]	@ 0x161
                out = callback_(in, pot);
 800644a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800644e:	edcd 0a02 	vstr	s1, [sp, #8]
 8006452:	ed8d 1a03 	vstr	s2, [sp, #12]
                if (cue_stop_)
 8006456:	2b00      	cmp	r3, #0
 8006458:	d08e      	beq.n	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    fade_position_ = 1;
 800645a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
                    state_ = STATE_STOPPING;
 800645e:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask;
    }

    static void SetLow(void)
    {
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8006460:	4b8c      	ldr	r3, [pc, #560]	@ (8006694 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006466:	f884 0160 	strb.w	r0, [r4, #352]	@ 0x160
                    fade_position_ = 1;
 800646a:	f8c4 115c 	str.w	r1, [r4, #348]	@ 0x15c
 800646e:	619a      	str	r2, [r3, #24]
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8006470:	e782      	b.n	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8006472:	edd4 8a57 	vldr	s17, [r4, #348]	@ 0x15c
      if (__a < __b)
 8006476:	eddf 7a88 	vldr	s15, [pc, #544]	@ 8006698 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x340>
 800647a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006482:	f100 80b9 	bmi.w	80065f8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a0>
                    fade_position_ += 1 / kFadeDuration;
 8006486:	eddf 7a85 	vldr	s15, [pc, #532]	@ 800669c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
      if (__b < __a)
 800648a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800648e:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 8006492:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8006496:	fec7 7ac8 	vminnm.f32	s15, s15, s16
  { return __builtin_cosf(__x); }
 800649a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800649e:	f003 ff53 	bl	800a348 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064a6:	ee38 0a40 	vsub.f32	s0, s16, s0
                    fade_position_ += 1 / kFadeDuration;
 80064aa:	ed9f 8a7e 	vldr	s16, [pc, #504]	@ 80066a4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064ae:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                    fade_position_ += 1 / kFadeDuration;
 80064b2:	ee38 8a88 	vadd.f32	s16, s17, s16
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064b6:	eee0 7a07 	vfma.f32	s15, s0, s14
                        out[ch][i] = FadeCurve(fade_position_);
 80064ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80064be:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064c2:	eddf 7a77 	vldr	s15, [pc, #476]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 80064c6:	ed9f 9a75 	vldr	s18, [pc, #468]	@ 800669c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 80064ca:	fe88 0a68 	vminnm.f32	s0, s16, s17
 80064ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80064d2:	f003 ff39 	bl	800a348 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80064da:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80064de:	ee78 8ac0 	vsub.f32	s17, s17, s0
                    fade_position_ += 1 / kFadeDuration;
 80064e2:	ee38 9a09 	vadd.f32	s18, s16, s18
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064e6:	eee8 7a87 	vfma.f32	s15, s17, s14
                        out[ch][i] = FadeCurve(fade_position_);
 80064ea:	edcd 7a02 	vstr	s15, [sp, #8]
 80064ee:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80064f2:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 80064f6:	fe89 0a68 	vminnm.f32	s0, s18, s17
 80064fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80064fe:	f003 ff23 	bl	800a348 <cosf>
 8006502:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8006506:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                if (fade_position_ >= 1)
 800650a:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80066a8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x350>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800650e:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8006512:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 8006516:	eeb4 8ac7 	vcmpe.f32	s16, s14
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800651a:	eee8 7aa6 	vfma.f32	s15, s17, s13
                if (fade_position_ >= 1)
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 8006522:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ >= 1)
 8006526:	f6ff af27 	blt.w	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    state_ = STATE_RUNNING;
 800652a:	2302      	movs	r3, #2
 800652c:	f884 3160 	strb.w	r3, [r4, #352]	@ 0x160
 8006530:	e722      	b.n	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8006532:	ed94 8a57 	vldr	s16, [r4, #348]	@ 0x15c
      if (__a < __b)
 8006536:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 800669c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 800653a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006542:	f100 8097 	bmi.w	8006674 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
      if (__b < __a)
 8006546:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800654a:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
            {
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
                {
                    fade_position_ -= 1 / kFadeDuration;
 800654e:	ee38 0a40 	vsub.f32	s0, s16, s0
 8006552:	fe80 0a68 	vminnm.f32	s0, s0, s17
 8006556:	ee20 0a27 	vmul.f32	s0, s0, s15
 800655a:	f003 fef5 	bl	800a348 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 800655e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006562:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006566:	ee78 8ac0 	vsub.f32	s17, s17, s0
 800656a:	eee8 7a87 	vfma.f32	s15, s17, s14
      if (__a < __b)
 800656e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80066a4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>

                    for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                    {
                        out[ch][i] = FadeCurve(fade_position_);
 8006572:	edcd 7a01 	vstr	s15, [sp, #4]
 8006576:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657e:	d476      	bmi.n	800666e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x316>
      if (__b < __a)
 8006580:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006584:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ -= 1 / kFadeDuration;
 8006588:	ee38 0a40 	vsub.f32	s0, s16, s0
 800658c:	fe80 0a68 	vminnm.f32	s0, s0, s17
 8006590:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006594:	f003 fed8 	bl	800a348 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8006598:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800659c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80065a0:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80065a4:	eee8 7a87 	vfma.f32	s15, s17, s14
                    fade_position_ -= 1 / kFadeDuration;
 80065a8:	eddf 8a40 	vldr	s17, [pc, #256]	@ 80066ac <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
                        out[ch][i] = FadeCurve(fade_position_);
 80065ac:	edcd 7a02 	vstr	s15, [sp, #8]
      if (__a < __b)
 80065b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
                    fade_position_ -= 1 / kFadeDuration;
 80065b4:	ee78 9a68 	vsub.f32	s19, s16, s17
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	d43b      	bmi.n	8006636 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2de>
      if (__b < __a)
 80065be:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065c2:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80066a0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 80065c6:	fe89 0ac9 	vminnm.f32	s0, s19, s18
 80065ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80065ce:	f003 febb 	bl	800a348 <cosf>
 80065d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80065d6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80065da:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 80065de:	ee39 9a40 	vsub.f32	s18, s18, s0
                    }
                }

                if (fade_position_ <= 0)
 80065e2:	eeb4 8a68 	vcmp.f32	s16, s17
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 80065e6:	eee9 7a07 	vfma.f32	s15, s18, s14
                if (fade_position_ <= 0)
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 80065ee:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ <= 0)
 80065f2:	f47f aec1 	bne.w	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 80065f6:	e022      	b.n	800663e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2e6>
      if (__a < __b)
 80065f8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80066b0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
                        out[ch][i] = FadeCurve(fade_position_);
 80065fc:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 80065fe:	eef4 8ae7 	vcmpe.f32	s17, s15
                    fade_position_ += 1 / kFadeDuration;
 8006602:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 80066a4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
                        out[ch][i] = FadeCurve(fade_position_);
 8006606:	9301      	str	r3, [sp, #4]
                    fade_position_ += 1 / kFadeDuration;
 8006608:	ee38 8a88 	vadd.f32	s16, s17, s16
 800660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006610:	f57f af55 	bpl.w	80064be <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
 8006614:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80066b8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x360>
 8006618:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 80066ac <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
 800661c:	eef4 8ae7 	vcmpe.f32	s17, s15
                        out[ch][i] = FadeCurve(fade_position_);
 8006620:	9302      	str	r3, [sp, #8]
                    fade_position_ += 1 / kFadeDuration;
 8006622:	ee38 9a89 	vadd.f32	s18, s17, s18
 8006626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662a:	f57f af60 	bpl.w	80064ee <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x196>
                        out[ch][i] = FadeCurve(fade_position_);
 800662e:	9303      	str	r3, [sp, #12]
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8006630:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 8006634:	e6a0      	b.n	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                        out[ch][i] = FadeCurve(fade_position_);
 8006636:	4b1f      	ldr	r3, [pc, #124]	@ (80066b4 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 8006638:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 800663c:	9303      	str	r3, [sp, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800663e:	4a1f      	ldr	r2, [pc, #124]	@ (80066bc <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x364>)
                {
                    state_ = STATE_STOPPED;
 8006640:	2100      	movs	r1, #0
                    StopTimer();
                    adc_.Stop();
 8006642:	1d20      	adds	r0, r4, #4
 8006644:	6813      	ldr	r3, [r2, #0]
                    state_ = STATE_STOPPED;
 8006646:	f884 1160 	strb.w	r1, [r4, #352]	@ 0x160
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	6013      	str	r3, [r2, #0]
                    adc_.Stop();
 8006650:	f7ff fe28 	bl	80062a4 <recorder::Adc::Stop()>
                    dac_.Stop();
 8006654:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 8006658:	f000 f926 	bl	80068a8 <recorder::Dac::Stop()>
 800665c:	490d      	ldr	r1, [pc, #52]	@ (8006694 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 800665e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8006662:	4b17      	ldr	r3, [pc, #92]	@ (80066c0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x368>)
 8006664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006668:	6188      	str	r0, [r1, #24]
 800666a:	619a      	str	r2, [r3, #24]
 800666c:	e684      	b.n	8006378 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 800666e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006672:	e799      	b.n	80065a8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x250>
 8006674:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8006678:	e779      	b.n	800656e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x216>
 800667a:	bf00      	nop
 800667c:	20010dac 	.word	0x20010dac
 8006680:	00000000 	.word	0x00000000
 8006684:	457ff000 	.word	0x457ff000
 8006688:	3800fc30 	.word	0x3800fc30
 800668c:	aaaaaaab 	.word	0xaaaaaaab
 8006690:	20010da8 	.word	0x20010da8
 8006694:	58020400 	.word	0x58020400
 8006698:	b9da740e 	.word	0xb9da740e
 800669c:	39da740e 	.word	0x39da740e
 80066a0:	40490fdb 	.word	0x40490fdb
 80066a4:	3a5a740e 	.word	0x3a5a740e
 80066a8:	3f7fe4b1 	.word	0x3f7fe4b1
 80066ac:	3aa3d70a 	.word	0x3aa3d70a
 80066b0:	ba5a740e 	.word	0xba5a740e
 80066b4:	bf800000 	.word	0xbf800000
 80066b8:	baa3d70a 	.word	0xbaa3d70a
 80066bc:	40014000 	.word	0x40014000
 80066c0:	58021800 	.word	0x58021800

080066c4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 80066c4:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 80066c6:	4a49      	ldr	r2, [pc, #292]	@ (80067ec <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 80066c8:	b08a      	sub	sp, #40	@ 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80066ca:	4c49      	ldr	r4, [pc, #292]	@ (80067f0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 80066cc:	4605      	mov	r5, r0
    instance_ = this;
 80066ce:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 80066d0:	3004      	adds	r0, #4
 80066d2:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 80066d6:	2600      	movs	r6, #0
    callback_ = callback;
 80066d8:	4b46      	ldr	r3, [pc, #280]	@ (80067f4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 80066da:	f042 0202 	orr.w	r2, r2, #2
 80066de:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 80066e0:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 80066e2:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 80066e6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80066ea:	4b43      	ldr	r3, [pc, #268]	@ (80067f8 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 80066ec:	f002 0202 	and.w	r2, r2, #2
 80066f0:	9204      	str	r2, [sp, #16]
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	f022 020c 	bic.w	r2, r2, #12
 80066fa:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	f022 020c 	bic.w	r2, r2, #12
 8006702:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	f022 0202 	bic.w	r2, r2, #2
 800670a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	f022 020c 	bic.w	r2, r2, #12
 8006712:	f042 0204 	orr.w	r2, r2, #4
 8006716:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8006718:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 800671a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800671e:	4a37      	ldr	r2, [pc, #220]	@ (80067fc <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 8006720:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8006724:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8006728:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800672c:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8006730:	9103      	str	r1, [sp, #12]
 8006732:	9903      	ldr	r1, [sp, #12]
 8006734:	6891      	ldr	r1, [r2, #8]
 8006736:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 800673a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800673c:	68d1      	ldr	r1, [r2, #12]
 800673e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006742:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006744:	6851      	ldr	r1, [r2, #4]
 8006746:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 800674a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006752:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8006756:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8006758:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    adc_.Init(AdcCallback);
 800675c:	4928      	ldr	r1, [pc, #160]	@ (8006800 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 800675e:	f042 0202 	orr.w	r2, r2, #2
 8006762:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8006766:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800676a:	f002 0202 	and.w	r2, r2, #2
 800676e:	9202      	str	r2, [sp, #8]
 8006770:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006778:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006780:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006788:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006790:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	f7ff fbe3 	bl	8005f60 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 800679a:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
 800679e:	f000 f905 	bl	80069ac <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 80067a2:	f240 5334 	movw	r3, #1332	@ 0x534
    LL_TIM_InitTypeDef timer_init =
 80067a6:	9609      	str	r6, [sp, #36]	@ 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 80067a8:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 80067aa:	e9cd 6605 	strd	r6, r6, [sp, #20]
 80067ae:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 80067b2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 80067b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ba:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80067be:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 80067c2:	4c10      	ldr	r4, [pc, #64]	@ (8006804 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 80067c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 80067c8:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 80067ce:	f003 fb05 	bl	8009ddc <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80067d2:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 80067d4:	2200      	movs	r2, #0
 80067d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067da:	f043 0320 	orr.w	r3, r3, #32
 80067de:	6063      	str	r3, [r4, #4]
 80067e0:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
    state_ = STATE_STOPPED;
 80067e4:	f8a5 6160 	strh.w	r6, [r5, #352]	@ 0x160
}
 80067e8:	b00a      	add	sp, #40	@ 0x28
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	20010dac 	.word	0x20010dac
 80067f0:	58024400 	.word	0x58024400
 80067f4:	20010da8 	.word	0x20010da8
 80067f8:	58020400 	.word	0x58020400
 80067fc:	58021800 	.word	0x58021800
 8006800:	08006359 	.word	0x08006359
 8006804:	40014000 	.word	0x40014000

08006808 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 8006808:	4b03      	ldr	r3, [pc, #12]	@ (8006818 <recorder::Analog::StartTimer()+0x10>)
 800680a:	2200      	movs	r2, #0
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 8006816:	4770      	bx	lr
 8006818:	40014000 	.word	0x40014000

0800681c <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800681c:	4b03      	ldr	r3, [pc, #12]	@ (800682c <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 800681e:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006820:	2120      	movs	r1, #32
 8006822:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006824:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8006826:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8006828:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 800682a:	4770      	bx	lr
 800682c:	40020000 	.word	0x40020000

08006830 <recorder::Dac::Start()>:
    if (!started_)
 8006830:	7903      	ldrb	r3, [r0, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d131      	bne.n	800689a <recorder::Dac::Start()+0x6a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8006836:	4b19      	ldr	r3, [pc, #100]	@ (800689c <recorder::Dac::Start()+0x6c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006838:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 800683a:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <recorder::Dac::Start()+0x70>)
{
 800683c:	b410      	push	{r4}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 800683e:	2420      	movs	r4, #32
 8006840:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8006842:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8006844:	6919      	ldr	r1, [r3, #16]
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg,
 8006846:	4c17      	ldr	r4, [pc, #92]	@ (80068a4 <recorder::Dac::Start()+0x74>)
 8006848:	f041 0110 	orr.w	r1, r1, #16
 800684c:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800684e:	6919      	ldr	r1, [r3, #16]
 8006850:	f041 0108 	orr.w	r1, r1, #8
 8006854:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 8006856:	6811      	ldr	r1, [r2, #0]
 8006858:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800685c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 800685e:	6811      	ldr	r1, [r2, #0]
 8006860:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 8006864:	6011      	str	r1, [r2, #0]
  MODIFY_REG(*preg,
 8006866:	f8d4 1414 	ldr.w	r1, [r4, #1044]	@ 0x414
 800686a:	f36f 010b 	bfc	r1, #0, #12
 800686e:	f8c4 1414 	str.w	r1, [r4, #1044]	@ 0x414
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 8006872:	247d      	movs	r4, #125	@ 0x7d
  SET_BIT(DACx->SWTRIGR,
 8006874:	6851      	ldr	r1, [r2, #4]
 8006876:	f041 0102 	orr.w	r1, r1, #2
 800687a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 800687c:	6811      	ldr	r1, [r2, #0]
 800687e:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 8006882:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8006886:	6011      	str	r1, [r2, #0]
        started_ = true;
 8006888:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 800688a:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800688c:	691a      	ldr	r2, [r3, #16]
}
 800688e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006892:	430a      	orrs	r2, r1
 8006894:	611a      	str	r2, [r3, #16]
        started_ = true;
 8006896:	7101      	strb	r1, [r0, #4]
}
 8006898:	4770      	bx	lr
 800689a:	4770      	bx	lr
 800689c:	40020000 	.word	0x40020000
 80068a0:	40007400 	.word	0x40007400
 80068a4:	40007000 	.word	0x40007000

080068a8 <recorder::Dac::Stop()>:
    if (started_)
 80068a8:	7903      	ldrb	r3, [r0, #4]
 80068aa:	b32b      	cbz	r3, 80068f8 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80068ac:	4a13      	ldr	r2, [pc, #76]	@ (80068fc <recorder::Dac::Stop()+0x54>)
 80068ae:	6913      	ldr	r3, [r2, #16]
 80068b0:	f023 0301 	bic.w	r3, r3, #1
{
 80068b4:	b4f0      	push	{r4, r5, r6, r7}
 80068b6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 80068b8:	6913      	ldr	r3, [r2, #16]
 80068ba:	f013 0301 	ands.w	r3, r3, #1
 80068be:	d1fb      	bne.n	80068b8 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 80068c0:	4d0f      	ldr	r5, [pc, #60]	@ (8006900 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80068c2:	2720      	movs	r7, #32
        dma_buffer_[i] = 0;
 80068c4:	490f      	ldr	r1, [pc, #60]	@ (8006904 <recorder::Dac::Stop()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80068c6:	2610      	movs	r6, #16
 80068c8:	682c      	ldr	r4, [r5, #0]
 80068ca:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 80068ce:	602c      	str	r4, [r5, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80068d0:	6914      	ldr	r4, [r2, #16]
 80068d2:	f024 0410 	bic.w	r4, r4, #16
 80068d6:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80068d8:	6914      	ldr	r4, [r2, #16]
 80068da:	f024 0408 	bic.w	r4, r4, #8
 80068de:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80068e0:	6097      	str	r7, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80068e2:	6096      	str	r6, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 80068e4:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 80068e6:	614b      	str	r3, [r1, #20]
 80068e8:	600b      	str	r3, [r1, #0]
 80068ea:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80068ee:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 80068f2:	bcf0      	pop	{r4, r5, r6, r7}
        started_ = false;
 80068f4:	7103      	strb	r3, [r0, #4]
}
 80068f6:	4770      	bx	lr
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40020000 	.word	0x40020000
 8006900:	40007400 	.word	0x40007400
 8006904:	3800fc30 	.word	0x3800fc30

08006908 <recorder::Dac::InitDMA()>:
{
 8006908:	b510      	push	{r4, lr}
 800690a:	b092      	sub	sp, #72	@ 0x48
    LL_DMA_InitTypeDef dma_init =
 800690c:	222c      	movs	r2, #44	@ 0x2c
 800690e:	2100      	movs	r1, #0
 8006910:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8006914:	a806      	add	r0, sp, #24
 8006916:	f004 fb32 	bl	800af7e <memset>
 800691a:	491f      	ldr	r1, [pc, #124]	@ (8006998 <recorder::Dac::InitDMA()+0x90>)
 800691c:	2240      	movs	r2, #64	@ 0x40
 800691e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006922:	9405      	str	r4, [sp, #20]
 8006924:	2406      	movs	r4, #6
 8006926:	9007      	str	r0, [sp, #28]
 8006928:	2044      	movs	r0, #68	@ 0x44
    __HAL_RCC_DMA1_CLK_ENABLE();
 800692a:	4b1c      	ldr	r3, [pc, #112]	@ (800699c <recorder::Dac::InitDMA()+0x94>)
    LL_DMA_InitTypeDef dma_init =
 800692c:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8006930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006934:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006938:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800693c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
    };
 8006940:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 8006942:	e9cd 400a 	strd	r4, r0, [sp, #40]	@ 0x28
 8006946:	910c      	str	r1, [sp, #48]	@ 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006948:	2100      	movs	r1, #0
    };
 800694a:	9202      	str	r2, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800694c:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 800694e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8006952:	4c14      	ldr	r4, [pc, #80]	@ (80069a4 <recorder::Dac::InitDMA()+0x9c>)
    __HAL_RCC_DMA1_CLK_ENABLE();
 8006954:	f040 0001 	orr.w	r0, r0, #1
 8006958:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800695c:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 800695e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800696a:	f002 fd55 	bl	8009418 <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800696e:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 8006970:	200b      	movs	r0, #11
 8006972:	490d      	ldr	r1, [pc, #52]	@ (80069a8 <recorder::Dac::InitDMA()+0xa0>)
 8006974:	f023 0310 	bic.w	r3, r3, #16
 8006978:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	f023 0308 	bic.w	r3, r3, #8
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	f000 faf9 	bl	8006f78 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 8006986:	2100      	movs	r1, #0
 8006988:	200b      	movs	r0, #11
 800698a:	f000 fb31 	bl	8006ff0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 800698e:	200b      	movs	r0, #11
 8006990:	f000 fb14 	bl	8006fbc <recorder::irq::Enable(IRQn_Type)>
}
 8006994:	b012      	add	sp, #72	@ 0x48
 8006996:	bd10      	pop	{r4, pc}
 8006998:	3800fc30 	.word	0x3800fc30
 800699c:	58024400 	.word	0x58024400
 80069a0:	40007414 	.word	0x40007414
 80069a4:	40020000 	.word	0x40020000
 80069a8:	0800681d 	.word	0x0800681d

080069ac <recorder::Dac::Init()>:
{
 80069ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 80069b0:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <recorder::Dac::Init()+0xa0>)
    started_ = false;
 80069b2:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b4:	4e26      	ldr	r6, [pc, #152]	@ (8006a50 <recorder::Dac::Init()+0xa4>)
{
 80069b6:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 80069b8:	6004      	str	r4, [r0, #0]
{
 80069ba:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 80069bc:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069be:	f8d6 20e0 	ldr.w	r2, [r6, #224]	@ 0xe0
    started_ = false;
 80069c2:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 80069c4:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c6:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 80069ca:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 80069cc:	4d21      	ldr	r5, [pc, #132]	@ (8006a54 <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 80069ce:	4f22      	ldr	r7, [pc, #136]	@ (8006a58 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 80069d0:	e9c3 4401 	strd	r4, r4, [r3, #4]
 80069d4:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069d8:	f8c6 20e0 	str.w	r2, [r6, #224]	@ 0xe0
 80069dc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 80069e8:	f002 fe2c 	bl	8009644 <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 80069ec:	2220      	movs	r2, #32
 80069ee:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 80069f0:	a902      	add	r1, sp, #8
 80069f2:	481a      	ldr	r0, [pc, #104]	@ (8006a5c <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 80069f4:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 80069f6:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 80069f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 80069fc:	f002 fd6e 	bl	80094dc <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 8006a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a04:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006a08:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 8006a0a:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006a0e:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006a12:	4638      	mov	r0, r7
 8006a14:	4912      	ldr	r1, [pc, #72]	@ (8006a60 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006a16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a1a:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8006a1e:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8006a22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 8006a2a:	f002 fcbd 	bl	80093a8 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 8006a2e:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 8006a30:	4640      	mov	r0, r8
 8006a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a36:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3e:	603b      	str	r3, [r7, #0]
}
 8006a40:	b008      	add	sp, #32
 8006a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 8006a46:	f7ff bf5f 	b.w	8006908 <recorder::Dac::InitDMA()>
 8006a4a:	bf00      	nop
 8006a4c:	3800fc30 	.word	0x3800fc30
 8006a50:	58024400 	.word	0x58024400
 8006a54:	0800be68 	.word	0x0800be68
 8006a58:	40007400 	.word	0x40007400
 8006a5c:	58020000 	.word	0x58020000
 8006a60:	35400072 	.word	0x35400072

08006a64 <recorder::Flash::Init()>:
namespace recorder
{

void Flash::Init(void)
{
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a64:	4bb1      	ldr	r3, [pc, #708]	@ (8006d2c <recorder::Flash::Init()+0x2c8>)
 8006a66:	2240      	movs	r2, #64	@ 0x40
 8006a68:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006a6c:	f041 0120 	orr.w	r1, r1, #32
{
 8006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a72:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
{
 8006a76:	b0a5      	sub	sp, #148	@ 0x94
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a78:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
{
 8006a7c:	4605      	mov	r5, r0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a7e:	f001 0120 	and.w	r1, r1, #32
 8006a82:	9101      	str	r1, [sp, #4]
 8006a84:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a86:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006a8a:	4311      	orrs	r1, r2
 8006a8c:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a94:	4013      	ands	r3, r2
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	fa92 f2a2 	rbit	r2, r2
    };
}

void Flash::InitPin(GPIO_TypeDef* base, uint32_t pin, uint32_t alternate)
{
    if (POSITION_VAL(pin) < 8)
 8006a9e:	fab2 f282 	clz	r2, r2
 8006aa2:	2a07      	cmp	r2, #7
 8006aa4:	f300 8158 	bgt.w	8006d58 <recorder::Flash::Init()+0x2f4>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006aaa:	6a13      	ldr	r3, [r2, #32]
 8006aac:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006ab0:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8006ab4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006ac0:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006ac4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006ac6:	6899      	ldr	r1, [r3, #8]
 8006ac8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006acc:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8006ad0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006ad2:	68d9      	ldr	r1, [r3, #12]
 8006ad4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006ad8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ada:	6859      	ldr	r1, [r3, #4]
 8006adc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006ae0:	6059      	str	r1, [r3, #4]
 8006ae2:	fa92 f2a2 	rbit	r2, r2
 8006ae6:	fab2 f282 	clz	r2, r2
 8006aea:	2a07      	cmp	r2, #7
 8006aec:	f300 8138 	bgt.w	8006d60 <recorder::Flash::Init()+0x2fc>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006af6:	f042 4210 	orr.w	r2, r2, #2415919104	@ 0x90000000
 8006afa:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006afc:	4b8c      	ldr	r3, [pc, #560]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006b08:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006b0c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006b0e:	6899      	ldr	r1, [r3, #8]
 8006b10:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006b14:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006b18:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006b1a:	68d9      	ldr	r1, [r3, #12]
 8006b1c:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8006b20:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b28:	6059      	str	r1, [r3, #4]
 8006b2a:	fa92 f2a2 	rbit	r2, r2
 8006b2e:	fab2 f282 	clz	r2, r2
 8006b32:	2a07      	cmp	r2, #7
 8006b34:	f300 8117 	bgt.w	8006d66 <recorder::Flash::Init()+0x302>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006b3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006b48:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b4c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006b4e:	6899      	ldr	r1, [r3, #8]
 8006b50:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006b54:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b58:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006b5a:	68d9      	ldr	r1, [r3, #12]
 8006b5c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006b60:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b62:	6859      	ldr	r1, [r3, #4]
 8006b64:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8006b68:	6059      	str	r1, [r3, #4]
 8006b6a:	fa92 f2a2 	rbit	r2, r2
 8006b6e:	fab2 f282 	clz	r2, r2
 8006b72:	2a07      	cmp	r2, #7
 8006b74:	f300 80fe 	bgt.w	8006d74 <recorder::Flash::Init()+0x310>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b82:	6819      	ldr	r1, [r3, #0]
 8006b84:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006b88:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8006b8c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006b94:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8006b98:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006b9a:	68d9      	ldr	r1, [r3, #12]
 8006b9c:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8006ba0:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006ba2:	6859      	ldr	r1, [r3, #4]
 8006ba4:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8006ba8:	6059      	str	r1, [r3, #4]
 8006baa:	fa92 f2a2 	rbit	r2, r2
 8006bae:	fab2 f282 	clz	r2, r2
 8006bb2:	2a07      	cmp	r2, #7
 8006bb4:	f300 80e5 	bgt.w	8006d82 <recorder::Flash::Init()+0x31e>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8006d30 <recorder::Flash::Init()+0x2cc>)
 8006bbe:	2240      	movs	r2, #64	@ 0x40
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006bc6:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8006bca:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006bcc:	6899      	ldr	r1, [r3, #8]
 8006bce:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006bd2:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8006bd6:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006bd8:	68d9      	ldr	r1, [r3, #12]
 8006bda:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006bde:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8006be6:	6059      	str	r1, [r3, #4]
 8006be8:	fa92 f3a2 	rbit	r3, r2
 8006bec:	fab3 f383 	clz	r3, r3
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	f300 80ad 	bgt.w	8006d50 <recorder::Flash::Init()+0x2ec>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8006bf6:	4a4f      	ldr	r2, [pc, #316]	@ (8006d34 <recorder::Flash::Init()+0x2d0>)
 8006bf8:	6a13      	ldr	r3, [r2, #32]
 8006bfa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006bfe:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 8006c02:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8006c04:	4b4b      	ldr	r3, [pc, #300]	@ (8006d34 <recorder::Flash::Init()+0x2d0>)
  */
__STATIC_INLINE void LL_MDMA_DisableChannel(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006c06:	f04f 46a4 	mov.w	r6, #1375731712	@ 0x52000000
    LL_GPIO_SetPinOutputType(base, pin, LL_GPIO_OUTPUT_PUSHPULL);
}

void Flash::InitDMA(void)
{
    __HAL_RCC_MDMA_CLK_ENABLE();
 8006c0a:	4c48      	ldr	r4, [pc, #288]	@ (8006d2c <recorder::Flash::Init()+0x2c8>)

    LL_MDMA_DisableChannel(MDMA, LL_MDMA_CHANNEL_0);

    LL_MDMA_InitTypeDef mdma_init =
 8006c0c:	a804      	add	r0, sp, #16
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4949      	ldr	r1, [pc, #292]	@ (8006d38 <recorder::Flash::Init()+0x2d4>)
 8006c12:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006c16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006c22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c26:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006c2e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_MDMA_CLK_ENABLE();
 8006c3a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8006c46:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	64f3      	str	r3, [r6, #76]	@ 0x4c
    LL_MDMA_InitTypeDef mdma_init =
 8006c5a:	f004 f9c6 	bl	800afea <memcpy>
        .SrcBus                        = LL_MDMA_SRC_BUS_SYSTEM_AXI,
        .MaskAddress                   = 0,
        .MaskData                      = 0,
    };

    LL_MDMA_Init(MDMA, LL_MDMA_CHANNEL_0, &mdma_init);
 8006c5e:	aa04      	add	r2, sp, #16
 8006c60:	2100      	movs	r1, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	f002 fcfa 	bl	800965c <LL_MDMA_Init>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006c68:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006c6c:	4a33      	ldr	r2, [pc, #204]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c72:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8006c76:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8006c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9b04      	ldr	r3, [sp, #16]
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006c82:	6893      	ldr	r3, [r2, #8]
 8006c84:	f013 0320 	ands.w	r3, r3, #32
 8006c88:	d1fb      	bne.n	8006c82 <recorder::Flash::Init()+0x21e>
    QUADSPI->CR =
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006c90:	fa93 f3a3 	rbit	r3, r3
        ((POSITION_VAL(kSize) - 1) << QUADSPI_DCR_FSIZE_Pos) |
 8006c94:	fab3 f383 	clz	r3, r3
    static constexpr uint32_t kIndirectWrite = 0;
    static constexpr uint32_t kIndirectRead = QUADSPI_CCR_FMODE_0;

    void SendCommand(Command cmd)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006c98:	4828      	ldr	r0, [pc, #160]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
    QUADSPI->DCR =
 8006ca2:	6053      	str	r3, [r2, #4]
    QUADSPI->CR |= QUADSPI_CR_EN;
 8006ca4:	6813      	ldr	r3, [r2, #0]
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	6883      	ldr	r3, [r0, #8]
 8006cae:	069f      	lsls	r7, r3, #26
 8006cb0:	d4fc      	bmi.n	8006cac <recorder::Flash::Init()+0x248>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006cb2:	f240 13ab 	movw	r3, #427	@ 0x1ab
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cb6:	4921      	ldr	r1, [pc, #132]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006cb8:	6143      	str	r3, [r0, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cba:	688b      	ldr	r3, [r1, #8]
 8006cbc:	079e      	lsls	r6, r3, #30
 8006cbe:	d5fc      	bpl.n	8006cba <recorder::Flash::Init()+0x256>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cc0:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cc4:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006cc6:	6893      	ldr	r3, [r2, #8]
 8006cc8:	069c      	lsls	r4, r3, #26
 8006cca:	d4fc      	bmi.n	8006cc6 <recorder::Flash::Init()+0x262>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006ccc:	f44f 73b3 	mov.w	r3, #358	@ 0x166
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cd0:	491a      	ldr	r1, [pc, #104]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006cd2:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cd4:	688b      	ldr	r3, [r1, #8]
 8006cd6:	0798      	lsls	r0, r3, #30
 8006cd8:	d5fc      	bpl.n	8006cd4 <recorder::Flash::Init()+0x270>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cda:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006cdc:	4a17      	ldr	r2, [pc, #92]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cde:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006ce0:	6893      	ldr	r3, [r2, #8]
 8006ce2:	0699      	lsls	r1, r3, #26
 8006ce4:	d4fc      	bmi.n	8006ce0 <recorder::Flash::Init()+0x27c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006ce6:	f240 1399 	movw	r3, #409	@ 0x199
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cea:	4914      	ldr	r1, [pc, #80]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006cec:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006cee:	688b      	ldr	r3, [r1, #8]
 8006cf0:	079a      	lsls	r2, r3, #30
 8006cf2:	d5fc      	bpl.n	8006cee <recorder::Flash::Init()+0x28a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cf4:	2302      	movs	r3, #2
        SendCommand(CMD_WRITE_ENABLE);
    }

    uint8_t ReadStatus(void)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006cf6:	4a11      	ldr	r2, [pc, #68]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006cf8:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006cfa:	6893      	ldr	r3, [r2, #8]
 8006cfc:	f013 0320 	ands.w	r3, r3, #32
 8006d00:	d1fb      	bne.n	8006cfa <recorder::Flash::Init()+0x296>
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8006d02:	480f      	ldr	r0, [pc, #60]	@ (8006d40 <recorder::Flash::Init()+0x2dc>)
            kIndirectRead |
            QSPI_DATA_1_LINE |
            QSPI_INSTRUCTION_1_LINE |
            CMD_READ_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006d04:	490d      	ldr	r1, [pc, #52]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        QUADSPI->DLR = 0;
 8006d06:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8006d08:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006d0a:	688b      	ldr	r3, [r1, #8]
 8006d0c:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8006d10:	d0fb      	beq.n	8006d0a <recorder::Flash::Init()+0x2a6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006d12:	f891 1020 	ldrb.w	r1, [r1, #32]
        uint8_t status = DataRead8();
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006d16:	4a09      	ldr	r2, [pc, #36]	@ (8006d3c <recorder::Flash::Init()+0x2d8>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006d18:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006d1a:	6893      	ldr	r3, [r2, #8]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	d5fc      	bpl.n	8006d1a <recorder::Flash::Init()+0x2b6>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006d20:	2302      	movs	r3, #2
    if (ReadStatus() != STATUS_QUAD_ENABLE)
 8006d22:	2940      	cmp	r1, #64	@ 0x40
 8006d24:	60d3      	str	r3, [r2, #12]
 8006d26:	d133      	bne.n	8006d90 <recorder::Flash::Init()+0x32c>
 8006d28:	e00c      	b.n	8006d44 <recorder::Flash::Init()+0x2e0>
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	58021400 	.word	0x58021400
 8006d34:	58021800 	.word	0x58021800
 8006d38:	0800be80 	.word	0x0800be80
 8006d3c:	52005000 	.word	0x52005000
 8006d40:	05000105 	.word	0x05000105
    state_ =
 8006d44:	2300      	movs	r3, #0
 8006d46:	e9c5 3300 	strd	r3, r3, [r5]
 8006d4a:	60ab      	str	r3, [r5, #8]
}
 8006d4c:	b025      	add	sp, #148	@ 0x94
 8006d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d50:	4b2d      	ldr	r3, [pc, #180]	@ (8006e08 <recorder::Flash::Init()+0x3a4>)
 8006d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d54:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8006d56:	e755      	b.n	8006c04 <recorder::Flash::Init()+0x1a0>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d58:	4b2c      	ldr	r3, [pc, #176]	@ (8006e0c <recorder::Flash::Init()+0x3a8>)
 8006d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d5e:	e6aa      	b.n	8006ab6 <recorder::Flash::Init()+0x52>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d62:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d64:	e6ca      	b.n	8006afc <recorder::Flash::Init()+0x98>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d68:	f022 020f 	bic.w	r2, r2, #15
 8006d6c:	f042 020a 	orr.w	r2, r2, #10
 8006d70:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d72:	e6e3      	b.n	8006b3c <recorder::Flash::Init()+0xd8>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d76:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006d7a:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006d7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d80:	e6fc      	b.n	8006b7c <recorder::Flash::Init()+0x118>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8006d82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d84:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8006d88:	f442 6210 	orr.w	r2, r2, #2304	@ 0x900
 8006d8c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d8e:	e715      	b.n	8006bbc <recorder::Flash::Init()+0x158>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006d90:	4a1f      	ldr	r2, [pc, #124]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
 8006d92:	6893      	ldr	r3, [r2, #8]
 8006d94:	069f      	lsls	r7, r3, #26
 8006d96:	d4fc      	bmi.n	8006d92 <recorder::Flash::Init()+0x32e>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006d98:	f44f 7383 	mov.w	r3, #262	@ 0x106
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006d9c:	491c      	ldr	r1, [pc, #112]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8006d9e:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006da0:	688b      	ldr	r3, [r1, #8]
 8006da2:	079e      	lsls	r6, r3, #30
 8006da4:	d5fc      	bpl.n	8006da0 <recorder::Flash::Init()+0x33c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006da6:	2302      	movs	r3, #2

    void WriteStatus(uint8_t status)
    {
        WriteEnable();

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006da8:	4a19      	ldr	r2, [pc, #100]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006daa:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dac:	6893      	ldr	r3, [r2, #8]
 8006dae:	f013 0320 	ands.w	r3, r3, #32
 8006db2:	d1fb      	bne.n	8006dac <recorder::Flash::Init()+0x348>
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8006db4:	4817      	ldr	r0, [pc, #92]	@ (8006e14 <recorder::Flash::Init()+0x3b0>)
            kIndirectWrite |
            QSPI_DATA_1_LINE |
            QSPI_INSTRUCTION_1_LINE |
            CMD_WRITE_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8006db6:	4916      	ldr	r1, [pc, #88]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->DLR = 0;
 8006db8:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 8006dba:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8006dbc:	688b      	ldr	r3, [r1, #8]
 8006dbe:	075c      	lsls	r4, r3, #29
 8006dc0:	d5fc      	bpl.n	8006dbc <recorder::Flash::Init()+0x358>
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8006dc2:	2340      	movs	r3, #64	@ 0x40
        DataWrite8(status);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006dc4:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8006dc6:	f881 3020 	strb.w	r3, [r1, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006dca:	6893      	ldr	r3, [r2, #8]
 8006dcc:	0798      	lsls	r0, r3, #30
 8006dce:	d5fc      	bpl.n	8006dca <recorder::Flash::Init()+0x366>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006dd0:	2602      	movs	r6, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dd2:	4c0f      	ldr	r4, [pc, #60]	@ (8006e10 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR =
 8006dd4:	4f10      	ldr	r7, [pc, #64]	@ (8006e18 <recorder::Flash::Init()+0x3b4>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006dd6:	60d6      	str	r6, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006dd8:	68a3      	ldr	r3, [r4, #8]
 8006dda:	f013 0320 	ands.w	r3, r3, #32
 8006dde:	d1fb      	bne.n	8006dd8 <recorder::Flash::Init()+0x374>
        QUADSPI->DLR = 0;
 8006de0:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8006de2:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8006de4:	68a3      	ldr	r3, [r4, #8]
 8006de6:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8006dea:	d0fb      	beq.n	8006de4 <recorder::Flash::Init()+0x380>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8006dec:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006df0:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	0799      	lsls	r1, r3, #30
 8006df6:	d5fc      	bpl.n	8006df2 <recorder::Flash::Init()+0x38e>
        while (write_in_progress())
 8006df8:	07d3      	lsls	r3, r2, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006dfa:	60e6      	str	r6, [r4, #12]
        while (write_in_progress())
 8006dfc:	d5a2      	bpl.n	8006d44 <recorder::Flash::Init()+0x2e0>
            system::Delay_ms(1);
 8006dfe:	2001      	movs	r0, #1
 8006e00:	f000 fd0c 	bl	800781c <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e04:	e7e8      	b.n	8006dd8 <recorder::Flash::Init()+0x374>
 8006e06:	bf00      	nop
 8006e08:	58021800 	.word	0x58021800
 8006e0c:	58021400 	.word	0x58021400
 8006e10:	52005000 	.word	0x52005000
 8006e14:	01000101 	.word	0x01000101
 8006e18:	05000105 	.word	0x05000105

08006e1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>:
void Flash::ReadData(uint8_t* buffer, uint32_t address, uint32_t count)
{
    ScopedProfilingPin<PROFILE_FLASH_READ> profile1;
    ScopedProfilingPin<PROFILE_FLASH_ACCESS> profile2;

    while (count)
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d07c      	beq.n	8006f1a <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xfe>
 8006e20:	f04f 40a4 	mov.w	r0, #1375731712	@ 0x52000000
        LL_MDMA_EnableChannel(MDMA, LL_MDMA_CHANNEL_0);

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
        constexpr uint32_t dummy_cycles = 8;
        QUADSPI->DLR = block_length - 1;
        QUADSPI->CCR =
 8006e24:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8006f20 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x104>
{
 8006e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4616      	mov	r6, r2
 8006e30:	4619      	mov	r1, r3
  */
__STATIC_INLINE void LL_MDMA_SetBlkDataLength(MDMA_TypeDef *MDMAx, uint32_t Channel, uint32_t BlkDataLength)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006e32:	f8df e0f0 	ldr.w	lr, [pc, #240]	@ 8006f24 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x108>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006e36:	4b39      	ldr	r3, [pc, #228]	@ (8006f1c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x100>)
  */
__STATIC_INLINE void LL_MDMA_ClearFlag_BT(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 8006e38:	2408      	movs	r4, #8
        QUADSPI->AR = address;

        while (!LL_MDMA_IsActiveFlag_BT(MDMA, LL_MDMA_CHANNEL_0));
        LL_MDMA_ClearFlag_BT(MDMA, LL_MDMA_CHANNEL_0);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006e3a:	2702      	movs	r7, #2
  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006e3c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
        uint32_t bus = (dest_addr & 0xDF000000) ?
 8006e3e:	f015 4f5f 	tst.w	r5, #3741319168	@ 0xdf000000
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	bf0c      	ite	eq
 8006e48:	f04f 0801 	moveq.w	r8, #1
 8006e4c:	f04f 0800 	movne.w	r8, #0
      if (__b < __a)
 8006e50:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006e54:	64c2      	str	r2, [r0, #76]	@ 0x4c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8006e56:	65c5      	str	r5, [r0, #92]	@ 0x5c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_DBUS, DestBus);
 8006e58:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8006e5a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006e5e:	ea42 4248 	orr.w	r2, r2, r8, lsl #17
 8006e62:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8006e64:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006e66:	d839      	bhi.n	8006edc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xc0>
 8006e68:	2980      	cmp	r1, #128	@ 0x80
 8006e6a:	4688      	mov	r8, r1
 8006e6c:	f022 72fe 	bic.w	r2, r2, #33292288	@ 0x1fc0000
        QUADSPI->DLR = block_length - 1;
 8006e70:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8006e74:	bf28      	it	cs
 8006e76:	f04f 0880 	movcs.w	r8, #128	@ 0x80
        if (block_length < 128)
 8006e7a:	297f      	cmp	r1, #127	@ 0x7f
        LL_MDMA_SetBufferTransferLength(MDMA, LL_MDMA_CHANNEL_0,
 8006e7c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006e80:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
 8006e84:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006e86:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8006e88:	ea02 020e 	and.w	r2, r2, lr
 8006e8c:	ea42 0201 	orr.w	r2, r2, r1
 8006e90:	6542      	str	r2, [r0, #84]	@ 0x54
        if (block_length < 128)
 8006e92:	d83f      	bhi.n	8006f14 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xf8>
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8006e94:	6d02      	ldr	r2, [r0, #80]	@ 0x50
}
 8006e96:	4688      	mov	r8, r1
 8006e98:	2100      	movs	r1, #0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8006e9a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e9e:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 8006ea0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006ea2:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8006ea6:	6502      	str	r2, [r0, #80]	@ 0x50
  SET_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8006ea8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	64c2      	str	r2, [r0, #76]	@ 0x4c
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	0692      	lsls	r2, r2, #26
 8006eb4:	d4fc      	bmi.n	8006eb0 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x94>
        QUADSPI->DLR = block_length - 1;
 8006eb6:	f8c3 9010 	str.w	r9, [r3, #16]
        QUADSPI->CCR =
 8006eba:	f8c3 c014 	str.w	ip, [r3, #20]
        QUADSPI->AR = address;
 8006ebe:	619e      	str	r6, [r3, #24]
  return ((READ_BIT(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CISR, MDMA_CISR_BTIF) == (MDMA_CISR_BTIF)) ? 1UL : 0UL);
 8006ec0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006ec2:	0712      	lsls	r2, r2, #28
 8006ec4:	d5fc      	bpl.n	8006ec0 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xa4>
  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 8006ec6:	6444      	str	r4, [r0, #68]	@ 0x44
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	0792      	lsls	r2, r2, #30
 8006ecc:	d5fc      	bpl.n	8006ec8 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xac>

        count -= block_length;
        buffer += block_length;
 8006ece:	4445      	add	r5, r8
        address += block_length;
 8006ed0:	4446      	add	r6, r8
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8006ed2:	60df      	str	r7, [r3, #12]
    while (count)
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d1b1      	bne.n	8006e3c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x20>
    }
}
 8006ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8006edc:	f042 72fe 	orr.w	r2, r2, #33292288	@ 0x1fc0000
 8006ee0:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006ee4:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	return __b;
 8006ee8:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8006eec:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8006eee:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8006ef0:	ea02 020e 	and.w	r2, r2, lr
 8006ef4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006ef8:	6542      	str	r2, [r0, #84]	@ 0x54
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8006efa:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006efc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006f00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f04:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 8006f06:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8006f08:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8006f0c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f10:	6502      	str	r2, [r0, #80]	@ 0x50
}
 8006f12:	e7c9      	b.n	8006ea8 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x8c>
 8006f14:	4688      	mov	r8, r1
 8006f16:	2100      	movs	r1, #0
 8006f18:	e7ef      	b.n	8006efa <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xde>
 8006f1a:	4770      	bx	lr
 8006f1c:	52005000 	.word	0x52005000
 8006f20:	0720256b 	.word	0x0720256b
 8006f24:	fffe0000 	.word	0xfffe0000

08006f28 <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8006f28:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <recorder::irq::Init()+0x48>)
 8006f2a:	689a      	ldr	r2, [r3, #8]
{
 8006f2c:	b410      	push	{r4}
 8006f2e:	1d13      	adds	r3, r2, #4
 8006f30:	4c10      	ldr	r4, [pc, #64]	@ (8006f74 <recorder::irq::Init()+0x4c>)
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	d010      	beq.n	8006f58 <recorder::irq::Init()+0x30>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 8006f36:	4623      	mov	r3, r4
 8006f38:	f504 7c26 	add.w	ip, r4, #664	@ 0x298

    for (uint32_t i = 0; i < kNumVectors; i++)
    {
        RAMVectorTable[i] = src[i];
 8006f3c:	1b12      	subs	r2, r2, r4
 8006f3e:	1899      	adds	r1, r3, r2
 8006f40:	5898      	ldr	r0, [r3, r2]
    for (uint32_t i = 0; i < kNumVectors; i++)
 8006f42:	3308      	adds	r3, #8
        RAMVectorTable[i] = src[i];
 8006f44:	6849      	ldr	r1, [r1, #4]
 8006f46:	4563      	cmp	r3, ip
 8006f48:	e943 0102 	strd	r0, r1, [r3, #-8]
    for (uint32_t i = 0; i < kNumVectors; i++)
 8006f4c:	d1f7      	bne.n	8006f3e <recorder::irq::Init()+0x16>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8006f4e:	4b08      	ldr	r3, [pc, #32]	@ (8006f70 <recorder::irq::Init()+0x48>)
 8006f50:	609c      	str	r4, [r3, #8]
}
 8006f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	f502 7126 	add.w	r1, r2, #664	@ 0x298
        RAMVectorTable[i] = src[i];
 8006f5c:	6813      	ldr	r3, [r2, #0]
 8006f5e:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 8006f62:	428a      	cmp	r2, r1
 8006f64:	d1fa      	bne.n	8006f5c <recorder::irq::Init()+0x34>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8006f66:	4b02      	ldr	r3, [pc, #8]	@ (8006f70 <recorder::irq::Init()+0x48>)
 8006f68:	609c      	str	r4, [r3, #8]
}
 8006f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	e000ed00 	.word	0xe000ed00
 8006f74:	20011000 	.word	0x20011000

08006f78 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 8006f78:	f110 0f0e 	cmn.w	r0, #14
{
 8006f7c:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 8006f7e:	db06      	blt.n	8006f8e <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 8006f80:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 8006f82:	28a5      	cmp	r0, #165	@ 0xa5
 8006f84:	dc09      	bgt.n	8006f9a <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 8006f86:	4b08      	ldr	r3, [pc, #32]	@ (8006fa8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 8006f88:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8006f8c:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 8006f8e:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 8006f90:	211c      	movs	r1, #28
 8006f92:	4a07      	ldr	r2, [pc, #28]	@ (8006fb0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8006f94:	4807      	ldr	r0, [pc, #28]	@ (8006fb4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8006f96:	f003 fdc9 	bl	800ab2c <__assert_func>
    assert(exception_num < kNumVectors);
 8006f9a:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 8006f9c:	211f      	movs	r1, #31
 8006f9e:	4a04      	ldr	r2, [pc, #16]	@ (8006fb0 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8006fa0:	4804      	ldr	r0, [pc, #16]	@ (8006fb4 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8006fa2:	f003 fdc3 	bl	800ab2c <__assert_func>
 8006fa6:	bf00      	nop
 8006fa8:	20011000 	.word	0x20011000
 8006fac:	0800c084 	.word	0x0800c084
 8006fb0:	0800c0a0 	.word	0x0800c0a0
 8006fb4:	0800c0d8 	.word	0x0800c0d8
 8006fb8:	0800c0e8 	.word	0x0800c0e8

08006fbc <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 8006fbc:	2800      	cmp	r0, #0
{
 8006fbe:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 8006fc0:	db08      	blt.n	8006fd4 <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006fc2:	f000 011f 	and.w	r1, r0, #31
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	0940      	lsrs	r0, r0, #5
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <recorder::irq::Enable(IRQn_Type)+0x24>)
 8006fcc:	408b      	lsls	r3, r1
 8006fce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 8006fd2:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <recorder::irq::Enable(IRQn_Type)+0x28>)
 8006fd6:	2126      	movs	r1, #38	@ 0x26
 8006fd8:	4a03      	ldr	r2, [pc, #12]	@ (8006fe8 <recorder::irq::Enable(IRQn_Type)+0x2c>)
 8006fda:	4804      	ldr	r0, [pc, #16]	@ (8006fec <recorder::irq::Enable(IRQn_Type)+0x30>)
 8006fdc:	f003 fda6 	bl	800ab2c <__assert_func>
 8006fe0:	e000e100 	.word	0xe000e100
 8006fe4:	0800c104 	.word	0x0800c104
 8006fe8:	0800c110 	.word	0x0800c110
 8006fec:	0800c0d8 	.word	0x0800c0d8

08006ff0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ff0:	4b12      	ldr	r3, [pc, #72]	@ (800703c <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x4c>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ff8:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ffc:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ffe:	f1bc 0f04 	cmp.w	ip, #4
 8007002:	bf28      	it	cs
 8007004:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007008:	2a06      	cmp	r2, #6
 800700a:	bf88      	it	hi
 800700c:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800700e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007012:	bf98      	it	ls
 8007014:	2200      	movls	r2, #0
  if ((int32_t)(IRQn) >= 0)
 8007016:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007018:	fa03 f30c 	lsl.w	r3, r3, ip
 800701c:	ea21 0303 	bic.w	r3, r1, r3
 8007020:	fa03 f302 	lsl.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007024:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007028:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800702a:	db02      	blt.n	8007032 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702c:	4a04      	ldr	r2, [pc, #16]	@ (8007040 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x50>)
 800702e:	5413      	strb	r3, [r2, r0]
 8007030:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007032:	f000 000f 	and.w	r0, r0, #15
 8007036:	4a03      	ldr	r2, [pc, #12]	@ (8007044 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 8007038:	5413      	strb	r3, [r2, r0]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 800703a:	4770      	bx	lr
 800703c:	e000ed00 	.word	0xe000ed00
 8007040:	e000e400 	.word	0xe000e400
 8007044:	e000ed14 	.word	0xe000ed14

08007048 <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007048:	4b4e      	ldr	r3, [pc, #312]	@ (8007184 <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 800704a:	4a4f      	ldr	r2, [pc, #316]	@ (8007188 <recorder::Serial::Init(unsigned long)+0x140>)
{
 800704c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 8007050:	6010      	str	r0, [r2, #0]
{
 8007052:	b08b      	sub	sp, #44	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007054:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
{
 8007058:	460d      	mov	r5, r1

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 800705a:	2701      	movs	r7, #1
    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 800705c:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800705e:	f042 0202 	orr.w	r2, r2, #2
 8007062:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007066:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800706a:	f002 0202 	and.w	r2, r2, #2
 800706e:	9200      	str	r2, [sp, #0]
 8007070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 8007072:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007076:	f042 0210 	orr.w	r2, r2, #16
 800707a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800707e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800708a:	4b40      	ldr	r3, [pc, #256]	@ (800718c <recorder::Serial::Init(unsigned long)+0x144>)
 800708c:	e01f      	b.n	80070ce <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800708e:	6a1a      	ldr	r2, [r3, #32]
 8007090:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8007094:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8007098:	ea22 0204 	bic.w	r2, r2, r4
 800709c:	ea42 0208 	orr.w	r2, r2, r8
 80070a0:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80070a8:	ea22 0204 	bic.w	r2, r2, r4
 80070ac:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 80070b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	ea22 0204 	bic.w	r2, r2, r4
 80070b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	ea22 0204 	bic.w	r2, r2, r4
 80070c0:	ea42 020e 	orr.w	r2, r2, lr
 80070c4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	4016      	ands	r6, r2
 80070ca:	605e      	str	r6, [r3, #4]
    while (pins != 0)
 80070cc:	b339      	cbz	r1, 800711e <recorder::Serial::Init(unsigned long)+0xd6>
 80070ce:	fa91 fca1 	rbit	ip, r1
        uint32_t pin = 1 << POSITION_VAL(pins);
 80070d2:	fabc fc8c 	clz	ip, ip
 80070d6:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 80070da:	43e6      	mvns	r6, r4
 80070dc:	ea21 0104 	bic.w	r1, r1, r4
 80070e0:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80070e4:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80070e8:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 80070ea:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80070ee:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80070f2:	fb02 f202 	mul.w	r2, r2, r2
 80070f6:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80070fa:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80070fe:	fb02 f202 	mul.w	r2, r2, r2
 8007102:	ddc4      	ble.n	800708e <recorder::Serial::Init(unsigned long)+0x46>
 8007104:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8007108:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800710c:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007110:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8007114:	ea28 0409 	bic.w	r4, r8, r9
 8007118:	4322      	orrs	r2, r4
 800711a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800711c:	e7c1      	b.n	80070a2 <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 800711e:	4c1c      	ldr	r4, [pc, #112]	@ (8007190 <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 8007120:	2220      	movs	r2, #32
	__atomic_store_n(&_M_i, __i, int(__m));
 8007122:	6001      	str	r1, [r0, #0]
 8007124:	6041      	str	r1, [r0, #4]
 8007126:	6481      	str	r1, [r0, #72]	@ 0x48
 8007128:	64c1      	str	r1, [r0, #76]	@ 0x4c
 800712a:	a802      	add	r0, sp, #8
 800712c:	f003 ff27 	bl	800af7e <memset>
 8007130:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 8007132:	a902      	add	r1, sp, #8
 8007134:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 8007136:	9307      	str	r3, [sp, #28]
    };
 8007138:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 800713a:	f002 feb5 	bl	8009ea8 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 800713e:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 8007140:	2025      	movs	r0, #37	@ 0x25
 8007142:	4914      	ldr	r1, [pc, #80]	@ (8007194 <recorder::Serial::Init(unsigned long)+0x14c>)
 8007144:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007148:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	f043 0308 	orr.w	r3, r3, #8
 8007158:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	f043 0320 	orr.w	r3, r3, #32
 8007160:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	f7ff ff05 	bl	8006f78 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 800716e:	210b      	movs	r1, #11
 8007170:	2025      	movs	r0, #37	@ 0x25
 8007172:	f7ff ff3d 	bl	8006ff0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 8007176:	2025      	movs	r0, #37	@ 0x25
 8007178:	f7ff ff20 	bl	8006fbc <recorder::irq::Enable(IRQn_Type)>
}
 800717c:	b00b      	add	sp, #44	@ 0x2c
 800717e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007182:	bf00      	nop
 8007184:	58024400 	.word	0x58024400
 8007188:	20011298 	.word	0x20011298
 800718c:	58020400 	.word	0x58020400
 8007190:	40011000 	.word	0x40011000
 8007194:	080072e9 	.word	0x080072e9

08007198 <recorder::Serial::BytesAvailable()>:
	return __atomic_load_n(&_M_i, int(__m));
 8007198:	6803      	ldr	r3, [r0, #0]
 800719a:	6840      	ldr	r0, [r0, #4]
 800719c:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 80071a0:	1ac0      	subs	r0, r0, r3
 80071a2:	4770      	bx	lr

080071a4 <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 80071a4:	4602      	mov	r2, r0
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	6851      	ldr	r1, [r2, #4]
 80071aa:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 80071ae:	428b      	cmp	r3, r1
 80071b0:	d0f9      	beq.n	80071a6 <recorder::Serial::GetByteBlocking()+0x2>
        {
            return false;
        }

        item = data_[head % size];
 80071b2:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
        head_.store(head + 1, std::memory_order_release);
 80071b6:	3301      	adds	r3, #1
        item = data_[head % size];
 80071b8:	4411      	add	r1, r2
 80071ba:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 80071bc:	f3bf 8f5b 	dmb	ish
 80071c0:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 80071c2:	4770      	bx	lr

080071c4 <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 80071c4:	b500      	push	{lr}
 80071c6:	4684      	mov	ip, r0
 80071c8:	468e      	mov	lr, r1
 80071ca:	4613      	mov	r3, r2
	return __atomic_load_n(&_M_i, int(__m));
 80071cc:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 80071d0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80071d2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80071d4:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 80071d8:	1a12      	subs	r2, r2, r0
 80071da:	f10c 0048 	add.w	r0, ip, #72	@ 0x48

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 80071de:	2aff      	cmp	r2, #255	@ 0xff
 80071e0:	d900      	bls.n	80071e4 <recorder::Serial::Write(unsigned char, bool)+0x20>
 80071e2:	b1bb      	cbz	r3, 8007214 <recorder::Serial::Write(unsigned char, bool)+0x50>
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	6802      	ldr	r2, [r0, #0]
 80071e8:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 80071ec:	1a9a      	subs	r2, r3, r2
 80071ee:	2aff      	cmp	r2, #255	@ 0xff
 80071f0:	d8f8      	bhi.n	80071e4 <recorder::Serial::Write(unsigned char, bool)+0x20>
            data_[(tail + i) % size] = buffer[i];
 80071f2:	fa5c f283 	uxtab	r2, ip, r3
 80071f6:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 80071f8:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 80071fa:	f882 e050 	strb.w	lr, [r2, #80]	@ 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 80071fe:	f3bf 8f5b 	dmb	ish
 8007202:	f8cc 304c 	str.w	r3, [ip, #76]	@ 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007206:	4a04      	ldr	r2, [pc, #16]	@ (8007218 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8007208:	6813      	ldr	r3, [r2, #0]
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	6013      	str	r3, [r2, #0]
}
 8007210:	f85d fb04 	ldr.w	pc, [sp], #4
 8007214:	4618      	mov	r0, r3
 8007216:	e7f6      	b.n	8007206 <recorder::Serial::Write(unsigned char, bool)+0x42>
 8007218:	40011000 	.word	0x40011000

0800721c <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 800721c:	b971      	cbnz	r1, 800723c <recorder::Serial::FlushTx(bool)+0x20>
	return __atomic_load_n(&_M_i, int(__m));
 800721e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8007220:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007222:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 8007226:	429a      	cmp	r2, r3
 8007228:	d1f9      	bne.n	800721e <recorder::Serial::FlushTx(bool)+0x2>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800722a:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <recorder::Serial::FlushTx(bool)+0x34>)
 800722c:	69d3      	ldr	r3, [r2, #28]
 800722e:	0619      	lsls	r1, r3, #24
 8007230:	d5fc      	bpl.n	800722c <recorder::Serial::FlushTx(bool)+0x10>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8007232:	4a07      	ldr	r2, [pc, #28]	@ (8007250 <recorder::Serial::FlushTx(bool)+0x34>)
 8007234:	69d3      	ldr	r3, [r2, #28]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	d5fc      	bpl.n	8007234 <recorder::Serial::FlushTx(bool)+0x18>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 800723a:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800723c:	4904      	ldr	r1, [pc, #16]	@ (8007250 <recorder::Serial::FlushTx(bool)+0x34>)
	__atomic_store_n(&_M_i, __i, int(__m));
 800723e:	2200      	movs	r2, #0
 8007240:	680b      	ldr	r3, [r1, #0]
 8007242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007246:	600b      	str	r3, [r1, #0]
 8007248:	6482      	str	r2, [r0, #72]	@ 0x48
 800724a:	64c2      	str	r2, [r0, #76]	@ 0x4c
    }
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40011000 	.word	0x40011000

08007254 <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8007254:	4b23      	ldr	r3, [pc, #140]	@ (80072e4 <recorder::Serial::InterruptService()+0x90>)
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d516      	bpl.n	800728a <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800725c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
	return __atomic_load_n(&_M_i, int(__m));
 800725e:	6843      	ldr	r3, [r0, #4]
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8007266:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 8007268:	2b3f      	cmp	r3, #63	@ 0x3f
 800726a:	d82b      	bhi.n	80072c4 <recorder::Serial::InterruptService()+0x70>
 800726c:	6843      	ldr	r3, [r0, #4]
 800726e:	6802      	ldr	r2, [r0, #0]
 8007270:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8007274:	1a9a      	subs	r2, r3, r2
 8007276:	2a3f      	cmp	r2, #63	@ 0x3f
 8007278:	d807      	bhi.n	800728a <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 800727a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
        tail_.store(tail + length, std::memory_order_release);
 800727e:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8007280:	4402      	add	r2, r0
 8007282:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8007284:	f3bf 8f5b 	dmb	ish
 8007288:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 800728a:	4b16      	ldr	r3, [pc, #88]	@ (80072e4 <recorder::Serial::InterruptService()+0x90>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	0611      	lsls	r1, r2, #24
 8007290:	d517      	bpl.n	80072c2 <recorder::Serial::InterruptService()+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	0612      	lsls	r2, r2, #24
 8007296:	d514      	bpl.n	80072c2 <recorder::Serial::InterruptService()+0x6e>
	return __atomic_load_n(&_M_i, int(__m));
 8007298:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800729a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800729c:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 80072a0:	428a      	cmp	r2, r1
 80072a2:	d01a      	beq.n	80072da <recorder::Serial::InterruptService()+0x86>
        item = data_[head % size];
 80072a4:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 80072a8:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80072ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80072ae:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80072b0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80072b2:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <recorder::Serial::InterruptService()+0x6e>
        head_.store(head + 1, std::memory_order_release);
 80072ba:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 80072bc:	f3bf 8f5b 	dmb	ish
 80072c0:	6483      	str	r3, [r0, #72]	@ 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 80072c2:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 80072c4:	6803      	ldr	r3, [r0, #0]
 80072c6:	6842      	ldr	r2, [r0, #4]
 80072c8:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d0cd      	beq.n	800726c <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 80072d0:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 80072d2:	f3bf 8f5b 	dmb	ish
 80072d6:	6003      	str	r3, [r0, #0]
        return true;
 80072d8:	e7c8      	b.n	800726c <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072e0:	601a      	str	r2, [r3, #0]
}
 80072e2:	4770      	bx	lr
 80072e4:	40011000 	.word	0x40011000

080072e8 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 80072e8:	4b01      	ldr	r3, [pc, #4]	@ (80072f0 <recorder::Serial::InterruptHandler()+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	f7ff bfb2 	b.w	8007254 <recorder::Serial::InterruptService()>
 80072f0:	20011298 	.word	0x20011298

080072f4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80072f4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072f8:	4905      	ldr	r1, [pc, #20]	@ (8007310 <NVIC_SystemReset+0x1c>)
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <NVIC_SystemReset+0x20>)
 80072fc:	68ca      	ldr	r2, [r1, #12]
 80072fe:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007302:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007304:	60cb      	str	r3, [r1, #12]
 8007306:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800730a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800730c:	e7fd      	b.n	800730a <NVIC_SystemReset+0x16>
 800730e:	bf00      	nop
 8007310:	e000ed00 	.word	0xe000ed00
 8007314:	05fa0004 	.word	0x05fa0004

08007318 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007318:	4b04      	ldr	r3, [pc, #16]	@ (800732c <TickHandler+0x14>)
 800731a:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 800731e:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <TickHandler+0x18>)
 8007320:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 8007326:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8007328:	6013      	str	r3, [r2, #0]
}
 800732a:	4770      	bx	lr
 800732c:	40001400 	.word	0x40001400
 8007330:	200112a4 	.word	0x200112a4

08007334 <recorder::system::ConfigureClocks()>:
{
 8007334:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007336:	2002      	movs	r0, #2
{
 8007338:	b0cc      	sub	sp, #304	@ 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800733a:	f000 fc55 	bl	8007be8 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 800733e:	4b30      	ldr	r3, [pc, #192]	@ (8007400 <recorder::system::ConfigureClocks()+0xcc>)
 8007340:	2100      	movs	r1, #0
 8007342:	4a30      	ldr	r2, [pc, #192]	@ (8007404 <recorder::system::ConfigureClocks()+0xd0>)
 8007344:	9101      	str	r1, [sp, #4]
 8007346:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007348:	f021 0101 	bic.w	r1, r1, #1
 800734c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	6993      	ldr	r3, [r2, #24]
 8007358:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800735c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007360:	6193      	str	r3, [r2, #24]
 8007362:	6993      	ldr	r3, [r2, #24]
 8007364:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 800736c:	6993      	ldr	r3, [r2, #24]
 800736e:	049b      	lsls	r3, r3, #18
 8007370:	d5fc      	bpl.n	800736c <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 8007372:	2248      	movs	r2, #72	@ 0x48
 8007374:	2100      	movs	r1, #0
 8007376:	a80b      	add	r0, sp, #44	@ 0x2c
 8007378:	f003 fe01 	bl	800af7e <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 800737c:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800737e:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 8007380:	930d      	str	r3, [sp, #52]	@ 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007382:	920a      	str	r2, [sp, #40]	@ 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 8007384:	f000 fc04 	bl	8007b90 <HAL_GetREVID>
 8007388:	f241 0303 	movw	r3, #4099	@ 0x1003
 800738c:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 800738e:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8007390:	a80a      	add	r0, sp, #40	@ 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8007392:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 8007394:	bf94      	ite	ls
 8007396:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 800739a:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 800739e:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80073a0:	f000 fc48 	bl	8007c34 <HAL_RCC_OscConfig>
 80073a4:	b100      	cbz	r0, 80073a8 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 80073a6:	e7fe      	b.n	80073a6 <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 80073a8:	233f      	movs	r3, #63	@ 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 80073aa:	9009      	str	r0, [sp, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 80073ac:	2101      	movs	r1, #1
    clk_init.ClockType =
 80073ae:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 80073b0:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80073b4:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80073b8:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 80073bc:	a802      	add	r0, sp, #8
 80073be:	f000 ff53 	bl	8008268 <HAL_RCC_ClockConfig>
 80073c2:	b100      	cbz	r0, 80073c6 <recorder::system::ConfigureClocks()+0x92>
        while (1);
 80073c4:	e7fe      	b.n	80073c4 <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 80073c6:	4601      	mov	r1, r0
 80073c8:	22b8      	movs	r2, #184	@ 0xb8
 80073ca:	a81e      	add	r0, sp, #120	@ 0x78
    periph_clk_init.PLL3 =
 80073cc:	4c0f      	ldr	r4, [pc, #60]	@ (800740c <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 80073ce:	f003 fdd6 	bl	800af7e <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 80073d2:	490f      	ldr	r1, [pc, #60]	@ (8007410 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80073d4:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80073d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    periph_clk_init.PLL3 =
 80073da:	f10d 0c98 	add.w	ip, sp, #152	@ 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 80073de:	911d      	str	r1, [sp, #116]	@ 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80073e0:	923b      	str	r2, [sp, #236]	@ 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80073e2:	9345      	str	r3, [sp, #276]	@ 0x114
    periph_clk_init.PLL3 =
 80073e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80073ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80073ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 80073f2:	a81d      	add	r0, sp, #116	@ 0x74
 80073f4:	f001 f934 	bl	8008660 <HAL_RCCEx_PeriphCLKConfig>
 80073f8:	b908      	cbnz	r0, 80073fe <recorder::system::ConfigureClocks()+0xca>
}
 80073fa:	b04c      	add	sp, #304	@ 0x130
 80073fc:	bd10      	pop	{r4, pc}
        while (1);
 80073fe:	e7fe      	b.n	80073fe <recorder::system::ConfigureClocks()+0xca>
 8007400:	58000400 	.word	0x58000400
 8007404:	58024800 	.word	0x58024800
 8007408:	58024400 	.word	0x58024400
 800740c:	0800bf00 	.word	0x0800bf00
 8007410:	02080001 	.word	0x02080001

08007414 <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 8007414:	2000      	movs	r0, #0
 8007416:	4770      	bx	lr

08007418 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8007418:	4b02      	ldr	r3, [pc, #8]	@ (8007424 <recorder::system::ReloadWatchdog()+0xc>)
 800741a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800741e:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	58004800 	.word	0x58004800

08007428 <recorder::system::Init()>:

void Init(void)
{
 8007428:	b530      	push	{r4, r5, lr}
 800742a:	b08d      	sub	sp, #52	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800742c:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 800742e:	4cb1      	ldr	r4, [pc, #708]	@ (80076f4 <recorder::system::Init()+0x2cc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007430:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8007434:	4bb0      	ldr	r3, [pc, #704]	@ (80076f8 <recorder::system::Init()+0x2d0>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8007436:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
  reg_value  =  (reg_value                                   |
 800743a:	4ab0      	ldr	r2, [pc, #704]	@ (80076fc <recorder::system::Init()+0x2d4>)
 800743c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8007440:	4daf      	ldr	r5, [pc, #700]	@ (8007700 <recorder::system::Init()+0x2d8>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8007442:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8007446:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007448:	f041 4140 	orr.w	r1, r1, #3221225472	@ 0xc0000000
 800744c:	6359      	str	r1, [r3, #52]	@ 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 800744e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007450:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8007454:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 8007456:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007458:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800745c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 800745e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007460:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 8007464:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 8007466:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007468:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800746c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800746e:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 8007470:	49a4      	ldr	r1, [pc, #656]	@ (8007704 <recorder::system::Init()+0x2dc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007472:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 8007474:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 8007476:	4ba4      	ldr	r3, [pc, #656]	@ (8007708 <recorder::system::Init()+0x2e0>)
  SCB->AIRCR =  reg_value;
 8007478:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 800747a:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 800747c:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 800747e:	f7ff ff59 	bl	8007334 <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 8007482:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007486:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800748a:	2500      	movs	r5, #0
 800748c:	f8c4 5250 	str.w	r5, [r4, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007494:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007498:	6963      	ldr	r3, [r4, #20]
 800749a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800749e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80074a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4c98      	ldr	r4, [pc, #608]	@ (800770c <recorder::system::Init()+0x2e4>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80074aa:	4b99      	ldr	r3, [pc, #612]	@ (8007710 <recorder::system::Init()+0x2e8>)
 80074ac:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80074b0:	4a98      	ldr	r2, [pc, #608]	@ (8007714 <recorder::system::Init()+0x2ec>)
 80074b2:	f041 0102 	orr.w	r1, r1, #2
 80074b6:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 80074ba:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80074be:	f001 0102 	and.w	r1, r1, #2
 80074c2:	9105      	str	r1, [sp, #20]
 80074c4:	9905      	ldr	r1, [sp, #20]
 80074c6:	6899      	ldr	r1, [r3, #8]
 80074c8:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80074cc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80074d0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80074d2:	68d9      	ldr	r1, [r3, #12]
 80074d4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80074d8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80074da:	6859      	ldr	r1, [r3, #4]
 80074dc:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80074e0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80074e8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80074f2:	f041 0102 	orr.w	r1, r1, #2
 80074f6:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 80074fa:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 80074fe:	f001 0102 	and.w	r1, r1, #2
 8007502:	9104      	str	r1, [sp, #16]
 8007504:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007506:	6899      	ldr	r1, [r3, #8]
 8007508:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 800750c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8007510:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007512:	68d9      	ldr	r1, [r3, #12]
 8007514:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8007518:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800751a:	6859      	ldr	r1, [r3, #4]
 800751c:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8007520:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8007528:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800752c:	6019      	str	r1, [r3, #0]
 800752e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8007532:	f041 0102 	orr.w	r1, r1, #2
 8007536:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 800753a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800753e:	f001 0102 	and.w	r1, r1, #2
 8007542:	9103      	str	r1, [sp, #12]
 8007544:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007546:	6899      	ldr	r1, [r3, #8]
 8007548:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 800754c:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8007550:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007552:	68d9      	ldr	r1, [r3, #12]
 8007554:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8007558:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8007560:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8007568:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 800756c:	6019      	str	r1, [r3, #0]
 800756e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8007572:	f041 0102 	orr.w	r1, r1, #2
 8007576:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 800757a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 800757e:	f001 0102 	and.w	r1, r1, #2
 8007582:	9102      	str	r1, [sp, #8]
 8007584:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007586:	6899      	ldr	r1, [r3, #8]
 8007588:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800758c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8007590:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007592:	68d9      	ldr	r1, [r3, #12]
 8007594:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8007598:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800759a:	6859      	ldr	r1, [r3, #4]
 800759c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80075a0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80075a2:	6819      	ldr	r1, [r3, #0]
 80075a4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80075a8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80075ac:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 80075ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80075b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b6:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80075ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80075be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80075c6:	6893      	ldr	r3, [r2, #8]
 80075c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80075cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80075d2:	68d3      	ldr	r3, [r2, #12]
 80075d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80075d8:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80075da:	6853      	ldr	r3, [r2, #4]
 80075dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075e0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80075e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ec:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 80075ee:	f7ff fc9b 	bl	8006f28 <recorder::irq::Init()>
    serial_.Init(115200);
 80075f2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80075f6:	4848      	ldr	r0, [pc, #288]	@ (8007718 <recorder::system::Init()+0x2f0>)
 80075f8:	f7ff fd26 	bl	8007048 <recorder::Serial::Init(unsigned long)>
 80075fc:	4b47      	ldr	r3, [pc, #284]	@ (800771c <recorder::system::Init()+0x2f4>)
    LL_TIM_InitTypeDef timer_init =
 80075fe:	2210      	movs	r2, #16
    LL_TIM_Init(TIM7, &timer_init);
 8007600:	a906      	add	r1, sp, #24
 8007602:	601d      	str	r5, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 8007604:	f641 03ff 	movw	r3, #6399	@ 0x18ff
 8007608:	9207      	str	r2, [sp, #28]
 800760a:	9506      	str	r5, [sp, #24]
 800760c:	9308      	str	r3, [sp, #32]
 800760e:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007612:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
    LL_TIM_Init(TIM7, &timer_init);
 8007616:	4d42      	ldr	r5, [pc, #264]	@ (8007720 <recorder::system::Init()+0x2f8>)
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007618:	f043 0320 	orr.w	r3, r3, #32
    LL_TIM_Init(TIM7, &timer_init);
 800761c:	4628      	mov	r0, r5
    __HAL_RCC_TIM7_CLK_ENABLE();
 800761e:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8007622:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	9b00      	ldr	r3, [sp, #0]
    LL_TIM_Init(TIM7, &timer_init);
 800762e:	f002 fbd5 	bl	8009ddc <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007632:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 8007634:	2037      	movs	r0, #55	@ 0x37
 8007636:	493b      	ldr	r1, [pc, #236]	@ (8007724 <recorder::system::Init()+0x2fc>)
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	f7ff fc97 	bl	8006f78 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 800764a:	210a      	movs	r1, #10
 800764c:	2037      	movs	r0, #55	@ 0x37
 800764e:	f7ff fccf 	bl	8006ff0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 8007652:	2037      	movs	r0, #55	@ 0x37
 8007654:	f7ff fcb2 	bl	8006fbc <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8007658:	4a33      	ldr	r2, [pc, #204]	@ (8007728 <recorder::system::Init()+0x300>)
 800765a:	4b34      	ldr	r3, [pc, #208]	@ (800772c <recorder::system::Init()+0x304>)
 800765c:	69d1      	ldr	r1, [r2, #28]
 800765e:	400b      	ands	r3, r1
 8007660:	2b10      	cmp	r3, #16
 8007662:	d010      	beq.n	8007686 <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8007664:	4932      	ldr	r1, [pc, #200]	@ (8007730 <recorder::system::Init()+0x308>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8007666:	4833      	ldr	r0, [pc, #204]	@ (8007734 <recorder::system::Init()+0x30c>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8007668:	4b33      	ldr	r3, [pc, #204]	@ (8007738 <recorder::system::Init()+0x310>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800766a:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800766c:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 800766e:	6a11      	ldr	r1, [r2, #32]
 8007670:	400b      	ands	r3, r1
 8007672:	f043 0310 	orr.w	r3, r3, #16
 8007676:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8007678:	6993      	ldr	r3, [r2, #24]
 800767a:	f043 0302 	orr.w	r3, r3, #2
 800767e:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 8007680:	69d3      	ldr	r3, [r2, #28]
 8007682:	07d8      	lsls	r0, r3, #31
 8007684:	d4fc      	bmi.n	8007680 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 8007686:	492d      	ldr	r1, [pc, #180]	@ (800773c <recorder::system::Init()+0x314>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8007688:	f64c 44cc 	movw	r4, #52428	@ 0xcccc
 800768c:	4a2c      	ldr	r2, [pc, #176]	@ (8007740 <recorder::system::Init()+0x318>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800768e:	f245 5055 	movw	r0, #21845	@ 0x5555
 8007692:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8007694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007698:	654b      	str	r3, [r1, #84]	@ 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800769a:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 800769c:	2364      	movs	r3, #100	@ 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 800769e:	6014      	str	r4, [r2, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80076a0:	6010      	str	r0, [r2, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80076a2:	6051      	str	r1, [r2, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80076a4:	6093      	str	r3, [r2, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80076a6:	68d3      	ldr	r3, [r2, #12]
 80076a8:	0759      	lsls	r1, r3, #29
 80076aa:	d1fc      	bne.n	80076a6 <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80076ac:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 80076b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80076b2:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 80076b4:	4b15      	ldr	r3, [pc, #84]	@ (800770c <recorder::system::Init()+0x2e4>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 80076b6:	4823      	ldr	r0, [pc, #140]	@ (8007744 <recorder::system::Init()+0x31c>)
    uint32_t reset_flags = RCC->RSR;
 80076b8:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 80076bc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80076c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80076c4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    printf("Reset source was ");
 80076c8:	f003 fbbe 	bl	800ae48 <iprintf>

    switch (reset_flags >> 16)
 80076cc:	0c23      	lsrs	r3, r4, #16
 80076ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80076d0:	d07e      	beq.n	80077d0 <recorder::system::Init()+0x3a8>
 80076d2:	d93b      	bls.n	800774c <recorder::system::Init()+0x324>
 80076d4:	f241 0246 	movw	r2, #4166	@ 0x1046
 80076d8:	4293      	cmp	r3, r2
 80076da:	d075      	beq.n	80077c8 <recorder::system::Init()+0x3a0>
 80076dc:	d868      	bhi.n	80077b0 <recorder::system::Init()+0x388>
 80076de:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 80076e2:	d052      	beq.n	800778a <recorder::system::Init()+0x362>
 80076e4:	f240 4246 	movw	r2, #1094	@ 0x446
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d175      	bne.n	80077d8 <recorder::system::Init()+0x3b0>
        case 0x0046: printf("NRST\n");  break;
        case 0x0066: printf("BOR\n");   break;
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
 80076ec:	4816      	ldr	r0, [pc, #88]	@ (8007748 <recorder::system::Init()+0x320>)
 80076ee:	f003 fc13 	bl	800af18 <puts>
 80076f2:	e035      	b.n	8007760 <recorder::system::Init()+0x338>
 80076f4:	e000ed00 	.word	0xe000ed00
 80076f8:	e000ef00 	.word	0xe000ef00
 80076fc:	05fa0300 	.word	0x05fa0300
 8007700:	2000002c 	.word	0x2000002c
 8007704:	03d09000 	.word	0x03d09000
 8007708:	20000028 	.word	0x20000028
 800770c:	58024400 	.word	0x58024400
 8007710:	58020400 	.word	0x58020400
 8007714:	58021800 	.word	0x58021800
 8007718:	200112a8 	.word	0x200112a8
 800771c:	200112a4 	.word	0x200112a4
 8007720:	40001400 	.word	0x40001400
 8007724:	08007319 	.word	0x08007319
 8007728:	52002000 	.word	0x52002000
 800772c:	00060010 	.word	0x00060010
 8007730:	4c5d6e7f 	.word	0x4c5d6e7f
 8007734:	08192a3b 	.word	0x08192a3b
 8007738:	fff9ffef 	.word	0xfff9ffef
 800773c:	5c001000 	.word	0x5c001000
 8007740:	58004800 	.word	0x58004800
 8007744:	0800c138 	.word	0x0800c138
 8007748:	0800c16c 	.word	0x0800c16c
    switch (reset_flags >> 16)
 800774c:	2b46      	cmp	r3, #70	@ 0x46
 800774e:	d037      	beq.n	80077c0 <recorder::system::Init()+0x398>
 8007750:	d828      	bhi.n	80077a4 <recorder::system::Init()+0x37c>
 8007752:	2b06      	cmp	r3, #6
 8007754:	d015      	beq.n	8007782 <recorder::system::Init()+0x35a>
 8007756:	2b1e      	cmp	r3, #30
 8007758:	d13e      	bne.n	80077d8 <recorder::system::Init()+0x3b0>
        case 0x001E: printf("WAKE\n");  break;
 800775a:	4822      	ldr	r0, [pc, #136]	@ (80077e4 <recorder::system::Init()+0x3bc>)
 800775c:	f003 fbdc 	bl	800af18 <puts>
        case 0x4046: printf("LPWR\n");  break;
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 8007760:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <recorder::system::Init()+0x3c0>)
 8007762:	4c22      	ldr	r4, [pc, #136]	@ (80077ec <recorder::system::Init()+0x3c4>)
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 8007766:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 8007768:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 800776a:	d416      	bmi.n	800779a <recorder::system::Init()+0x372>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 800776c:	079b      	lsls	r3, r3, #30
 800776e:	d410      	bmi.n	8007792 <recorder::system::Init()+0x36a>
 8007770:	4a1f      	ldr	r2, [pc, #124]	@ (80077f0 <recorder::system::Init()+0x3c8>)
 8007772:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 8007776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800777a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 800777e:	b00d      	add	sp, #52	@ 0x34
 8007780:	bd30      	pop	{r4, r5, pc}
        case 0x0006: printf("CPU\n");   break;
 8007782:	481c      	ldr	r0, [pc, #112]	@ (80077f4 <recorder::system::Init()+0x3cc>)
 8007784:	f003 fbc8 	bl	800af18 <puts>
 8007788:	e7ea      	b.n	8007760 <recorder::system::Init()+0x338>
        case 0x0146: printf("SFT\n");   break;
 800778a:	481b      	ldr	r0, [pc, #108]	@ (80077f8 <recorder::system::Init()+0x3d0>)
 800778c:	f003 fbc4 	bl	800af18 <puts>
 8007790:	e7e6      	b.n	8007760 <recorder::system::Init()+0x338>
        printf("Wakeup event was play button\n");
 8007792:	481a      	ldr	r0, [pc, #104]	@ (80077fc <recorder::system::Init()+0x3d4>)
 8007794:	f003 fbc0 	bl	800af18 <puts>
 8007798:	e7ea      	b.n	8007770 <recorder::system::Init()+0x348>
        printf("Wakeup event was record button\n");
 800779a:	4819      	ldr	r0, [pc, #100]	@ (8007800 <recorder::system::Init()+0x3d8>)
 800779c:	f003 fbbc 	bl	800af18 <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	e7e3      	b.n	800776c <recorder::system::Init()+0x344>
    switch (reset_flags >> 16)
 80077a4:	2b66      	cmp	r3, #102	@ 0x66
 80077a6:	d117      	bne.n	80077d8 <recorder::system::Init()+0x3b0>
        case 0x0066: printf("BOR\n");   break;
 80077a8:	4816      	ldr	r0, [pc, #88]	@ (8007804 <recorder::system::Init()+0x3dc>)
 80077aa:	f003 fbb5 	bl	800af18 <puts>
 80077ae:	e7d7      	b.n	8007760 <recorder::system::Init()+0x338>
    switch (reset_flags >> 16)
 80077b0:	f244 0246 	movw	r2, #16454	@ 0x4046
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d10f      	bne.n	80077d8 <recorder::system::Init()+0x3b0>
        case 0x4046: printf("LPWR\n");  break;
 80077b8:	4813      	ldr	r0, [pc, #76]	@ (8007808 <recorder::system::Init()+0x3e0>)
 80077ba:	f003 fbad 	bl	800af18 <puts>
 80077be:	e7cf      	b.n	8007760 <recorder::system::Init()+0x338>
        case 0x0046: printf("NRST\n");  break;
 80077c0:	4812      	ldr	r0, [pc, #72]	@ (800780c <recorder::system::Init()+0x3e4>)
 80077c2:	f003 fba9 	bl	800af18 <puts>
 80077c6:	e7cb      	b.n	8007760 <recorder::system::Init()+0x338>
        case 0x1046: printf("WWDG1\n"); break;
 80077c8:	4811      	ldr	r0, [pc, #68]	@ (8007810 <recorder::system::Init()+0x3e8>)
 80077ca:	f003 fba5 	bl	800af18 <puts>
 80077ce:	e7c7      	b.n	8007760 <recorder::system::Init()+0x338>
        case 0x00FE: printf("POR\n");   break;
 80077d0:	4810      	ldr	r0, [pc, #64]	@ (8007814 <recorder::system::Init()+0x3ec>)
 80077d2:	f003 fba1 	bl	800af18 <puts>
 80077d6:	e7c3      	b.n	8007760 <recorder::system::Init()+0x338>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 80077d8:	4621      	mov	r1, r4
 80077da:	480f      	ldr	r0, [pc, #60]	@ (8007818 <recorder::system::Init()+0x3f0>)
 80077dc:	f003 fb34 	bl	800ae48 <iprintf>
 80077e0:	e7be      	b.n	8007760 <recorder::system::Init()+0x338>
 80077e2:	bf00      	nop
 80077e4:	0800c174 	.word	0x0800c174
 80077e8:	58024800 	.word	0x58024800
 80077ec:	200112a0 	.word	0x200112a0
 80077f0:	58024400 	.word	0x58024400
 80077f4:	0800c160 	.word	0x0800c160
 80077f8:	0800c15c 	.word	0x0800c15c
 80077fc:	0800c1b8 	.word	0x0800c1b8
 8007800:	0800c198 	.word	0x0800c198
 8007804:	0800c158 	.word	0x0800c158
 8007808:	0800c17c 	.word	0x0800c17c
 800780c:	0800c150 	.word	0x0800c150
 8007810:	0800c164 	.word	0x0800c164
 8007814:	0800c14c 	.word	0x0800c14c
 8007818:	0800c184 	.word	0x0800c184

0800781c <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 800781c:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 800781e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 8007822:	4d08      	ldr	r5, [pc, #32]	@ (8007844 <recorder::system::Delay_ms(unsigned long)+0x28>)
 8007824:	0044      	lsls	r4, r0, #1
 8007826:	682e      	ldr	r6, [r5, #0]
 8007828:	f3bf 8f5b 	dmb	ish
 800782c:	e001      	b.n	8007832 <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800782e:	f000 f9cd 	bl	8007bcc <HAL_PWR_EnterSLEEPMode>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	2101      	movs	r1, #1
 8007836:	2000      	movs	r0, #0
 8007838:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 800783c:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 800783e:	429c      	cmp	r4, r3
 8007840:	d8f5      	bhi.n	800782e <recorder::system::Delay_ms(unsigned long)+0x12>
}
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	200112a4 	.word	0x200112a4

08007848 <recorder::system::SerialFlushTx(bool)>:
{
 8007848:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 800784a:	4801      	ldr	r0, [pc, #4]	@ (8007850 <recorder::system::SerialFlushTx(bool)+0x8>)
 800784c:	f7ff bce6 	b.w	800721c <recorder::Serial::FlushTx(bool)>
 8007850:	200112a8 	.word	0x200112a8

08007854 <recorder::system::Standby()>:
{
 8007854:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 8007856:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007858:	4b33      	ldr	r3, [pc, #204]	@ (8007928 <recorder::system::Standby()+0xd4>)
 800785a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 800785e:	4d33      	ldr	r5, [pc, #204]	@ (800792c <recorder::system::Standby()+0xd8>)
 8007860:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8007864:	f8c3 4180 	str.w	r4, [r3, #384]	@ 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007868:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800786c:	f8c3 4184 	str.w	r4, [r3, #388]	@ 0x184
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007870:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8007874:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007878:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800787c:	f8c3 418c 	str.w	r4, [r3, #396]	@ 0x18c
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007880:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8007884:	f8c3 4190 	str.w	r4, [r3, #400]	@ 0x190
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007888:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800788c:	f8c3 4194 	str.w	r4, [r3, #404]	@ 0x194
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007890:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8007894:	f8c3 4198 	str.w	r4, [r3, #408]	@ 0x198
        NVIC->ICER[i] = 0xFFFFFFFF;
 8007898:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800789c:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
 80078a0:	692b      	ldr	r3, [r5, #16]
 80078a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078a6:	612b      	str	r3, [r5, #16]
    HAL_DisableDBGSleepMode();
 80078a8:	f000 f978 	bl	8007b9c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 80078ac:	f000 f97e 	bl	8007bac <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 80078b0:	f000 f984 	bl	8007bbc <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 80078b4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b6:	2302      	movs	r3, #2
 80078b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078bc:	62aa      	str	r2, [r5, #40]	@ 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 80078be:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80078c0:	fa93 f2a3 	rbit	r2, r3
 80078c4:	fab2 f282 	clz	r2, r2
 80078c8:	fa93 f3a3 	rbit	r3, r3
 80078cc:	fab3 f383 	clz	r3, r3
 80078d0:	0052      	lsls	r2, r2, #1
 80078d2:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80078d6:	3308      	adds	r3, #8
 80078d8:	f002 021e 	and.w	r2, r2, #30
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	fa00 f202 	lsl.w	r2, r0, r2
 80078e2:	f003 031e 	and.w	r3, r3, #30
 80078e6:	ea21 0202 	bic.w	r2, r1, r2
 80078ea:	2101      	movs	r1, #1
 80078ec:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80078f0:	490f      	ldr	r1, [pc, #60]	@ (8007930 <recorder::system::Standby()+0xdc>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	62ab      	str	r3, [r5, #40]	@ 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 80078f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	62ab      	str	r3, [r5, #40]	@ 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 80078fe:	622c      	str	r4, [r5, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 8007900:	692b      	ldr	r3, [r5, #16]
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 8007908:	692b      	ldr	r3, [r5, #16]
 800790a:	f043 0302 	orr.w	r3, r3, #2
 800790e:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 8007910:	692b      	ldr	r3, [r5, #16]
 8007912:	f043 0304 	orr.w	r3, r3, #4
 8007916:	612b      	str	r3, [r5, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8007918:	690b      	ldr	r3, [r1, #16]
 800791a:	f043 0304 	orr.w	r3, r3, #4
 800791e:	610b      	str	r3, [r1, #16]
    __WFI();
 8007920:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 8007922:	f7ff fce7 	bl	80072f4 <NVIC_SystemReset>
 8007926:	bf00      	nop
 8007928:	e000e100 	.word	0xe000e100
 800792c:	58024800 	.word	0x58024800
 8007930:	e000ed00 	.word	0xe000ed00

08007934 <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 8007934:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <recorder::system::WakeupWasPlayButton()+0xc>)
 8007936:	6818      	ldr	r0, [r3, #0]
}
 8007938:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	200112a0 	.word	0x200112a0

08007944 <recorder::system::Reset()>:
{
 8007944:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 8007946:	f7ff fcd5 	bl	80072f4 <NVIC_SystemReset>
 800794a:	bf00      	nop

0800794c <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 8007950:	2901      	cmp	r1, #1
{
 8007952:	b083      	sub	sp, #12
 8007954:	9001      	str	r0, [sp, #4]
    if (count < 2)
 8007956:	dd34      	ble.n	80079c2 <fgets+0x76>
 8007958:	4616      	mov	r6, r2
 800795a:	4607      	mov	r7, r0
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 800795c:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8007960:	f04f 0900 	mov.w	r9, #0
    {
        char byte = std::getc(stream);
 8007964:	4630      	mov	r0, r6
 8007966:	f003 fa3f 	bl	800ade8 <getc>
 800796a:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 800796c:	4630      	mov	r0, r6
 800796e:	f003 f943 	bl	800abf8 <ferror>
 8007972:	4682      	mov	sl, r0
        bool eof = std::feof(stream);
 8007974:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 8007976:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 8007978:	f003 f91a 	bl	800abb0 <feof>
 800797c:	4604      	mov	r4, r0
        std::clearerr(stream);
 800797e:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 8007980:	f1b4 0b00 	subs.w	fp, r4, #0
 8007984:	bf18      	it	ne
 8007986:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 800798a:	f003 f8ed 	bl	800ab68 <clearerr>

        if (error || (eof && i == 0))
 800798e:	f1ba 0f00 	cmp.w	sl, #0
 8007992:	d116      	bne.n	80079c2 <fgets+0x76>
 8007994:	f1b9 0f00 	cmp.w	r9, #0
 8007998:	d102      	bne.n	80079a0 <fgets+0x54>
 800799a:	f1bb 0f00 	cmp.w	fp, #0
 800799e:	d110      	bne.n	80079c2 <fgets+0x76>
        {
            return nullptr;
        }
        else if (eof)
 80079a0:	b99c      	cbnz	r4, 80079ca <fgets+0x7e>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 80079a2:	2d0a      	cmp	r5, #10
            str[i] = byte;
 80079a4:	f807 5b01 	strb.w	r5, [r7], #1
            if (byte == '\n')
 80079a8:	d003      	beq.n	80079b2 <fgets+0x66>
    for (i = 0; i < count - 1; i++)
 80079aa:	f109 0901 	add.w	r9, r9, #1
 80079ae:	45c1      	cmp	r9, r8
 80079b0:	d1d8      	bne.n	8007964 <fgets+0x18>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	444b      	add	r3, r9
 80079b8:	705a      	strb	r2, [r3, #1]
            return str;
 80079ba:	9801      	ldr	r0, [sp, #4]
    return str;
}
 80079bc:	b003      	add	sp, #12
 80079be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 80079c2:	2000      	movs	r0, #0
}
 80079c4:	b003      	add	sp, #12
 80079c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            str[i] = '\0';
 80079ca:	2300      	movs	r3, #0
 80079cc:	703b      	strb	r3, [r7, #0]
            return str;
 80079ce:	e7f4      	b.n	80079ba <fgets+0x6e>

080079d0 <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 80079d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 80079d4:	bb38      	cbnz	r0, 8007a26 <_read+0x56>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	4604      	mov	r4, r0
 80079da:	4616      	mov	r6, r2
 80079dc:	dd20      	ble.n	8007a20 <_read+0x50>
 80079de:	4688      	mov	r8, r1
 80079e0:	4d15      	ldr	r5, [pc, #84]	@ (8007a38 <_read+0x68>)
 80079e2:	4f16      	ldr	r7, [pc, #88]	@ (8007a3c <_read+0x6c>)
 80079e4:	e007      	b.n	80079f6 <_read+0x26>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 80079e6:	280a      	cmp	r0, #10
 80079e8:	d014      	beq.n	8007a14 <_read+0x44>
            {
                ptr[i++] = ch;
 80079ea:	f808 0004 	strb.w	r0, [r8, r4]
 80079ee:	3401      	adds	r4, #1
            }

            prev_was_cr = is_cr;
 80079f0:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 80079f2:	42b4      	cmp	r4, r6
 80079f4:	da14      	bge.n	8007a20 <_read+0x50>
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7ff fbce 	bl	8007198 <recorder::Serial::BytesAvailable()>
 80079fc:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 80079fe:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 8007a00:	b173      	cbz	r3, 8007a20 <_read+0x50>
            char ch = serial_.GetByteBlocking();
 8007a02:	f7ff fbcf 	bl	80071a4 <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 8007a06:	280d      	cmp	r0, #13
 8007a08:	bf0c      	ite	eq
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	2300      	movne	r3, #0
            if (is_cr)
 8007a0e:	d1ea      	bne.n	80079e6 <_read+0x16>
 8007a10:	200a      	movs	r0, #10
 8007a12:	e7ea      	b.n	80079ea <_read+0x1a>
            if (!(is_lf && prev_was_cr))
 8007a14:	783a      	ldrb	r2, [r7, #0]
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d0e7      	beq.n	80079ea <_read+0x1a>
        while (i < len && serial_.BytesAvailable())
 8007a1a:	42b4      	cmp	r4, r6
            prev_was_cr = is_cr;
 8007a1c:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 8007a1e:	dbea      	blt.n	80079f6 <_read+0x26>
        }

        return i;
 8007a20:	4620      	mov	r0, r4
    }

    errno = ENOENT;
    return -1;
}
 8007a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8007a26:	f003 fab3 	bl	800af90 <__errno>
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	4603      	mov	r3, r0
    return -1;
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 8007a32:	601a      	str	r2, [r3, #0]
    return -1;
 8007a34:	e7f5      	b.n	8007a22 <_read+0x52>
 8007a36:	bf00      	nop
 8007a38:	200112a8 	.word	0x200112a8
 8007a3c:	2001129d 	.word	0x2001129d

08007a40 <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8007a40:	1e43      	subs	r3, r0, #1
 8007a42:	2b01      	cmp	r3, #1
{
 8007a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8007a48:	d822      	bhi.n	8007a90 <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 8007a4a:	2a00      	cmp	r2, #0
 8007a4c:	4690      	mov	r8, r2
 8007a4e:	dd1c      	ble.n	8007a8a <_write+0x4a>
 8007a50:	1e4c      	subs	r4, r1, #1
 8007a52:	4e13      	ldr	r6, [pc, #76]	@ (8007aa0 <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 8007a54:	4d13      	ldr	r5, [pc, #76]	@ (8007aa4 <_write+0x64>)
 8007a56:	18a7      	adds	r7, r4, r2
 8007a58:	e008      	b.n	8007a6c <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7ff fbb0 	bl	80071c4 <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 8007a64:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 8007a66:	42bc      	cmp	r4, r7
            prev = ptr[i];
 8007a68:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 8007a6a:	d00e      	beq.n	8007a8a <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 8007a6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a70:	2b0a      	cmp	r3, #10
 8007a72:	d1f2      	bne.n	8007a5a <_write+0x1a>
 8007a74:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 8007a78:	210d      	movs	r1, #13
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 8007a7e:	458c      	cmp	ip, r1
 8007a80:	d0eb      	beq.n	8007a5a <_write+0x1a>
                serial_.Write('\r', true);
 8007a82:	f7ff fb9f 	bl	80071c4 <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 8007a86:	7823      	ldrb	r3, [r4, #0]
 8007a88:	e7e7      	b.n	8007a5a <_write+0x1a>
        }

        return len;
 8007a8a:	4640      	mov	r0, r8
    }

    errno = ENOENT;
    return -1;
}
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8007a90:	f003 fa7e 	bl	800af90 <__errno>
 8007a94:	2202      	movs	r2, #2
 8007a96:	4603      	mov	r3, r0
    return -1;
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 8007a9c:	601a      	str	r2, [r3, #0]
    return -1;
 8007a9e:	e7f5      	b.n	8007a8c <_write+0x4c>
 8007aa0:	2001129c 	.word	0x2001129c
 8007aa4:	200112a8 	.word	0x200112a8

08007aa8 <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 8007aa8:	4b03      	ldr	r3, [pc, #12]	@ (8007ab8 <_GLOBAL__sub_I_TickHandler+0x10>)
 8007aaa:	2000      	movs	r0, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	e9c3 0100 	strd	r0, r1, [r3]
 8007ab2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48

}
 8007ab6:	4770      	bx	lr
 8007ab8:	200112a8 	.word	0x200112a8

08007abc <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8007abc:	e7fe      	b.n	8007abc <Default_Handler>
 8007abe:	bf00      	nop

08007ac0 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8007ac0:	480b      	ldr	r0, [pc, #44]	@ (8007af0 <Reset_Handler+0x30>)
 8007ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8007af4 <Reset_Handler+0x34>)
 8007ac4:	4290      	cmp	r0, r2
 8007ac6:	d003      	beq.n	8007ad0 <Reset_Handler+0x10>
		*pDest = *pSource;
 8007ac8:	1a12      	subs	r2, r2, r0
 8007aca:	490b      	ldr	r1, [pc, #44]	@ (8007af8 <Reset_Handler+0x38>)
 8007acc:	f003 fa8d 	bl	800afea <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8007ad0:	480a      	ldr	r0, [pc, #40]	@ (8007afc <Reset_Handler+0x3c>)
 8007ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8007b00 <Reset_Handler+0x40>)
 8007ad4:	4290      	cmp	r0, r2
 8007ad6:	d003      	beq.n	8007ae0 <Reset_Handler+0x20>
		*pDest = 0;
 8007ad8:	1a12      	subs	r2, r2, r0
 8007ada:	2100      	movs	r1, #0
 8007adc:	f003 fa4f 	bl	800af7e <memset>
	SystemInit();
 8007ae0:	f000 f810 	bl	8007b04 <SystemInit>
	__libc_init_array();
 8007ae4:	f003 fa5a 	bl	800af9c <__libc_init_array>
	(void)main();
 8007ae8:	f7fd f8fc 	bl	8004ce4 <main>
	for (;;) ;
 8007aec:	e7fe      	b.n	8007aec <Reset_Handler+0x2c>
 8007aee:	bf00      	nop
 8007af0:	20000000 	.word	0x20000000
 8007af4:	2000008c 	.word	0x2000008c
 8007af8:	0800c8d0 	.word	0x0800c8d0
 8007afc:	20000400 	.word	0x20000400
 8007b00:	2001154c 	.word	0x2001154c

08007b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b04:	b410      	push	{r4}
    __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

/* FPU settings ------------------------------------------------------------*/
#if(__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007b06:	4c1a      	ldr	r4, [pc, #104]	@ (8007b70 <SystemInit+0x6c>)
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= RCC_CR_HSION;

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 8007b08:	2200      	movs	r2, #0
    RCC->CR |= RCC_CR_HSION;
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007b0c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88

    /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
    RCC->CR &= 0xEAF6ED7FU;
 8007b10:	4919      	ldr	r1, [pc, #100]	@ (8007b78 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10 * 2))
 8007b12:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
 8007b16:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
    RCC->CR |= RCC_CR_HSION;
 8007b1a:	6818      	ldr	r0, [r3, #0]
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
    /* dual core CM7 or single core line */
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007b1c:	4c17      	ldr	r4, [pc, #92]	@ (8007b7c <SystemInit+0x78>)
    RCC->CR |= RCC_CR_HSION;
 8007b1e:	f040 0001 	orr.w	r0, r0, #1
 8007b22:	6018      	str	r0, [r3, #0]
    RCC->CFGR = 0x00000000;
 8007b24:	611a      	str	r2, [r3, #16]
    RCC->CR &= 0xEAF6ED7FU;
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4001      	ands	r1, r0
 8007b2a:	6019      	str	r1, [r3, #0]
    RCC->D1CFGR = 0x00000000;
 8007b2c:	619a      	str	r2, [r3, #24]
    RCC->D2CFGR = 0x00000000;
 8007b2e:	61da      	str	r2, [r3, #28]
    RCC->D3CFGR = 0x00000000;
 8007b30:	621a      	str	r2, [r3, #32]
    RCC->PLLCKSELR = 0x00000000;
 8007b32:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC->PLLCFGR = 0x00000000;
 8007b34:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->PLL1DIVR = 0x00000000;
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC->PLL1FRACR = 0x00000000;
 8007b38:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->PLL2DIVR = 0x00000000;
 8007b3a:	639a      	str	r2, [r3, #56]	@ 0x38
    RCC->PLL2FRACR = 0x00000000;
 8007b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC->PLL3DIVR = 0x00000000;
 8007b3e:	641a      	str	r2, [r3, #64]	@ 0x40
    RCC->PLL3FRACR = 0x00000000;
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
    RCC->CR &= 0xFFFBFFFFU;
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8007b48:	6019      	str	r1, [r3, #0]
    RCC->CIER = 0x00000000;
 8007b4a:	661a      	str	r2, [r3, #96]	@ 0x60
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f36f 030f 	bfc	r3, #0, #16
 8007b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b56:	d203      	bcs.n	8007b60 <SystemInit+0x5c>
    {
        /* if stm32h7 revY*/
        /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
        *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <SystemInit+0x7c>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    SCB->VTOR
        = D1_AXISRAM_BASE
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
    SCB->VTOR
        = FLASH_BANK1_BASE
 8007b60:	4b03      	ldr	r3, [pc, #12]	@ (8007b70 <SystemInit+0x6c>)
 8007b62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007b66:	f85d 4b04 	ldr.w	r4, [sp], #4
        = FLASH_BANK1_BASE
 8007b6a:	609a      	str	r2, [r3, #8]
}
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	e000ed00 	.word	0xe000ed00
 8007b74:	58024400 	.word	0x58024400
 8007b78:	eaf6ed7f 	.word	0xeaf6ed7f
 8007b7c:	5c001000 	.word	0x5c001000
 8007b80:	51008000 	.word	0x51008000

08007b84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007b84:	4b01      	ldr	r3, [pc, #4]	@ (8007b8c <HAL_GetTick+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	200113f8 	.word	0x200113f8

08007b90 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007b90:	4b01      	ldr	r3, [pc, #4]	@ (8007b98 <HAL_GetREVID+0x8>)
 8007b92:	6818      	ldr	r0, [r3, #0]
}
 8007b94:	0c00      	lsrs	r0, r0, #16
 8007b96:	4770      	bx	lr
 8007b98:	5c001000 	.word	0x5c001000

08007b9c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during Domain1 SLEEP mode
  * @retval None
  */
void HAL_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 8007b9c:	4a02      	ldr	r2, [pc, #8]	@ (8007ba8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8007b9e:	6853      	ldr	r3, [r2, #4]
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	6053      	str	r3, [r2, #4]
}
 8007ba6:	4770      	bx	lr
 8007ba8:	5c001000 	.word	0x5c001000

08007bac <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during Domain1 STOP mode
  * @retval None
  */
void HAL_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 8007bac:	4a02      	ldr	r2, [pc, #8]	@ (8007bb8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8007bae:	6853      	ldr	r3, [r2, #4]
 8007bb0:	f023 0302 	bic.w	r3, r3, #2
 8007bb4:	6053      	str	r3, [r2, #4]
}
 8007bb6:	4770      	bx	lr
 8007bb8:	5c001000 	.word	0x5c001000

08007bbc <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during Domain1 STANDBY mode
  * @retval None
  */
void HAL_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 8007bbc:	4a02      	ldr	r2, [pc, #8]	@ (8007bc8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8007bbe:	6853      	ldr	r3, [r2, #4]
 8007bc0:	f023 0304 	bic.w	r3, r3, #4
 8007bc4:	6053      	str	r3, [r2, #4]
}
 8007bc6:	4770      	bx	lr
 8007bc8:	5c001000 	.word	0x5c001000

08007bcc <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007bcc:	4a05      	ldr	r2, [pc, #20]	@ (8007be4 <HAL_PWR_EnterSLEEPMode+0x18>)

  /* Select SLEEP mode entry */
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007bce:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007bd0:	6913      	ldr	r3, [r2, #16]
 8007bd2:	f023 0304 	bic.w	r3, r3, #4
 8007bd6:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007bd8:	d001      	beq.n	8007bde <HAL_PWR_EnterSLEEPMode+0x12>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8007bda:	bf20      	wfe
  }
}
 8007bdc:	4770      	bx	lr
    __WFI();
 8007bde:	bf30      	wfi
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	e000ed00 	.word	0xe000ed00

08007be8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007be8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <HAL_PWREx_ConfigSupply+0x48>)
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	0752      	lsls	r2, r2, #29
 8007bf0:	d404      	bmi.n	8007bfc <HAL_PWREx_ConfigSupply+0x14>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	4283      	cmp	r3, r0
 8007bfa:	d114      	bne.n	8007c26 <HAL_PWREx_ConfigSupply+0x3e>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bfc:	4c0c      	ldr	r4, [pc, #48]	@ (8007c30 <HAL_PWREx_ConfigSupply+0x48>)
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	f023 0307 	bic.w	r3, r3, #7
 8007c04:	4303      	orrs	r3, r0
 8007c06:	60e3      	str	r3, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c08:	f7ff ffbc 	bl	8007b84 <HAL_GetTick>
 8007c0c:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007c0e:	e005      	b.n	8007c1c <HAL_PWREx_ConfigSupply+0x34>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8007c10:	f7ff ffb8 	bl	8007b84 <HAL_GetTick>
 8007c14:	1b40      	subs	r0, r0, r5
 8007c16:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007c1a:	d806      	bhi.n	8007c2a <HAL_PWREx_ConfigSupply+0x42>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	049b      	lsls	r3, r3, #18
 8007c20:	d5f6      	bpl.n	8007c10 <HAL_PWREx_ConfigSupply+0x28>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007c22:	2000      	movs	r0, #0
}
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007c26:	2001      	movs	r0, #1
}
 8007c28:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007c2a:	2003      	movs	r0, #3
}
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	bf00      	nop
 8007c30:	58024800 	.word	0x58024800

08007c34 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f000 8283 	beq.w	8008140 <HAL_RCC_OscConfig+0x50c>
{
 8007c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c3c:	6803      	ldr	r3, [r0, #0]
 8007c3e:	4604      	mov	r4, r0
 8007c40:	07d8      	lsls	r0, r3, #31
 8007c42:	d530      	bpl.n	8007ca6 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c44:	499f      	ldr	r1, [pc, #636]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007c46:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c4a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c4e:	2a10      	cmp	r2, #16
 8007c50:	f000 8100 	beq.w	8007e54 <HAL_RCC_OscConfig+0x220>
 8007c54:	2a18      	cmp	r2, #24
 8007c56:	f000 80f8 	beq.w	8007e4a <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c5a:	6863      	ldr	r3, [r4, #4]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c60:	f000 8120 	beq.w	8007ea4 <HAL_RCC_OscConfig+0x270>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 815e 	beq.w	8007f26 <HAL_RCC_OscConfig+0x2f2>
 8007c6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c6e:	4b95      	ldr	r3, [pc, #596]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	f000 822d 	beq.w	80080d0 <HAL_RCC_OscConfig+0x49c>
 8007c76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c84:	f7ff ff7e 	bl	8007b84 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c88:	4e8e      	ldr	r6, [pc, #568]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c8a:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007c8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c90:	e005      	b.n	8007c9e <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c92:	f7ff ff77 	bl	8007b84 <HAL_GetTick>
 8007c96:	1b40      	subs	r0, r0, r5
 8007c98:	42b8      	cmp	r0, r7
 8007c9a:	f200 8142 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c9e:	6833      	ldr	r3, [r6, #0]
 8007ca0:	039a      	lsls	r2, r3, #14
 8007ca2:	d5f6      	bpl.n	8007c92 <HAL_RCC_OscConfig+0x5e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	079d      	lsls	r5, r3, #30
 8007ca8:	f100 8085 	bmi.w	8007db6 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cac:	06d9      	lsls	r1, r3, #27
 8007cae:	d52f      	bpl.n	8007d10 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cb0:	4a84      	ldr	r2, [pc, #528]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007cb2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	f000 80da 	beq.w	8007e74 <HAL_RCC_OscConfig+0x240>
 8007cc0:	2b18      	cmp	r3, #24
 8007cc2:	f000 80d2 	beq.w	8007e6a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007cc6:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007cc8:	4d7e      	ldr	r5, [pc, #504]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 8165 	beq.w	8007f9a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_CSI_ENABLE();
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd8:	f7ff ff54 	bl	8007b84 <HAL_GetTick>
 8007cdc:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cde:	e005      	b.n	8007cec <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ce0:	f7ff ff50 	bl	8007b84 <HAL_GetTick>
 8007ce4:	1b80      	subs	r0, r0, r6
 8007ce6:	2802      	cmp	r0, #2
 8007ce8:	f200 811b 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	05db      	lsls	r3, r3, #23
 8007cf0:	d5f6      	bpl.n	8007ce0 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cf2:	f7ff ff4d 	bl	8007b90 <HAL_GetREVID>
 8007cf6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	f200 8209 	bhi.w	8008112 <HAL_RCC_OscConfig+0x4de>
 8007d00:	686b      	ldr	r3, [r5, #4]
 8007d02:	6a22      	ldr	r2, [r4, #32]
 8007d04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007d08:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007d0c:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	071d      	lsls	r5, r3, #28
 8007d12:	d516      	bpl.n	8007d42 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d14:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d16:	4d6b      	ldr	r5, [pc, #428]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 811c 	beq.w	8007f56 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8007d1e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	676b      	str	r3, [r5, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d26:	f7ff ff2d 	bl	8007b84 <HAL_GetTick>
 8007d2a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d2c:	e005      	b.n	8007d3a <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d2e:	f7ff ff29 	bl	8007b84 <HAL_GetTick>
 8007d32:	1b80      	subs	r0, r0, r6
 8007d34:	2802      	cmp	r0, #2
 8007d36:	f200 80f4 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d3a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007d3c:	0798      	lsls	r0, r3, #30
 8007d3e:	d5f6      	bpl.n	8007d2e <HAL_RCC_OscConfig+0xfa>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	069a      	lsls	r2, r3, #26
 8007d44:	d516      	bpl.n	8007d74 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d46:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d48:	4d5e      	ldr	r5, [pc, #376]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8114 	beq.w	8007f78 <HAL_RCC_OscConfig+0x344>
      __HAL_RCC_HSI48_ENABLE();
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d56:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d58:	f7ff ff14 	bl	8007b84 <HAL_GetTick>
 8007d5c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d5e:	e005      	b.n	8007d6c <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007d60:	f7ff ff10 	bl	8007b84 <HAL_GetTick>
 8007d64:	1b80      	subs	r0, r0, r6
 8007d66:	2802      	cmp	r0, #2
 8007d68:	f200 80db 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	049f      	lsls	r7, r3, #18
 8007d70:	d5f6      	bpl.n	8007d60 <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	0759      	lsls	r1, r3, #29
 8007d76:	f100 809b 	bmi.w	8007eb0 <HAL_RCC_OscConfig+0x27c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d7c:	b1cb      	cbz	r3, 8007db2 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d7e:	4d51      	ldr	r5, [pc, #324]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007d80:	692a      	ldr	r2, [r5, #16]
 8007d82:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007d86:	2a18      	cmp	r2, #24
 8007d88:	d06d      	beq.n	8007e66 <HAL_RCC_OscConfig+0x232>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d8a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d92:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d94:	f000 8137 	beq.w	8008006 <HAL_RCC_OscConfig+0x3d2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7ff fef4 	bl	8007b84 <HAL_GetTick>
 8007d9c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d9e:	e005      	b.n	8007dac <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da0:	f7ff fef0 	bl	8007b84 <HAL_GetTick>
 8007da4:	1b00      	subs	r0, r0, r4
 8007da6:	2802      	cmp	r0, #2
 8007da8:	f200 80bb 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	019b      	lsls	r3, r3, #6
 8007db0:	d4f6      	bmi.n	8007da0 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8007db2:	2000      	movs	r0, #0
}
 8007db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007db6:	4a43      	ldr	r2, [pc, #268]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007db8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007dbc:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8007dc0:	d129      	bne.n	8007e16 <HAL_RCC_OscConfig+0x1e2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dc2:	4b40      	ldr	r3, [pc, #256]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dc4:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0759      	lsls	r1, r3, #29
 8007dca:	d501      	bpl.n	8007dd0 <HAL_RCC_OscConfig+0x19c>
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d04a      	beq.n	8007e66 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dd0:	4d3c      	ldr	r5, [pc, #240]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007dd2:	682b      	ldr	r3, [r5, #0]
 8007dd4:	f023 0319 	bic.w	r3, r3, #25
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007ddc:	f7ff fed2 	bl	8007b84 <HAL_GetTick>
 8007de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007de2:	e005      	b.n	8007df0 <HAL_RCC_OscConfig+0x1bc>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007de4:	f7ff fece 	bl	8007b84 <HAL_GetTick>
 8007de8:	1b80      	subs	r0, r0, r6
 8007dea:	2802      	cmp	r0, #2
 8007dec:	f200 8099 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	075b      	lsls	r3, r3, #29
 8007df4:	d5f6      	bpl.n	8007de4 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df6:	f7ff fecb 	bl	8007b90 <HAL_GetREVID>
 8007dfa:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007dfe:	6922      	ldr	r2, [r4, #16]
 8007e00:	4298      	cmp	r0, r3
 8007e02:	686b      	ldr	r3, [r5, #4]
 8007e04:	f200 80f0 	bhi.w	8007fe8 <HAL_RCC_OscConfig+0x3b4>
 8007e08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e0c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007e10:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	e74a      	b.n	8007cac <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e16:	2b18      	cmp	r3, #24
 8007e18:	f000 80e2 	beq.w	8007fe0 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e1c:	4d29      	ldr	r5, [pc, #164]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e1e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e20:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	f000 80cb 	beq.w	8007fbe <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e28:	f023 0319 	bic.w	r3, r3, #25
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007e30:	f7ff fea8 	bl	8007b84 <HAL_GetTick>
 8007e34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e36:	e004      	b.n	8007e42 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e38:	f7ff fea4 	bl	8007b84 <HAL_GetTick>
 8007e3c:	1b80      	subs	r0, r0, r6
 8007e3e:	2802      	cmp	r0, #2
 8007e40:	d86f      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	075f      	lsls	r7, r3, #29
 8007e46:	d5f7      	bpl.n	8007e38 <HAL_RCC_OscConfig+0x204>
 8007e48:	e7d5      	b.n	8007df6 <HAL_RCC_OscConfig+0x1c2>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e4a:	f001 0103 	and.w	r1, r1, #3
 8007e4e:	2902      	cmp	r1, #2
 8007e50:	f47f af03 	bne.w	8007c5a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e54:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	0391      	lsls	r1, r2, #14
 8007e5a:	f57f af24 	bpl.w	8007ca6 <HAL_RCC_OscConfig+0x72>
 8007e5e:	6862      	ldr	r2, [r4, #4]
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	f47f af20 	bne.w	8007ca6 <HAL_RCC_OscConfig+0x72>
    return HAL_ERROR;
 8007e66:	2001      	movs	r0, #1
}
 8007e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e6a:	f002 0203 	and.w	r2, r2, #3
 8007e6e:	2a01      	cmp	r2, #1
 8007e70:	f47f af29 	bne.w	8007cc6 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e74:	4b13      	ldr	r3, [pc, #76]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	05da      	lsls	r2, r3, #23
 8007e7a:	d502      	bpl.n	8007e82 <HAL_RCC_OscConfig+0x24e>
 8007e7c:	69e3      	ldr	r3, [r4, #28]
 8007e7e:	2b80      	cmp	r3, #128	@ 0x80
 8007e80:	d1f1      	bne.n	8007e66 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e82:	f7ff fe85 	bl	8007b90 <HAL_GetREVID>
 8007e86:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	6a21      	ldr	r1, [r4, #32]
 8007e90:	f200 80b1 	bhi.w	8007ff6 <HAL_RCC_OscConfig+0x3c2>
 8007e94:	6853      	ldr	r3, [r2, #4]
 8007e96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e9a:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8007e9e:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	e735      	b.n	8007d10 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea4:	4a07      	ldr	r2, [pc, #28]	@ (8007ec4 <HAL_RCC_OscConfig+0x290>)
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eac:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eae:	e6e9      	b.n	8007c84 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8007eb0:	4d05      	ldr	r5, [pc, #20]	@ (8007ec8 <HAL_RCC_OscConfig+0x294>)
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007eba:	f7ff fe63 	bl	8007b84 <HAL_GetTick>
 8007ebe:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec0:	e009      	b.n	8007ed6 <HAL_RCC_OscConfig+0x2a2>
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ecc:	f7ff fe5a 	bl	8007b84 <HAL_GetTick>
 8007ed0:	1b80      	subs	r0, r0, r6
 8007ed2:	2864      	cmp	r0, #100	@ 0x64
 8007ed4:	d825      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed6:	682b      	ldr	r3, [r5, #0]
 8007ed8:	05da      	lsls	r2, r3, #23
 8007eda:	d5f7      	bpl.n	8007ecc <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007edc:	68a3      	ldr	r3, [r4, #8]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	f000 8120 	beq.w	8008124 <HAL_RCC_OscConfig+0x4f0>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80fb 	beq.w	80080e0 <HAL_RCC_OscConfig+0x4ac>
 8007eea:	2b05      	cmp	r3, #5
 8007eec:	4b95      	ldr	r3, [pc, #596]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
 8007eee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ef0:	f000 811e 	beq.w	8008130 <HAL_RCC_OscConfig+0x4fc>
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	671a      	str	r2, [r3, #112]	@ 0x70
 8007efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007efc:	f022 0204 	bic.w	r2, r2, #4
 8007f00:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8007f02:	f7ff fe3f 	bl	8007b84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f06:	4e8f      	ldr	r6, [pc, #572]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007f0c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f0e:	e004      	b.n	8007f1a <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f10:	f7ff fe38 	bl	8007b84 <HAL_GetTick>
 8007f14:	1b40      	subs	r0, r0, r5
 8007f16:	42b8      	cmp	r0, r7
 8007f18:	d803      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f1a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8007f1c:	079b      	lsls	r3, r3, #30
 8007f1e:	d5f7      	bpl.n	8007f10 <HAL_RCC_OscConfig+0x2dc>
 8007f20:	e72b      	b.n	8007d7a <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8007f22:	2003      	movs	r0, #3
}
 8007f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f26:	4d87      	ldr	r5, [pc, #540]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f28:	f241 3788 	movw	r7, #5000	@ 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f32:	602b      	str	r3, [r5, #0]
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f3c:	f7ff fe22 	bl	8007b84 <HAL_GetTick>
 8007f40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f42:	e004      	b.n	8007f4e <HAL_RCC_OscConfig+0x31a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f44:	f7ff fe1e 	bl	8007b84 <HAL_GetTick>
 8007f48:	1b80      	subs	r0, r0, r6
 8007f4a:	42b8      	cmp	r0, r7
 8007f4c:	d8e9      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	039b      	lsls	r3, r3, #14
 8007f52:	d4f7      	bmi.n	8007f44 <HAL_RCC_OscConfig+0x310>
 8007f54:	e6a6      	b.n	8007ca4 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_LSI_DISABLE();
 8007f56:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8007f5e:	f7ff fe11 	bl	8007b84 <HAL_GetTick>
 8007f62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f64:	e004      	b.n	8007f70 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f66:	f7ff fe0d 	bl	8007b84 <HAL_GetTick>
 8007f6a:	1b80      	subs	r0, r0, r6
 8007f6c:	2802      	cmp	r0, #2
 8007f6e:	d8d8      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f70:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007f72:	0799      	lsls	r1, r3, #30
 8007f74:	d4f7      	bmi.n	8007f66 <HAL_RCC_OscConfig+0x332>
 8007f76:	e6e3      	b.n	8007d40 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f7e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007f80:	f7ff fe00 	bl	8007b84 <HAL_GetTick>
 8007f84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f86:	e004      	b.n	8007f92 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f88:	f7ff fdfc 	bl	8007b84 <HAL_GetTick>
 8007f8c:	1b80      	subs	r0, r0, r6
 8007f8e:	2802      	cmp	r0, #2
 8007f90:	d8c7      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	0498      	lsls	r0, r3, #18
 8007f96:	d4f7      	bmi.n	8007f88 <HAL_RCC_OscConfig+0x354>
 8007f98:	e6eb      	b.n	8007d72 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fa0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007fa2:	f7ff fdef 	bl	8007b84 <HAL_GetTick>
 8007fa6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fa8:	e004      	b.n	8007fb4 <HAL_RCC_OscConfig+0x380>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007faa:	f7ff fdeb 	bl	8007b84 <HAL_GetTick>
 8007fae:	1b80      	subs	r0, r0, r6
 8007fb0:	2802      	cmp	r0, #2
 8007fb2:	d8b6      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	05df      	lsls	r7, r3, #23
 8007fb8:	d4f7      	bmi.n	8007faa <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	e6a8      	b.n	8007d10 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007fc4:	f7ff fdde 	bl	8007b84 <HAL_GetTick>
 8007fc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fca:	e004      	b.n	8007fd6 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fcc:	f7ff fdda 	bl	8007b84 <HAL_GetTick>
 8007fd0:	1b80      	subs	r0, r0, r6
 8007fd2:	2802      	cmp	r0, #2
 8007fd4:	d8a5      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fd6:	682b      	ldr	r3, [r5, #0]
 8007fd8:	0758      	lsls	r0, r3, #29
 8007fda:	d4f7      	bmi.n	8007fcc <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	e665      	b.n	8007cac <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fe0:	0790      	lsls	r0, r2, #30
 8007fe2:	f47f af1b 	bne.w	8007e1c <HAL_RCC_OscConfig+0x1e8>
 8007fe6:	e6ec      	b.n	8007dc2 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007fec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007ff0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	e65a      	b.n	8007cac <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff6:	68d3      	ldr	r3, [r2, #12]
 8007ff8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8007ffc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008000:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	e684      	b.n	8007d10 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8008006:	f7ff fdbd 	bl	8007b84 <HAL_GetTick>
 800800a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800800c:	e004      	b.n	8008018 <HAL_RCC_OscConfig+0x3e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800800e:	f7ff fdb9 	bl	8007b84 <HAL_GetTick>
 8008012:	1b80      	subs	r0, r0, r6
 8008014:	2802      	cmp	r0, #2
 8008016:	d884      	bhi.n	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	0199      	lsls	r1, r3, #6
 800801c:	d4f7      	bmi.n	800800e <HAL_RCC_OscConfig+0x3da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800801e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8008020:	4b49      	ldr	r3, [pc, #292]	@ (8008148 <HAL_RCC_OscConfig+0x514>)
 8008022:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008024:	400b      	ands	r3, r1
 8008026:	4313      	orrs	r3, r2
 8008028:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800802a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800802e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8008030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008032:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8008036:	3901      	subs	r1, #1
 8008038:	3b01      	subs	r3, #1
 800803a:	3a01      	subs	r2, #1
 800803c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008040:	025b      	lsls	r3, r3, #9
 8008042:	0412      	lsls	r2, r2, #16
 8008044:	b29b      	uxth	r3, r3
 8008046:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800804a:	4313      	orrs	r3, r2
 800804c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800804e:	3a01      	subs	r2, #1
 8008050:	430b      	orrs	r3, r1
 8008052:	0612      	lsls	r2, r2, #24
 8008054:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008058:	4313      	orrs	r3, r2
 800805a:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800805c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008064:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8008066:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8008068:	f36f 03cf 	bfc	r3, #3, #13
 800806c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008070:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008072:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008074:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008076:	f023 030c 	bic.w	r3, r3, #12
 800807a:	4313      	orrs	r3, r2
 800807c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800807e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008080:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008082:	f023 0302 	bic.w	r3, r3, #2
 8008086:	4313      	orrs	r3, r2
 8008088:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800808a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800808c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008090:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008092:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008098:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800809a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800809c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80080a2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080b2:	f7ff fd67 	bl	8007b84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080b6:	4d23      	ldr	r5, [pc, #140]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
        tickstart = HAL_GetTick();
 80080b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080ba:	e005      	b.n	80080c8 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080bc:	f7ff fd62 	bl	8007b84 <HAL_GetTick>
 80080c0:	1b00      	subs	r0, r0, r4
 80080c2:	2802      	cmp	r0, #2
 80080c4:	f63f af2d 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	019a      	lsls	r2, r3, #6
 80080cc:	d5f6      	bpl.n	80080bc <HAL_RCC_OscConfig+0x488>
 80080ce:	e670      	b.n	8007db2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80080dc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080de:	e5d1      	b.n	8007c84 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080e0:	4d18      	ldr	r5, [pc, #96]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080e2:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80080e8:	f023 0301 	bic.w	r3, r3, #1
 80080ec:	672b      	str	r3, [r5, #112]	@ 0x70
 80080ee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80080f0:	f023 0304 	bic.w	r3, r3, #4
 80080f4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80080f6:	f7ff fd45 	bl	8007b84 <HAL_GetTick>
 80080fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080fc:	e005      	b.n	800810a <HAL_RCC_OscConfig+0x4d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080fe:	f7ff fd41 	bl	8007b84 <HAL_GetTick>
 8008102:	1b80      	subs	r0, r0, r6
 8008104:	42b8      	cmp	r0, r7
 8008106:	f63f af0c 	bhi.w	8007f22 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800810a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800810c:	0798      	lsls	r0, r3, #30
 800810e:	d4f6      	bmi.n	80080fe <HAL_RCC_OscConfig+0x4ca>
 8008110:	e633      	b.n	8007d7a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008112:	68eb      	ldr	r3, [r5, #12]
 8008114:	6a22      	ldr	r2, [r4, #32]
 8008116:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800811a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800811e:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	e5f5      	b.n	8007d10 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008124:	4a07      	ldr	r2, [pc, #28]	@ (8008144 <HAL_RCC_OscConfig+0x510>)
 8008126:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800812e:	e6e8      	b.n	8007f02 <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008130:	f042 0204 	orr.w	r2, r2, #4
 8008134:	671a      	str	r2, [r3, #112]	@ 0x70
 8008136:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800813e:	e6e0      	b.n	8007f02 <HAL_RCC_OscConfig+0x2ce>
    return HAL_ERROR;
 8008140:	2001      	movs	r0, #1
}
 8008142:	4770      	bx	lr
 8008144:	58024400 	.word	0x58024400
 8008148:	fffffc0c 	.word	0xfffffc0c

0800814c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800814c:	4a3f      	ldr	r2, [pc, #252]	@ (800824c <HAL_RCC_GetSysClockFreq+0x100>)
 800814e:	6913      	ldr	r3, [r2, #16]
 8008150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008154:	2b10      	cmp	r3, #16
 8008156:	d04f      	beq.n	80081f8 <HAL_RCC_GetSysClockFreq+0xac>
 8008158:	2b18      	cmp	r3, #24
 800815a:	d00a      	beq.n	8008172 <HAL_RCC_GetSysClockFreq+0x26>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d14d      	bne.n	80081fc <HAL_RCC_GetSysClockFreq+0xb0>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008160:	6813      	ldr	r3, [r2, #0]
 8008162:	0699      	lsls	r1, r3, #26
 8008164:	d54c      	bpl.n	8008200 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	4839      	ldr	r0, [pc, #228]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x104>)
 800816a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800816e:	40d8      	lsrs	r0, r3
 8008170:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008172:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8008174:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008176:	6a94      	ldr	r4, [r2, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008178:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800817a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800817e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008180:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8008184:	d036      	beq.n	80081f4 <HAL_RCC_GetSysClockFreq+0xa8>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008186:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800818a:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800818e:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008192:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008196:	fb05 f303 	mul.w	r3, r5, r3
 800819a:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800819c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081a0:	ee06 3a90 	vmov	s13, r3
 80081a4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80081a8:	d002      	beq.n	80081b0 <HAL_RCC_GetSysClockFreq+0x64>
 80081aa:	2902      	cmp	r1, #2
 80081ac:	d048      	beq.n	8008240 <HAL_RCC_GetSysClockFreq+0xf4>
 80081ae:	b349      	cbz	r1, 8008204 <HAL_RCC_GetSysClockFreq+0xb8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008254 <HAL_RCC_GetSysClockFreq+0x108>
 80081b4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80081b8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	ee07 3a10 	vmov	s14, r3
 80081c2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80081c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80081ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 80081d2:	ee27 7a06 	vmul.f32	s14, s14, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80081d6:	4b1d      	ldr	r3, [pc, #116]	@ (800824c <HAL_RCC_GetSysClockFreq+0x100>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80081de:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80081e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80081ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80081f4:	bc30      	pop	{r4, r5}
 80081f6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081f8:	4817      	ldr	r0, [pc, #92]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x10c>)
 80081fa:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80081fc:	4817      	ldr	r0, [pc, #92]	@ (800825c <HAL_RCC_GetSysClockFreq+0x110>)
 80081fe:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008200:	4813      	ldr	r0, [pc, #76]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8008202:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008204:	6813      	ldr	r3, [r2, #0]
 8008206:	069b      	lsls	r3, r3, #26
 8008208:	d51d      	bpl.n	8008246 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800820a:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800820c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008210:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008212:	490f      	ldr	r1, [pc, #60]	@ (8008250 <HAL_RCC_GetSysClockFreq+0x104>)
 8008214:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008218:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800821c:	40d1      	lsrs	r1, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800821e:	ee06 3a10 	vmov	s12, r3
 8008222:	ee05 1a90 	vmov	s11, r1
 8008226:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800822a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800822e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8008232:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8008236:	ee76 7a26 	vadd.f32	s15, s12, s13
 800823a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800823e:	e7ca      	b.n	80081d6 <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008240:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8008260 <HAL_RCC_GetSysClockFreq+0x114>
 8008244:	e7b6      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0x68>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008246:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8008264 <HAL_RCC_GetSysClockFreq+0x118>
 800824a:	e7b3      	b.n	80081b4 <HAL_RCC_GetSysClockFreq+0x68>
 800824c:	58024400 	.word	0x58024400
 8008250:	03d09000 	.word	0x03d09000
 8008254:	4a742400 	.word	0x4a742400
 8008258:	00f42400 	.word	0x00f42400
 800825c:	003d0900 	.word	0x003d0900
 8008260:	4b742400 	.word	0x4b742400
 8008264:	4c742400 	.word	0x4c742400

08008268 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008268:	2800      	cmp	r0, #0
 800826a:	f000 8104 	beq.w	8008476 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800826e:	4a88      	ldr	r2, [pc, #544]	@ (8008490 <HAL_RCC_ClockConfig+0x228>)
 8008270:	6813      	ldr	r3, [r2, #0]
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	428b      	cmp	r3, r1
{
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008280:	d20c      	bcs.n	800829c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	f023 030f 	bic.w	r3, r3, #15
 8008288:	430b      	orrs	r3, r1
 800828a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800828c:	6813      	ldr	r3, [r2, #0]
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	428b      	cmp	r3, r1
 8008294:	d002      	beq.n	800829c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008296:	2001      	movs	r0, #1
}
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	0758      	lsls	r0, r3, #29
 80082a0:	d50b      	bpl.n	80082ba <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082a2:	497c      	ldr	r1, [pc, #496]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80082a4:	6920      	ldr	r0, [r4, #16]
 80082a6:	698a      	ldr	r2, [r1, #24]
 80082a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80082ac:	4290      	cmp	r0, r2
 80082ae:	d904      	bls.n	80082ba <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082b0:	698a      	ldr	r2, [r1, #24]
 80082b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80082b6:	4302      	orrs	r2, r0
 80082b8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ba:	0719      	lsls	r1, r3, #28
 80082bc:	d50b      	bpl.n	80082d6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082be:	4975      	ldr	r1, [pc, #468]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80082c0:	6960      	ldr	r0, [r4, #20]
 80082c2:	69ca      	ldr	r2, [r1, #28]
 80082c4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80082c8:	4290      	cmp	r0, r2
 80082ca:	d904      	bls.n	80082d6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082cc:	69ca      	ldr	r2, [r1, #28]
 80082ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80082d2:	4302      	orrs	r2, r0
 80082d4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d6:	06da      	lsls	r2, r3, #27
 80082d8:	d50b      	bpl.n	80082f2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082da:	496e      	ldr	r1, [pc, #440]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80082dc:	69a0      	ldr	r0, [r4, #24]
 80082de:	69ca      	ldr	r2, [r1, #28]
 80082e0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80082e4:	4290      	cmp	r0, r2
 80082e6:	d904      	bls.n	80082f2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082e8:	69ca      	ldr	r2, [r1, #28]
 80082ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80082ee:	4302      	orrs	r2, r0
 80082f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082f2:	069f      	lsls	r7, r3, #26
 80082f4:	d50b      	bpl.n	800830e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082f6:	4967      	ldr	r1, [pc, #412]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80082f8:	69e0      	ldr	r0, [r4, #28]
 80082fa:	6a0a      	ldr	r2, [r1, #32]
 80082fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008300:	4290      	cmp	r0, r2
 8008302:	d904      	bls.n	800830e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008304:	6a0a      	ldr	r2, [r1, #32]
 8008306:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800830a:	4302      	orrs	r2, r0
 800830c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800830e:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008310:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008314:	f140 80a1 	bpl.w	800845a <HAL_RCC_ClockConfig+0x1f2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008318:	4e5e      	ldr	r6, [pc, #376]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 800831a:	68e0      	ldr	r0, [r4, #12]
 800831c:	69b1      	ldr	r1, [r6, #24]
 800831e:	f001 010f 	and.w	r1, r1, #15
 8008322:	4288      	cmp	r0, r1
 8008324:	d904      	bls.n	8008330 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008326:	69b1      	ldr	r1, [r6, #24]
 8008328:	f021 010f 	bic.w	r1, r1, #15
 800832c:	4301      	orrs	r1, r0
 800832e:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008330:	2a00      	cmp	r2, #0
 8008332:	d030      	beq.n	8008396 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008334:	4a57      	ldr	r2, [pc, #348]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 8008336:	68a1      	ldr	r1, [r4, #8]
 8008338:	6993      	ldr	r3, [r2, #24]
 800833a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800833e:	430b      	orrs	r3, r1
 8008340:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008342:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008344:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008346:	2902      	cmp	r1, #2
 8008348:	f000 8097 	beq.w	800847a <HAL_RCC_ClockConfig+0x212>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800834c:	2903      	cmp	r1, #3
 800834e:	f000 808e 	beq.w	800846e <HAL_RCC_ClockConfig+0x206>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008352:	2901      	cmp	r1, #1
 8008354:	f000 8097 	beq.w	8008486 <HAL_RCC_ClockConfig+0x21e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008358:	075f      	lsls	r7, r3, #29
 800835a:	d59c      	bpl.n	8008296 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800835c:	4e4d      	ldr	r6, [pc, #308]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800835e:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008362:	6933      	ldr	r3, [r6, #16]
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	430b      	orrs	r3, r1
 800836a:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800836c:	f7ff fc0a 	bl	8007b84 <HAL_GetTick>
 8008370:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008372:	e005      	b.n	8008380 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008374:	f7ff fc06 	bl	8007b84 <HAL_GetTick>
 8008378:	1bc0      	subs	r0, r0, r7
 800837a:	4540      	cmp	r0, r8
 800837c:	f200 8081 	bhi.w	8008482 <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008380:	6933      	ldr	r3, [r6, #16]
 8008382:	6862      	ldr	r2, [r4, #4]
 8008384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008388:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800838c:	d1f2      	bne.n	8008374 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	079e      	lsls	r6, r3, #30
 8008392:	d506      	bpl.n	80083a2 <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008394:	68e0      	ldr	r0, [r4, #12]
 8008396:	493f      	ldr	r1, [pc, #252]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 8008398:	698a      	ldr	r2, [r1, #24]
 800839a:	f002 020f 	and.w	r2, r2, #15
 800839e:	4290      	cmp	r0, r2
 80083a0:	d35f      	bcc.n	8008462 <HAL_RCC_ClockConfig+0x1fa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083a2:	493b      	ldr	r1, [pc, #236]	@ (8008490 <HAL_RCC_ClockConfig+0x228>)
 80083a4:	680a      	ldr	r2, [r1, #0]
 80083a6:	f002 020f 	and.w	r2, r2, #15
 80083aa:	42aa      	cmp	r2, r5
 80083ac:	d90a      	bls.n	80083c4 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ae:	680a      	ldr	r2, [r1, #0]
 80083b0:	f022 020f 	bic.w	r2, r2, #15
 80083b4:	432a      	orrs	r2, r5
 80083b6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b8:	680a      	ldr	r2, [r1, #0]
 80083ba:	f002 020f 	and.w	r2, r2, #15
 80083be:	42aa      	cmp	r2, r5
 80083c0:	f47f af69 	bne.w	8008296 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083c4:	0758      	lsls	r0, r3, #29
 80083c6:	d50b      	bpl.n	80083e0 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c8:	4932      	ldr	r1, [pc, #200]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80083ca:	6920      	ldr	r0, [r4, #16]
 80083cc:	698a      	ldr	r2, [r1, #24]
 80083ce:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80083d2:	4290      	cmp	r0, r2
 80083d4:	d204      	bcs.n	80083e0 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d6:	698a      	ldr	r2, [r1, #24]
 80083d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80083dc:	4302      	orrs	r2, r0
 80083de:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e0:	0719      	lsls	r1, r3, #28
 80083e2:	d50b      	bpl.n	80083fc <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083e4:	492b      	ldr	r1, [pc, #172]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 80083e6:	6960      	ldr	r0, [r4, #20]
 80083e8:	69ca      	ldr	r2, [r1, #28]
 80083ea:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80083ee:	4290      	cmp	r0, r2
 80083f0:	d204      	bcs.n	80083fc <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083f2:	69ca      	ldr	r2, [r1, #28]
 80083f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80083f8:	4302      	orrs	r2, r0
 80083fa:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083fc:	06da      	lsls	r2, r3, #27
 80083fe:	d50b      	bpl.n	8008418 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008400:	4924      	ldr	r1, [pc, #144]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 8008402:	69a0      	ldr	r0, [r4, #24]
 8008404:	69ca      	ldr	r2, [r1, #28]
 8008406:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800840a:	4290      	cmp	r0, r2
 800840c:	d204      	bcs.n	8008418 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800840e:	69ca      	ldr	r2, [r1, #28]
 8008410:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008414:	4302      	orrs	r2, r0
 8008416:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008418:	069b      	lsls	r3, r3, #26
 800841a:	d50b      	bpl.n	8008434 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800841c:	4a1d      	ldr	r2, [pc, #116]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 800841e:	69e1      	ldr	r1, [r4, #28]
 8008420:	6a13      	ldr	r3, [r2, #32]
 8008422:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008426:	4299      	cmp	r1, r3
 8008428:	d204      	bcs.n	8008434 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800842a:	6a13      	ldr	r3, [r2, #32]
 800842c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008430:	430b      	orrs	r3, r1
 8008432:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008434:	f7ff fe8a 	bl	800814c <HAL_RCC_GetSysClockFreq>
 8008438:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <HAL_RCC_ClockConfig+0x22c>)
 800843a:	4603      	mov	r3, r0
 800843c:	4816      	ldr	r0, [pc, #88]	@ (8008498 <HAL_RCC_ClockConfig+0x230>)
 800843e:	6992      	ldr	r2, [r2, #24]
 8008440:	4916      	ldr	r1, [pc, #88]	@ (800849c <HAL_RCC_ClockConfig+0x234>)
 8008442:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8008446:	5c82      	ldrb	r2, [r0, r2]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8008448:	200e      	movs	r0, #14
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800844a:	f002 021f 	and.w	r2, r2, #31
 800844e:	40d3      	lsrs	r3, r2
}
 8008450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008454:	600b      	str	r3, [r1, #0]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8008456:	f7fe bfdd 	b.w	8007414 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845a:	2a00      	cmp	r2, #0
 800845c:	f47f af6a 	bne.w	8008334 <HAL_RCC_ClockConfig+0xcc>
 8008460:	e79f      	b.n	80083a2 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008462:	698a      	ldr	r2, [r1, #24]
 8008464:	f022 020f 	bic.w	r2, r2, #15
 8008468:	4302      	orrs	r2, r0
 800846a:	618a      	str	r2, [r1, #24]
 800846c:	e799      	b.n	80083a2 <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800846e:	019a      	lsls	r2, r3, #6
 8008470:	f53f af74 	bmi.w	800835c <HAL_RCC_ClockConfig+0xf4>
 8008474:	e70f      	b.n	8008296 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008476:	2001      	movs	r0, #1
}
 8008478:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800847a:	0398      	lsls	r0, r3, #14
 800847c:	f53f af6e 	bmi.w	800835c <HAL_RCC_ClockConfig+0xf4>
 8008480:	e709      	b.n	8008296 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008482:	2003      	movs	r0, #3
 8008484:	e708      	b.n	8008298 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008486:	05db      	lsls	r3, r3, #23
 8008488:	f53f af68 	bmi.w	800835c <HAL_RCC_ClockConfig+0xf4>
 800848c:	e703      	b.n	8008296 <HAL_RCC_ClockConfig+0x2e>
 800848e:	bf00      	nop
 8008490:	52002000 	.word	0x52002000
 8008494:	58024400 	.word	0x58024400
 8008498:	0800c3f4 	.word	0x0800c3f4
 800849c:	2000002c 	.word	0x2000002c

080084a0 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80084a2:	4c36      	ldr	r4, [pc, #216]	@ (800857c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80084a4:	4606      	mov	r6, r0
 80084a6:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084b0:	f7ff fb68 	bl	8007b84 <HAL_GetTick>
 80084b4:	4605      	mov	r5, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084b6:	e004      	b.n	80084c2 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084b8:	f7ff fb64 	bl	8007b84 <HAL_GetTick>
 80084bc:	1b40      	subs	r0, r0, r5
 80084be:	2802      	cmp	r0, #2
 80084c0:	d856      	bhi.n	8008570 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	011a      	lsls	r2, r3, #4
 80084c6:	d4f7      	bmi.n	80084b8 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80084ca:	6832      	ldr	r2, [r6, #0]
 80084cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80084d0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80084d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084d6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80084da:	3b01      	subs	r3, #1
 80084dc:	3a01      	subs	r2, #1
 80084de:	025b      	lsls	r3, r3, #9
 80084e0:	0412      	lsls	r2, r2, #16
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80084e8:	4313      	orrs	r3, r2
 80084ea:	6872      	ldr	r2, [r6, #4]
 80084ec:	3a01      	subs	r2, #1
 80084ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084f2:	4313      	orrs	r3, r2
 80084f4:	6932      	ldr	r2, [r6, #16]
 80084f6:	3a01      	subs	r2, #1
 80084f8:	0612      	lsls	r2, r2, #24
 80084fa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80084fe:	4313      	orrs	r3, r2
 8008500:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008502:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008504:	6972      	ldr	r2, [r6, #20]
 8008506:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800850a:	4313      	orrs	r3, r2
 800850c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800850e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008510:	69b2      	ldr	r2, [r6, #24]
 8008512:	f023 0320 	bic.w	r3, r3, #32
 8008516:	4313      	orrs	r3, r2
 8008518:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800851a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800851c:	f023 0310 	bic.w	r3, r3, #16
 8008520:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008522:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008524:	69f2      	ldr	r2, [r6, #28]
 8008526:	f36f 03cf 	bfc	r3, #3, #13
 800852a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800852e:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008530:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008532:	f043 0310 	orr.w	r3, r3, #16
 8008536:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008538:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800853a:	b1df      	cbz	r7, 8008574 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800853c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800853e:	bf0c      	ite	eq
 8008540:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008544:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8008548:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800854a:	4c0c      	ldr	r4, [pc, #48]	@ (800857c <RCCEx_PLL2_Config.part.0+0xdc>)
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008552:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008554:	f7ff fb16 	bl	8007b84 <HAL_GetTick>
 8008558:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800855a:	e004      	b.n	8008566 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800855c:	f7ff fb12 	bl	8007b84 <HAL_GetTick>
 8008560:	1b40      	subs	r0, r0, r5
 8008562:	2802      	cmp	r0, #2
 8008564:	d804      	bhi.n	8008570 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	d5f7      	bpl.n	800855c <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800856c:	2000      	movs	r0, #0
}
 800856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008570:	2003      	movs	r0, #3
}
 8008572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008574:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008578:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800857a:	e7e6      	b.n	800854a <RCCEx_PLL2_Config.part.0+0xaa>
 800857c:	58024400 	.word	0x58024400

08008580 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008582:	4c36      	ldr	r4, [pc, #216]	@ (800865c <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800858e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008590:	f7ff faf8 	bl	8007b84 <HAL_GetTick>
 8008594:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008596:	e004      	b.n	80085a2 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008598:	f7ff faf4 	bl	8007b84 <HAL_GetTick>
 800859c:	1b40      	subs	r0, r0, r5
 800859e:	2802      	cmp	r0, #2
 80085a0:	d856      	bhi.n	8008650 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	009a      	lsls	r2, r3, #2
 80085a6:	d4f7      	bmi.n	8008598 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80085a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80085aa:	6832      	ldr	r2, [r6, #0]
 80085ac:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80085b0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80085b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085b6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	3a01      	subs	r2, #1
 80085be:	025b      	lsls	r3, r3, #9
 80085c0:	0412      	lsls	r2, r2, #16
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80085c8:	4313      	orrs	r3, r2
 80085ca:	6872      	ldr	r2, [r6, #4]
 80085cc:	3a01      	subs	r2, #1
 80085ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d2:	4313      	orrs	r3, r2
 80085d4:	6932      	ldr	r2, [r6, #16]
 80085d6:	3a01      	subs	r2, #1
 80085d8:	0612      	lsls	r2, r2, #24
 80085da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80085de:	4313      	orrs	r3, r2
 80085e0:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80085e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085e4:	6972      	ldr	r2, [r6, #20]
 80085e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80085ea:	4313      	orrs	r3, r2
 80085ec:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085f0:	69b2      	ldr	r2, [r6, #24]
 80085f2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085f6:	4313      	orrs	r3, r2
 80085f8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008600:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008602:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008604:	69f2      	ldr	r2, [r6, #28]
 8008606:	f36f 03cf 	bfc	r3, #3, #13
 800860a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800860e:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008610:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008616:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008618:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800861a:	b1df      	cbz	r7, 8008654 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800861c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800861e:	bf0c      	ite	eq
 8008620:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008624:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8008628:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800862a:	4c0c      	ldr	r4, [pc, #48]	@ (800865c <RCCEx_PLL3_Config.part.0+0xdc>)
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008632:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008634:	f7ff faa6 	bl	8007b84 <HAL_GetTick>
 8008638:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800863a:	e004      	b.n	8008646 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800863c:	f7ff faa2 	bl	8007b84 <HAL_GetTick>
 8008640:	1b40      	subs	r0, r0, r5
 8008642:	2802      	cmp	r0, #2
 8008644:	d804      	bhi.n	8008650 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	d5f7      	bpl.n	800863c <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 800864c:	2000      	movs	r0, #0
}
 800864e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008650:	2003      	movs	r0, #3
}
 8008652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008654:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800865a:	e7e6      	b.n	800862a <RCCEx_PLL3_Config.part.0+0xaa>
 800865c:	58024400 	.word	0x58024400

08008660 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008664:	6803      	ldr	r3, [r0, #0]
{
 8008666:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008668:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 800866c:	d023      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800866e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8008670:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8008674:	f000 8516 	beq.w	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8008678:	f200 85fd 	bhi.w	8009276 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800867c:	2a00      	cmp	r2, #0
 800867e:	f000 852a 	beq.w	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008682:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8008686:	f040 85fa 	bne.w	800927e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800868a:	4aa2      	ldr	r2, [pc, #648]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800868c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800868e:	f002 0203 	and.w	r2, r2, #3
 8008692:	2a03      	cmp	r2, #3
 8008694:	f000 85f3 	beq.w	800927e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008698:	2102      	movs	r1, #2
 800869a:	3004      	adds	r0, #4
 800869c:	f7ff ff00 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
 80086a0:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086a2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80086a4:	b93e      	cbnz	r6, 80086b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086a8:	489a      	ldr	r0, [pc, #616]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086aa:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80086ac:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80086ae:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80086b2:	430a      	orrs	r2, r1
 80086b4:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086b6:	05dd      	lsls	r5, r3, #23
 80086b8:	d50a      	bpl.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80086ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086bc:	2a04      	cmp	r2, #4
 80086be:	d806      	bhi.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80086c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80086c4:	04b3036b 	.word	0x04b3036b
 80086c8:	0370049f 	.word	0x0370049f
 80086cc:	0370      	.short	0x0370
      status = ret;
 80086ce:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80086d0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086d2:	0598      	lsls	r0, r3, #22
 80086d4:	d522      	bpl.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai23ClockSelection)
 80086d6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80086d8:	2a80      	cmp	r2, #128	@ 0x80
 80086da:	f000 847e 	beq.w	8008fda <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80086de:	f200 85bf 	bhi.w	8009260 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	f000 84af 	beq.w	8009046 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 80086e8:	2a40      	cmp	r2, #64	@ 0x40
 80086ea:	f040 85c0 	bne.w	800926e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086ee:	4a89      	ldr	r2, [pc, #548]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80086f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80086f2:	f002 0203 	and.w	r2, r2, #3
 80086f6:	2a03      	cmp	r2, #3
 80086f8:	f000 85b9 	beq.w	800926e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 80086fc:	2100      	movs	r1, #0
 80086fe:	1d20      	adds	r0, r4, #4
 8008700:	f7ff fece 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008708:	2d00      	cmp	r5, #0
 800870a:	f040 8477 	bne.w	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x99c>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800870e:	4981      	ldr	r1, [pc, #516]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008712:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008714:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8008718:	4302      	orrs	r2, r0
 800871a:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800871c:	0559      	lsls	r1, r3, #21
 800871e:	d526      	bpl.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008720:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8008724:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8008728:	f000 84e3 	beq.w	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800872c:	f200 8589 	bhi.w	8009242 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8008730:	2a00      	cmp	r2, #0
 8008732:	f000 84c5 	beq.w	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8008736:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800873a:	f040 858a 	bne.w	8009252 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800873e:	4a75      	ldr	r2, [pc, #468]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008742:	f002 0203 	and.w	r2, r2, #3
 8008746:	2a03      	cmp	r2, #3
 8008748:	f000 8583 	beq.w	8009252 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800874c:	2100      	movs	r1, #0
 800874e:	1d20      	adds	r0, r4, #4
 8008750:	f7ff fea6 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008758:	2d00      	cmp	r5, #0
 800875a:	f040 84b9 	bne.w	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800875e:	496d      	ldr	r1, [pc, #436]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008760:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8008764:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008766:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 800876a:	4302      	orrs	r2, r0
 800876c:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800876e:	051a      	lsls	r2, r3, #20
 8008770:	d526      	bpl.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008772:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 8008776:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800877a:	f000 847f 	beq.w	800907c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800877e:	f200 8548 	bhi.w	8009212 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8008782:	2a00      	cmp	r2, #0
 8008784:	f000 84ae 	beq.w	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8008788:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800878c:	f040 8549 	bne.w	8009222 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008790:	4a60      	ldr	r2, [pc, #384]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008792:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008794:	f002 0203 	and.w	r2, r2, #3
 8008798:	2a03      	cmp	r2, #3
 800879a:	f000 8542 	beq.w	8009222 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800879e:	2100      	movs	r1, #0
 80087a0:	1d20      	adds	r0, r4, #4
 80087a2:	f7ff fe7d 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	f040 8477 	bne.w	800909e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80087b0:	4958      	ldr	r1, [pc, #352]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80087b2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80087b6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80087b8:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 80087bc:	4302      	orrs	r2, r0
 80087be:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80087c0:	019f      	lsls	r7, r3, #6
 80087c2:	d518      	bpl.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    switch(PeriphClkInit->QspiClockSelection)
 80087c4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80087c6:	2a20      	cmp	r2, #32
 80087c8:	f000 83c0 	beq.w	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80087cc:	f200 855a 	bhi.w	8009284 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80087d0:	b13a      	cbz	r2, 80087e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80087d2:	2a10      	cmp	r2, #16
 80087d4:	f040 8559 	bne.w	800928a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d8:	494e      	ldr	r1, [pc, #312]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80087da:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80087dc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80087e0:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80087e2:	2d00      	cmp	r5, #0
 80087e4:	f040 832c 	bne.w	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80087e8:	494a      	ldr	r1, [pc, #296]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80087ea:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80087ec:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80087ee:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80087f2:	4302      	orrs	r2, r0
 80087f4:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087f6:	04d8      	lsls	r0, r3, #19
 80087f8:	d524      	bpl.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi123ClockSelection)
 80087fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80087fc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008800:	f000 8428 	beq.w	8009054 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8008804:	f200 8511 	bhi.w	800922a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8008808:	2a00      	cmp	r2, #0
 800880a:	f000 8482 	beq.w	8009112 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800880e:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8008812:	f040 8512 	bne.w	800923a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008816:	4a3f      	ldr	r2, [pc, #252]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008818:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800881a:	f002 0203 	and.w	r2, r2, #3
 800881e:	2a03      	cmp	r2, #3
 8008820:	f000 850b 	beq.w	800923a <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8008824:	2100      	movs	r1, #0
 8008826:	1d20      	adds	r0, r4, #4
 8008828:	f7ff fe3a 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008830:	2d00      	cmp	r5, #0
 8008832:	f040 8420 	bne.w	8009076 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008836:	4937      	ldr	r1, [pc, #220]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008838:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800883a:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800883c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8008840:	4302      	orrs	r2, r0
 8008842:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008844:	0499      	lsls	r1, r3, #18
 8008846:	d522      	bpl.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008848:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800884a:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 800884e:	f000 83b2 	beq.w	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8008852:	f200 84b5 	bhi.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8008856:	b182      	cbz	r2, 800887a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008858:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800885c:	f040 84ba 	bne.w	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008860:	4a2c      	ldr	r2, [pc, #176]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008862:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008864:	f002 0203 	and.w	r2, r2, #3
 8008868:	2a03      	cmp	r2, #3
 800886a:	f000 84b3 	beq.w	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800886e:	2101      	movs	r1, #1
 8008870:	1d20      	adds	r0, r4, #4
 8008872:	f7ff fe15 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800887a:	2d00      	cmp	r5, #0
 800887c:	f040 82fd 	bne.w	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008880:	4924      	ldr	r1, [pc, #144]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008882:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8008884:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008886:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800888a:	4302      	orrs	r2, r0
 800888c:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800888e:	045a      	lsls	r2, r3, #17
 8008890:	d524      	bpl.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008892:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8008896:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800889a:	f000 82fe 	beq.w	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800889e:	f200 849d 	bhi.w	80091dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80088a2:	b182      	cbz	r2, 80088c6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80088a4:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80088a8:	f040 84a2 	bne.w	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ac:	4a19      	ldr	r2, [pc, #100]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80088ae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80088b0:	f002 0203 	and.w	r2, r2, #3
 80088b4:	2a03      	cmp	r2, #3
 80088b6:	f000 849b 	beq.w	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 80088ba:	2101      	movs	r1, #1
 80088bc:	1d20      	adds	r0, r4, #4
 80088be:	f7ff fdef 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	f040 82d9 	bne.w	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80088cc:	4911      	ldr	r1, [pc, #68]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80088ce:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80088d2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80088d4:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 80088d8:	4302      	orrs	r2, r0
 80088da:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088dc:	041f      	lsls	r7, r3, #16
 80088de:	d50d      	bpl.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    switch(PeriphClkInit->FdcanClockSelection)
 80088e0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80088e2:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80088e6:	f000 81db 	beq.w	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80088ea:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80088ee:	f000 84d5 	beq.w	800929c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	f000 81d9 	beq.w	8008caa <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = ret;
 80088f8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80088fa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80088fc:	01d8      	lsls	r0, r3, #7
 80088fe:	d514      	bpl.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->FmcClockSelection)
 8008900:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8008902:	2a03      	cmp	r2, #3
 8008904:	f200 84e3 	bhi.w	80092ce <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8008908:	e8df f012 	tbh	[pc, r2, lsl #1]
 800890c:	0006000b 	.word	0x0006000b
 8008910:	000b030b 	.word	0x000b030b
 8008914:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008918:	4935      	ldr	r1, [pc, #212]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800891a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800891c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008920:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008922:	2d00      	cmp	r5, #0
 8008924:	f000 828e 	beq.w	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      status = ret;
 8008928:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800892a:	0259      	lsls	r1, r3, #9
 800892c:	f100 81f4 	bmi.w	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008930:	07df      	lsls	r7, r3, #31
 8008932:	d52f      	bpl.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x334>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008934:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8008936:	2a28      	cmp	r2, #40	@ 0x28
 8008938:	d82a      	bhi.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800893a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800893e:	01d1      	.short	0x01d1
 8008940:	00290029 	.word	0x00290029
 8008944:	00290029 	.word	0x00290029
 8008948:	00290029 	.word	0x00290029
 800894c:	01c40029 	.word	0x01c40029
 8008950:	00290029 	.word	0x00290029
 8008954:	00290029 	.word	0x00290029
 8008958:	00290029 	.word	0x00290029
 800895c:	04150029 	.word	0x04150029
 8008960:	00290029 	.word	0x00290029
 8008964:	00290029 	.word	0x00290029
 8008968:	00290029 	.word	0x00290029
 800896c:	01d10029 	.word	0x01d10029
 8008970:	00290029 	.word	0x00290029
 8008974:	00290029 	.word	0x00290029
 8008978:	00290029 	.word	0x00290029
 800897c:	01d10029 	.word	0x01d10029
 8008980:	00290029 	.word	0x00290029
 8008984:	00290029 	.word	0x00290029
 8008988:	00290029 	.word	0x00290029
 800898c:	01d10029 	.word	0x01d10029
      status = ret;
 8008990:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008992:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008994:	0798      	lsls	r0, r3, #30
 8008996:	d51c      	bpl.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008998:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800899a:	2a05      	cmp	r2, #5
 800899c:	f200 848f 	bhi.w	80092be <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 80089a0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80089a4:	00060013 	.word	0x00060013
 80089a8:	001303d0 	.word	0x001303d0
 80089ac:	00130013 	.word	0x00130013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089b0:	4a0f      	ldr	r2, [pc, #60]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80089b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80089b4:	f002 0203 	and.w	r2, r2, #3
 80089b8:	2a03      	cmp	r2, #3
 80089ba:	f000 8480 	beq.w	80092be <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 80089be:	2101      	movs	r1, #1
 80089c0:	1d20      	adds	r0, r4, #4
 80089c2:	f7ff fd6d 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80089ca:	2d00      	cmp	r5, #0
 80089cc:	f000 824d 	beq.w	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
      status = ret;
 80089d0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089d2:	0759      	lsls	r1, r3, #29
 80089d4:	d51f      	bpl.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089d6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80089da:	2a05      	cmp	r2, #5
 80089dc:	f200 8473 	bhi.w	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80089e0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80089e4:	00080015 	.word	0x00080015
 80089e8:	0015039e 	.word	0x0015039e
 80089ec:	00150015 	.word	0x00150015
 80089f0:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089f4:	4aa9      	ldr	r2, [pc, #676]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80089f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80089f8:	f002 0203 	and.w	r2, r2, #3
 80089fc:	2a03      	cmp	r2, #3
 80089fe:	f000 8462 	beq.w	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008a02:	2101      	movs	r1, #1
 8008a04:	1d20      	adds	r0, r4, #4
 8008a06:	f7ff fd4b 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	f000 8222 	beq.w	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      status = ret;
 8008a14:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a16:	069a      	lsls	r2, r3, #26
 8008a18:	d524      	bpl.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a1a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8008a1e:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8008a22:	f000 825c 	beq.w	8008ede <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8008a26:	f200 83be 	bhi.w	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8008a2a:	b182      	cbz	r2, 8008a4e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8008a2c:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8008a30:	f040 83c3 	bne.w	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a34:	4a99      	ldr	r2, [pc, #612]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008a36:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a38:	f002 0203 	and.w	r2, r2, #3
 8008a3c:	2a03      	cmp	r2, #3
 8008a3e:	f000 83bc 	beq.w	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008a42:	2100      	movs	r1, #0
 8008a44:	1d20      	adds	r0, r4, #4
 8008a46:	f7ff fd2b 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	f040 8219 	bne.w	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a54:	4991      	ldr	r1, [pc, #580]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008a56:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8008a5a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008a5c:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8008a60:	4302      	orrs	r2, r0
 8008a62:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a64:	065f      	lsls	r7, r3, #25
 8008a66:	d524      	bpl.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008a68:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8008a6c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8008a70:	f000 8246 	beq.w	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8008a74:	f200 83c0 	bhi.w	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a78:	b182      	cbz	r2, 8008a9c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8008a7a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008a7e:	f040 83c5 	bne.w	800920c <HAL_RCCEx_PeriphCLKConfig+0xbac>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a82:	4a86      	ldr	r2, [pc, #536]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008a84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a86:	f002 0203 	and.w	r2, r2, #3
 8008a8a:	2a03      	cmp	r2, #3
 8008a8c:	f000 83be 	beq.w	800920c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a90:	2100      	movs	r1, #0
 8008a92:	1d20      	adds	r0, r4, #4
 8008a94:	f7ff fd04 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	f040 81f0 	bne.w	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008aa2:	497e      	ldr	r1, [pc, #504]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008aa4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8008aa8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008aaa:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8008aae:	4302      	orrs	r2, r0
 8008ab0:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ab2:	0618      	lsls	r0, r3, #24
 8008ab4:	d524      	bpl.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ab6:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8008aba:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8008abe:	f000 81fd 	beq.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8008ac2:	f200 8363 	bhi.w	800918c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
 8008ac6:	b182      	cbz	r2, 8008aea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008ac8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8008acc:	f040 8368 	bne.w	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xb40>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ad0:	4a72      	ldr	r2, [pc, #456]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008ad2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ad4:	f002 0203 	and.w	r2, r2, #3
 8008ad8:	2a03      	cmp	r2, #3
 8008ada:	f000 8361 	beq.w	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8008ade:	2100      	movs	r1, #0
 8008ae0:	1d20      	adds	r0, r4, #4
 8008ae2:	f7ff fcdd 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	f040 81cd 	bne.w	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008af0:	496a      	ldr	r1, [pc, #424]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008af2:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8008af6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008af8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008afc:	4302      	orrs	r2, r0
 8008afe:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b00:	0719      	lsls	r1, r3, #28
 8008b02:	d50b      	bpl.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008b04:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8008b08:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8008b0c:	f000 8167 	beq.w	8008dde <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b10:	4862      	ldr	r0, [pc, #392]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b12:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008b14:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b1c:	06da      	lsls	r2, r3, #27
 8008b1e:	d50b      	bpl.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008b20:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8008b24:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008b28:	f000 8148 	beq.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b2c:	485b      	ldr	r0, [pc, #364]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b2e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8008b30:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008b34:	430a      	orrs	r2, r1
 8008b36:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b38:	031f      	lsls	r7, r3, #12
 8008b3a:	d522      	bpl.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->AdcClockSelection)
 8008b3c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8008b40:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8008b44:	f000 8225 	beq.w	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8008b48:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8008b4c:	d00e      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008b4e:	2900      	cmp	r1, #0
 8008b50:	f040 80b6 	bne.w	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b54:	4a51      	ldr	r2, [pc, #324]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b56:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008b58:	f002 0203 	and.w	r2, r2, #3
 8008b5c:	2a03      	cmp	r2, #3
 8008b5e:	f000 80af 	beq.w	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8008b62:	1d20      	adds	r0, r4, #4
 8008b64:	f7ff fc9c 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	f040 818e 	bne.w	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b72:	494a      	ldr	r1, [pc, #296]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008b74:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8008b78:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008b7a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8008b7e:	4302      	orrs	r2, r0
 8008b80:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b82:	0358      	lsls	r0, r3, #13
 8008b84:	d50f      	bpl.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->UsbClockSelection)
 8008b86:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8008b8a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8008b8e:	f000 81ee 	beq.w	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x90e>
 8008b92:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8008b96:	f000 80b3 	beq.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8008b9a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8008b9e:	f000 80aa 	beq.w	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x696>
      status = ret;
 8008ba2:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008ba4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ba6:	03d9      	lsls	r1, r3, #15
 8008ba8:	d51c      	bpl.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->SdmmcClockSelection)
 8008baa:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	f000 8139 	beq.w	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8008bb2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008bb6:	d16e      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bb8:	4a38      	ldr	r2, [pc, #224]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008bba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008bbc:	f002 0203 	and.w	r2, r2, #3
 8008bc0:	2a03      	cmp	r2, #3
 8008bc2:	d068      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x636>
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	1d20      	adds	r0, r4, #4
 8008bc8:	f7ff fc6a 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
 8008bcc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bce:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	f040 812f 	bne.w	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bd6:	4931      	ldr	r1, [pc, #196]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008bd8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008bda:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8008bdc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008be0:	4302      	orrs	r2, r0
 8008be2:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008be4:	009a      	lsls	r2, r3, #2
 8008be6:	d50d      	bpl.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008be8:	4a2c      	ldr	r2, [pc, #176]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008bea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008bec:	f002 0203 	and.w	r2, r2, #3
 8008bf0:	2a03      	cmp	r2, #3
 8008bf2:	d04e      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8008bf4:	2102      	movs	r1, #2
 8008bf6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008bfa:	f7ff fcc1 	bl	8008580 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008bfe:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d146      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c04:	039f      	lsls	r7, r3, #14
 8008c06:	d435      	bmi.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x614>
  if (status == HAL_OK)
 8008c08:	1e30      	subs	r0, r6, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c0e:	02de      	lsls	r6, r3, #11
 8008c10:	d506      	bpl.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c12:	4922      	ldr	r1, [pc, #136]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c14:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8008c16:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008c18:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008c1c:	432a      	orrs	r2, r5
 8008c1e:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c20:	00dd      	lsls	r5, r3, #3
 8008c22:	d507      	bpl.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c24:	491d      	ldr	r1, [pc, #116]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c26:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8008c2a:	690a      	ldr	r2, [r1, #16]
 8008c2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c30:	432a      	orrs	r2, r5
 8008c32:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c34:	0299      	lsls	r1, r3, #10
 8008c36:	d506      	bpl.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c38:	4918      	ldr	r1, [pc, #96]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c3a:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8008c3c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008c3e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008c42:	432a      	orrs	r2, r5
 8008c44:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c46:	005a      	lsls	r2, r3, #1
 8008c48:	d509      	bpl.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c4a:	4a14      	ldr	r2, [pc, #80]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c4c:	6911      	ldr	r1, [r2, #16]
 8008c4e:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8008c52:	6111      	str	r1, [r2, #16]
 8008c54:	6911      	ldr	r1, [r2, #16]
 8008c56:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8008c5a:	4329      	orrs	r1, r5
 8008c5c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	da06      	bge.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c62:	4a0e      	ldr	r2, [pc, #56]	@ (8008c9c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8008c64:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008c66:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008c68:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8008c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8008c74:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8008c76:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008c7a:	f000 80c1 	beq.w	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 8008c7e:	f240 8108 	bls.w	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008c82:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8008c86:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008c8a:	f000 80be 	beq.w	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status=HAL_ERROR;
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7bd      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8008c92:	2601      	movs	r6, #1
 8008c94:	e7b6      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      status = ret;
 8008c96:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008c98:	4635      	mov	r5, r6
 8008c9a:	e7a3      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008c9c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca0:	49a8      	ldr	r1, [pc, #672]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ca2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008ca4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008ca8:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	f040 80c4 	bne.w	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cb0:	49a4      	ldr	r1, [pc, #656]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008cb2:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008cb4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008cb6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008cba:	4302      	orrs	r2, r0
 8008cbc:	650a      	str	r2, [r1, #80]	@ 0x50
 8008cbe:	e61d      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8008cc0:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8008cc2:	4635      	mov	r5, r6
 8008cc4:	e75d      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x522>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cc6:	4a9f      	ldr	r2, [pc, #636]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008cc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008cca:	f002 0203 	and.w	r2, r2, #3
 8008cce:	2a03      	cmp	r2, #3
 8008cd0:	f43f ae5e 	beq.w	8008990 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	1d20      	adds	r0, r4, #4
 8008cd8:	f7ff fbe2 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	f040 80b7 	bne.w	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ce6:	4997      	ldr	r1, [pc, #604]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ce8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8008cea:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008cec:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8008cf0:	4302      	orrs	r2, r0
 8008cf2:	654a      	str	r2, [r1, #84]	@ 0x54
 8008cf4:	e64e      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf6:	4993      	ldr	r1, [pc, #588]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008cf8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008cfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008cfe:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	f040 809b 	bne.w	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d06:	498f      	ldr	r1, [pc, #572]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008d08:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8008d0c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008d0e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8008d12:	4302      	orrs	r2, r0
 8008d14:	654a      	str	r2, [r1, #84]	@ 0x54
 8008d16:	e746      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d18:	4f8b      	ldr	r7, [pc, #556]	@ (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d20:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008d22:	f7fe ff2f 	bl	8007b84 <HAL_GetTick>
 8008d26:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d28:	e006      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d2a:	f7fe ff2b 	bl	8007b84 <HAL_GetTick>
 8008d2e:	eba0 0008 	sub.w	r0, r0, r8
 8008d32:	2864      	cmp	r0, #100	@ 0x64
 8008d34:	f200 82ad 	bhi.w	8009292 <HAL_RCCEx_PeriphCLKConfig+0xc32>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	05da      	lsls	r2, r3, #23
 8008d3c:	d5f5      	bpl.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
    if(ret == HAL_OK)
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	f040 82a8 	bne.w	8009294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d44:	4a7f      	ldr	r2, [pc, #508]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008d46:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8008d4a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8008d4c:	4059      	eors	r1, r3
 8008d4e:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8008d52:	d00b      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d54:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d56:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d58:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d5c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8008d60:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d62:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8008d64:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8008d68:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8008d6a:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d70:	f000 82b1 	beq.w	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d74:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008d78:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8008d7c:	f000 82bf 	beq.w	80092fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8008d80:	4970      	ldr	r1, [pc, #448]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008d82:	690a      	ldr	r2, [r1, #16]
 8008d84:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8008d88:	610a      	str	r2, [r1, #16]
 8008d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d90:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8008d92:	430b      	orrs	r3, r1
 8008d94:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	e5ca      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d9a:	496a      	ldr	r1, [pc, #424]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008d9c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008d9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008da2:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8008da4:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	f040 813c 	bne.w	8009024 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dac:	4965      	ldr	r1, [pc, #404]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008dae:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8008db0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008db2:	f022 0207 	bic.w	r2, r2, #7
 8008db6:	4302      	orrs	r2, r0
 8008db8:	650a      	str	r2, [r1, #80]	@ 0x50
 8008dba:	e48a      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dbc:	4a61      	ldr	r2, [pc, #388]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008dbe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008dc0:	f002 0203 	and.w	r2, r2, #3
 8008dc4:	2a03      	cmp	r2, #3
 8008dc6:	d008      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8008dc8:	2102      	movs	r1, #2
 8008dca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008dce:	f7ff fbd7 	bl	8008580 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dd2:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f43f aeaf 	beq.w	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        status = HAL_ERROR;
 8008dda:	2601      	movs	r6, #1
 8008ddc:	e6ac      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dde:	4a59      	ldr	r2, [pc, #356]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008de0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008de2:	f002 0203 	and.w	r2, r2, #3
 8008de6:	2a03      	cmp	r2, #3
 8008de8:	d008      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8008dea:	2102      	movs	r1, #2
 8008dec:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008df0:	f7ff fbc6 	bl	8008580 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008df4:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f43f ae90 	beq.w	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
          status = HAL_ERROR;
 8008dfc:	2601      	movs	r6, #1
 8008dfe:	e68d      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e00:	4850      	ldr	r0, [pc, #320]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e02:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008e04:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008e08:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	f47f af3f 	bne.w	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e10:	4d4c      	ldr	r5, [pc, #304]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
  if (status == HAL_OK)
 8008e12:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e14:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 8008e16:	bf18      	it	ne
 8008e18:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e1a:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	656a      	str	r2, [r5, #84]	@ 0x54
 8008e22:	e6f4      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4947      	ldr	r1, [pc, #284]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e26:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008e28:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008e2c:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8008e2e:	2d00      	cmp	r5, #0
 8008e30:	f43f aed1 	beq.w	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x576>
      status = ret;
 8008e34:	462e      	mov	r6, r5
 8008e36:	e6d5      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      status = ret;
 8008e38:	462e      	mov	r6, r5
 8008e3a:	e55f      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8008e3c:	462e      	mov	r6, r5
 8008e3e:	e6b2      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x546>
      status = ret;
 8008e40:	462e      	mov	r6, r5
 8008e42:	e4d8      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e44:	493f      	ldr	r1, [pc, #252]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e46:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8008e48:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8008e4a:	f022 0203 	bic.w	r2, r2, #3
 8008e4e:	4302      	orrs	r2, r0
 8008e50:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8008e52:	e56a      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      status = ret;
 8008e54:	462e      	mov	r6, r5
 8008e56:	e59d      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e58:	493a      	ldr	r1, [pc, #232]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e5a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008e5e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008e60:	f022 0207 	bic.w	r2, r2, #7
 8008e64:	4302      	orrs	r2, r0
 8008e66:	658a      	str	r2, [r1, #88]	@ 0x58
 8008e68:	e5d5      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e6a:	4936      	ldr	r1, [pc, #216]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e6c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008e6e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8008e70:	f022 0207 	bic.w	r2, r2, #7
 8008e74:	4302      	orrs	r2, r0
 8008e76:	654a      	str	r2, [r1, #84]	@ 0x54
 8008e78:	e5ab      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 8008e7a:	462e      	mov	r6, r5
 8008e7c:	e507      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      status = ret;
 8008e7e:	462e      	mov	r6, r5
 8008e80:	e52c      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      status = ret;
 8008e82:	462e      	mov	r6, r5
 8008e84:	e615      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      status = ret;
 8008e86:	462e      	mov	r6, r5
 8008e88:	e5ec      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 8008e8a:	462e      	mov	r6, r5
 8008e8c:	e638      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      status = ret;
 8008e8e:	462e      	mov	r6, r5
 8008e90:	e677      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->RngClockSelection)
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	f47f aefb 	bne.w	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8008e98:	e7b7      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008e9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008e9e:	f002 0203 	and.w	r2, r2, #3
 8008ea2:	2a03      	cmp	r2, #3
 8008ea4:	f000 81a4 	beq.w	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008eae:	f7ff fb67 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008eb2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008eb4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	d1e1      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008eba:	e507      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ebc:	4a21      	ldr	r2, [pc, #132]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ebe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ec0:	f002 0203 	and.w	r2, r2, #3
 8008ec4:	2a03      	cmp	r2, #3
 8008ec6:	f000 816b 	beq.w	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 8008eca:	2102      	movs	r1, #2
 8008ecc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ed0:	f7ff fb56 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008ed4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ed6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	d1d6      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8008edc:	e608      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ede:	4a19      	ldr	r2, [pc, #100]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ee0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008ee2:	f002 0203 	and.w	r2, r2, #3
 8008ee6:	2a03      	cmp	r2, #3
 8008ee8:	f000 8167 	beq.w	80091ba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8008eec:	2102      	movs	r1, #2
 8008eee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ef2:	f7ff fb45 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008ef6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ef8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008efa:	2d00      	cmp	r5, #0
 8008efc:	d1c3      	bne.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x826>
 8008efe:	e5a9      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f00:	4a10      	ldr	r2, [pc, #64]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f02:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f04:	f002 0203 	and.w	r2, r2, #3
 8008f08:	2a03      	cmp	r2, #3
 8008f0a:	f000 817f 	beq.w	800920c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008f0e:	2102      	movs	r1, #2
 8008f10:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008f14:	f7ff fb34 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008f18:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f1a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	d1b0      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x822>
 8008f20:	e5bf      	b.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f22:	4a08      	ldr	r2, [pc, #32]	@ (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008f24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f26:	f002 0203 	and.w	r2, r2, #3
 8008f2a:	2a03      	cmp	r2, #3
 8008f2c:	f000 81cf 	beq.w	80092ce <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8008f30:	2102      	movs	r1, #2
 8008f32:	1d20      	adds	r0, r4, #4
 8008f34:	f7ff fab4 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
 8008f38:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f3a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	f47f acf3 	bne.w	8008928 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8008f42:	e77f      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008f44:	58024400 	.word	0x58024400
 8008f48:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f4c:	4ac3      	ldr	r2, [pc, #780]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8008f4e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f50:	f002 0203 	and.w	r2, r2, #3
 8008f54:	2a03      	cmp	r2, #3
 8008f56:	f000 8198 	beq.w	800928a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 8008f5a:	2102      	movs	r1, #2
 8008f5c:	1d20      	adds	r0, r4, #4
 8008f5e:	f7ff fa9f 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
 8008f62:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f64:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	f47f af6a 	bne.w	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8008f6c:	e43c      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f6e:	4abb      	ldr	r2, [pc, #748]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8008f70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f72:	f002 0203 	and.w	r2, r2, #3
 8008f76:	2a03      	cmp	r2, #3
 8008f78:	f43f ae13 	beq.w	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x542>
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008f82:	f7ff fafd 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008f86:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f88:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	f47f af56 	bne.w	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8008f90:	e6b9      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f92:	4ab2      	ldr	r2, [pc, #712]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8008f94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f96:	f002 0203 	and.w	r2, r2, #3
 8008f9a:	2a03      	cmp	r2, #3
 8008f9c:	f43f ae90 	beq.w	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8008fa0:	2102      	movs	r1, #2
 8008fa2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008fa6:	f7ff faeb 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008faa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fac:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	f47f af6d 	bne.w	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008fb4:	e5dd      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x512>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fb6:	4aa9      	ldr	r2, [pc, #676]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8008fb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008fba:	f002 0203 	and.w	r2, r2, #3
 8008fbe:	2a03      	cmp	r2, #3
 8008fc0:	f000 8108 	beq.w	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008fca:	f7ff fad9 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008fce:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fd0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	f47f af51 	bne.w	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008fd8:	e452      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x220>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fda:	4aa0      	ldr	r2, [pc, #640]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8008fdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008fde:	f002 0203 	and.w	r2, r2, #3
 8008fe2:	2a03      	cmp	r2, #3
 8008fe4:	f000 8143 	beq.w	800926e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8008fe8:	2100      	movs	r1, #0
 8008fea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008fee:	f7ff fac7 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8008ff2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ff4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	f43f ab89 	beq.w	800870e <HAL_RCCEx_PeriphCLKConfig+0xae>
      status = ret;
 8008ffc:	462e      	mov	r6, r5
 8008ffe:	f7ff bb8d 	b.w	800871c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009002:	4a96      	ldr	r2, [pc, #600]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009004:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009006:	f002 0203 	and.w	r2, r2, #3
 800900a:	2a03      	cmp	r2, #3
 800900c:	f43f ab5f 	beq.w	80086ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009010:	2100      	movs	r1, #0
 8009012:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009016:	f7ff fab3 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 800901a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800901c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800901e:	2d00      	cmp	r5, #0
 8009020:	f43f aec4 	beq.w	8008dac <HAL_RCCEx_PeriphCLKConfig+0x74c>
      status = ret;
 8009024:	462e      	mov	r6, r5
 8009026:	f7ff bb54 	b.w	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800902a:	4a8c      	ldr	r2, [pc, #560]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800902c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800902e:	f002 0203 	and.w	r2, r2, #3
 8009032:	2a03      	cmp	r2, #3
 8009034:	f43f ab4b 	beq.w	80086ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009038:	2100      	movs	r1, #0
 800903a:	1d20      	adds	r0, r4, #4
 800903c:	f7ff fa30 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	4605      	mov	r5, r0
      break;
 8009044:	e6af      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009046:	4985      	ldr	r1, [pc, #532]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009048:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800904a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800904e:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 8009050:	f7ff bb5a 	b.w	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009054:	4a81      	ldr	r2, [pc, #516]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009056:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009058:	f002 0203 	and.w	r2, r2, #3
 800905c:	2a03      	cmp	r2, #3
 800905e:	f000 80ec 	beq.w	800923a <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8009062:	2100      	movs	r1, #0
 8009064:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009068:	f7ff fa8a 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 800906c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800906e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009070:	2d00      	cmp	r5, #0
 8009072:	f43f abe0 	beq.w	8008836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      status = ret;
 8009076:	462e      	mov	r6, r5
 8009078:	f7ff bbe4 	b.w	8008844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800907c:	4a77      	ldr	r2, [pc, #476]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800907e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009080:	f002 0203 	and.w	r2, r2, #3
 8009084:	2a03      	cmp	r2, #3
 8009086:	f000 80cc 	beq.w	8009222 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800908a:	2100      	movs	r1, #0
 800908c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009090:	f7ff fa76 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8009094:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009096:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009098:	2d00      	cmp	r5, #0
 800909a:	f43f ab89 	beq.w	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      status = ret;
 800909e:	462e      	mov	r6, r5
 80090a0:	f7ff bb8e 	b.w	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090a4:	4a6d      	ldr	r2, [pc, #436]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090a6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090a8:	f002 0203 	and.w	r2, r2, #3
 80090ac:	2a03      	cmp	r2, #3
 80090ae:	f000 80e6 	beq.w	800927e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80090b2:	2102      	movs	r1, #2
 80090b4:	3024      	adds	r0, #36	@ 0x24
 80090b6:	f7ff fa63 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 80090ba:	4606      	mov	r6, r0
      break;
 80090bc:	f7ff baf1 	b.w	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c0:	4966      	ldr	r1, [pc, #408]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090c2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80090c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80090c8:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	f43f ab47 	beq.w	800875e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      status = ret;
 80090d0:	462e      	mov	r6, r5
 80090d2:	f7ff bb4c 	b.w	800876e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d6:	4861      	ldr	r0, [pc, #388]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090d8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80090da:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80090de:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 80090e0:	f7ff bae2 	b.w	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e4:	495d      	ldr	r1, [pc, #372]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090e6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80090e8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80090ec:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 80090ee:	f7ff bb5c 	b.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090f2:	4a5a      	ldr	r2, [pc, #360]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80090f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090f6:	f002 0203 	and.w	r2, r2, #3
 80090fa:	2a03      	cmp	r2, #3
 80090fc:	f000 80a9 	beq.w	8009252 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8009100:	2100      	movs	r1, #0
 8009102:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009106:	f7ff fa3b 	bl	8008580 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	4605      	mov	r5, r0
      break;
 800910e:	f7ff bb23 	b.w	8008758 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009112:	4952      	ldr	r1, [pc, #328]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009114:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8009116:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800911a:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 800911c:	f7ff bb88 	b.w	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009120:	4a4e      	ldr	r2, [pc, #312]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009122:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009124:	f002 0203 	and.w	r2, r2, #3
 8009128:	2a03      	cmp	r2, #3
 800912a:	f000 80cc 	beq.w	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800912e:	2101      	movs	r1, #1
 8009130:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009134:	f7ff fa24 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8009138:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800913a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800913c:	2d00      	cmp	r5, #0
 800913e:	f47f ac69 	bne.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009142:	e689      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009144:	4a45      	ldr	r2, [pc, #276]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8009146:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009148:	f002 0203 	and.w	r2, r2, #3
 800914c:	2a03      	cmp	r2, #3
 800914e:	f000 80b6 	beq.w	80092be <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8009152:	2101      	movs	r1, #1
 8009154:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009158:	f7ff fa12 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 800915c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800915e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009160:	2d00      	cmp	r5, #0
 8009162:	f47f ac35 	bne.w	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8009166:	e680      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009168:	4a3c      	ldr	r2, [pc, #240]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800916a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800916c:	f002 0203 	and.w	r2, r2, #3
 8009170:	2a03      	cmp	r2, #3
 8009172:	f43f ac0d 	beq.w	8008990 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009176:	2101      	movs	r1, #1
 8009178:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800917c:	f7ff fa00 	bl	8008580 <RCCEx_PLL3_Config.part.0>
 8009180:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009182:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009184:	2d00      	cmp	r5, #0
 8009186:	f47f ae65 	bne.w	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800918a:	e5ac      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800918c:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 8009190:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8009194:	f43f aca9 	beq.w	8008aea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009198:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 800919c:	f43f aca5 	beq.w	8008aea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      status = ret;
 80091a0:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80091a2:	4635      	mov	r5, r6
 80091a4:	e4ac      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80091a6:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 80091aa:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80091ae:	f43f ac4e 	beq.w	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80091b2:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80091b6:	f43f ac4a 	beq.w	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      status = ret;
 80091ba:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80091bc:	4635      	mov	r5, r6
 80091be:	e451      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Spi45ClockSelection)
 80091c0:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 80091c4:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 80091c8:	f43f ab57 	beq.w	800887a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80091cc:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 80091d0:	f43f ab53 	beq.w	800887a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      status = ret;
 80091d4:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80091d6:	4635      	mov	r5, r6
 80091d8:	f7ff bb59 	b.w	800888e <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80091dc:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 80091e0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 80091e4:	f43f ab6f 	beq.w	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80091e8:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 80091ec:	f43f ab6b 	beq.w	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x266>
      status = ret;
 80091f0:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80091f2:	4635      	mov	r5, r6
 80091f4:	f7ff bb72 	b.w	80088dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80091f8:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 80091fc:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009200:	f43f ac4c 	beq.w	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009204:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8009208:	f43f ac48 	beq.w	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x43c>
      status = ret;
 800920c:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800920e:	4635      	mov	r5, r6
 8009210:	e44f      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009212:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8009216:	f43f aac8 	beq.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800921a:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800921e:	f43f aac4 	beq.w	80087aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      status = ret;
 8009222:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009224:	4635      	mov	r5, r6
 8009226:	f7ff bacb 	b.w	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Spi123ClockSelection)
 800922a:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 800922e:	f43f aaff 	beq.w	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8009232:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8009236:	f43f aafb 	beq.w	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 800923a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800923c:	4635      	mov	r5, r6
 800923e:	f7ff bb01 	b.w	8008844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009242:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8009246:	f43f aa87 	beq.w	8008758 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800924a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800924e:	f43f aa83 	beq.w	8008758 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      status = ret;
 8009252:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009254:	4635      	mov	r5, r6
 8009256:	f7ff ba8a 	b.w	800876e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800925a:	bf00      	nop
 800925c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai23ClockSelection)
 8009260:	2ac0      	cmp	r2, #192	@ 0xc0
 8009262:	f43f aa51 	beq.w	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8009266:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800926a:	f43f aa4d 	beq.w	8008708 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      status = ret;
 800926e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8009270:	4635      	mov	r5, r6
 8009272:	f7ff ba53 	b.w	800871c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009276:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 800927a:	f43f aa15 	beq.w	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 800927e:	2601      	movs	r6, #1
 8009280:	f7ff ba19 	b.w	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->QspiClockSelection)
 8009284:	2a30      	cmp	r2, #48	@ 0x30
 8009286:	f43f aaac 	beq.w	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      status = ret;
 800928a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800928c:	4635      	mov	r5, r6
 800928e:	f7ff bab2 	b.w	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_TIMEOUT;
 8009292:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009294:	6823      	ldr	r3, [r4, #0]
      status = ret;
 8009296:	462e      	mov	r6, r5
 8009298:	f7ff bb4a 	b.w	8008930 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800929c:	4a1f      	ldr	r2, [pc, #124]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800929e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80092a0:	f002 0203 	and.w	r2, r2, #3
 80092a4:	2a03      	cmp	r2, #3
 80092a6:	f43f ab27 	beq.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80092aa:	2101      	movs	r1, #1
 80092ac:	1d20      	adds	r0, r4, #4
 80092ae:	f7ff f8f7 	bl	80084a0 <RCCEx_PLL2_Config.part.0>
 80092b2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	f47f adbe 	bne.w	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80092bc:	e4f8      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      status = ret;
 80092be:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80092c0:	4635      	mov	r5, r6
 80092c2:	f7ff bb86 	b.w	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 80092c6:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80092c8:	4635      	mov	r5, r6
 80092ca:	f7ff bba4 	b.w	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 80092ce:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80092d0:	4635      	mov	r5, r6
 80092d2:	f7ff bb2a 	b.w	800892a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        tickstart = HAL_GetTick();
 80092d6:	f7fe fc55 	bl	8007b84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092da:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800931c <HAL_RCCEx_PeriphCLKConfig+0xcbc>
        tickstart = HAL_GetTick();
 80092de:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e0:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092e4:	e004      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc90>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e6:	f7fe fc4d 	bl	8007b84 <HAL_GetTick>
 80092ea:	1bc0      	subs	r0, r0, r7
 80092ec:	4548      	cmp	r0, r9
 80092ee:	d810      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092f0:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80092f4:	079b      	lsls	r3, r3, #30
 80092f6:	d5f6      	bpl.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80092fc:	e53a      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80092fe:	4807      	ldr	r0, [pc, #28]	@ (800931c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009300:	4a07      	ldr	r2, [pc, #28]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8009302:	6901      	ldr	r1, [r0, #16]
 8009304:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009308:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800930c:	430a      	orrs	r2, r1
 800930e:	6102      	str	r2, [r0, #16]
 8009310:	e53b      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        status = ret;
 8009312:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	4635      	mov	r5, r6
 8009318:	f7ff bb0a 	b.w	8008930 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800931c:	58024400 	.word	0x58024400
 8009320:	00ffffcf 	.word	0x00ffffcf

08009324 <LL_ADC_Init>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009324:	6882      	ldr	r2, [r0, #8]
 8009326:	07d3      	lsls	r3, r2, #31
 8009328:	d411      	bmi.n	800934e <LL_ADC_Init+0x2a>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800932a:	4603      	mov	r3, r0
 800932c:	68c0      	ldr	r0, [r0, #12]
{
 800932e:	b430      	push	{r4, r5}
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8009330:	e891 0034 	ldmia.w	r1, {r2, r4, r5}
    MODIFY_REG(ADCx->CFGR,
 8009334:	4907      	ldr	r1, [pc, #28]	@ (8009354 <LL_ADC_Init+0x30>)
 8009336:	432a      	orrs	r2, r5
 8009338:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 800933a:	2001      	movs	r0, #1
    MODIFY_REG(ADCx->CFGR,
 800933c:	430a      	orrs	r2, r1
 800933e:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009346:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8009348:	bc30      	pop	{r4, r5}
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 800934a:	611a      	str	r2, [r3, #16]
}
 800934c:	4770      	bx	lr
    status = ERROR;
 800934e:	2000      	movs	r0, #0
}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	ffffbfe3 	.word	0xffffbfe3

08009358 <LL_ADC_REG_Init>:
 8009358:	6882      	ldr	r2, [r0, #8]
 800935a:	07d3      	lsls	r3, r2, #31
 800935c:	d417      	bmi.n	800938e <LL_ADC_REG_Init+0x36>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800935e:	4603      	mov	r3, r0
    {
      MODIFY_REG(ADCx->CFGR,
 8009360:	6948      	ldr	r0, [r1, #20]
{
 8009362:	b470      	push	{r4, r5, r6}
      MODIFY_REG(ADCx->CFGR,
 8009364:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
 8009368:	e9d1 2400 	ldrd	r2, r4, [r1]
 800936c:	4332      	orrs	r2, r6
 800936e:	432a      	orrs	r2, r5
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8009370:	b97c      	cbnz	r4, 8009392 <LL_ADC_REG_Init+0x3a>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8009372:	4302      	orrs	r2, r0
 8009374:	490b      	ldr	r1, [pc, #44]	@ (80093a4 <LL_ADC_REG_Init+0x4c>)
 8009376:	68d8      	ldr	r0, [r3, #12]
 8009378:	4001      	ands	r1, r0
 800937a:	430a      	orrs	r2, r1
 800937c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800937e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 8009380:	2001      	movs	r0, #1
 8009382:	f022 020f 	bic.w	r2, r2, #15
 8009386:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8009388:	bc70      	pop	{r4, r5, r6}
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
 800938c:	4770      	bx	lr
    status = ERROR;
 800938e:	2000      	movs	r0, #0
}
 8009390:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8009392:	688d      	ldr	r5, [r1, #8]
 8009394:	4302      	orrs	r2, r0
 8009396:	4903      	ldr	r1, [pc, #12]	@ (80093a4 <LL_ADC_REG_Init+0x4c>)
 8009398:	68d8      	ldr	r0, [r3, #12]
 800939a:	4001      	ands	r1, r0
 800939c:	430a      	orrs	r2, r1
 800939e:	432a      	orrs	r2, r5
 80093a0:	60da      	str	r2, [r3, #12]
 80093a2:	e7ec      	b.n	800937e <LL_ADC_REG_Init+0x26>
 80093a4:	fff0c01c 	.word	0xfff0c01c

080093a8 <LL_DAC_Init>:
  return ((READ_BIT(DACx->CR,
 80093a8:	f04f 0c01 	mov.w	ip, #1
 80093ac:	f001 0110 	and.w	r1, r1, #16
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80093b0:	4603      	mov	r3, r0
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	fa0c fc01 	lsl.w	ip, ip, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80093b8:	ea3c 0c00 	bics.w	ip, ip, r0
 80093bc:	d029      	beq.n	8009412 <LL_DAC_Init+0x6a>
 80093be:	b470      	push	{r4, r5, r6}
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    {
      MODIFY_REG(DACx->CR,
 80093c0:	e9d2 4000 	ldrd	r4, r0, [r2]
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80093c4:	b9c0      	cbnz	r0, 80093f8 <LL_DAC_Init+0x50>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80093c6:	25fc      	movs	r5, #252	@ 0xfc
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	408c      	lsls	r4, r1
 80093cc:	408d      	lsls	r5, r1
 80093ce:	ea20 0005 	bic.w	r0, r0, r5
 80093d2:	4320      	orrs	r0, r4
 80093d4:	6018      	str	r0, [r3, #0]
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    
    MODIFY_REG(DACx->MCR,
 80093d6:	6955      	ldr	r5, [r2, #20]
 80093d8:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80093da:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 80093de:	ea40 0206 	orr.w	r2, r0, r6
 80093e2:	2007      	movs	r0, #7
 80093e4:	432a      	orrs	r2, r5
 80093e6:	4088      	lsls	r0, r1
 80093e8:	408a      	lsls	r2, r1
 80093ea:	ea24 0100 	bic.w	r1, r4, r0
  ErrorStatus status = SUCCESS;
 80093ee:	2001      	movs	r0, #1
    MODIFY_REG(DACx->MCR,
 80093f0:	430a      	orrs	r2, r1
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 80093f2:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(DACx->MCR,
 80093f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80093f6:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 80093f8:	4320      	orrs	r0, r4
 80093fa:	f640 75fc 	movw	r5, #4092	@ 0xffc
 80093fe:	6894      	ldr	r4, [r2, #8]
 8009400:	408d      	lsls	r5, r1
 8009402:	4320      	orrs	r0, r4
 8009404:	681c      	ldr	r4, [r3, #0]
 8009406:	4088      	lsls	r0, r1
 8009408:	ea24 0405 	bic.w	r4, r4, r5
 800940c:	4320      	orrs	r0, r4
 800940e:	6018      	str	r0, [r3, #0]
 8009410:	e7e1      	b.n	80093d6 <LL_DAC_Init+0x2e>
    status = ERROR;
 8009412:	2000      	movs	r0, #0
}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop

08009418 <LL_DMA_Init>:
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR,
 8009418:	4b2b      	ldr	r3, [pc, #172]	@ (80094c8 <LL_DMA_Init+0xb0>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800941a:	b530      	push	{r4, r5, lr}
 800941c:	f813 e001 	ldrb.w	lr, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8009420:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8009424:	f850 500e 	ldr.w	r5, [r0, lr]
 8009428:	eb00 0c0e 	add.w	ip, r0, lr
 800942c:	4323      	orrs	r3, r4
                        DMA_InitStruct->Mode                    | \
 800942e:	6914      	ldr	r4, [r2, #16]
 8009430:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 8009432:	6954      	ldr	r4, [r2, #20]
 8009434:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8009436:	6994      	ldr	r4, [r2, #24]
 8009438:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 800943a:	69d4      	ldr	r4, [r2, #28]
 800943c:	4323      	orrs	r3, r4
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 800943e:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8009440:	4323      	orrs	r3, r4
 8009442:	4c22      	ldr	r4, [pc, #136]	@ (80094cc <LL_DMA_Init+0xb4>)
 8009444:	402c      	ands	r4, r5
 8009446:	4323      	orrs	r3, r4
 8009448:	f840 300e 	str.w	r3, [r0, lr]
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
                        DMA_InitStruct->Priority
                       );

  if (DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 800944c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800944e:	b1c3      	cbz	r3, 8009482 <LL_DMA_Init+0x6a>
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8009450:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8009454:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8009456:	f024 0407 	bic.w	r4, r4, #7
 800945a:	432b      	orrs	r3, r5
 800945c:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 800945e:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8009460:	f8cc 3014 	str.w	r3, [ip, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8009464:	f850 300e 	ldr.w	r3, [r0, lr]
 8009468:	f023 73c0 	bic.w	r3, r3, #25165824	@ 0x1800000
 800946c:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 800946e:	6b94      	ldr	r4, [r2, #56]	@ 0x38
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8009470:	f840 300e 	str.w	r3, [r0, lr]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 8009474:	f850 300e 	ldr.w	r3, [r0, lr]
 8009478:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800947c:	4323      	orrs	r3, r4
 800947e:	f840 300e 	str.w	r3, [r0, lr]

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 8009482:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8009484:	f8df e050 	ldr.w	lr, [pc, #80]	@ 80094d8 <LL_DMA_Init+0xc0>
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8009488:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800948c:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800948e:	4c10      	ldr	r4, [pc, #64]	@ (80094d0 <LL_DMA_Init+0xb8>)
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8009490:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8009494:	f8dc 3004 	ldr.w	r3, [ip, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8009498:	440c      	add	r4, r1
 800949a:	6a55      	ldr	r5, [r2, #36]	@ 0x24
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 800949c:	ea03 0e0e 	and.w	lr, r3, lr
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <LL_DMA_Init+0xbc>)
 80094a2:	1ac0      	subs	r0, r0, r3
 80094a4:	bf18      	it	ne
 80094a6:	2001      	movne	r0, #1
 80094a8:	0143      	lsls	r3, r0, #5
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80094aa:	6a10      	ldr	r0, [r2, #32]
 80094ac:	ea4e 0000 	orr.w	r0, lr, r0
 80094b0:	f8cc 0004 	str.w	r0, [ip, #4]
   * - PeriphRequest:             DMA_SxCR_CHSEL[3:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Stream, DMA_InitStruct->PeriphRequest);

  return (uint32_t)SUCCESS;
}
 80094b4:	2001      	movs	r0, #1
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80094b6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80094ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80094be:	432a      	orrs	r2, r5
 80094c0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80094c4:	bd30      	pop	{r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	0800c404 	.word	0x0800c404
 80094cc:	fffc801f 	.word	0xfffc801f
 80094d0:	10008200 	.word	0x10008200
 80094d4:	40020000 	.word	0x40020000
 80094d8:	ffff0000 	.word	0xffff0000

080094dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80094e0:	680c      	ldr	r4, [r1, #0]
 80094e2:	fa94 f2a4 	rbit	r2, r4
 80094e6:	fab2 f282 	clz	r2, r2
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80094ea:	f8d1 8004 	ldr.w	r8, [r1, #4]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80094ee:	fa34 f502 	lsrs.w	r5, r4, r2
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80094f2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80094f6:	f000 80a0 	beq.w	800963a <LL_GPIO_Init+0x15e>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d922      	bls.n	8009544 <LL_GPIO_Init+0x68>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80094fe:	f04f 0e01 	mov.w	lr, #1
 8009502:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin != 0x00000000U)
 8009506:	3201      	adds	r2, #1
 8009508:	4023      	ands	r3, r4
 800950a:	fb03 f303 	mul.w	r3, r3, r3
 800950e:	d013      	beq.n	8009538 <LL_GPIO_Init+0x5c>
 8009510:	f8d0 c000 	ldr.w	ip, [r0]
 8009514:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8009518:	fb08 f503 	mul.w	r5, r8, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800951c:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800951e:	ea2c 0c07 	bic.w	ip, ip, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009522:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009526:	ea45 050c 	orr.w	r5, r5, ip
 800952a:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800952c:	68c5      	ldr	r5, [r0, #12]
 800952e:	ea25 0c07 	bic.w	ip, r5, r7
 8009532:	ea43 030c 	orr.w	r3, r3, ip
 8009536:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009538:	fa34 f302 	lsrs.w	r3, r4, r2
 800953c:	d1e1      	bne.n	8009502 <LL_GPIO_Init+0x26>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800953e:	2001      	movs	r0, #1
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	f1b8 0f02 	cmp.w	r8, #2
 8009548:	d154      	bne.n	80095f4 <LL_GPIO_Init+0x118>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800954a:	2701      	movs	r7, #1
 800954c:	fa07 fc02 	lsl.w	ip, r7, r2
    if (currentpin != 0x00000000U)
 8009550:	ea1c 0c04 	ands.w	ip, ip, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009554:	fb0c f30c 	mul.w	r3, ip, ip
 8009558:	d033      	beq.n	80095c2 <LL_GPIO_Init+0xe6>
 800955a:	6805      	ldr	r5, [r0, #0]
 800955c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009560:	688e      	ldr	r6, [r1, #8]
        if (currentpin < LL_GPIO_PIN_8)
 8009562:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009566:	ea25 050e 	bic.w	r5, r5, lr
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800956a:	f8d1 8010 	ldr.w	r8, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800956e:	fb03 f606 	mul.w	r6, r3, r6
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009572:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009576:	fb08 f803 	mul.w	r8, r8, r3
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800957a:	fb03 f303 	mul.w	r3, r3, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800957e:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009580:	6885      	ldr	r5, [r0, #8]
 8009582:	ea25 050e 	bic.w	r5, r5, lr
 8009586:	ea46 0605 	orr.w	r6, r6, r5
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800958a:	ea4f 251c 	mov.w	r5, ip, lsr #8
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800958e:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009590:	68c6      	ldr	r6, [r0, #12]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009592:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009596:	ea26 060e 	bic.w	r6, r6, lr
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800959a:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800959e:	ea46 0608 	orr.w	r6, r6, r8
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80095a2:	ebc5 1e05 	rsb	lr, r5, r5, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80095a6:	ebc3 1803 	rsb	r8, r3, r3, lsl #4
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80095aa:	60c6      	str	r6, [r0, #12]
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80095ac:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80095ae:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80095b2:	fb06 f505 	mul.w	r5, r6, r5
        if (currentpin < LL_GPIO_PIN_8)
 80095b6:	d813      	bhi.n	80095e0 <LL_GPIO_Init+0x104>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80095b8:	6a05      	ldr	r5, [r0, #32]
 80095ba:	ea25 0508 	bic.w	r5, r5, r8
 80095be:	432b      	orrs	r3, r5
 80095c0:	6203      	str	r3, [r0, #32]
    pinpos++;
 80095c2:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80095c4:	fa34 f302 	lsrs.w	r3, r4, r2
 80095c8:	d1c0      	bne.n	800954c <LL_GPIO_Init+0x70>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80095ca:	6843      	ldr	r3, [r0, #4]
 80095cc:	68ca      	ldr	r2, [r1, #12]
 80095ce:	ea23 0304 	bic.w	r3, r3, r4
 80095d2:	fb02 f404 	mul.w	r4, r2, r4
 80095d6:	4323      	orrs	r3, r4
 80095d8:	6043      	str	r3, [r0, #4]
}
 80095da:	2001      	movs	r0, #1
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80095e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    pinpos++;
 80095e2:	3201      	adds	r2, #1
 80095e4:	ea23 030e 	bic.w	r3, r3, lr
 80095e8:	432b      	orrs	r3, r5
 80095ea:	6243      	str	r3, [r0, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80095ec:	fa34 f302 	lsrs.w	r3, r4, r2
 80095f0:	d1ac      	bne.n	800954c <LL_GPIO_Init+0x70>
 80095f2:	e7ea      	b.n	80095ca <LL_GPIO_Init+0xee>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80095f4:	2601      	movs	r6, #1
 80095f6:	fa06 f302 	lsl.w	r3, r6, r2
    if (currentpin != 0x00000000U)
 80095fa:	3201      	adds	r2, #1
 80095fc:	4023      	ands	r3, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80095fe:	fb03 f303 	mul.w	r3, r3, r3
 8009602:	d016      	beq.n	8009632 <LL_GPIO_Init+0x156>
 8009604:	6807      	ldr	r7, [r0, #0]
 8009606:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800960a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800960c:	ea27 070c 	bic.w	r7, r7, ip
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009610:	fb03 f505 	mul.w	r5, r3, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009614:	431f      	orrs	r7, r3
 8009616:	6007      	str	r7, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009618:	6887      	ldr	r7, [r0, #8]
 800961a:	ea27 070c 	bic.w	r7, r7, ip
 800961e:	433d      	orrs	r5, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009620:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009622:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009624:	68c5      	ldr	r5, [r0, #12]
 8009626:	fb07 f303 	mul.w	r3, r7, r3
 800962a:	ea25 050c 	bic.w	r5, r5, ip
 800962e:	432b      	orrs	r3, r5
 8009630:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009632:	fa34 f302 	lsrs.w	r3, r4, r2
 8009636:	d1de      	bne.n	80095f6 <LL_GPIO_Init+0x11a>
 8009638:	e7c7      	b.n	80095ca <LL_GPIO_Init+0xee>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800963a:	2b01      	cmp	r3, #1
 800963c:	f63f af7f 	bhi.w	800953e <LL_GPIO_Init+0x62>
 8009640:	e7c3      	b.n	80095ca <LL_GPIO_Init+0xee>
 8009642:	bf00      	nop

08009644 <LL_GPIO_StructInit>:
void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8009644:	2300      	movs	r3, #0
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8009646:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800964a:	2203      	movs	r2, #3
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800964c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8009650:	e9c0 1200 	strd	r1, r2, [r0]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 8009654:	e9c0 3304 	strd	r3, r3, [r0, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
}
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop

0800965c <LL_MDMA_Init>:
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 800965c:	4b34      	ldr	r3, [pc, #208]	@ (8009730 <LL_MDMA_Init+0xd4>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: MDMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_MDMA_Init(MDMA_TypeDef *MDMAx, uint32_t Channel, LL_MDMA_InitTypeDef *MDMA_InitStruct)
{
 800965e:	b430      	push	{r4, r5}
 8009660:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   * - DestDataSize:            MDMA_CTCR_DSIZE[7:6] bits
   * - SrcDataSize:             MDMA_CTCR_SSIZE[5:4] bits
   * - DestIncMode:             MDMA_CTCR_DINC[3:2] bits
   * - SrcIncMode:              MDMA_CTCR_SINC[1:0] bits
   */
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8009664:	6895      	ldr	r5, [r2, #8]
 8009666:	4401      	add	r1, r0
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 8009668:	e9d2 430c 	ldrd	r4, r3, [r2, #48]	@ 0x30
 800966c:	ea44 0003 	orr.w	r0, r4, r3
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8009670:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009672:	68cc      	ldr	r4, [r1, #12]
 8009674:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->RequestMode         | \
 8009676:	68d5      	ldr	r5, [r2, #12]
 8009678:	f424 44e0 	bic.w	r4, r4, #28672	@ 0x7000
 800967c:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->TriggerMode         | \
 800967e:	6c55      	ldr	r5, [r2, #68]	@ 0x44
 8009680:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PaddingAlignment   | \
 8009682:	6c95      	ldr	r5, [r2, #72]	@ 0x48
 8009684:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PackMode            | \
 8009686:	6d15      	ldr	r5, [r2, #80]	@ 0x50
 8009688:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestBurst           | \
 800968a:	6d55      	ldr	r5, [r2, #84]	@ 0x54
 800968c:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->SrctBurst           | \
 800968e:	6d95      	ldr	r5, [r2, #88]	@ 0x58
 8009690:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestIncSize         | \
 8009692:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8009694:	432b      	orrs	r3, r5
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 8009696:	6b95      	ldr	r5, [r2, #56]	@ 0x38
 8009698:	4328      	orrs	r0, r5
                                         MDMA_InitStruct->SrcIncSize          | \
                                         MDMA_InitStruct->DestDataSize        | \
                                         MDMA_InitStruct->SrcDataSize         | \
 800969a:	6e95      	ldr	r5, [r2, #104]	@ 0x68
 800969c:	4320      	orrs	r0, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 800969e:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 80096a0:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 80096a2:	68c8      	ldr	r0, [r1, #12]
 80096a4:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80096a8:	4320      	orrs	r0, r4
 80096aa:	60c8      	str	r0, [r1, #12]
                                         MDMA_InitStruct->DestDataSize        | \
 80096ac:	e9d2 4018 	ldrd	r4, r0, [r2, #96]	@ 0x60
                                         MDMA_InitStruct->SrcIncSize          | \
 80096b0:	4323      	orrs	r3, r4
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 80096b2:	6ed4      	ldr	r4, [r2, #108]	@ 0x6c
                                         MDMA_InitStruct->DestDataSize        | \
 80096b4:	4303      	orrs	r3, r0
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 80096b6:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
                                         MDMA_InitStruct->SrcDataSize         | \
 80096b8:	432b      	orrs	r3, r5
 80096ba:	0480      	lsls	r0, r0, #18
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 80096bc:	4323      	orrs	r3, r4
 80096be:	f000 70fe 	and.w	r0, r0, #33292288	@ 0x1fc0000
 80096c2:	4303      	orrs	r3, r0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 80096c4:	e9d2 0505 	ldrd	r0, r5, [r2, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 80096c8:	610b      	str	r3, [r1, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 80096ca:	f3c0 0310 	ubfx	r3, r0, #0, #17
 80096ce:	694c      	ldr	r4, [r1, #20]
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRDUM[19] bit
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRSUM[18] bit
   */
  LL_MDMA_ConfigBlkCounters(MDMAx, Channel, MDMA_InitStruct->BlockRepeatCount, MDMA_InitStruct->BlockDataLength);

  LL_MDMA_ConfigBlkRepeatAddrUpdate(MDMAx, Channel, MDMA_InitStruct->BlockRepeatDestAddrUpdateMode | \
 80096d0:	69d0      	ldr	r0, [r2, #28]
 80096d2:	f404 2c60 	and.w	ip, r4, #917504	@ 0xe0000
 80096d6:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 80096da:	ea43 030c 	orr.w	r3, r3, ip
 80096de:	614b      	str	r3, [r1, #20]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 80096e0:	694b      	ldr	r3, [r1, #20]
 80096e2:	f423 2c40 	bic.w	ip, r3, #786432	@ 0xc0000
 80096e6:	6a13      	ldr	r3, [r2, #32]
 80096e8:	4303      	orrs	r3, r0
 80096ea:	ea43 030c 	orr.w	r3, r3, ip
 80096ee:	614b      	str	r3, [r1, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 80096f0:	6a55      	ldr	r5, [r2, #36]	@ 0x24

  /*-------------------------- MDMAx CSAR Configuration --------------------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:     MDMA_CSAR_SAR[31:0] bits
   */
  LL_MDMA_SetSourceAddress(MDMAx, Channel, MDMA_InitStruct->SrcAddress);
 80096f2:	6814      	ldr	r4, [r2, #0]
 80096f4:	8d13      	ldrh	r3, [r2, #40]	@ 0x28

  /*-------------------------- MDMAx CDAR Configuration --------------------------
   * Configure the Transfer destination address with parameter :
   * - DstAddress:     MDMA_CDAR_DAR[31:0] bits
   */
  LL_MDMA_SetDestinationAddress(MDMAx, Channel, MDMA_InitStruct->DstAddress);
 80096f6:	6850      	ldr	r0, [r2, #4]
 80096f8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 80096fc:	618c      	str	r4, [r1, #24]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 80096fe:	61c8      	str	r0, [r1, #28]

  /*-------------------------- MDMAx CLAR Configuration --------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkAddress:     MDMA_CLAR_LAR[31:0] bits
   */
  LL_MDMA_SetLinkAddress(MDMAx, Channel, MDMA_InitStruct->LinkAddress);
 8009700:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 8009702:	620b      	str	r3, [r1, #32]
   * Configure the Transfer HW trigger and bus selection with parameter :
   * - DestBus:     MDMA_TBR_DBUS[17] bit
   * - SrcBus:      MDMA_TBR_SBUS[16] bit
   * - HWTrigger:   MDMA_TBR_TSEL[5:0] bits
   */
  LL_MDMA_ConfigBusSelection(MDMAx, Channel, MDMA_InitStruct->DestBus | MDMA_InitStruct->SrcBus);
 8009704:	e9d2 341c 	ldrd	r3, r4, [r2, #112]	@ 0x70
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CLAR, LinkAddress);
 8009708:	6248      	str	r0, [r1, #36]	@ 0x24
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 800970a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800970c:	4323      	orrs	r3, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 800970e:	6914      	ldr	r4, [r2, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 8009710:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
 8009714:	4303      	orrs	r3, r0
   * - MaskData:     MDMA_CMDR_MDR[31:0] bits
   */
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);

  return (uint32_t)SUCCESS;
}
 8009716:	2001      	movs	r0, #1
 8009718:	628b      	str	r3, [r1, #40]	@ 0x28
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 800971a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800971c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009720:	4323      	orrs	r3, r4
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);
 8009722:	e9d2 421e 	ldrd	r4, r2, [r2, #120]	@ 0x78
 8009726:	628b      	str	r3, [r1, #40]	@ 0x28
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMAR, MaskAddress);
 8009728:	630c      	str	r4, [r1, #48]	@ 0x30
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMDR, MaskData);
 800972a:	634a      	str	r2, [r1, #52]	@ 0x34
}
 800972c:	bc30      	pop	{r4, r5}
 800972e:	4770      	bx	lr
 8009730:	0800c40c 	.word	0x0800c40c

08009734 <LL_RCC_GetPLL1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8009734:	4a5e      	ldr	r2, [pc, #376]	@ (80098b0 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8009736:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009738:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();

  switch (pllsource)
 800973c:	2b01      	cmp	r3, #1
{
 800973e:	b410      	push	{r4}
  switch (pllsource)
 8009740:	f000 80aa 	beq.w	8009898 <LL_RCC_GetPLL1ClockFreq+0x164>
 8009744:	2b02      	cmp	r3, #2
 8009746:	d00d      	beq.n	8009764 <LL_RCC_GetPLL1ClockFreq+0x30>
 8009748:	2b00      	cmp	r3, #0
 800974a:	f040 80ae 	bne.w	80098aa <LL_RCC_GetPLL1ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	f013 0c04 	ands.w	ip, r3, #4
 8009754:	d00e      	beq.n	8009774 <LL_RCC_GetPLL1ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009756:	6812      	ldr	r2, [r2, #0]
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009758:	4b56      	ldr	r3, [pc, #344]	@ (80098b4 <LL_RCC_GetPLL1ClockFreq+0x180>)
 800975a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800975e:	fa23 fc02 	lsr.w	ip, r3, r2
 8009762:	e007      	b.n	8009774 <LL_RCC_GetPLL1ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8009764:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009766:	4b54      	ldr	r3, [pc, #336]	@ (80098b8 <LL_RCC_GetPLL1ClockFreq+0x184>)
 8009768:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800976c:	bf14      	ite	ne
 800976e:	469c      	movne	ip, r3
 8009770:	f04f 0c00 	moveq.w	ip, #0
    default:
      /* PLL clock disabled */
      break;
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8009774:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8009776:	4c4e      	ldr	r4, [pc, #312]	@ (80098b0 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8009778:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
  PLL_Clocks->PLL_R_Frequency = 0U;
 800977c:	6083      	str	r3, [r0, #8]
 800977e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8009780:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8009782:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8009784:	f3c2 1205 	ubfx	r2, r2, #4, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8009788:	f013 0301 	ands.w	r3, r3, #1
 800978c:	d002      	beq.n	8009794 <LL_RCC_GetPLL1ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800978e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009790:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
  {
    fracn = LL_RCC_PLL1_GetFRACN();
  }

  if (m != 0U)
 8009794:	2a00      	cmp	r2, #0
 8009796:	d07c      	beq.n	8009892 <LL_RCC_GetPLL1ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8009798:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800979c:	3101      	adds	r1, #1
 800979e:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 80097a2:	4943      	ldr	r1, [pc, #268]	@ (80098b0 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80097a4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80097a6:	03e4      	lsls	r4, r4, #15
 80097a8:	d523      	bpl.n	80097f2 <LL_RCC_GetPLL1ClockFreq+0xbe>
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 80097b2:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80097b4:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80097b8:	ee07 ca90 	vmov	s15, ip
 80097bc:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 80098bc <LL_RCC_GetPLL1ClockFreq+0x188>
 80097c0:	f3c1 2146 	ubfx	r1, r1, #9, #7
 80097c4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80097c8:	ee07 2a90 	vmov	s15, r2
 80097cc:	eee4 6a85 	vfma.f32	s13, s9, s10
 80097d0:	3101      	adds	r1, #1
 80097d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097d6:	ee85 6aa7 	vdiv.f32	s12, s11, s15

  freq = freq/(float_t)PQR;
 80097da:	ee07 1a90 	vmov	s15, r1
 80097de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80097e2:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 80097e6:	eec6 6a27 	vdiv.f32	s13, s12, s15

  return (uint32_t)freq;
 80097ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80097ee:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 80097f2:	492f      	ldr	r1, [pc, #188]	@ (80098b0 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80097f4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80097f6:	03a4      	lsls	r4, r4, #14
 80097f8:	d523      	bpl.n	8009842 <LL_RCC_GetPLL1ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8009802:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8009804:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009808:	ee07 ca90 	vmov	s15, ip
 800980c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 80098bc <LL_RCC_GetPLL1ClockFreq+0x188>
 8009810:	f3c1 4106 	ubfx	r1, r1, #16, #7
 8009814:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009818:	ee07 2a90 	vmov	s15, r2
 800981c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009820:	3101      	adds	r1, #1
 8009822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009826:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 800982a:	ee07 1a90 	vmov	s15, r1
 800982e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009832:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8009836:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 800983a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800983e:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 8009842:	491b      	ldr	r1, [pc, #108]	@ (80098b0 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8009844:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009846:	0364      	lsls	r4, r4, #13
 8009848:	d523      	bpl.n	8009892 <LL_RCC_GetPLL1ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800984a:	ee07 ca90 	vmov	s15, ip
 800984e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009852:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 80098bc <LL_RCC_GetPLL1ClockFreq+0x188>
 8009856:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800985a:	ee07 2a90 	vmov	s15, r2
 800985e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009862:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8009866:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8009868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800986c:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8009870:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009874:	3301      	adds	r3, #1
 8009876:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009882:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 8009886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 800988a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800988e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009896:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009898:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800989a:	4b09      	ldr	r3, [pc, #36]	@ (80098c0 <LL_RCC_GetPLL1ClockFreq+0x18c>)
 800989c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80098a0:	bf14      	ite	ne
 80098a2:	469c      	movne	ip, r3
 80098a4:	f04f 0c00 	moveq.w	ip, #0
 80098a8:	e764      	b.n	8009774 <LL_RCC_GetPLL1ClockFreq+0x40>
 80098aa:	f04f 0c00 	mov.w	ip, #0
 80098ae:	e761      	b.n	8009774 <LL_RCC_GetPLL1ClockFreq+0x40>
 80098b0:	58024400 	.word	0x58024400
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	00f42400 	.word	0x00f42400
 80098bc:	39000000 	.word	0x39000000
 80098c0:	003d0900 	.word	0x003d0900

080098c4 <LL_RCC_GetPLL2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80098c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009a40 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80098c6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80098c8:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 80098cc:	2b01      	cmp	r3, #1
{
 80098ce:	b410      	push	{r4}
  switch (pllsource)
 80098d0:	f000 80aa 	beq.w	8009a28 <LL_RCC_GetPLL2ClockFreq+0x164>
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d00d      	beq.n	80098f4 <LL_RCC_GetPLL2ClockFreq+0x30>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f040 80ae 	bne.w	8009a3a <LL_RCC_GetPLL2ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 80098de:	6813      	ldr	r3, [r2, #0]
 80098e0:	f013 0c04 	ands.w	ip, r3, #4
 80098e4:	d00e      	beq.n	8009904 <LL_RCC_GetPLL2ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 80098e6:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 80098e8:	4b56      	ldr	r3, [pc, #344]	@ (8009a44 <LL_RCC_GetPLL2ClockFreq+0x180>)
 80098ea:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80098ee:	fa23 fc02 	lsr.w	ip, r3, r2
 80098f2:	e007      	b.n	8009904 <LL_RCC_GetPLL2ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 80098f4:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80098f6:	4b54      	ldr	r3, [pc, #336]	@ (8009a48 <LL_RCC_GetPLL2ClockFreq+0x184>)
 80098f8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80098fc:	bf14      	ite	ne
 80098fe:	469c      	movne	ip, r3
 8009900:	f04f 0c00 	moveq.w	ip, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009904:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8009906:	4c4e      	ldr	r4, [pc, #312]	@ (8009a40 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009908:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800990c:	6083      	str	r3, [r0, #8]
 800990e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8009910:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 8009912:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8009914:	f3c2 3205 	ubfx	r2, r2, #12, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 8009918:	f013 0310 	ands.w	r3, r3, #16
 800991c:	d002      	beq.n	8009924 <LL_RCC_GetPLL2ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800991e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009920:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (m != 0U)
 8009924:	2a00      	cmp	r2, #0
 8009926:	d07c      	beq.n	8009a22 <LL_RCC_GetPLL2ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8009928:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800992c:	3101      	adds	r1, #1
 800992e:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 8009932:	4943      	ldr	r1, [pc, #268]	@ (8009a40 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009934:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009936:	0324      	lsls	r4, r4, #12
 8009938:	d523      	bpl.n	8009982 <LL_RCC_GetPLL2ClockFreq+0xbe>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8009942:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8009944:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009948:	ee07 ca90 	vmov	s15, ip
 800994c:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 8009a4c <LL_RCC_GetPLL2ClockFreq+0x188>
 8009950:	f3c1 2146 	ubfx	r1, r1, #9, #7
 8009954:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009958:	ee07 2a90 	vmov	s15, r2
 800995c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8009960:	3101      	adds	r1, #1
 8009962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009966:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 800996a:	ee07 1a90 	vmov	s15, r1
 800996e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009972:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8009976:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 800997a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800997e:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 8009982:	492f      	ldr	r1, [pc, #188]	@ (8009a40 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8009984:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009986:	02e4      	lsls	r4, r4, #11
 8009988:	d523      	bpl.n	80099d2 <LL_RCC_GetPLL2ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8009992:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8009994:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8009998:	ee07 ca90 	vmov	s15, ip
 800999c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 8009a4c <LL_RCC_GetPLL2ClockFreq+0x188>
 80099a0:	f3c1 4106 	ubfx	r1, r1, #16, #7
 80099a4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80099a8:	ee07 2a90 	vmov	s15, r2
 80099ac:	eee4 6a85 	vfma.f32	s13, s9, s10
 80099b0:	3101      	adds	r1, #1
 80099b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099b6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 80099ba:	ee07 1a90 	vmov	s15, r1
 80099be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80099c2:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 80099c6:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 80099ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80099ce:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 80099d2:	491b      	ldr	r1, [pc, #108]	@ (8009a40 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80099d4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80099d6:	02a4      	lsls	r4, r4, #10
 80099d8:	d523      	bpl.n	8009a22 <LL_RCC_GetPLL2ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80099da:	ee07 ca90 	vmov	s15, ip
 80099de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099e2:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 8009a4c <LL_RCC_GetPLL2ClockFreq+0x188>
 80099e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80099ea:	ee07 2a90 	vmov	s15, r2
 80099ee:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80099f2:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 80099f6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80099f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099fc:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8009a00:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a04:	3301      	adds	r3, #1
 8009a06:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009a12:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 8009a1a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009a1e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a26:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009a28:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009a2a:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <LL_RCC_GetPLL2ClockFreq+0x18c>)
 8009a2c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009a30:	bf14      	ite	ne
 8009a32:	469c      	movne	ip, r3
 8009a34:	f04f 0c00 	moveq.w	ip, #0
 8009a38:	e764      	b.n	8009904 <LL_RCC_GetPLL2ClockFreq+0x40>
 8009a3a:	f04f 0c00 	mov.w	ip, #0
 8009a3e:	e761      	b.n	8009904 <LL_RCC_GetPLL2ClockFreq+0x40>
 8009a40:	58024400 	.word	0x58024400
 8009a44:	03d09000 	.word	0x03d09000
 8009a48:	00f42400 	.word	0x00f42400
 8009a4c:	39000000 	.word	0x39000000
 8009a50:	003d0900 	.word	0x003d0900

08009a54 <LL_RCC_GetPLL3ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8009a54:	4a62      	ldr	r2, [pc, #392]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009a56:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009a58:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 8009a5c:	2b01      	cmp	r3, #1
{
 8009a5e:	b410      	push	{r4}
  switch (pllsource)
 8009a60:	f000 80a0 	beq.w	8009ba4 <LL_RCC_GetPLL3ClockFreq+0x150>
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	f000 8096 	beq.w	8009b96 <LL_RCC_GetPLL3ClockFreq+0x142>
 8009a6a:	b91b      	cbnz	r3, 8009a74 <LL_RCC_GetPLL3ClockFreq+0x20>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009a6c:	6813      	ldr	r3, [r2, #0]
 8009a6e:	075c      	lsls	r4, r3, #29
 8009a70:	f100 80ae 	bmi.w	8009bd0 <LL_RCC_GetPLL3ClockFreq+0x17c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009a74:	4c5a      	ldr	r4, [pc, #360]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009a76:	2200      	movs	r2, #0
 8009a78:	e9c0 2200 	strd	r2, r2, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009a7c:	6082      	str	r2, [r0, #8]
 8009a7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009a80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009a82:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8009a84:	05e4      	lsls	r4, r4, #23
 8009a86:	f140 8083 	bpl.w	8009b90 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009a8a:	f3c1 5105 	ubfx	r1, r1, #20, #6
 8009a8e:	ee07 2a90 	vmov	s15, r2
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8009a92:	4c53      	ldr	r4, [pc, #332]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009a94:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 8009a96:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  if ((m != 0U) && (pllinputfreq != 0U))
 8009a9a:	2900      	cmp	r1, #0
 8009a9c:	d078      	beq.n	8009b90 <LL_RCC_GetPLL3ClockFreq+0x13c>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d076      	beq.n	8009b90 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 8009aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	ee06 3a90 	vmov	s13, r3
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 8009aae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009ab0:	025b      	lsls	r3, r3, #9
 8009ab2:	d521      	bpl.n	8009af8 <LL_RCC_GetPLL3ClockFreq+0xa4>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009ab4:	ee07 4a10 	vmov	s14, r4
 8009ab8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009abc:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8009ac0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009ac2:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 8009ac6:	ee07 1a10 	vmov	s14, r1
 8009aca:	eddf 4a46 	vldr	s9, [pc, #280]	@ 8009be4 <LL_RCC_GetPLL3ClockFreq+0x190>
 8009ace:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ad6:	eea4 6a24 	vfma.f32	s12, s8, s9
 8009ada:	3301      	adds	r3, #1
 8009adc:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 8009ae0:	ee07 3a10 	vmov	s14, r3
 8009ae4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009ae8:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 8009aec:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 8009af0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8009af4:	ed80 6a00 	vstr	s12, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 8009af8:	4b39      	ldr	r3, [pc, #228]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afc:	0212      	lsls	r2, r2, #8
 8009afe:	d521      	bpl.n	8009b44 <LL_RCC_GetPLL3ClockFreq+0xf0>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b00:	ee07 4a10 	vmov	s14, r4
 8009b04:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009b08:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b0e:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 8009b12:	ee07 1a10 	vmov	s14, r1
 8009b16:	eddf 4a33 	vldr	s9, [pc, #204]	@ 8009be4 <LL_RCC_GetPLL3ClockFreq+0x190>
 8009b1a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b22:	eea4 6a24 	vfma.f32	s12, s8, s9
 8009b26:	3301      	adds	r3, #1
 8009b28:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 8009b2c:	ee07 3a10 	vmov	s14, r3
 8009b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b34:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 8009b38:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 8009b3c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8009b40:	ed80 6a01 	vstr	s12, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 8009b44:	4b26      	ldr	r3, [pc, #152]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8009b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b48:	01d2      	lsls	r2, r2, #7
 8009b4a:	d521      	bpl.n	8009b90 <LL_RCC_GetPLL3ClockFreq+0x13c>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b4c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009b50:	ee07 1a90 	vmov	s15, r1
 8009b54:	ee07 4a10 	vmov	s14, r4
 8009b58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8009b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b66:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8009be4 <LL_RCC_GetPLL3ClockFreq+0x190>
 8009b6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b6e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8009b72:	3301      	adds	r3, #1
  freq = freq/(float_t)PQR;
 8009b74:	ee07 3a90 	vmov	s15, r3
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b78:	eee7 6a05 	vfma.f32	s13, s14, s10
  freq = freq/(float_t)PQR;
 8009b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8009b80:	ee65 6aa6 	vmul.f32	s13, s11, s13
  freq = freq/(float_t)PQR;
 8009b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 8009b88:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b8c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b94:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	039a      	lsls	r2, r3, #14
 8009b9a:	f57f af6b 	bpl.w	8009a74 <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = HSE_VALUE;
 8009b9e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009be8 <LL_RCC_GetPLL3ClockFreq+0x194>
 8009ba2:	e005      	b.n	8009bb0 <LL_RCC_GetPLL3ClockFreq+0x15c>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009ba4:	6813      	ldr	r3, [r2, #0]
 8009ba6:	05d9      	lsls	r1, r3, #23
 8009ba8:	f57f af64 	bpl.w	8009a74 <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = CSI_VALUE;
 8009bac:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009bec <LL_RCC_GetPLL3ClockFreq+0x198>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8009be0 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009bb8:	6083      	str	r3, [r0, #8]
 8009bba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009bbc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009bbe:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009bc0:	f3c1 5105 	ubfx	r1, r1, #20, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f414 7480 	ands.w	r4, r4, #256	@ 0x100
 8009bca:	f43f af66 	beq.w	8009a9a <LL_RCC_GetPLL3ClockFreq+0x46>
 8009bce:	e760      	b.n	8009a92 <LL_RCC_GetPLL3ClockFreq+0x3e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009bd0:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009bd2:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <LL_RCC_GetPLL3ClockFreq+0x19c>)
 8009bd4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009bd8:	40d3      	lsrs	r3, r2
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	e7e7      	b.n	8009bb0 <LL_RCC_GetPLL3ClockFreq+0x15c>
 8009be0:	58024400 	.word	0x58024400
 8009be4:	39000000 	.word	0x39000000
 8009be8:	00f42400 	.word	0x00f42400
 8009bec:	003d0900 	.word	0x003d0900
 8009bf0:	03d09000 	.word	0x03d09000

08009bf4 <LL_RCC_GetUSARTClockFreq>:
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << CONFIG_SHIFT) );
 8009bf4:	4a6e      	ldr	r2, [pc, #440]	@ (8009db0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8009bf6:	f3c0 2104 	ubfx	r1, r0, #8, #5
 8009bfa:	0e03      	lsrs	r3, r0, #24
 8009bfc:	fa52 f280 	uxtab	r2, r2, r0
 8009c00:	408b      	lsls	r3, r1
 8009c02:	f8d2 244c 	ldr.w	r2, [r2, #1100]	@ 0x44c
 8009c06:	4013      	ands	r3, r2
 8009c08:	40cb      	lsrs	r3, r1
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009c10:	4c68      	ldr	r4, [pc, #416]	@ (8009db4 <LL_RCC_GetUSARTClockFreq+0x1c0>)
{
 8009c12:	b084      	sub	sp, #16
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009c14:	42a0      	cmp	r0, r4
 8009c16:	f000 80a0 	beq.w	8009d5a <LL_RCC_GetUSARTClockFreq+0x166>
 8009c1a:	d81a      	bhi.n	8009c52 <LL_RCC_GetUSARTClockFreq+0x5e>
 8009c1c:	4b66      	ldr	r3, [pc, #408]	@ (8009db8 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8009c1e:	4298      	cmp	r0, r3
 8009c20:	d077      	beq.n	8009d12 <LL_RCC_GetUSARTClockFreq+0x11e>
 8009c22:	d940      	bls.n	8009ca6 <LL_RCC_GetUSARTClockFreq+0xb2>
 8009c24:	4b65      	ldr	r3, [pc, #404]	@ (8009dbc <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8009c26:	4298      	cmp	r0, r3
 8009c28:	d009      	beq.n	8009c3e <LL_RCC_GetUSARTClockFreq+0x4a>
 8009c2a:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8009c2e:	4298      	cmp	r0, r3
 8009c30:	f000 8093 	beq.w	8009d5a <LL_RCC_GetUSARTClockFreq+0x166>
 8009c34:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009c38:	4298      	cmp	r0, r3
 8009c3a:	f040 808b 	bne.w	8009d54 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 8009c3e:	4b60      	ldr	r3, [pc, #384]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009c46:	d01e      	beq.n	8009c86 <LL_RCC_GetUSARTClockFreq+0x92>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8009c48:	a801      	add	r0, sp, #4
 8009c4a:	f7ff fe3b 	bl	80098c4 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009c4e:	9802      	ldr	r0, [sp, #8]
 8009c50:	e019      	b.n	8009c86 <LL_RCC_GetUSARTClockFreq+0x92>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009c52:	4b5c      	ldr	r3, [pc, #368]	@ (8009dc4 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8009c54:	4298      	cmp	r0, r3
 8009c56:	d053      	beq.n	8009d00 <LL_RCC_GetUSARTClockFreq+0x10c>
 8009c58:	d817      	bhi.n	8009c8a <LL_RCC_GetUSARTClockFreq+0x96>
 8009c5a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009c5e:	4298      	cmp	r0, r3
 8009c60:	d007      	beq.n	8009c72 <LL_RCC_GetUSARTClockFreq+0x7e>
 8009c62:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8009c66:	4298      	cmp	r0, r3
 8009c68:	d04a      	beq.n	8009d00 <LL_RCC_GetUSARTClockFreq+0x10c>
 8009c6a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	d170      	bne.n	8009d54 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8009c72:	4b53      	ldr	r3, [pc, #332]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	f010 0004 	ands.w	r0, r0, #4
 8009c7a:	d004      	beq.n	8009c86 <LL_RCC_GetUSARTClockFreq+0x92>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009c7c:	681b      	ldr	r3, [r3, #0]

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009c7e:	4852      	ldr	r0, [pc, #328]	@ (8009dc8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009c80:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c84:	40d8      	lsrs	r0, r3
      /* Kernel clock disabled */
      break;
  }

  return usart_frequency;
}
 8009c86:	b004      	add	sp, #16
 8009c88:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009c8a:	4b50      	ldr	r3, [pc, #320]	@ (8009dcc <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8009c8c:	4298      	cmp	r0, r3
 8009c8e:	d003      	beq.n	8009c98 <LL_RCC_GetUSARTClockFreq+0xa4>
 8009c90:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8009c94:	4298      	cmp	r0, r3
 8009c96:	d15d      	bne.n	8009d54 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 8009c98:	4b49      	ldr	r3, [pc, #292]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009c9a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009c9c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8009ca0:	03c0      	lsls	r0, r0, #15
}
 8009ca2:	b004      	add	sp, #16
 8009ca4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009ca6:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8009caa:	4298      	cmp	r0, r3
 8009cac:	d152      	bne.n	8009d54 <LL_RCC_GetUSARTClockFreq+0x160>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009cae:	4b44      	ldr	r3, [pc, #272]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
{
  uint32_t frequency = 0U;
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009cb6:	2b18      	cmp	r3, #24
 8009cb8:	d80e      	bhi.n	8009cd8 <LL_RCC_GetUSARTClockFreq+0xe4>
 8009cba:	e8df f003 	tbb	[pc, r3]
 8009cbe:	0d6d      	.short	0x0d6d
 8009cc0:	0d0d0d0d 	.word	0x0d0d0d0d
 8009cc4:	0d760d0d 	.word	0x0d760d0d
 8009cc8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ccc:	0d6b0d0d 	.word	0x0d6b0d0d
 8009cd0:	0d0d0d0d 	.word	0x0d0d0d0d
 8009cd4:	0d0d      	.short	0x0d0d
 8009cd6:	66          	.byte	0x66
 8009cd7:	00          	.byte	0x00
  uint32_t frequency = 0U;
 8009cd8:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8009cda:	4b39      	ldr	r3, [pc, #228]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009cdc:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009cde:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8009ce0:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009ce2:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009ce6:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009cea:	f3c3 1302 	ubfx	r3, r3, #4, #3
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009cee:	4a38      	ldr	r2, [pc, #224]	@ (8009dd0 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8009cf0:	5d14      	ldrb	r4, [r2, r4]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009cf2:	5c51      	ldrb	r1, [r2, r1]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009cf4:	40e0      	lsrs	r0, r4
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009cf6:	5cd3      	ldrb	r3, [r2, r3]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009cf8:	40c8      	lsrs	r0, r1
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009cfa:	40d8      	lsrs	r0, r3
}
 8009cfc:	b004      	add	sp, #16
 8009cfe:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8009d00:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009d02:	4834      	ldr	r0, [pc, #208]	@ (8009dd4 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009d0a:	bf08      	it	eq
 8009d0c:	2000      	moveq	r0, #0
}
 8009d0e:	b004      	add	sp, #16
 8009d10:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009d12:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
  switch (LL_RCC_GetSysClkSource())
 8009d1a:	2b18      	cmp	r3, #24
 8009d1c:	d80e      	bhi.n	8009d3c <LL_RCC_GetUSARTClockFreq+0x148>
 8009d1e:	e8df f003 	tbb	[pc, r3]
 8009d22:	0d2d      	.short	0x0d2d
 8009d24:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d28:	0d420d0d 	.word	0x0d420d0d
 8009d2c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d30:	0d2b0d0d 	.word	0x0d2b0d0d
 8009d34:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d38:	0d0d      	.short	0x0d0d
 8009d3a:	26          	.byte	0x26
 8009d3b:	00          	.byte	0x00
  uint32_t frequency = 0U;
 8009d3c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8009d3e:	4b20      	ldr	r3, [pc, #128]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009d40:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009d42:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8009d44:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8009d46:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8009d4a:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009d4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009d52:	e7cc      	b.n	8009cee <LL_RCC_GetUSARTClockFreq+0xfa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009d54:	2000      	movs	r0, #0
}
 8009d56:	b004      	add	sp, #16
 8009d58:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 8009d5a:	4b19      	ldr	r3, [pc, #100]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009d5c:	6818      	ldr	r0, [r3, #0]
 8009d5e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009d62:	d090      	beq.n	8009c86 <LL_RCC_GetUSARTClockFreq+0x92>
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009d64:	a801      	add	r0, sp, #4
 8009d66:	f7ff fe75 	bl	8009a54 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009d6a:	9802      	ldr	r0, [sp, #8]
 8009d6c:	e78b      	b.n	8009c86 <LL_RCC_GetUSARTClockFreq+0x92>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8009d6e:	a801      	add	r0, sp, #4
 8009d70:	f7ff fce0 	bl	8009734 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8009d74:	9801      	ldr	r0, [sp, #4]
      break;
 8009d76:	e7e2      	b.n	8009d3e <LL_RCC_GetUSARTClockFreq+0x14a>
      frequency = HSE_VALUE;
 8009d78:	4817      	ldr	r0, [pc, #92]	@ (8009dd8 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 8009d7a:	e7e0      	b.n	8009d3e <LL_RCC_GetUSARTClockFreq+0x14a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009d7c:	4b10      	ldr	r3, [pc, #64]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009d7e:	4812      	ldr	r0, [pc, #72]	@ (8009dc8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d86:	40d8      	lsrs	r0, r3
  return frequency;
 8009d88:	e7d9      	b.n	8009d3e <LL_RCC_GetUSARTClockFreq+0x14a>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8009d8a:	a801      	add	r0, sp, #4
 8009d8c:	f7ff fcd2 	bl	8009734 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8009d90:	9801      	ldr	r0, [sp, #4]
      break;
 8009d92:	e7a2      	b.n	8009cda <LL_RCC_GetUSARTClockFreq+0xe6>
      frequency = HSE_VALUE;
 8009d94:	4810      	ldr	r0, [pc, #64]	@ (8009dd8 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 8009d96:	e7a0      	b.n	8009cda <LL_RCC_GetUSARTClockFreq+0xe6>
 8009d98:	4b09      	ldr	r3, [pc, #36]	@ (8009dc0 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8009d9a:	480b      	ldr	r0, [pc, #44]	@ (8009dc8 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009da2:	40d8      	lsrs	r0, r3
  return frequency;
 8009da4:	e799      	b.n	8009cda <LL_RCC_GetUSARTClockFreq+0xe6>
  switch (LL_RCC_GetSysClkSource())
 8009da6:	480b      	ldr	r0, [pc, #44]	@ (8009dd4 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009da8:	e7c9      	b.n	8009d3e <LL_RCC_GetUSARTClockFreq+0x14a>
 8009daa:	480a      	ldr	r0, [pc, #40]	@ (8009dd4 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8009dac:	e795      	b.n	8009cda <LL_RCC_GetUSARTClockFreq+0xe6>
 8009dae:	bf00      	nop
 8009db0:	58024000 	.word	0x58024000
 8009db4:	07020308 	.word	0x07020308
 8009db8:	07000308 	.word	0x07000308
 8009dbc:	07010308 	.word	0x07010308
 8009dc0:	58024400 	.word	0x58024400
 8009dc4:	07040308 	.word	0x07040308
 8009dc8:	03d09000 	.word	0x03d09000
 8009dcc:	07050008 	.word	0x07050008
 8009dd0:	0800c44c 	.word	0x0800c44c
 8009dd4:	003d0900 	.word	0x003d0900
 8009dd8:	00f42400 	.word	0x00f42400

08009ddc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8009ddc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dde:	4a2d      	ldr	r2, [pc, #180]	@ (8009e94 <LL_TIM_Init+0xb8>)
 8009de0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009de4:	4c2c      	ldr	r4, [pc, #176]	@ (8009e98 <LL_TIM_Init+0xbc>)
 8009de6:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009dea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dec:	eba0 0404 	sub.w	r4, r0, r4

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009df0:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009df2:	fab2 f282 	clz	r2, r2

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009df6:	880d      	ldrh	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009df8:	fab4 f484 	clz	r4, r4
 8009dfc:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8009e00:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8009e04:	d01a      	beq.n	8009e3c <LL_TIM_Init+0x60>
 8009e06:	b9ca      	cbnz	r2, 8009e3c <LL_TIM_Init+0x60>
 8009e08:	4f24      	ldr	r7, [pc, #144]	@ (8009e9c <LL_TIM_Init+0xc0>)
 8009e0a:	42b8      	cmp	r0, r7
 8009e0c:	d02c      	beq.n	8009e68 <LL_TIM_Init+0x8c>
 8009e0e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009e12:	42b8      	cmp	r0, r7
 8009e14:	d028      	beq.n	8009e68 <LL_TIM_Init+0x8c>
 8009e16:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009e1a:	42b8      	cmp	r0, r7
 8009e1c:	d00e      	beq.n	8009e3c <LL_TIM_Init+0x60>
 8009e1e:	b96c      	cbnz	r4, 8009e3c <LL_TIM_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e20:	4c1f      	ldr	r4, [pc, #124]	@ (8009ea0 <LL_TIM_Init+0xc4>)
 8009e22:	4a20      	ldr	r2, [pc, #128]	@ (8009ea4 <LL_TIM_Init+0xc8>)
 8009e24:	4290      	cmp	r0, r2
 8009e26:	bf18      	it	ne
 8009e28:	42a0      	cmpne	r0, r4
 8009e2a:	d021      	beq.n	8009e70 <LL_TIM_Init+0x94>
 8009e2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e30:	4290      	cmp	r0, r2
 8009e32:	d01d      	beq.n	8009e70 <LL_TIM_Init+0x94>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009e34:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009e36:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009e38:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e3a:	e00e      	b.n	8009e5a <LL_TIM_Init+0x7e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009e3c:	684f      	ldr	r7, [r1, #4]
 8009e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e42:	433b      	orrs	r3, r7
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009e44:	68cf      	ldr	r7, [r1, #12]
 8009e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e4a:	433b      	orrs	r3, r7
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009e4c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009e4e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009e50:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e52:	b902      	cbnz	r2, 8009e56 <LL_TIM_Init+0x7a>
 8009e54:	b19c      	cbz	r4, 8009e7e <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009e56:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009e58:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009e5a:	6943      	ldr	r3, [r0, #20]
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8009e60:	bcf0      	pop	{r4, r5, r6, r7}
 8009e62:	6143      	str	r3, [r0, #20]
 8009e64:	2001      	movs	r0, #1
 8009e66:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6c:	684a      	ldr	r2, [r1, #4]
 8009e6e:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009e70:	68ca      	ldr	r2, [r1, #12]
 8009e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e76:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009e78:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009e7a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009e7c:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e7e:	4a08      	ldr	r2, [pc, #32]	@ (8009ea0 <LL_TIM_Init+0xc4>)
 8009e80:	4b08      	ldr	r3, [pc, #32]	@ (8009ea4 <LL_TIM_Init+0xc8>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bf18      	it	ne
 8009e86:	4290      	cmpne	r0, r2
 8009e88:	d0e5      	beq.n	8009e56 <LL_TIM_Init+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e8e:	4298      	cmp	r0, r3
 8009e90:	d0e1      	beq.n	8009e56 <LL_TIM_Init+0x7a>
 8009e92:	e7e2      	b.n	8009e5a <LL_TIM_Init+0x7e>
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	40014000 	.word	0x40014000
 8009ea4:	40014400 	.word	0x40014400

08009ea8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4604      	mov	r4, r0
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009eac:	6800      	ldr	r0, [r0, #0]
 8009eae:	f010 0001 	ands.w	r0, r0, #1
 8009eb2:	d13c      	bne.n	8009f2e <LL_USART_Init+0x86>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009eb4:	690a      	ldr	r2, [r1, #16]
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	688b      	ldr	r3, [r1, #8]
 8009eba:	6821      	ldr	r1, [r4, #0]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	696a      	ldr	r2, [r5, #20]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	69ea      	ldr	r2, [r5, #28]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	4a34      	ldr	r2, [pc, #208]	@ (8009f98 <LL_USART_Init+0xf0>)
 8009ec8:	400a      	ands	r2, r1
 8009eca:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009ecc:	68ea      	ldr	r2, [r5, #12]
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	6863      	ldr	r3, [r4, #4]
 8009ed2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009ed6:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009ed8:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009eda:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ee2:	4313      	orrs	r3, r2
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8009f9c <LL_USART_Init+0xf4>)
 8009ee6:	4294      	cmp	r4, r2
 8009ee8:	60a3      	str	r3, [r4, #8]
 8009eea:	d031      	beq.n	8009f50 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == USART2)
 8009eec:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa0 <LL_USART_Init+0xf8>)
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d01f      	beq.n	8009f32 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8009ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa4 <LL_USART_Init+0xfc>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	d01c      	beq.n	8009f32 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART4)
 8009ef8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d018      	beq.n	8009f32 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART5)
 8009f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d014      	beq.n	8009f32 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART6)
 8009f08:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d01f      	beq.n	8009f50 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == UART7)
 8009f10:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 8009f14:	429c      	cmp	r4, r3
 8009f16:	d00c      	beq.n	8009f32 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART8)
 8009f18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	d008      	beq.n	8009f32 <LL_USART_Init+0x8a>
 8009f20:	882a      	ldrh	r2, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009f22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f24:	f023 030f 	bic.w	r3, r3, #15
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8009f2c:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 8009f2e:	2000      	movs	r0, #0
}
 8009f30:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8009f32:	481d      	ldr	r0, [pc, #116]	@ (8009fa8 <LL_USART_Init+0x100>)
 8009f34:	f7ff fe5e 	bl	8009bf4 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009f38:	882a      	ldrh	r2, [r5, #0]
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d0f1      	beq.n	8009f22 <LL_USART_Init+0x7a>
        && (USART_InitStruct->BaudRate != 0U))
 8009f3e:	686b      	ldr	r3, [r5, #4]
 8009f40:	b953      	cbnz	r3, 8009f58 <LL_USART_Init+0xb0>
  ErrorStatus status = ERROR;
 8009f42:	4618      	mov	r0, r3
 8009f44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f46:	f023 030f 	bic.w	r3, r3, #15
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f4e:	e7ed      	b.n	8009f2c <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8009f50:	4816      	ldr	r0, [pc, #88]	@ (8009fac <LL_USART_Init+0x104>)
 8009f52:	f7ff fe4f 	bl	8009bf4 <LL_RCC_GetUSARTClockFreq>
 8009f56:	e7ef      	b.n	8009f38 <LL_USART_Init+0x90>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009f58:	69ed      	ldr	r5, [r5, #28]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8009f5a:	4915      	ldr	r1, [pc, #84]	@ (8009fb0 <LL_USART_Init+0x108>)
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009f5c:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8009f60:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8009f64:	fbb0 f0f1 	udiv	r0, r0, r1
 8009f68:	ea4f 0153 	mov.w	r1, r3, lsr #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009f6c:	d006      	beq.n	8009f7c <LL_USART_Init+0xd4>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8009f6e:	4408      	add	r0, r1
 8009f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7d2      	b.n	8009f22 <LL_USART_Init+0x7a>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8009f7c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    brrtemp = usartdiv & 0xFFF0U;
 8009f80:	f64f 70f0 	movw	r0, #65520	@ 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8009f84:	fbb1 f1f3 	udiv	r1, r1, r3
    brrtemp = usartdiv & 0xFFF0U;
 8009f88:	ea01 0300 	and.w	r3, r1, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f8c:	f3c1 0142 	ubfx	r1, r1, #1, #3
 8009f90:	4319      	orrs	r1, r3
    USARTx->BRR = brrtemp;
 8009f92:	60e1      	str	r1, [r4, #12]
 8009f94:	e7f0      	b.n	8009f78 <LL_USART_Init+0xd0>
 8009f96:	bf00      	nop
 8009f98:	efff69f3 	.word	0xefff69f3
 8009f9c:	40011000 	.word	0x40011000
 8009fa0:	40004400 	.word	0x40004400
 8009fa4:	40004800 	.word	0x40004800
 8009fa8:	07000008 	.word	0x07000008
 8009fac:	07000308 	.word	0x07000308
 8009fb0:	0800c45c 	.word	0x0800c45c

08009fb4 <expf>:
 8009fb4:	ee10 3a10 	vmov	r3, s0
 8009fb8:	f240 412a 	movw	r1, #1066	@ 0x42a
 8009fbc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009fc0:	428a      	cmp	r2, r1
 8009fc2:	eeb7 3ac0 	vcvt.f64.f32	d3, s0
 8009fc6:	d832      	bhi.n	800a02e <expf+0x7a>
 8009fc8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009fcc:	4b2d      	ldr	r3, [pc, #180]	@ (800a084 <expf+0xd0>)
 8009fce:	ed93 2b4a 	vldr	d2, [r3, #296]	@ 0x128
 8009fd2:	ed93 1b48 	vldr	d1, [r3, #288]	@ 0x120
 8009fd6:	eeb0 7b41 	vmov.f64	d7, d1
 8009fda:	eea2 7b03 	vfma.f64	d7, d2, d3
 8009fde:	ee17 0a10 	vmov	r0, s14
 8009fe2:	ee37 7b41 	vsub.f64	d7, d7, d1
 8009fe6:	f000 021f 	and.w	r2, r0, #31
 8009fea:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8009fee:	b430      	push	{r4, r5}
 8009ff0:	ee92 7b03 	vfnms.f64	d7, d2, d3
 8009ff4:	ed93 4b4c 	vldr	d4, [r3, #304]	@ 0x130
 8009ff8:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8009ffc:	684d      	ldr	r5, [r1, #4]
 8009ffe:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 800a002:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 800a006:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a00a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a00e:	2100      	movs	r1, #0
 800a010:	190a      	adds	r2, r1, r4
 800a012:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800a016:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a01a:	ec43 2b17 	vmov	d7, r2, r3
 800a01e:	eea6 0b04 	vfma.f64	d0, d6, d4
 800a022:	bc30      	pop	{r4, r5}
 800a024:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a028:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a02c:	4770      	bx	lr
 800a02e:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 800a032:	d020      	beq.n	800a076 <expf+0xc2>
 800a034:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 800a038:	d21a      	bcs.n	800a070 <expf+0xbc>
 800a03a:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800a088 <expf+0xd4>
 800a03e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a046:	dc10      	bgt.n	800a06a <expf+0xb6>
 800a048:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a08c <expf+0xd8>
 800a04c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a054:	d412      	bmi.n	800a07c <expf+0xc8>
 800a056:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a090 <expf+0xdc>
 800a05a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a062:	d5b1      	bpl.n	8009fc8 <expf+0x14>
 800a064:	2000      	movs	r0, #0
 800a066:	f000 ba7d 	b.w	800a564 <__math_may_uflowf>
 800a06a:	2000      	movs	r0, #0
 800a06c:	f000 ba80 	b.w	800a570 <__math_oflowf>
 800a070:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a074:	4770      	bx	lr
 800a076:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a094 <expf+0xe0>
 800a07a:	4770      	bx	lr
 800a07c:	2000      	movs	r0, #0
 800a07e:	f000 ba6b 	b.w	800a558 <__math_uflowf>
 800a082:	bf00      	nop
 800a084:	0800c478 	.word	0x0800c478
 800a088:	42b17217 	.word	0x42b17217
 800a08c:	c2cff1b4 	.word	0xc2cff1b4
 800a090:	c2ce8ecf 	.word	0xc2ce8ecf
 800a094:	00000000 	.word	0x00000000

0800a098 <exp2f>:
 800a098:	ee10 3a10 	vmov	r3, s0
 800a09c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a0a0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a0a4:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a0a8:	d22e      	bcs.n	800a108 <exp2f+0x70>
 800a0aa:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a0ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a158 <exp2f+0xc0>)
 800a0b0:	ed93 2b40 	vldr	d2, [r3, #256]	@ 0x100
 800a0b4:	ee32 3b07 	vadd.f64	d3, d2, d7
 800a0b8:	ee13 0a10 	vmov	r0, s6
 800a0bc:	ee33 3b42 	vsub.f64	d3, d3, d2
 800a0c0:	f000 021f 	and.w	r2, r0, #31
 800a0c4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800a0c8:	b430      	push	{r4, r5}
 800a0ca:	ee37 7b43 	vsub.f64	d7, d7, d3
 800a0ce:	ed93 4b42 	vldr	d4, [r3, #264]	@ 0x108
 800a0d2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800a0d6:	684d      	ldr	r5, [r1, #4]
 800a0d8:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800a0dc:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800a0e0:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a0e4:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	190a      	adds	r2, r1, r4
 800a0ec:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800a0f0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a0f4:	ec43 2b17 	vmov	d7, r2, r3
 800a0f8:	eea6 0b04 	vfma.f64	d0, d6, d4
 800a0fc:	bc30      	pop	{r4, r5}
 800a0fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a102:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a106:	4770      	bx	lr
 800a108:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 800a10c:	d01e      	beq.n	800a14c <exp2f+0xb4>
 800a10e:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 800a112:	d218      	bcs.n	800a146 <exp2f+0xae>
 800a114:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	dc10      	bgt.n	800a140 <exp2f+0xa8>
 800a11e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800a15c <exp2f+0xc4>
 800a122:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800a126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12a:	d912      	bls.n	800a152 <exp2f+0xba>
 800a12c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800a160 <exp2f+0xc8>
 800a130:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a138:	d5b7      	bpl.n	800a0aa <exp2f+0x12>
 800a13a:	2000      	movs	r0, #0
 800a13c:	f000 ba12 	b.w	800a564 <__math_may_uflowf>
 800a140:	2000      	movs	r0, #0
 800a142:	f000 ba15 	b.w	800a570 <__math_oflowf>
 800a146:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a14a:	4770      	bx	lr
 800a14c:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800a164 <exp2f+0xcc>
 800a150:	4770      	bx	lr
 800a152:	2000      	movs	r0, #0
 800a154:	f000 ba00 	b.w	800a558 <__math_uflowf>
 800a158:	0800c478 	.word	0x0800c478
 800a15c:	c3160000 	.word	0xc3160000
 800a160:	c3150000 	.word	0xc3150000
 800a164:	00000000 	.word	0x00000000

0800a168 <sinf>:
 800a168:	b530      	push	{r4, r5, lr}
 800a16a:	ee10 4a10 	vmov	r4, s0
 800a16e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a172:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a176:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a17a:	b083      	sub	sp, #12
 800a17c:	d219      	bcs.n	800a1b2 <sinf+0x4a>
 800a17e:	ee27 5b07 	vmul.f64	d5, d7, d7
 800a182:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800a186:	d36c      	bcc.n	800a262 <sinf+0xfa>
 800a188:	ee27 2b05 	vmul.f64	d2, d7, d5
 800a18c:	ee25 1b02 	vmul.f64	d1, d5, d2
 800a190:	4b69      	ldr	r3, [pc, #420]	@ (800a338 <sinf+0x1d0>)
 800a192:	ed93 3b1a 	vldr	d3, [r3, #104]	@ 0x68
 800a196:	ed93 6b18 	vldr	d6, [r3, #96]	@ 0x60
 800a19a:	ed93 4b16 	vldr	d4, [r3, #88]	@ 0x58
 800a19e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800a1a2:	eea2 7b04 	vfma.f64	d7, d2, d4
 800a1a6:	eea6 7b01 	vfma.f64	d7, d6, d1
 800a1aa:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a1ae:	b003      	add	sp, #12
 800a1b0:	bd30      	pop	{r4, r5, pc}
 800a1b2:	f240 422e 	movw	r2, #1070	@ 0x42e
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d85b      	bhi.n	800a272 <sinf+0x10a>
 800a1ba:	495f      	ldr	r1, [pc, #380]	@ (800a338 <sinf+0x1d0>)
 800a1bc:	ed91 6b08 	vldr	d6, [r1, #32]
 800a1c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a1c4:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800a1c8:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 800a1cc:	ee16 3a90 	vmov	r3, s13
 800a1d0:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 800a1d4:	161b      	asrs	r3, r3, #24
 800a1d6:	f013 0f02 	tst.w	r3, #2
 800a1da:	ee06 3a90 	vmov	s13, r3
 800a1de:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 800a1e2:	bf08      	it	eq
 800a1e4:	460a      	moveq	r2, r1
 800a1e6:	07d8      	lsls	r0, r3, #31
 800a1e8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a1ec:	eea6 7b45 	vfms.f64	d7, d6, d5
 800a1f0:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a1f4:	d41b      	bmi.n	800a22e <sinf+0xc6>
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1fe:	ed91 2b00 	vldr	d2, [r1]
 800a202:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 800a206:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 800a20a:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 800a20e:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a212:	ee27 7b02 	vmul.f64	d7, d7, d2
 800a216:	ee27 4b06 	vmul.f64	d4, d7, d6
 800a21a:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a21e:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a222:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a226:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a22a:	b003      	add	sp, #12
 800a22c:	bd30      	pop	{r4, r5, pc}
 800a22e:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 800a232:	ee26 5b06 	vmul.f64	d5, d6, d6
 800a236:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 800a23a:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 800a23e:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a242:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 800a246:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 800a24a:	eea6 0b03 	vfma.f64	d0, d6, d3
 800a24e:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a252:	eea5 0b04 	vfma.f64	d0, d5, d4
 800a256:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a25a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a25e:	b003      	add	sp, #12
 800a260:	bd30      	pop	{r4, r5, pc}
 800a262:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800a266:	bf04      	itt	eq
 800a268:	eeb7 5bc5 	vcvteq.f32.f64	s10, d5
 800a26c:	ed8d 5a01 	vstreq	s10, [sp, #4]
 800a270:	e7db      	b.n	800a22a <sinf+0xc2>
 800a272:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800a276:	d23b      	bcs.n	800a2f0 <sinf+0x188>
 800a278:	4b30      	ldr	r3, [pc, #192]	@ (800a33c <sinf+0x1d4>)
 800a27a:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800a27e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800a282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a286:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a28a:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800a28e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a292:	4083      	lsls	r3, r0
 800a294:	6a08      	ldr	r0, [r1, #32]
 800a296:	6909      	ldr	r1, [r1, #16]
 800a298:	fba0 5003 	umull	r5, r0, r0, r3
 800a29c:	fb03 f202 	mul.w	r2, r3, r2
 800a2a0:	fbe3 0201 	umlal	r0, r2, r3, r1
 800a2a4:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 800a2a8:	0f8d      	lsrs	r5, r1, #30
 800a2aa:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 800a2ae:	1a51      	subs	r1, r2, r1
 800a2b0:	f7f6 f9dc 	bl	800066c <__aeabi_l2d>
 800a2b4:	4b22      	ldr	r3, [pc, #136]	@ (800a340 <sinf+0x1d8>)
 800a2b6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 800a330 <sinf+0x1c8>
 800a2ba:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a2be:	ec41 0b17 	vmov	d7, r0, r1
 800a2c2:	f014 0f02 	tst.w	r4, #2
 800a2c6:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 800a2ca:	bf08      	it	eq
 800a2cc:	4613      	moveq	r3, r2
 800a2ce:	07e9      	lsls	r1, r5, #31
 800a2d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2d4:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a2d8:	d40f      	bmi.n	800a2fa <sinf+0x192>
 800a2da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a2de:	ed92 2b00 	vldr	d2, [r2]
 800a2e2:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 800a2e6:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800a2ea:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 800a2ee:	e78e      	b.n	800a20e <sinf+0xa6>
 800a2f0:	b003      	add	sp, #12
 800a2f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f6:	f000 b953 	b.w	800a5a0 <__math_invalidf>
 800a2fa:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 800a2fe:	ee26 4b06 	vmul.f64	d4, d6, d6
 800a302:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a306:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 800a30a:	eea6 5b01 	vfma.f64	d5, d6, d1
 800a30e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800a312:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 800a316:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a31a:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a31e:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a322:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a326:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a32a:	e77e      	b.n	800a22a <sinf+0xc2>
 800a32c:	f3af 8000 	nop.w
 800a330:	54442d18 	.word	0x54442d18
 800a334:	3c1921fb 	.word	0x3c1921fb
 800a338:	0800c620 	.word	0x0800c620
 800a33c:	0800c5c0 	.word	0x0800c5c0
 800a340:	0800c690 	.word	0x0800c690
 800a344:	00000000 	.word	0x00000000

0800a348 <cosf>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	ee10 4a10 	vmov	r4, s0
 800a34e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a352:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a356:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800a35a:	d21e      	bcs.n	800a39a <cosf+0x52>
 800a35c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a360:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800a364:	d36f      	bcc.n	800a446 <cosf+0xfe>
 800a366:	ee27 1b07 	vmul.f64	d1, d7, d7
 800a36a:	4b69      	ldr	r3, [pc, #420]	@ (800a510 <cosf+0x1c8>)
 800a36c:	ed93 2b14 	vldr	d2, [r3, #80]	@ 0x50
 800a370:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a374:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800a378:	eea7 5b02 	vfma.f64	d5, d7, d2
 800a37c:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800a380:	ed93 4b10 	vldr	d4, [r3, #64]	@ 0x40
 800a384:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a388:	ee27 7b01 	vmul.f64	d7, d7, d1
 800a38c:	eea1 6b04 	vfma.f64	d6, d1, d4
 800a390:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a394:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	f240 422e 	movw	r2, #1070	@ 0x42e
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d854      	bhi.n	800a44c <cosf+0x104>
 800a3a2:	495b      	ldr	r1, [pc, #364]	@ (800a510 <cosf+0x1c8>)
 800a3a4:	ed91 6b08 	vldr	d6, [r1, #32]
 800a3a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a3ac:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800a3b0:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 800a3b4:	ee16 3a90 	vmov	r3, s13
 800a3b8:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 800a3bc:	161b      	asrs	r3, r3, #24
 800a3be:	f013 0f02 	tst.w	r3, #2
 800a3c2:	ee06 3a90 	vmov	s13, r3
 800a3c6:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 800a3ca:	bf08      	it	eq
 800a3cc:	460a      	moveq	r2, r1
 800a3ce:	07d8      	lsls	r0, r3, #31
 800a3d0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a3d4:	eea6 7b45 	vfms.f64	d7, d6, d5
 800a3d8:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a3dc:	d51a      	bpl.n	800a414 <cosf+0xcc>
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3e6:	ed91 2b00 	vldr	d2, [r1]
 800a3ea:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 800a3ee:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 800a3f2:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 800a3f6:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a3fa:	ee27 7b02 	vmul.f64	d7, d7, d2
 800a3fe:	ee27 4b06 	vmul.f64	d4, d7, d6
 800a402:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a406:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a40a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a40e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 800a418:	ee26 5b06 	vmul.f64	d5, d6, d6
 800a41c:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 800a420:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 800a424:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a428:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 800a42c:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 800a430:	eea6 0b03 	vfma.f64	d0, d6, d3
 800a434:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a438:	eea5 0b04 	vfma.f64	d0, d5, d4
 800a43c:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a440:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800a450:	d23d      	bcs.n	800a4ce <cosf+0x186>
 800a452:	4b30      	ldr	r3, [pc, #192]	@ (800a514 <cosf+0x1cc>)
 800a454:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800a458:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800a45c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a460:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a464:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800a468:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a46c:	4083      	lsls	r3, r0
 800a46e:	6a08      	ldr	r0, [r1, #32]
 800a470:	6909      	ldr	r1, [r1, #16]
 800a472:	fba0 5003 	umull	r5, r0, r0, r3
 800a476:	fb03 f202 	mul.w	r2, r3, r2
 800a47a:	fbe3 0201 	umlal	r0, r2, r3, r1
 800a47e:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 800a482:	0f8d      	lsrs	r5, r1, #30
 800a484:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 800a488:	1a51      	subs	r1, r2, r1
 800a48a:	f7f6 f8ef 	bl	800066c <__aeabi_l2d>
 800a48e:	4b22      	ldr	r3, [pc, #136]	@ (800a518 <cosf+0x1d0>)
 800a490:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 800a508 <cosf+0x1c0>
 800a494:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a498:	ec41 0b17 	vmov	d7, r0, r1
 800a49c:	f014 0f02 	tst.w	r4, #2
 800a4a0:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 800a4a4:	bf08      	it	eq
 800a4a6:	4613      	moveq	r3, r2
 800a4a8:	07e9      	lsls	r1, r5, #31
 800a4aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4ae:	ee27 6b07 	vmul.f64	d6, d7, d7
 800a4b2:	d510      	bpl.n	800a4d6 <cosf+0x18e>
 800a4b4:	f004 0403 	and.w	r4, r4, #3
 800a4b8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a4bc:	ed92 2b00 	vldr	d2, [r2]
 800a4c0:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 800a4c4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800a4c8:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 800a4cc:	e793      	b.n	800a3f6 <cosf+0xae>
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f000 b865 	b.w	800a5a0 <__math_invalidf>
 800a4d6:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 800a4da:	ee26 4b06 	vmul.f64	d4, d6, d6
 800a4de:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 800a4e2:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 800a4e6:	eea6 5b01 	vfma.f64	d5, d6, d1
 800a4ea:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800a4ee:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 800a4f2:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a4f6:	ee26 6b04 	vmul.f64	d6, d6, d4
 800a4fa:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a4fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a502:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	54442d18 	.word	0x54442d18
 800a50c:	3c1921fb 	.word	0x3c1921fb
 800a510:	0800c620 	.word	0x0800c620
 800a514:	0800c5c0 	.word	0x0800c5c0
 800a518:	0800c690 	.word	0x0800c690

0800a51c <with_errnof>:
 800a51c:	b510      	push	{r4, lr}
 800a51e:	ed2d 8b02 	vpush	{d8}
 800a522:	eeb0 8a40 	vmov.f32	s16, s0
 800a526:	4604      	mov	r4, r0
 800a528:	f000 fd32 	bl	800af90 <__errno>
 800a52c:	eeb0 0a48 	vmov.f32	s0, s16
 800a530:	ecbd 8b02 	vpop	{d8}
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	bd10      	pop	{r4, pc}

0800a538 <xflowf>:
 800a538:	b130      	cbz	r0, 800a548 <xflowf+0x10>
 800a53a:	eef1 7a40 	vneg.f32	s15, s0
 800a53e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a542:	2022      	movs	r0, #34	@ 0x22
 800a544:	f7ff bfea 	b.w	800a51c <with_errnof>
 800a548:	eef0 7a40 	vmov.f32	s15, s0
 800a54c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a550:	2022      	movs	r0, #34	@ 0x22
 800a552:	f7ff bfe3 	b.w	800a51c <with_errnof>
 800a556:	bf00      	nop

0800a558 <__math_uflowf>:
 800a558:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a560 <__math_uflowf+0x8>
 800a55c:	f7ff bfec 	b.w	800a538 <xflowf>
 800a560:	10000000 	.word	0x10000000

0800a564 <__math_may_uflowf>:
 800a564:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a56c <__math_may_uflowf+0x8>
 800a568:	f7ff bfe6 	b.w	800a538 <xflowf>
 800a56c:	1a200000 	.word	0x1a200000

0800a570 <__math_oflowf>:
 800a570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a578 <__math_oflowf+0x8>
 800a574:	f7ff bfe0 	b.w	800a538 <xflowf>
 800a578:	70000000 	.word	0x70000000

0800a57c <__math_divzerof>:
 800a57c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a59c <__math_divzerof+0x20>
 800a580:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a584:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a588:	2800      	cmp	r0, #0
 800a58a:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a58e:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a592:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a596:	f7ff bfc1 	b.w	800a51c <with_errnof>
 800a59a:	bf00      	nop
 800a59c:	00000000 	.word	0x00000000

0800a5a0 <__math_invalidf>:
 800a5a0:	eef0 7a40 	vmov.f32	s15, s0
 800a5a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a5a8:	eef4 7a67 	vcmp.f32	s15, s15
 800a5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a5b4:	d602      	bvs.n	800a5bc <__math_invalidf+0x1c>
 800a5b6:	2021      	movs	r0, #33	@ 0x21
 800a5b8:	f7ff bfb0 	b.w	800a51c <with_errnof>
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop

0800a5c0 <log10f>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ca:	f000 f8ab 	bl	800a724 <__ieee754_log10f>
 800a5ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800a5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d6:	d60f      	bvs.n	800a5f8 <log10f+0x38>
 800a5d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e0:	d80a      	bhi.n	800a5f8 <log10f+0x38>
 800a5e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ea:	d108      	bne.n	800a5fe <log10f+0x3e>
 800a5ec:	f000 fcd0 	bl	800af90 <__errno>
 800a5f0:	2322      	movs	r3, #34	@ 0x22
 800a5f2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800a618 <log10f+0x58>
 800a5f6:	6003      	str	r3, [r0, #0]
 800a5f8:	ecbd 8b02 	vpop	{d8}
 800a5fc:	bd08      	pop	{r3, pc}
 800a5fe:	f000 fcc7 	bl	800af90 <__errno>
 800a602:	ecbd 8b02 	vpop	{d8}
 800a606:	4603      	mov	r3, r0
 800a608:	2221      	movs	r2, #33	@ 0x21
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	4803      	ldr	r0, [pc, #12]	@ (800a61c <log10f+0x5c>)
 800a60e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a612:	f000 b805 	b.w	800a620 <nanf>
 800a616:	bf00      	nop
 800a618:	ff800000 	.word	0xff800000
 800a61c:	0800c080 	.word	0x0800c080

0800a620 <nanf>:
 800a620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a628 <nanf+0x8>
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	7fc00000 	.word	0x7fc00000

0800a62c <tanhf>:
 800a62c:	b530      	push	{r4, r5, lr}
 800a62e:	ed2d 8b02 	vpush	{d8}
 800a632:	b083      	sub	sp, #12
 800a634:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a638:	9c01      	ldr	r4, [sp, #4]
 800a63a:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 800a63e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a642:	d310      	bcc.n	800a666 <tanhf+0x3a>
 800a644:	4b33      	ldr	r3, [pc, #204]	@ (800a714 <tanhf+0xe8>)
 800a646:	2c00      	cmp	r4, #0
 800a648:	ed93 7a00 	vldr	s14, [r3]
 800a64c:	edd3 7a00 	vldr	s15, [r3]
 800a650:	db39      	blt.n	800a6c6 <tanhf+0x9a>
 800a652:	eef0 6a40 	vmov.f32	s13, s0
 800a656:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800a65a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a65e:	b003      	add	sp, #12
 800a660:	ecbd 8b02 	vpop	{d8}
 800a664:	bd30      	pop	{r4, r5, pc}
 800a666:	4a2c      	ldr	r2, [pc, #176]	@ (800a718 <tanhf+0xec>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d90f      	bls.n	800a68c <tanhf+0x60>
 800a66c:	4a29      	ldr	r2, [pc, #164]	@ (800a714 <tanhf+0xe8>)
 800a66e:	4b2b      	ldr	r3, [pc, #172]	@ (800a71c <tanhf+0xf0>)
 800a670:	ed92 0a00 	vldr	s0, [r2]
 800a674:	edd3 7a00 	vldr	s15, [r3]
 800a678:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a67c:	2c00      	cmp	r4, #0
 800a67e:	bfb8      	it	lt
 800a680:	eeb1 0a40 	vneglt.f32	s0, s0
 800a684:	b003      	add	sp, #12
 800a686:	ecbd 8b02 	vpop	{d8}
 800a68a:	bd30      	pop	{r4, r5, pc}
 800a68c:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800a690:	d323      	bcc.n	800a6da <tanhf+0xae>
 800a692:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a696:	d32a      	bcc.n	800a6ee <tanhf+0xc2>
 800a698:	4d21      	ldr	r5, [pc, #132]	@ (800a720 <tanhf+0xf4>)
 800a69a:	f000 fa3f 	bl	800ab1c <fabsf>
 800a69e:	edd5 7a00 	vldr	s15, [r5]
 800a6a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a6a6:	f000 f903 	bl	800a8b0 <expm1f>
 800a6aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a714 <tanhf+0xe8>)
 800a6ac:	edd3 7a00 	vldr	s15, [r3]
 800a6b0:	ed95 6a00 	vldr	s12, [r5]
 800a6b4:	ed95 7a00 	vldr	s14, [r5]
 800a6b8:	ee37 7a00 	vadd.f32	s14, s14, s0
 800a6bc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a6c0:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800a6c4:	e7da      	b.n	800a67c <tanhf+0x50>
 800a6c6:	eddd 6a01 	vldr	s13, [sp, #4]
 800a6ca:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800a6ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a6d2:	b003      	add	sp, #12
 800a6d4:	ecbd 8b02 	vpop	{d8}
 800a6d8:	bd30      	pop	{r4, r5, pc}
 800a6da:	4b0e      	ldr	r3, [pc, #56]	@ (800a714 <tanhf+0xe8>)
 800a6dc:	eddd 7a01 	vldr	s15, [sp, #4]
 800a6e0:	ed93 0a00 	vldr	s0, [r3]
 800a6e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a6ec:	e7b7      	b.n	800a65e <tanhf+0x32>
 800a6ee:	4d0c      	ldr	r5, [pc, #48]	@ (800a720 <tanhf+0xf4>)
 800a6f0:	ed95 8a00 	vldr	s16, [r5]
 800a6f4:	f000 fa12 	bl	800ab1c <fabsf>
 800a6f8:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800a6fc:	f000 f8d8 	bl	800a8b0 <expm1f>
 800a700:	ed95 7a00 	vldr	s14, [r5]
 800a704:	ee37 7a00 	vadd.f32	s14, s14, s0
 800a708:	eef1 7a40 	vneg.f32	s15, s0
 800a70c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800a710:	e7b4      	b.n	800a67c <tanhf+0x50>
 800a712:	bf00      	nop
 800a714:	0800c708 	.word	0x0800c708
 800a718:	41afffff 	.word	0x41afffff
 800a71c:	0800c700 	.word	0x0800c700
 800a720:	0800c704 	.word	0x0800c704

0800a724 <__ieee754_log10f>:
 800a724:	b508      	push	{r3, lr}
 800a726:	ee10 3a10 	vmov	r3, s0
 800a72a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a72e:	ed2d 8b02 	vpush	{d8}
 800a732:	d02c      	beq.n	800a78e <__ieee754_log10f+0x6a>
 800a734:	2b00      	cmp	r3, #0
 800a736:	461a      	mov	r2, r3
 800a738:	db32      	blt.n	800a7a0 <__ieee754_log10f+0x7c>
 800a73a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a73e:	da41      	bge.n	800a7c4 <__ieee754_log10f+0xa0>
 800a740:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a744:	db35      	blt.n	800a7b2 <__ieee754_log10f+0x8e>
 800a746:	2100      	movs	r1, #0
 800a748:	15d3      	asrs	r3, r2, #23
 800a74a:	3b7f      	subs	r3, #127	@ 0x7f
 800a74c:	440b      	add	r3, r1
 800a74e:	0fd9      	lsrs	r1, r3, #31
 800a750:	f1c1 017f 	rsb	r1, r1, #127	@ 0x7f
 800a754:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a758:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800a764:	ee00 2a10 	vmov	s0, r2
 800a768:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a76c:	f000 f83c 	bl	800a7e8 <logf>
 800a770:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a7d0 <__ieee754_log10f+0xac>
 800a774:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800a7d4 <__ieee754_log10f+0xb0>
 800a778:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a77c:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a7d8 <__ieee754_log10f+0xb4>
 800a780:	eea8 0a07 	vfma.f32	s0, s16, s14
 800a784:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a788:	ecbd 8b02 	vpop	{d8}
 800a78c:	bd08      	pop	{r3, pc}
 800a78e:	ecbd 8b02 	vpop	{d8}
 800a792:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a7dc <__ieee754_log10f+0xb8>
 800a796:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a7e0 <__ieee754_log10f+0xbc>
 800a79a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a79e:	bd08      	pop	{r3, pc}
 800a7a0:	ecbd 8b02 	vpop	{d8}
 800a7a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a7a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a7e0 <__ieee754_log10f+0xbc>
 800a7ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800a7b0:	bd08      	pop	{r3, pc}
 800a7b2:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a7e4 <__ieee754_log10f+0xc0>
 800a7b6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a7ba:	f06f 0118 	mvn.w	r1, #24
 800a7be:	ee17 2a90 	vmov	r2, s15
 800a7c2:	e7c1      	b.n	800a748 <__ieee754_log10f+0x24>
 800a7c4:	ecbd 8b02 	vpop	{d8}
 800a7c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a7cc:	bd08      	pop	{r3, pc}
 800a7ce:	bf00      	nop
 800a7d0:	3ede5bd9 	.word	0x3ede5bd9
 800a7d4:	355427db 	.word	0x355427db
 800a7d8:	3e9a2080 	.word	0x3e9a2080
 800a7dc:	cc000000 	.word	0xcc000000
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	4c000000 	.word	0x4c000000

0800a7e8 <logf>:
 800a7e8:	ee10 3a10 	vmov	r3, s0
 800a7ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	d038      	beq.n	800a866 <logf+0x7e>
 800a7f4:	f5a3 0100 	sub.w	r1, r3, #8388608	@ 0x800000
 800a7f8:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800a7fc:	d236      	bcs.n	800a86c <logf+0x84>
 800a7fe:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a802:	f102 4340 	add.w	r3, r2, #3221225472	@ 0xc0000000
 800a806:	4927      	ldr	r1, [pc, #156]	@ (800a8a4 <logf+0xbc>)
 800a808:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800a80c:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 800a810:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a814:	ed91 4b40 	vldr	d4, [r1, #256]	@ 0x100
 800a818:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a81c:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a820:	ed91 6b42 	vldr	d6, [r1, #264]	@ 0x108
 800a824:	0dd9      	lsrs	r1, r3, #23
 800a826:	05c9      	lsls	r1, r1, #23
 800a828:	ed90 2b00 	vldr	d2, [r0]
 800a82c:	1a52      	subs	r2, r2, r1
 800a82e:	ee03 2a90 	vmov	s7, r2
 800a832:	ed90 1b02 	vldr	d1, [r0, #8]
 800a836:	15db      	asrs	r3, r3, #23
 800a838:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800a83c:	eea2 0b03 	vfma.f64	d0, d2, d3
 800a840:	ee03 3a90 	vmov	s7, r3
 800a844:	ee20 2b00 	vmul.f64	d2, d0, d0
 800a848:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a84c:	eeb8 3be3 	vcvt.f64.s32	d3, s7
 800a850:	eea6 7b02 	vfma.f64	d7, d6, d2
 800a854:	eea3 1b04 	vfma.f64	d1, d3, d4
 800a858:	ee30 0b01 	vadd.f64	d0, d0, d1
 800a85c:	eea2 0b07 	vfma.f64	d0, d2, d7
 800a860:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a864:	4770      	bx	lr
 800a866:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800a8a8 <logf+0xc0>
 800a86a:	4770      	bx	lr
 800a86c:	0059      	lsls	r1, r3, #1
 800a86e:	d014      	beq.n	800a89a <logf+0xb2>
 800a870:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a874:	d014      	beq.n	800a8a0 <logf+0xb8>
 800a876:	2b00      	cmp	r3, #0
 800a878:	db0b      	blt.n	800a892 <logf+0xaa>
 800a87a:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800a87e:	d208      	bcs.n	800a892 <logf+0xaa>
 800a880:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a8ac <logf+0xc4>
 800a884:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a888:	ee17 3a90 	vmov	r3, s15
 800a88c:	f1a3 6238 	sub.w	r2, r3, #192937984	@ 0xb800000
 800a890:	e7b5      	b.n	800a7fe <logf+0x16>
 800a892:	ee00 3a10 	vmov	s0, r3
 800a896:	f7ff be83 	b.w	800a5a0 <__math_invalidf>
 800a89a:	2001      	movs	r0, #1
 800a89c:	f7ff be6e 	b.w	800a57c <__math_divzerof>
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	0800c710 	.word	0x0800c710
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	4b000000 	.word	0x4b000000

0800a8b0 <expm1f>:
 800a8b0:	ee10 0a10 	vmov	r0, s0
 800a8b4:	4a8a      	ldr	r2, [pc, #552]	@ (800aae0 <expm1f+0x230>)
 800a8b6:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800a8c0:	d92b      	bls.n	800a91a <expm1f+0x6a>
 800a8c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a8c6:	f200 808f 	bhi.w	800a9e8 <expm1f+0x138>
 800a8ca:	f000 80e3 	beq.w	800aa94 <expm1f+0x1e4>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f040 808d 	bne.w	800a9ee <expm1f+0x13e>
 800a8d4:	4a83      	ldr	r2, [pc, #524]	@ (800aae4 <expm1f+0x234>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	f200 80ff 	bhi.w	800aada <expm1f+0x22a>
 800a8dc:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800aae8 <expm1f+0x238>
 800a8e0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a8e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8ec:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 800aaec <expm1f+0x23c>
 800a8f0:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800aaf0 <expm1f+0x240>
 800a8f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8fc:	ee17 3a90 	vmov	r3, s15
 800a900:	eef0 7a40 	vmov.f32	s15, s0
 800a904:	eee7 7a46 	vfms.f32	s15, s14, s12
 800a908:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a90c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a910:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a918:	e007      	b.n	800a92a <expm1f+0x7a>
 800a91a:	4a76      	ldr	r2, [pc, #472]	@ (800aaf4 <expm1f+0x244>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d855      	bhi.n	800a9cc <expm1f+0x11c>
 800a920:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800a924:	f0c0 8090 	bcc.w	800aa48 <expm1f+0x198>
 800a928:	2300      	movs	r3, #0
 800a92a:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 800a92e:	ee20 4a03 	vmul.f32	s8, s0, s6
 800a932:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800aaf8 <expm1f+0x248>
 800a936:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 800aafc <expm1f+0x24c>
 800a93a:	eddf 4a71 	vldr	s9, [pc, #452]	@ 800ab00 <expm1f+0x250>
 800a93e:	ed9f 5a71 	vldr	s10, [pc, #452]	@ 800ab04 <expm1f+0x254>
 800a942:	ee20 7a04 	vmul.f32	s14, s0, s8
 800a946:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800a94a:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a94e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ab08 <expm1f+0x258>
 800a952:	eee6 4a07 	vfma.f32	s9, s12, s14
 800a956:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 800a95a:	eee4 6a87 	vfma.f32	s13, s9, s14
 800a95e:	eef1 5a08 	vmov.f32	s11, #24	@ 0x40c00000  6.0
 800a962:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a966:	eef0 6a63 	vmov.f32	s13, s7
 800a96a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800a96e:	eea4 6a66 	vfms.f32	s12, s8, s13
 800a972:	eee0 5a46 	vfms.f32	s11, s0, s12
 800a976:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a97a:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800a97e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a982:	2b00      	cmp	r3, #0
 800a984:	d05b      	beq.n	800aa3e <expm1f+0x18e>
 800a986:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800a990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a994:	d077      	beq.n	800aa86 <expm1f+0x1d6>
 800a996:	2b01      	cmp	r3, #1
 800a998:	d05f      	beq.n	800aa5a <expm1f+0x1aa>
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	2a39      	cmp	r2, #57	@ 0x39
 800a99e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a9a2:	d840      	bhi.n	800aa26 <expm1f+0x176>
 800a9a4:	2b16      	cmp	r3, #22
 800a9a6:	dc7b      	bgt.n	800aaa0 <expm1f+0x1f0>
 800a9a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9ac:	fa42 f303 	asr.w	r3, r2, r3
 800a9b0:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800a9b4:	ee07 3a10 	vmov	s14, r3
 800a9b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a9bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9c0:	ee17 3a90 	vmov	r3, s15
 800a9c4:	18cb      	adds	r3, r1, r3
 800a9c6:	ee00 3a10 	vmov	s0, r3
 800a9ca:	4770      	bx	lr
 800a9cc:	4a4f      	ldr	r2, [pc, #316]	@ (800ab0c <expm1f+0x25c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d81d      	bhi.n	800aa0e <expm1f+0x15e>
 800a9d2:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800aaec <expm1f+0x23c>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d04f      	beq.n	800aa7a <expm1f+0x1ca>
 800a9da:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ab10 <expm1f+0x260>
 800a9de:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9e6:	e791      	b.n	800a90c <expm1f+0x5c>
 800a9e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a9ec:	4770      	bx	lr
 800a9ee:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ab14 <expm1f+0x264>
 800a9f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a9f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fe:	d469      	bmi.n	800aad4 <expm1f+0x224>
 800aa00:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800aae8 <expm1f+0x238>
 800aa04:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800aa08:	ee20 7a07 	vmul.f32	s14, s0, s14
 800aa0c:	e76c      	b.n	800a8e8 <expm1f+0x38>
 800aa0e:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800aae8 <expm1f+0x238>
 800aa12:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800aa16:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800aa20:	fe46 7aa7 	vseleq.f32	s15, s13, s15
 800aa24:	e760      	b.n	800a8e8 <expm1f+0x38>
 800aa26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa2a:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800aa2e:	ee17 3a90 	vmov	r3, s15
 800aa32:	4419      	add	r1, r3
 800aa34:	ee07 1a90 	vmov	s15, r1
 800aa38:	ee37 0ae3 	vsub.f32	s0, s15, s7
 800aa3c:	4770      	bx	lr
 800aa3e:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800aa42:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aa46:	4770      	bx	lr
 800aa48:	eddf 7a33 	vldr	s15, [pc, #204]	@ 800ab18 <expm1f+0x268>
 800aa4c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aa50:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800aa54:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa58:	4770      	bx	lr
 800aa5a:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800aa5e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800aa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa66:	d52c      	bpl.n	800aac2 <expm1f+0x212>
 800aa68:	ee30 3a03 	vadd.f32	s6, s0, s6
 800aa6c:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 800aa70:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800aa74:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa78:	4770      	bx	lr
 800aa7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800aaf0 <expm1f+0x240>
 800aa7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aa82:	2301      	movs	r3, #1
 800aa84:	e742      	b.n	800a90c <expm1f+0x5c>
 800aa86:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aa8a:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800aa8e:	eea7 0a83 	vfma.f32	s0, s15, s6
 800aa92:	4770      	bx	lr
 800aa94:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800aa9e:	4770      	bx	lr
 800aaa0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800aaa4:	05db      	lsls	r3, r3, #23
 800aaa6:	ee07 3a10 	vmov	s14, r3
 800aaaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aab2:	ee30 0a23 	vadd.f32	s0, s0, s7
 800aab6:	ee10 3a10 	vmov	r3, s0
 800aaba:	440b      	add	r3, r1
 800aabc:	ee00 3a10 	vmov	s0, r3
 800aac0:	4770      	bx	lr
 800aac2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aac6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800aaca:	eee7 3a87 	vfma.f32	s7, s15, s14
 800aace:	eeb0 0a63 	vmov.f32	s0, s7
 800aad2:	4770      	bx	lr
 800aad4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800aad8:	4770      	bx	lr
 800aada:	f7ff bd49 	b.w	800a570 <__math_oflowf>
 800aade:	bf00      	nop
 800aae0:	4195b843 	.word	0x4195b843
 800aae4:	42b17217 	.word	0x42b17217
 800aae8:	3fb8aa3b 	.word	0x3fb8aa3b
 800aaec:	3f317180 	.word	0x3f317180
 800aaf0:	3717f7d1 	.word	0x3717f7d1
 800aaf4:	3eb17218 	.word	0x3eb17218
 800aaf8:	b457edbb 	.word	0xb457edbb
 800aafc:	36867e54 	.word	0x36867e54
 800ab00:	b8a670cd 	.word	0xb8a670cd
 800ab04:	bd088889 	.word	0xbd088889
 800ab08:	3ad00d01 	.word	0x3ad00d01
 800ab0c:	3f851591 	.word	0x3f851591
 800ab10:	b717f7d1 	.word	0xb717f7d1
 800ab14:	0da24260 	.word	0x0da24260
 800ab18:	7149f2ca 	.word	0x7149f2ca

0800ab1c <fabsf>:
 800ab1c:	ee10 3a10 	vmov	r3, s0
 800ab20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab24:	ee00 3a10 	vmov	s0, r3
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop

0800ab2c <__assert_func>:
 800ab2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab2e:	4614      	mov	r4, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	4b09      	ldr	r3, [pc, #36]	@ (800ab58 <__assert_func+0x2c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4605      	mov	r5, r0
 800ab38:	68d8      	ldr	r0, [r3, #12]
 800ab3a:	b14c      	cbz	r4, 800ab50 <__assert_func+0x24>
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <__assert_func+0x30>)
 800ab3e:	9100      	str	r1, [sp, #0]
 800ab40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab44:	4906      	ldr	r1, [pc, #24]	@ (800ab60 <__assert_func+0x34>)
 800ab46:	462b      	mov	r3, r5
 800ab48:	f000 f91e 	bl	800ad88 <fiprintf>
 800ab4c:	f000 fa5b 	bl	800b006 <abort>
 800ab50:	4b04      	ldr	r3, [pc, #16]	@ (800ab64 <__assert_func+0x38>)
 800ab52:	461c      	mov	r4, r3
 800ab54:	e7f3      	b.n	800ab3e <__assert_func+0x12>
 800ab56:	bf00      	nop
 800ab58:	2000003c 	.word	0x2000003c
 800ab5c:	0800c830 	.word	0x0800c830
 800ab60:	0800c83d 	.word	0x0800c83d
 800ab64:	0800c86b 	.word	0x0800c86b

0800ab68 <clearerr>:
 800ab68:	4b10      	ldr	r3, [pc, #64]	@ (800abac <clearerr+0x44>)
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	b118      	cbz	r0, 800ab7a <clearerr+0x12>
 800ab72:	6a03      	ldr	r3, [r0, #32]
 800ab74:	b90b      	cbnz	r3, 800ab7a <clearerr+0x12>
 800ab76:	f000 f8ef 	bl	800ad58 <__sinit>
 800ab7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab7c:	07d8      	lsls	r0, r3, #31
 800ab7e:	d405      	bmi.n	800ab8c <clearerr+0x24>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	0599      	lsls	r1, r3, #22
 800ab84:	d402      	bmi.n	800ab8c <clearerr+0x24>
 800ab86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab88:	f000 fa2d 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 800ab94:	81a2      	strh	r2, [r4, #12]
 800ab96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab98:	07d2      	lsls	r2, r2, #31
 800ab9a:	d406      	bmi.n	800abaa <clearerr+0x42>
 800ab9c:	059b      	lsls	r3, r3, #22
 800ab9e:	d404      	bmi.n	800abaa <clearerr+0x42>
 800aba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba6:	f000 ba1f 	b.w	800afe8 <__retarget_lock_release_recursive>
 800abaa:	bd10      	pop	{r4, pc}
 800abac:	2000003c 	.word	0x2000003c

0800abb0 <feof>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4b10      	ldr	r3, [pc, #64]	@ (800abf4 <feof+0x44>)
 800abb4:	4604      	mov	r4, r0
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	b118      	cbz	r0, 800abc2 <feof+0x12>
 800abba:	6a03      	ldr	r3, [r0, #32]
 800abbc:	b90b      	cbnz	r3, 800abc2 <feof+0x12>
 800abbe:	f000 f8cb 	bl	800ad58 <__sinit>
 800abc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abc4:	07d8      	lsls	r0, r3, #31
 800abc6:	d405      	bmi.n	800abd4 <feof+0x24>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	0599      	lsls	r1, r3, #22
 800abcc:	d402      	bmi.n	800abd4 <feof+0x24>
 800abce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abd0:	f000 fa09 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800abd4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abd6:	89a5      	ldrh	r5, [r4, #12]
 800abd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abdc:	07d2      	lsls	r2, r2, #31
 800abde:	f3c5 1540 	ubfx	r5, r5, #5, #1
 800abe2:	d404      	bmi.n	800abee <feof+0x3e>
 800abe4:	059b      	lsls	r3, r3, #22
 800abe6:	d402      	bmi.n	800abee <feof+0x3e>
 800abe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abea:	f000 f9fd 	bl	800afe8 <__retarget_lock_release_recursive>
 800abee:	4628      	mov	r0, r5
 800abf0:	bd38      	pop	{r3, r4, r5, pc}
 800abf2:	bf00      	nop
 800abf4:	2000003c 	.word	0x2000003c

0800abf8 <ferror>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4b10      	ldr	r3, [pc, #64]	@ (800ac3c <ferror+0x44>)
 800abfc:	4604      	mov	r4, r0
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	b118      	cbz	r0, 800ac0a <ferror+0x12>
 800ac02:	6a03      	ldr	r3, [r0, #32]
 800ac04:	b90b      	cbnz	r3, 800ac0a <ferror+0x12>
 800ac06:	f000 f8a7 	bl	800ad58 <__sinit>
 800ac0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac0c:	07d8      	lsls	r0, r3, #31
 800ac0e:	d405      	bmi.n	800ac1c <ferror+0x24>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	0599      	lsls	r1, r3, #22
 800ac14:	d402      	bmi.n	800ac1c <ferror+0x24>
 800ac16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac18:	f000 f9e5 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800ac1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac1e:	89a5      	ldrh	r5, [r4, #12]
 800ac20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac24:	07d2      	lsls	r2, r2, #31
 800ac26:	f3c5 1580 	ubfx	r5, r5, #6, #1
 800ac2a:	d404      	bmi.n	800ac36 <ferror+0x3e>
 800ac2c:	059b      	lsls	r3, r3, #22
 800ac2e:	d402      	bmi.n	800ac36 <ferror+0x3e>
 800ac30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac32:	f000 f9d9 	bl	800afe8 <__retarget_lock_release_recursive>
 800ac36:	4628      	mov	r0, r5
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2000003c 	.word	0x2000003c

0800ac40 <std>:
 800ac40:	2300      	movs	r3, #0
 800ac42:	b510      	push	{r4, lr}
 800ac44:	4604      	mov	r4, r0
 800ac46:	e9c0 3300 	strd	r3, r3, [r0]
 800ac4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac4e:	6083      	str	r3, [r0, #8]
 800ac50:	8181      	strh	r1, [r0, #12]
 800ac52:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac54:	81c2      	strh	r2, [r0, #14]
 800ac56:	6183      	str	r3, [r0, #24]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	305c      	adds	r0, #92	@ 0x5c
 800ac5e:	f000 f98e 	bl	800af7e <memset>
 800ac62:	4b0d      	ldr	r3, [pc, #52]	@ (800ac98 <std+0x58>)
 800ac64:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac66:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <std+0x5c>)
 800ac68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <std+0x60>)
 800ac6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aca4 <std+0x64>)
 800ac70:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac72:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <std+0x68>)
 800ac74:	6224      	str	r4, [r4, #32]
 800ac76:	429c      	cmp	r4, r3
 800ac78:	d006      	beq.n	800ac88 <std+0x48>
 800ac7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac7e:	4294      	cmp	r4, r2
 800ac80:	d002      	beq.n	800ac88 <std+0x48>
 800ac82:	33d0      	adds	r3, #208	@ 0xd0
 800ac84:	429c      	cmp	r4, r3
 800ac86:	d105      	bne.n	800ac94 <std+0x54>
 800ac88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac90:	f000 b9a8 	b.w	800afe4 <__retarget_lock_init_recursive>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop
 800ac98:	0800b865 	.word	0x0800b865
 800ac9c:	0800b887 	.word	0x0800b887
 800aca0:	0800b8bf 	.word	0x0800b8bf
 800aca4:	0800b8e3 	.word	0x0800b8e3
 800aca8:	200113fc 	.word	0x200113fc

0800acac <stdio_exit_handler>:
 800acac:	4a02      	ldr	r2, [pc, #8]	@ (800acb8 <stdio_exit_handler+0xc>)
 800acae:	4903      	ldr	r1, [pc, #12]	@ (800acbc <stdio_exit_handler+0x10>)
 800acb0:	4803      	ldr	r0, [pc, #12]	@ (800acc0 <stdio_exit_handler+0x14>)
 800acb2:	f000 b87b 	b.w	800adac <_fwalk_sglue>
 800acb6:	bf00      	nop
 800acb8:	20000030 	.word	0x20000030
 800acbc:	0800b7fd 	.word	0x0800b7fd
 800acc0:	20000040 	.word	0x20000040

0800acc4 <cleanup_stdio>:
 800acc4:	6841      	ldr	r1, [r0, #4]
 800acc6:	4b0c      	ldr	r3, [pc, #48]	@ (800acf8 <cleanup_stdio+0x34>)
 800acc8:	4299      	cmp	r1, r3
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	d001      	beq.n	800acd4 <cleanup_stdio+0x10>
 800acd0:	f000 fd94 	bl	800b7fc <_fflush_r>
 800acd4:	68a1      	ldr	r1, [r4, #8]
 800acd6:	4b09      	ldr	r3, [pc, #36]	@ (800acfc <cleanup_stdio+0x38>)
 800acd8:	4299      	cmp	r1, r3
 800acda:	d002      	beq.n	800ace2 <cleanup_stdio+0x1e>
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 fd8d 	bl	800b7fc <_fflush_r>
 800ace2:	68e1      	ldr	r1, [r4, #12]
 800ace4:	4b06      	ldr	r3, [pc, #24]	@ (800ad00 <cleanup_stdio+0x3c>)
 800ace6:	4299      	cmp	r1, r3
 800ace8:	d004      	beq.n	800acf4 <cleanup_stdio+0x30>
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf0:	f000 bd84 	b.w	800b7fc <_fflush_r>
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	bf00      	nop
 800acf8:	200113fc 	.word	0x200113fc
 800acfc:	20011464 	.word	0x20011464
 800ad00:	200114cc 	.word	0x200114cc

0800ad04 <global_stdio_init.part.0>:
 800ad04:	b510      	push	{r4, lr}
 800ad06:	4b0b      	ldr	r3, [pc, #44]	@ (800ad34 <global_stdio_init.part.0+0x30>)
 800ad08:	4c0b      	ldr	r4, [pc, #44]	@ (800ad38 <global_stdio_init.part.0+0x34>)
 800ad0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad3c <global_stdio_init.part.0+0x38>)
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	2200      	movs	r2, #0
 800ad12:	2104      	movs	r1, #4
 800ad14:	f7ff ff94 	bl	800ac40 <std>
 800ad18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	2109      	movs	r1, #9
 800ad20:	f7ff ff8e 	bl	800ac40 <std>
 800ad24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad28:	2202      	movs	r2, #2
 800ad2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2e:	2112      	movs	r1, #18
 800ad30:	f7ff bf86 	b.w	800ac40 <std>
 800ad34:	20011534 	.word	0x20011534
 800ad38:	200113fc 	.word	0x200113fc
 800ad3c:	0800acad 	.word	0x0800acad

0800ad40 <__sfp_lock_acquire>:
 800ad40:	4801      	ldr	r0, [pc, #4]	@ (800ad48 <__sfp_lock_acquire+0x8>)
 800ad42:	f000 b950 	b.w	800afe6 <__retarget_lock_acquire_recursive>
 800ad46:	bf00      	nop
 800ad48:	20011539 	.word	0x20011539

0800ad4c <__sfp_lock_release>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	@ (800ad54 <__sfp_lock_release+0x8>)
 800ad4e:	f000 b94b 	b.w	800afe8 <__retarget_lock_release_recursive>
 800ad52:	bf00      	nop
 800ad54:	20011539 	.word	0x20011539

0800ad58 <__sinit>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	f7ff fff0 	bl	800ad40 <__sfp_lock_acquire>
 800ad60:	6a23      	ldr	r3, [r4, #32]
 800ad62:	b11b      	cbz	r3, 800ad6c <__sinit+0x14>
 800ad64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad68:	f7ff bff0 	b.w	800ad4c <__sfp_lock_release>
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <__sinit+0x28>)
 800ad6e:	6223      	str	r3, [r4, #32]
 800ad70:	4b04      	ldr	r3, [pc, #16]	@ (800ad84 <__sinit+0x2c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1f5      	bne.n	800ad64 <__sinit+0xc>
 800ad78:	f7ff ffc4 	bl	800ad04 <global_stdio_init.part.0>
 800ad7c:	e7f2      	b.n	800ad64 <__sinit+0xc>
 800ad7e:	bf00      	nop
 800ad80:	0800acc5 	.word	0x0800acc5
 800ad84:	20011534 	.word	0x20011534

0800ad88 <fiprintf>:
 800ad88:	b40e      	push	{r1, r2, r3}
 800ad8a:	b503      	push	{r0, r1, lr}
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	ab03      	add	r3, sp, #12
 800ad90:	4805      	ldr	r0, [pc, #20]	@ (800ada8 <fiprintf+0x20>)
 800ad92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad96:	6800      	ldr	r0, [r0, #0]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	f000 f965 	bl	800b068 <_vfiprintf_r>
 800ad9e:	b002      	add	sp, #8
 800ada0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada4:	b003      	add	sp, #12
 800ada6:	4770      	bx	lr
 800ada8:	2000003c 	.word	0x2000003c

0800adac <_fwalk_sglue>:
 800adac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb0:	4607      	mov	r7, r0
 800adb2:	4688      	mov	r8, r1
 800adb4:	4614      	mov	r4, r2
 800adb6:	2600      	movs	r6, #0
 800adb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adbc:	f1b9 0901 	subs.w	r9, r9, #1
 800adc0:	d505      	bpl.n	800adce <_fwalk_sglue+0x22>
 800adc2:	6824      	ldr	r4, [r4, #0]
 800adc4:	2c00      	cmp	r4, #0
 800adc6:	d1f7      	bne.n	800adb8 <_fwalk_sglue+0xc>
 800adc8:	4630      	mov	r0, r6
 800adca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d907      	bls.n	800ade4 <_fwalk_sglue+0x38>
 800add4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800add8:	3301      	adds	r3, #1
 800adda:	d003      	beq.n	800ade4 <_fwalk_sglue+0x38>
 800addc:	4629      	mov	r1, r5
 800adde:	4638      	mov	r0, r7
 800ade0:	47c0      	blx	r8
 800ade2:	4306      	orrs	r6, r0
 800ade4:	3568      	adds	r5, #104	@ 0x68
 800ade6:	e7e9      	b.n	800adbc <_fwalk_sglue+0x10>

0800ade8 <getc>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4b16      	ldr	r3, [pc, #88]	@ (800ae44 <getc+0x5c>)
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	4604      	mov	r4, r0
 800adf0:	b125      	cbz	r5, 800adfc <getc+0x14>
 800adf2:	6a2b      	ldr	r3, [r5, #32]
 800adf4:	b913      	cbnz	r3, 800adfc <getc+0x14>
 800adf6:	4628      	mov	r0, r5
 800adf8:	f7ff ffae 	bl	800ad58 <__sinit>
 800adfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adfe:	07d8      	lsls	r0, r3, #31
 800ae00:	d405      	bmi.n	800ae0e <getc+0x26>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	0599      	lsls	r1, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <getc+0x26>
 800ae08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae0a:	f000 f8ec 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800ae0e:	6863      	ldr	r3, [r4, #4]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	6063      	str	r3, [r4, #4]
 800ae16:	da0f      	bge.n	800ae38 <getc+0x50>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	f000 f884 	bl	800af28 <__srget_r>
 800ae20:	4605      	mov	r5, r0
 800ae22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae24:	07da      	lsls	r2, r3, #31
 800ae26:	d405      	bmi.n	800ae34 <getc+0x4c>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	059b      	lsls	r3, r3, #22
 800ae2c:	d402      	bmi.n	800ae34 <getc+0x4c>
 800ae2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae30:	f000 f8da 	bl	800afe8 <__retarget_lock_release_recursive>
 800ae34:	4628      	mov	r0, r5
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	6823      	ldr	r3, [r4, #0]
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	6022      	str	r2, [r4, #0]
 800ae3e:	781d      	ldrb	r5, [r3, #0]
 800ae40:	e7ef      	b.n	800ae22 <getc+0x3a>
 800ae42:	bf00      	nop
 800ae44:	2000003c 	.word	0x2000003c

0800ae48 <iprintf>:
 800ae48:	b40f      	push	{r0, r1, r2, r3}
 800ae4a:	b507      	push	{r0, r1, r2, lr}
 800ae4c:	4906      	ldr	r1, [pc, #24]	@ (800ae68 <iprintf+0x20>)
 800ae4e:	ab04      	add	r3, sp, #16
 800ae50:	6808      	ldr	r0, [r1, #0]
 800ae52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae56:	6881      	ldr	r1, [r0, #8]
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f000 f905 	bl	800b068 <_vfiprintf_r>
 800ae5e:	b003      	add	sp, #12
 800ae60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae64:	b004      	add	sp, #16
 800ae66:	4770      	bx	lr
 800ae68:	2000003c 	.word	0x2000003c

0800ae6c <_puts_r>:
 800ae6c:	6a03      	ldr	r3, [r0, #32]
 800ae6e:	b570      	push	{r4, r5, r6, lr}
 800ae70:	6884      	ldr	r4, [r0, #8]
 800ae72:	4605      	mov	r5, r0
 800ae74:	460e      	mov	r6, r1
 800ae76:	b90b      	cbnz	r3, 800ae7c <_puts_r+0x10>
 800ae78:	f7ff ff6e 	bl	800ad58 <__sinit>
 800ae7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae7e:	07db      	lsls	r3, r3, #31
 800ae80:	d405      	bmi.n	800ae8e <_puts_r+0x22>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	0598      	lsls	r0, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_puts_r+0x22>
 800ae88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae8a:	f000 f8ac 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	0719      	lsls	r1, r3, #28
 800ae92:	d502      	bpl.n	800ae9a <_puts_r+0x2e>
 800ae94:	6923      	ldr	r3, [r4, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d135      	bne.n	800af06 <_puts_r+0x9a>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 fd63 	bl	800b968 <__swsetup_r>
 800aea2:	b380      	cbz	r0, 800af06 <_puts_r+0x9a>
 800aea4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800aea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aeaa:	07da      	lsls	r2, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_puts_r+0x4e>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	059b      	lsls	r3, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_puts_r+0x4e>
 800aeb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeb6:	f000 f897 	bl	800afe8 <__retarget_lock_release_recursive>
 800aeba:	4628      	mov	r0, r5
 800aebc:	bd70      	pop	{r4, r5, r6, pc}
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	da04      	bge.n	800aecc <_puts_r+0x60>
 800aec2:	69a2      	ldr	r2, [r4, #24]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	dc17      	bgt.n	800aef8 <_puts_r+0x8c>
 800aec8:	290a      	cmp	r1, #10
 800aeca:	d015      	beq.n	800aef8 <_puts_r+0x8c>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	6022      	str	r2, [r4, #0]
 800aed2:	7019      	strb	r1, [r3, #0]
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeda:	3b01      	subs	r3, #1
 800aedc:	60a3      	str	r3, [r4, #8]
 800aede:	2900      	cmp	r1, #0
 800aee0:	d1ed      	bne.n	800aebe <_puts_r+0x52>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da11      	bge.n	800af0a <_puts_r+0x9e>
 800aee6:	4622      	mov	r2, r4
 800aee8:	210a      	movs	r1, #10
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 fcfd 	bl	800b8ea <__swbuf_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d0d7      	beq.n	800aea4 <_puts_r+0x38>
 800aef4:	250a      	movs	r5, #10
 800aef6:	e7d7      	b.n	800aea8 <_puts_r+0x3c>
 800aef8:	4622      	mov	r2, r4
 800aefa:	4628      	mov	r0, r5
 800aefc:	f000 fcf5 	bl	800b8ea <__swbuf_r>
 800af00:	3001      	adds	r0, #1
 800af02:	d1e7      	bne.n	800aed4 <_puts_r+0x68>
 800af04:	e7ce      	b.n	800aea4 <_puts_r+0x38>
 800af06:	3e01      	subs	r6, #1
 800af08:	e7e4      	b.n	800aed4 <_puts_r+0x68>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	220a      	movs	r2, #10
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	e7ee      	b.n	800aef4 <_puts_r+0x88>
	...

0800af18 <puts>:
 800af18:	4b02      	ldr	r3, [pc, #8]	@ (800af24 <puts+0xc>)
 800af1a:	4601      	mov	r1, r0
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	f7ff bfa5 	b.w	800ae6c <_puts_r>
 800af22:	bf00      	nop
 800af24:	2000003c 	.word	0x2000003c

0800af28 <__srget_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	460c      	mov	r4, r1
 800af2c:	4605      	mov	r5, r0
 800af2e:	b118      	cbz	r0, 800af38 <__srget_r+0x10>
 800af30:	6a03      	ldr	r3, [r0, #32]
 800af32:	b90b      	cbnz	r3, 800af38 <__srget_r+0x10>
 800af34:	f7ff ff10 	bl	800ad58 <__sinit>
 800af38:	4621      	mov	r1, r4
 800af3a:	4628      	mov	r0, r5
 800af3c:	f000 fdda 	bl	800baf4 <__srefill_r>
 800af40:	b938      	cbnz	r0, 800af52 <__srget_r+0x2a>
 800af42:	6863      	ldr	r3, [r4, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	6063      	str	r3, [r4, #4]
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	6022      	str	r2, [r4, #0]
 800af4e:	7818      	ldrb	r0, [r3, #0]
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af56:	e7fb      	b.n	800af50 <__srget_r+0x28>

0800af58 <strncpy>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	3901      	subs	r1, #1
 800af5c:	4603      	mov	r3, r0
 800af5e:	b132      	cbz	r2, 800af6e <strncpy+0x16>
 800af60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af64:	f803 4b01 	strb.w	r4, [r3], #1
 800af68:	3a01      	subs	r2, #1
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	d1f7      	bne.n	800af5e <strncpy+0x6>
 800af6e:	441a      	add	r2, r3
 800af70:	2100      	movs	r1, #0
 800af72:	4293      	cmp	r3, r2
 800af74:	d100      	bne.n	800af78 <strncpy+0x20>
 800af76:	bd10      	pop	{r4, pc}
 800af78:	f803 1b01 	strb.w	r1, [r3], #1
 800af7c:	e7f9      	b.n	800af72 <strncpy+0x1a>

0800af7e <memset>:
 800af7e:	4402      	add	r2, r0
 800af80:	4603      	mov	r3, r0
 800af82:	4293      	cmp	r3, r2
 800af84:	d100      	bne.n	800af88 <memset+0xa>
 800af86:	4770      	bx	lr
 800af88:	f803 1b01 	strb.w	r1, [r3], #1
 800af8c:	e7f9      	b.n	800af82 <memset+0x4>
	...

0800af90 <__errno>:
 800af90:	4b01      	ldr	r3, [pc, #4]	@ (800af98 <__errno+0x8>)
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	2000003c 	.word	0x2000003c

0800af9c <__libc_init_array>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	4d0d      	ldr	r5, [pc, #52]	@ (800afd4 <__libc_init_array+0x38>)
 800afa0:	4c0d      	ldr	r4, [pc, #52]	@ (800afd8 <__libc_init_array+0x3c>)
 800afa2:	1b64      	subs	r4, r4, r5
 800afa4:	10a4      	asrs	r4, r4, #2
 800afa6:	2600      	movs	r6, #0
 800afa8:	42a6      	cmp	r6, r4
 800afaa:	d109      	bne.n	800afc0 <__libc_init_array+0x24>
 800afac:	4d0b      	ldr	r5, [pc, #44]	@ (800afdc <__libc_init_array+0x40>)
 800afae:	4c0c      	ldr	r4, [pc, #48]	@ (800afe0 <__libc_init_array+0x44>)
 800afb0:	f001 fc76 	bl	800c8a0 <_init>
 800afb4:	1b64      	subs	r4, r4, r5
 800afb6:	10a4      	asrs	r4, r4, #2
 800afb8:	2600      	movs	r6, #0
 800afba:	42a6      	cmp	r6, r4
 800afbc:	d105      	bne.n	800afca <__libc_init_array+0x2e>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc4:	4798      	blx	r3
 800afc6:	3601      	adds	r6, #1
 800afc8:	e7ee      	b.n	800afa8 <__libc_init_array+0xc>
 800afca:	f855 3b04 	ldr.w	r3, [r5], #4
 800afce:	4798      	blx	r3
 800afd0:	3601      	adds	r6, #1
 800afd2:	e7f2      	b.n	800afba <__libc_init_array+0x1e>
 800afd4:	0800c8c0 	.word	0x0800c8c0
 800afd8:	0800c8c0 	.word	0x0800c8c0
 800afdc:	0800c8c0 	.word	0x0800c8c0
 800afe0:	0800c8cc 	.word	0x0800c8cc

0800afe4 <__retarget_lock_init_recursive>:
 800afe4:	4770      	bx	lr

0800afe6 <__retarget_lock_acquire_recursive>:
 800afe6:	4770      	bx	lr

0800afe8 <__retarget_lock_release_recursive>:
 800afe8:	4770      	bx	lr

0800afea <memcpy>:
 800afea:	440a      	add	r2, r1
 800afec:	4291      	cmp	r1, r2
 800afee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aff2:	d100      	bne.n	800aff6 <memcpy+0xc>
 800aff4:	4770      	bx	lr
 800aff6:	b510      	push	{r4, lr}
 800aff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800affc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b000:	4291      	cmp	r1, r2
 800b002:	d1f9      	bne.n	800aff8 <memcpy+0xe>
 800b004:	bd10      	pop	{r4, pc}

0800b006 <abort>:
 800b006:	b508      	push	{r3, lr}
 800b008:	2006      	movs	r0, #6
 800b00a:	f000 fe53 	bl	800bcb4 <raise>
 800b00e:	2001      	movs	r0, #1
 800b010:	f000 ff28 	bl	800be64 <_exit>

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f000 bc5c 	b.w	800b8ea <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	@ 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6a03      	ldr	r3, [r0, #32]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f7ff fe6c 	bl	800ad58 <__sinit>
 800b080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b082:	07d9      	lsls	r1, r3, #31
 800b084:	d405      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08e:	f7ff ffaa 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800b092:	89ab      	ldrh	r3, [r5, #12]
 800b094:	071b      	lsls	r3, r3, #28
 800b096:	d501      	bpl.n	800b09c <_vfiprintf_r+0x34>
 800b098:	692b      	ldr	r3, [r5, #16]
 800b09a:	b99b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x5c>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f000 fc62 	bl	800b968 <__swsetup_r>
 800b0a4:	b170      	cbz	r0, 800b0c4 <_vfiprintf_r+0x5c>
 800b0a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a8:	07dc      	lsls	r4, r3, #31
 800b0aa:	d504      	bpl.n	800b0b6 <_vfiprintf_r+0x4e>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0b0:	b01d      	add	sp, #116	@ 0x74
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	0598      	lsls	r0, r3, #22
 800b0ba:	d4f7      	bmi.n	800b0ac <_vfiprintf_r+0x44>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7ff ff93 	bl	800afe8 <__retarget_lock_release_recursive>
 800b0c2:	e7f3      	b.n	800b0ac <_vfiprintf_r+0x44>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d2:	2330      	movs	r3, #48	@ 0x30
 800b0d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b284 <_vfiprintf_r+0x21c>
 800b0d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	469a      	mov	sl, r3
 800b0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_vfiprintf_r+0x86>
 800b0ea:	2a25      	cmp	r2, #37	@ 0x25
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x7a>
 800b0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f2:	d00b      	beq.n	800b10c <_vfiprintf_r+0xa4>
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffa1 	bl	800b042 <__sfputs_r>
 800b100:	3001      	adds	r0, #1
 800b102:	f000 80a7 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b108:	445a      	add	r2, fp
 800b10a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 809f 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b116:	2300      	movs	r3, #0
 800b118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b120:	f10a 0a01 	add.w	sl, sl, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b12c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b12e:	4654      	mov	r4, sl
 800b130:	2205      	movs	r2, #5
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4853      	ldr	r0, [pc, #332]	@ (800b284 <_vfiprintf_r+0x21c>)
 800b138:	f7f5 f8ba 	bl	80002b0 <memchr>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	b9d8      	cbnz	r0, 800b178 <_vfiprintf_r+0x110>
 800b140:	06d1      	lsls	r1, r2, #27
 800b142:	bf44      	itt	mi
 800b144:	2320      	movmi	r3, #32
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b14a:	0713      	lsls	r3, r2, #28
 800b14c:	bf44      	itt	mi
 800b14e:	232b      	movmi	r3, #43	@ 0x2b
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b154:	f89a 3000 	ldrb.w	r3, [sl]
 800b158:	2b2a      	cmp	r3, #42	@ 0x2a
 800b15a:	d015      	beq.n	800b188 <_vfiprintf_r+0x120>
 800b15c:	9a07      	ldr	r2, [sp, #28]
 800b15e:	4654      	mov	r4, sl
 800b160:	2000      	movs	r0, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4621      	mov	r1, r4
 800b168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16c:	3b30      	subs	r3, #48	@ 0x30
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d94b      	bls.n	800b20a <_vfiprintf_r+0x1a2>
 800b172:	b1b0      	cbz	r0, 800b1a2 <_vfiprintf_r+0x13a>
 800b174:	9207      	str	r2, [sp, #28]
 800b176:	e014      	b.n	800b1a2 <_vfiprintf_r+0x13a>
 800b178:	eba0 0308 	sub.w	r3, r0, r8
 800b17c:	fa09 f303 	lsl.w	r3, r9, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	46a2      	mov	sl, r4
 800b186:	e7d2      	b.n	800b12e <_vfiprintf_r+0xc6>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	1d19      	adds	r1, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbb      	ittet	lt
 800b194:	425b      	neglt	r3, r3
 800b196:	f042 0202 	orrlt.w	r2, r2, #2
 800b19a:	9307      	strge	r3, [sp, #28]
 800b19c:	9307      	strlt	r3, [sp, #28]
 800b19e:	bfb8      	it	lt
 800b1a0:	9204      	strlt	r2, [sp, #16]
 800b1a2:	7823      	ldrb	r3, [r4, #0]
 800b1a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1a6:	d10a      	bne.n	800b1be <_vfiprintf_r+0x156>
 800b1a8:	7863      	ldrb	r3, [r4, #1]
 800b1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ac:	d132      	bne.n	800b214 <_vfiprintf_r+0x1ac>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9203      	str	r2, [sp, #12]
 800b1b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ba:	3402      	adds	r4, #2
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b294 <_vfiprintf_r+0x22c>
 800b1c2:	7821      	ldrb	r1, [r4, #0]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 f872 	bl	80002b0 <memchr>
 800b1cc:	b138      	cbz	r0, 800b1de <_vfiprintf_r+0x176>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	eba0 000a 	sub.w	r0, r0, sl
 800b1d4:	2240      	movs	r2, #64	@ 0x40
 800b1d6:	4082      	lsls	r2, r0
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	3401      	adds	r4, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4829      	ldr	r0, [pc, #164]	@ (800b288 <_vfiprintf_r+0x220>)
 800b1e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	f7f5 f861 	bl	80002b0 <memchr>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d03f      	beq.n	800b272 <_vfiprintf_r+0x20a>
 800b1f2:	4b26      	ldr	r3, [pc, #152]	@ (800b28c <_vfiprintf_r+0x224>)
 800b1f4:	bb1b      	cbnz	r3, 800b23e <_vfiprintf_r+0x1d6>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	3308      	adds	r3, #8
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	443b      	add	r3, r7
 800b206:	9309      	str	r3, [sp, #36]	@ 0x24
 800b208:	e76a      	b.n	800b0e0 <_vfiprintf_r+0x78>
 800b20a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20e:	460c      	mov	r4, r1
 800b210:	2001      	movs	r0, #1
 800b212:	e7a8      	b.n	800b166 <_vfiprintf_r+0xfe>
 800b214:	2300      	movs	r3, #0
 800b216:	3401      	adds	r4, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4619      	mov	r1, r3
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	4620      	mov	r0, r4
 800b222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b226:	3a30      	subs	r2, #48	@ 0x30
 800b228:	2a09      	cmp	r2, #9
 800b22a:	d903      	bls.n	800b234 <_vfiprintf_r+0x1cc>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0c6      	beq.n	800b1be <_vfiprintf_r+0x156>
 800b230:	9105      	str	r1, [sp, #20]
 800b232:	e7c4      	b.n	800b1be <_vfiprintf_r+0x156>
 800b234:	fb0c 2101 	mla	r1, ip, r1, r2
 800b238:	4604      	mov	r4, r0
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7f0      	b.n	800b220 <_vfiprintf_r+0x1b8>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b12      	ldr	r3, [pc, #72]	@ (800b290 <_vfiprintf_r+0x228>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f3af 8000 	nop.w
 800b24e:	4607      	mov	r7, r0
 800b250:	1c78      	adds	r0, r7, #1
 800b252:	d1d6      	bne.n	800b202 <_vfiprintf_r+0x19a>
 800b254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b262:	f7ff fec1 	bl	800afe8 <__retarget_lock_release_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	065b      	lsls	r3, r3, #25
 800b26a:	f53f af1f 	bmi.w	800b0ac <_vfiprintf_r+0x44>
 800b26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b270:	e71e      	b.n	800b0b0 <_vfiprintf_r+0x48>
 800b272:	ab03      	add	r3, sp, #12
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	462a      	mov	r2, r5
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <_vfiprintf_r+0x228>)
 800b27a:	a904      	add	r1, sp, #16
 800b27c:	4630      	mov	r0, r6
 800b27e:	f000 f91b 	bl	800b4b8 <_printf_i>
 800b282:	e7e4      	b.n	800b24e <_vfiprintf_r+0x1e6>
 800b284:	0800c86c 	.word	0x0800c86c
 800b288:	0800c876 	.word	0x0800c876
 800b28c:	00000000 	.word	0x00000000
 800b290:	0800b043 	.word	0x0800b043
 800b294:	0800c872 	.word	0x0800c872

0800b298 <sbrk_aligned>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4e0f      	ldr	r6, [pc, #60]	@ (800b2d8 <sbrk_aligned+0x40>)
 800b29c:	460c      	mov	r4, r1
 800b29e:	6831      	ldr	r1, [r6, #0]
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b911      	cbnz	r1, 800b2aa <sbrk_aligned+0x12>
 800b2a4:	f000 fd34 	bl	800bd10 <_sbrk_r>
 800b2a8:	6030      	str	r0, [r6, #0]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 fd2f 	bl	800bd10 <_sbrk_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d103      	bne.n	800b2be <sbrk_aligned+0x26>
 800b2b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	1cc4      	adds	r4, r0, #3
 800b2c0:	f024 0403 	bic.w	r4, r4, #3
 800b2c4:	42a0      	cmp	r0, r4
 800b2c6:	d0f8      	beq.n	800b2ba <sbrk_aligned+0x22>
 800b2c8:	1a21      	subs	r1, r4, r0
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 fd20 	bl	800bd10 <_sbrk_r>
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d1f2      	bne.n	800b2ba <sbrk_aligned+0x22>
 800b2d4:	e7ef      	b.n	800b2b6 <sbrk_aligned+0x1e>
 800b2d6:	bf00      	nop
 800b2d8:	2001153c 	.word	0x2001153c

0800b2dc <_malloc_r>:
 800b2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	1ccd      	adds	r5, r1, #3
 800b2e2:	f025 0503 	bic.w	r5, r5, #3
 800b2e6:	3508      	adds	r5, #8
 800b2e8:	2d0c      	cmp	r5, #12
 800b2ea:	bf38      	it	cc
 800b2ec:	250c      	movcc	r5, #12
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	db01      	blt.n	800b2f8 <_malloc_r+0x1c>
 800b2f4:	42a9      	cmp	r1, r5
 800b2f6:	d904      	bls.n	800b302 <_malloc_r+0x26>
 800b2f8:	230c      	movs	r3, #12
 800b2fa:	6033      	str	r3, [r6, #0]
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3d8 <_malloc_r+0xfc>
 800b306:	f000 faa1 	bl	800b84c <__malloc_lock>
 800b30a:	f8d8 3000 	ldr.w	r3, [r8]
 800b30e:	461c      	mov	r4, r3
 800b310:	bb44      	cbnz	r4, 800b364 <_malloc_r+0x88>
 800b312:	4629      	mov	r1, r5
 800b314:	4630      	mov	r0, r6
 800b316:	f7ff ffbf 	bl	800b298 <sbrk_aligned>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	4604      	mov	r4, r0
 800b31e:	d158      	bne.n	800b3d2 <_malloc_r+0xf6>
 800b320:	f8d8 4000 	ldr.w	r4, [r8]
 800b324:	4627      	mov	r7, r4
 800b326:	2f00      	cmp	r7, #0
 800b328:	d143      	bne.n	800b3b2 <_malloc_r+0xd6>
 800b32a:	2c00      	cmp	r4, #0
 800b32c:	d04b      	beq.n	800b3c6 <_malloc_r+0xea>
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	4639      	mov	r1, r7
 800b332:	4630      	mov	r0, r6
 800b334:	eb04 0903 	add.w	r9, r4, r3
 800b338:	f000 fcea 	bl	800bd10 <_sbrk_r>
 800b33c:	4581      	cmp	r9, r0
 800b33e:	d142      	bne.n	800b3c6 <_malloc_r+0xea>
 800b340:	6821      	ldr	r1, [r4, #0]
 800b342:	1a6d      	subs	r5, r5, r1
 800b344:	4629      	mov	r1, r5
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff ffa6 	bl	800b298 <sbrk_aligned>
 800b34c:	3001      	adds	r0, #1
 800b34e:	d03a      	beq.n	800b3c6 <_malloc_r+0xea>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	442b      	add	r3, r5
 800b354:	6023      	str	r3, [r4, #0]
 800b356:	f8d8 3000 	ldr.w	r3, [r8]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	bb62      	cbnz	r2, 800b3b8 <_malloc_r+0xdc>
 800b35e:	f8c8 7000 	str.w	r7, [r8]
 800b362:	e00f      	b.n	800b384 <_malloc_r+0xa8>
 800b364:	6822      	ldr	r2, [r4, #0]
 800b366:	1b52      	subs	r2, r2, r5
 800b368:	d420      	bmi.n	800b3ac <_malloc_r+0xd0>
 800b36a:	2a0b      	cmp	r2, #11
 800b36c:	d917      	bls.n	800b39e <_malloc_r+0xc2>
 800b36e:	1961      	adds	r1, r4, r5
 800b370:	42a3      	cmp	r3, r4
 800b372:	6025      	str	r5, [r4, #0]
 800b374:	bf18      	it	ne
 800b376:	6059      	strne	r1, [r3, #4]
 800b378:	6863      	ldr	r3, [r4, #4]
 800b37a:	bf08      	it	eq
 800b37c:	f8c8 1000 	streq.w	r1, [r8]
 800b380:	5162      	str	r2, [r4, r5]
 800b382:	604b      	str	r3, [r1, #4]
 800b384:	4630      	mov	r0, r6
 800b386:	f000 fa67 	bl	800b858 <__malloc_unlock>
 800b38a:	f104 000b 	add.w	r0, r4, #11
 800b38e:	1d23      	adds	r3, r4, #4
 800b390:	f020 0007 	bic.w	r0, r0, #7
 800b394:	1ac2      	subs	r2, r0, r3
 800b396:	bf1c      	itt	ne
 800b398:	1a1b      	subne	r3, r3, r0
 800b39a:	50a3      	strne	r3, [r4, r2]
 800b39c:	e7af      	b.n	800b2fe <_malloc_r+0x22>
 800b39e:	6862      	ldr	r2, [r4, #4]
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	bf0c      	ite	eq
 800b3a4:	f8c8 2000 	streq.w	r2, [r8]
 800b3a8:	605a      	strne	r2, [r3, #4]
 800b3aa:	e7eb      	b.n	800b384 <_malloc_r+0xa8>
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	6864      	ldr	r4, [r4, #4]
 800b3b0:	e7ae      	b.n	800b310 <_malloc_r+0x34>
 800b3b2:	463c      	mov	r4, r7
 800b3b4:	687f      	ldr	r7, [r7, #4]
 800b3b6:	e7b6      	b.n	800b326 <_malloc_r+0x4a>
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	42a3      	cmp	r3, r4
 800b3be:	d1fb      	bne.n	800b3b8 <_malloc_r+0xdc>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6053      	str	r3, [r2, #4]
 800b3c4:	e7de      	b.n	800b384 <_malloc_r+0xa8>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	6033      	str	r3, [r6, #0]
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 fa44 	bl	800b858 <__malloc_unlock>
 800b3d0:	e794      	b.n	800b2fc <_malloc_r+0x20>
 800b3d2:	6005      	str	r5, [r0, #0]
 800b3d4:	e7d6      	b.n	800b384 <_malloc_r+0xa8>
 800b3d6:	bf00      	nop
 800b3d8:	20011540 	.word	0x20011540

0800b3dc <_printf_common>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	4616      	mov	r6, r2
 800b3e2:	4698      	mov	r8, r3
 800b3e4:	688a      	ldr	r2, [r1, #8]
 800b3e6:	690b      	ldr	r3, [r1, #16]
 800b3e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	bfb8      	it	lt
 800b3f0:	4613      	movlt	r3, r2
 800b3f2:	6033      	str	r3, [r6, #0]
 800b3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	b10a      	cbz	r2, 800b402 <_printf_common+0x26>
 800b3fe:	3301      	adds	r3, #1
 800b400:	6033      	str	r3, [r6, #0]
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	0699      	lsls	r1, r3, #26
 800b406:	bf42      	ittt	mi
 800b408:	6833      	ldrmi	r3, [r6, #0]
 800b40a:	3302      	addmi	r3, #2
 800b40c:	6033      	strmi	r3, [r6, #0]
 800b40e:	6825      	ldr	r5, [r4, #0]
 800b410:	f015 0506 	ands.w	r5, r5, #6
 800b414:	d106      	bne.n	800b424 <_printf_common+0x48>
 800b416:	f104 0a19 	add.w	sl, r4, #25
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	6832      	ldr	r2, [r6, #0]
 800b41e:	1a9b      	subs	r3, r3, r2
 800b420:	42ab      	cmp	r3, r5
 800b422:	dc26      	bgt.n	800b472 <_printf_common+0x96>
 800b424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	3b00      	subs	r3, #0
 800b42c:	bf18      	it	ne
 800b42e:	2301      	movne	r3, #1
 800b430:	0692      	lsls	r2, r2, #26
 800b432:	d42b      	bmi.n	800b48c <_printf_common+0xb0>
 800b434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b438:	4641      	mov	r1, r8
 800b43a:	4638      	mov	r0, r7
 800b43c:	47c8      	blx	r9
 800b43e:	3001      	adds	r0, #1
 800b440:	d01e      	beq.n	800b480 <_printf_common+0xa4>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	6922      	ldr	r2, [r4, #16]
 800b446:	f003 0306 	and.w	r3, r3, #6
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	bf02      	ittt	eq
 800b44e:	68e5      	ldreq	r5, [r4, #12]
 800b450:	6833      	ldreq	r3, [r6, #0]
 800b452:	1aed      	subeq	r5, r5, r3
 800b454:	68a3      	ldr	r3, [r4, #8]
 800b456:	bf0c      	ite	eq
 800b458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b45c:	2500      	movne	r5, #0
 800b45e:	4293      	cmp	r3, r2
 800b460:	bfc4      	itt	gt
 800b462:	1a9b      	subgt	r3, r3, r2
 800b464:	18ed      	addgt	r5, r5, r3
 800b466:	2600      	movs	r6, #0
 800b468:	341a      	adds	r4, #26
 800b46a:	42b5      	cmp	r5, r6
 800b46c:	d11a      	bne.n	800b4a4 <_printf_common+0xc8>
 800b46e:	2000      	movs	r0, #0
 800b470:	e008      	b.n	800b484 <_printf_common+0xa8>
 800b472:	2301      	movs	r3, #1
 800b474:	4652      	mov	r2, sl
 800b476:	4641      	mov	r1, r8
 800b478:	4638      	mov	r0, r7
 800b47a:	47c8      	blx	r9
 800b47c:	3001      	adds	r0, #1
 800b47e:	d103      	bne.n	800b488 <_printf_common+0xac>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b488:	3501      	adds	r5, #1
 800b48a:	e7c6      	b.n	800b41a <_printf_common+0x3e>
 800b48c:	18e1      	adds	r1, r4, r3
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	2030      	movs	r0, #48	@ 0x30
 800b492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b496:	4422      	add	r2, r4
 800b498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b49c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4a0:	3302      	adds	r3, #2
 800b4a2:	e7c7      	b.n	800b434 <_printf_common+0x58>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4641      	mov	r1, r8
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	47c8      	blx	r9
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d0e6      	beq.n	800b480 <_printf_common+0xa4>
 800b4b2:	3601      	adds	r6, #1
 800b4b4:	e7d9      	b.n	800b46a <_printf_common+0x8e>
	...

0800b4b8 <_printf_i>:
 800b4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	7e0f      	ldrb	r7, [r1, #24]
 800b4be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4c0:	2f78      	cmp	r7, #120	@ 0x78
 800b4c2:	4691      	mov	r9, r2
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	469a      	mov	sl, r3
 800b4ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4ce:	d807      	bhi.n	800b4e0 <_printf_i+0x28>
 800b4d0:	2f62      	cmp	r7, #98	@ 0x62
 800b4d2:	d80a      	bhi.n	800b4ea <_printf_i+0x32>
 800b4d4:	2f00      	cmp	r7, #0
 800b4d6:	f000 80d1 	beq.w	800b67c <_printf_i+0x1c4>
 800b4da:	2f58      	cmp	r7, #88	@ 0x58
 800b4dc:	f000 80b8 	beq.w	800b650 <_printf_i+0x198>
 800b4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4e8:	e03a      	b.n	800b560 <_printf_i+0xa8>
 800b4ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4ee:	2b15      	cmp	r3, #21
 800b4f0:	d8f6      	bhi.n	800b4e0 <_printf_i+0x28>
 800b4f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b4f8 <_printf_i+0x40>)
 800b4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4f8:	0800b551 	.word	0x0800b551
 800b4fc:	0800b565 	.word	0x0800b565
 800b500:	0800b4e1 	.word	0x0800b4e1
 800b504:	0800b4e1 	.word	0x0800b4e1
 800b508:	0800b4e1 	.word	0x0800b4e1
 800b50c:	0800b4e1 	.word	0x0800b4e1
 800b510:	0800b565 	.word	0x0800b565
 800b514:	0800b4e1 	.word	0x0800b4e1
 800b518:	0800b4e1 	.word	0x0800b4e1
 800b51c:	0800b4e1 	.word	0x0800b4e1
 800b520:	0800b4e1 	.word	0x0800b4e1
 800b524:	0800b663 	.word	0x0800b663
 800b528:	0800b58f 	.word	0x0800b58f
 800b52c:	0800b61d 	.word	0x0800b61d
 800b530:	0800b4e1 	.word	0x0800b4e1
 800b534:	0800b4e1 	.word	0x0800b4e1
 800b538:	0800b685 	.word	0x0800b685
 800b53c:	0800b4e1 	.word	0x0800b4e1
 800b540:	0800b58f 	.word	0x0800b58f
 800b544:	0800b4e1 	.word	0x0800b4e1
 800b548:	0800b4e1 	.word	0x0800b4e1
 800b54c:	0800b625 	.word	0x0800b625
 800b550:	6833      	ldr	r3, [r6, #0]
 800b552:	1d1a      	adds	r2, r3, #4
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6032      	str	r2, [r6, #0]
 800b558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b55c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b560:	2301      	movs	r3, #1
 800b562:	e09c      	b.n	800b69e <_printf_i+0x1e6>
 800b564:	6833      	ldr	r3, [r6, #0]
 800b566:	6820      	ldr	r0, [r4, #0]
 800b568:	1d19      	adds	r1, r3, #4
 800b56a:	6031      	str	r1, [r6, #0]
 800b56c:	0606      	lsls	r6, r0, #24
 800b56e:	d501      	bpl.n	800b574 <_printf_i+0xbc>
 800b570:	681d      	ldr	r5, [r3, #0]
 800b572:	e003      	b.n	800b57c <_printf_i+0xc4>
 800b574:	0645      	lsls	r5, r0, #25
 800b576:	d5fb      	bpl.n	800b570 <_printf_i+0xb8>
 800b578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	da03      	bge.n	800b588 <_printf_i+0xd0>
 800b580:	232d      	movs	r3, #45	@ 0x2d
 800b582:	426d      	negs	r5, r5
 800b584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b588:	4858      	ldr	r0, [pc, #352]	@ (800b6ec <_printf_i+0x234>)
 800b58a:	230a      	movs	r3, #10
 800b58c:	e011      	b.n	800b5b2 <_printf_i+0xfa>
 800b58e:	6821      	ldr	r1, [r4, #0]
 800b590:	6833      	ldr	r3, [r6, #0]
 800b592:	0608      	lsls	r0, r1, #24
 800b594:	f853 5b04 	ldr.w	r5, [r3], #4
 800b598:	d402      	bmi.n	800b5a0 <_printf_i+0xe8>
 800b59a:	0649      	lsls	r1, r1, #25
 800b59c:	bf48      	it	mi
 800b59e:	b2ad      	uxthmi	r5, r5
 800b5a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5a2:	4852      	ldr	r0, [pc, #328]	@ (800b6ec <_printf_i+0x234>)
 800b5a4:	6033      	str	r3, [r6, #0]
 800b5a6:	bf14      	ite	ne
 800b5a8:	230a      	movne	r3, #10
 800b5aa:	2308      	moveq	r3, #8
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5b2:	6866      	ldr	r6, [r4, #4]
 800b5b4:	60a6      	str	r6, [r4, #8]
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	db05      	blt.n	800b5c6 <_printf_i+0x10e>
 800b5ba:	6821      	ldr	r1, [r4, #0]
 800b5bc:	432e      	orrs	r6, r5
 800b5be:	f021 0104 	bic.w	r1, r1, #4
 800b5c2:	6021      	str	r1, [r4, #0]
 800b5c4:	d04b      	beq.n	800b65e <_printf_i+0x1a6>
 800b5c6:	4616      	mov	r6, r2
 800b5c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5cc:	fb03 5711 	mls	r7, r3, r1, r5
 800b5d0:	5dc7      	ldrb	r7, [r0, r7]
 800b5d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5d6:	462f      	mov	r7, r5
 800b5d8:	42bb      	cmp	r3, r7
 800b5da:	460d      	mov	r5, r1
 800b5dc:	d9f4      	bls.n	800b5c8 <_printf_i+0x110>
 800b5de:	2b08      	cmp	r3, #8
 800b5e0:	d10b      	bne.n	800b5fa <_printf_i+0x142>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	07df      	lsls	r7, r3, #31
 800b5e6:	d508      	bpl.n	800b5fa <_printf_i+0x142>
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	6861      	ldr	r1, [r4, #4]
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	bfde      	ittt	le
 800b5f0:	2330      	movle	r3, #48	@ 0x30
 800b5f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b5fa:	1b92      	subs	r2, r2, r6
 800b5fc:	6122      	str	r2, [r4, #16]
 800b5fe:	f8cd a000 	str.w	sl, [sp]
 800b602:	464b      	mov	r3, r9
 800b604:	aa03      	add	r2, sp, #12
 800b606:	4621      	mov	r1, r4
 800b608:	4640      	mov	r0, r8
 800b60a:	f7ff fee7 	bl	800b3dc <_printf_common>
 800b60e:	3001      	adds	r0, #1
 800b610:	d14a      	bne.n	800b6a8 <_printf_i+0x1f0>
 800b612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b616:	b004      	add	sp, #16
 800b618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	f043 0320 	orr.w	r3, r3, #32
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	4832      	ldr	r0, [pc, #200]	@ (800b6f0 <_printf_i+0x238>)
 800b626:	2778      	movs	r7, #120	@ 0x78
 800b628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	6831      	ldr	r1, [r6, #0]
 800b630:	061f      	lsls	r7, r3, #24
 800b632:	f851 5b04 	ldr.w	r5, [r1], #4
 800b636:	d402      	bmi.n	800b63e <_printf_i+0x186>
 800b638:	065f      	lsls	r7, r3, #25
 800b63a:	bf48      	it	mi
 800b63c:	b2ad      	uxthmi	r5, r5
 800b63e:	6031      	str	r1, [r6, #0]
 800b640:	07d9      	lsls	r1, r3, #31
 800b642:	bf44      	itt	mi
 800b644:	f043 0320 	orrmi.w	r3, r3, #32
 800b648:	6023      	strmi	r3, [r4, #0]
 800b64a:	b11d      	cbz	r5, 800b654 <_printf_i+0x19c>
 800b64c:	2310      	movs	r3, #16
 800b64e:	e7ad      	b.n	800b5ac <_printf_i+0xf4>
 800b650:	4826      	ldr	r0, [pc, #152]	@ (800b6ec <_printf_i+0x234>)
 800b652:	e7e9      	b.n	800b628 <_printf_i+0x170>
 800b654:	6823      	ldr	r3, [r4, #0]
 800b656:	f023 0320 	bic.w	r3, r3, #32
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	e7f6      	b.n	800b64c <_printf_i+0x194>
 800b65e:	4616      	mov	r6, r2
 800b660:	e7bd      	b.n	800b5de <_printf_i+0x126>
 800b662:	6833      	ldr	r3, [r6, #0]
 800b664:	6825      	ldr	r5, [r4, #0]
 800b666:	6961      	ldr	r1, [r4, #20]
 800b668:	1d18      	adds	r0, r3, #4
 800b66a:	6030      	str	r0, [r6, #0]
 800b66c:	062e      	lsls	r6, r5, #24
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	d501      	bpl.n	800b676 <_printf_i+0x1be>
 800b672:	6019      	str	r1, [r3, #0]
 800b674:	e002      	b.n	800b67c <_printf_i+0x1c4>
 800b676:	0668      	lsls	r0, r5, #25
 800b678:	d5fb      	bpl.n	800b672 <_printf_i+0x1ba>
 800b67a:	8019      	strh	r1, [r3, #0]
 800b67c:	2300      	movs	r3, #0
 800b67e:	6123      	str	r3, [r4, #16]
 800b680:	4616      	mov	r6, r2
 800b682:	e7bc      	b.n	800b5fe <_printf_i+0x146>
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	1d1a      	adds	r2, r3, #4
 800b688:	6032      	str	r2, [r6, #0]
 800b68a:	681e      	ldr	r6, [r3, #0]
 800b68c:	6862      	ldr	r2, [r4, #4]
 800b68e:	2100      	movs	r1, #0
 800b690:	4630      	mov	r0, r6
 800b692:	f7f4 fe0d 	bl	80002b0 <memchr>
 800b696:	b108      	cbz	r0, 800b69c <_printf_i+0x1e4>
 800b698:	1b80      	subs	r0, r0, r6
 800b69a:	6060      	str	r0, [r4, #4]
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	6123      	str	r3, [r4, #16]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6a6:	e7aa      	b.n	800b5fe <_printf_i+0x146>
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	47d0      	blx	sl
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	d0ad      	beq.n	800b612 <_printf_i+0x15a>
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	079b      	lsls	r3, r3, #30
 800b6ba:	d413      	bmi.n	800b6e4 <_printf_i+0x22c>
 800b6bc:	68e0      	ldr	r0, [r4, #12]
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	4298      	cmp	r0, r3
 800b6c2:	bfb8      	it	lt
 800b6c4:	4618      	movlt	r0, r3
 800b6c6:	e7a6      	b.n	800b616 <_printf_i+0x15e>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4632      	mov	r2, r6
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	47d0      	blx	sl
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	d09d      	beq.n	800b612 <_printf_i+0x15a>
 800b6d6:	3501      	adds	r5, #1
 800b6d8:	68e3      	ldr	r3, [r4, #12]
 800b6da:	9903      	ldr	r1, [sp, #12]
 800b6dc:	1a5b      	subs	r3, r3, r1
 800b6de:	42ab      	cmp	r3, r5
 800b6e0:	dcf2      	bgt.n	800b6c8 <_printf_i+0x210>
 800b6e2:	e7eb      	b.n	800b6bc <_printf_i+0x204>
 800b6e4:	2500      	movs	r5, #0
 800b6e6:	f104 0619 	add.w	r6, r4, #25
 800b6ea:	e7f5      	b.n	800b6d8 <_printf_i+0x220>
 800b6ec:	0800c87d 	.word	0x0800c87d
 800b6f0:	0800c88e 	.word	0x0800c88e

0800b6f4 <__sflush_r>:
 800b6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	0716      	lsls	r6, r2, #28
 800b6fe:	4605      	mov	r5, r0
 800b700:	460c      	mov	r4, r1
 800b702:	d454      	bmi.n	800b7ae <__sflush_r+0xba>
 800b704:	684b      	ldr	r3, [r1, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dc02      	bgt.n	800b710 <__sflush_r+0x1c>
 800b70a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd48      	ble.n	800b7a2 <__sflush_r+0xae>
 800b710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b712:	2e00      	cmp	r6, #0
 800b714:	d045      	beq.n	800b7a2 <__sflush_r+0xae>
 800b716:	2300      	movs	r3, #0
 800b718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b71c:	682f      	ldr	r7, [r5, #0]
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	d030      	beq.n	800b786 <__sflush_r+0x92>
 800b724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	0759      	lsls	r1, r3, #29
 800b72a:	d505      	bpl.n	800b738 <__sflush_r+0x44>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b732:	b10b      	cbz	r3, 800b738 <__sflush_r+0x44>
 800b734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b73c:	6a21      	ldr	r1, [r4, #32]
 800b73e:	4628      	mov	r0, r5
 800b740:	47b0      	blx	r6
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	d106      	bne.n	800b756 <__sflush_r+0x62>
 800b748:	6829      	ldr	r1, [r5, #0]
 800b74a:	291d      	cmp	r1, #29
 800b74c:	d82b      	bhi.n	800b7a6 <__sflush_r+0xb2>
 800b74e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f8 <__sflush_r+0x104>)
 800b750:	40ca      	lsrs	r2, r1
 800b752:	07d6      	lsls	r6, r2, #31
 800b754:	d527      	bpl.n	800b7a6 <__sflush_r+0xb2>
 800b756:	2200      	movs	r2, #0
 800b758:	6062      	str	r2, [r4, #4]
 800b75a:	04d9      	lsls	r1, r3, #19
 800b75c:	6922      	ldr	r2, [r4, #16]
 800b75e:	6022      	str	r2, [r4, #0]
 800b760:	d504      	bpl.n	800b76c <__sflush_r+0x78>
 800b762:	1c42      	adds	r2, r0, #1
 800b764:	d101      	bne.n	800b76a <__sflush_r+0x76>
 800b766:	682b      	ldr	r3, [r5, #0]
 800b768:	b903      	cbnz	r3, 800b76c <__sflush_r+0x78>
 800b76a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b76e:	602f      	str	r7, [r5, #0]
 800b770:	b1b9      	cbz	r1, 800b7a2 <__sflush_r+0xae>
 800b772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b776:	4299      	cmp	r1, r3
 800b778:	d002      	beq.n	800b780 <__sflush_r+0x8c>
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 faea 	bl	800bd54 <_free_r>
 800b780:	2300      	movs	r3, #0
 800b782:	6363      	str	r3, [r4, #52]	@ 0x34
 800b784:	e00d      	b.n	800b7a2 <__sflush_r+0xae>
 800b786:	2301      	movs	r3, #1
 800b788:	4628      	mov	r0, r5
 800b78a:	47b0      	blx	r6
 800b78c:	4602      	mov	r2, r0
 800b78e:	1c50      	adds	r0, r2, #1
 800b790:	d1c9      	bne.n	800b726 <__sflush_r+0x32>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0c6      	beq.n	800b726 <__sflush_r+0x32>
 800b798:	2b1d      	cmp	r3, #29
 800b79a:	d001      	beq.n	800b7a0 <__sflush_r+0xac>
 800b79c:	2b16      	cmp	r3, #22
 800b79e:	d11e      	bne.n	800b7de <__sflush_r+0xea>
 800b7a0:	602f      	str	r7, [r5, #0]
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e022      	b.n	800b7ec <__sflush_r+0xf8>
 800b7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7aa:	b21b      	sxth	r3, r3
 800b7ac:	e01b      	b.n	800b7e6 <__sflush_r+0xf2>
 800b7ae:	690f      	ldr	r7, [r1, #16]
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	d0f6      	beq.n	800b7a2 <__sflush_r+0xae>
 800b7b4:	0793      	lsls	r3, r2, #30
 800b7b6:	680e      	ldr	r6, [r1, #0]
 800b7b8:	bf08      	it	eq
 800b7ba:	694b      	ldreq	r3, [r1, #20]
 800b7bc:	600f      	str	r7, [r1, #0]
 800b7be:	bf18      	it	ne
 800b7c0:	2300      	movne	r3, #0
 800b7c2:	eba6 0807 	sub.w	r8, r6, r7
 800b7c6:	608b      	str	r3, [r1, #8]
 800b7c8:	f1b8 0f00 	cmp.w	r8, #0
 800b7cc:	dde9      	ble.n	800b7a2 <__sflush_r+0xae>
 800b7ce:	6a21      	ldr	r1, [r4, #32]
 800b7d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7d2:	4643      	mov	r3, r8
 800b7d4:	463a      	mov	r2, r7
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	47b0      	blx	r6
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	dc08      	bgt.n	800b7f0 <__sflush_r+0xfc>
 800b7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	4407      	add	r7, r0
 800b7f2:	eba8 0800 	sub.w	r8, r8, r0
 800b7f6:	e7e7      	b.n	800b7c8 <__sflush_r+0xd4>
 800b7f8:	20400001 	.word	0x20400001

0800b7fc <_fflush_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	690b      	ldr	r3, [r1, #16]
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b913      	cbnz	r3, 800b80c <_fflush_r+0x10>
 800b806:	2500      	movs	r5, #0
 800b808:	4628      	mov	r0, r5
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	b118      	cbz	r0, 800b816 <_fflush_r+0x1a>
 800b80e:	6a03      	ldr	r3, [r0, #32]
 800b810:	b90b      	cbnz	r3, 800b816 <_fflush_r+0x1a>
 800b812:	f7ff faa1 	bl	800ad58 <__sinit>
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <_fflush_r+0xa>
 800b81e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b820:	07d0      	lsls	r0, r2, #31
 800b822:	d404      	bmi.n	800b82e <_fflush_r+0x32>
 800b824:	0599      	lsls	r1, r3, #22
 800b826:	d402      	bmi.n	800b82e <_fflush_r+0x32>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f7ff fbdc 	bl	800afe6 <__retarget_lock_acquire_recursive>
 800b82e:	4628      	mov	r0, r5
 800b830:	4621      	mov	r1, r4
 800b832:	f7ff ff5f 	bl	800b6f4 <__sflush_r>
 800b836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b838:	07da      	lsls	r2, r3, #31
 800b83a:	4605      	mov	r5, r0
 800b83c:	d4e4      	bmi.n	800b808 <_fflush_r+0xc>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	059b      	lsls	r3, r3, #22
 800b842:	d4e1      	bmi.n	800b808 <_fflush_r+0xc>
 800b844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b846:	f7ff fbcf 	bl	800afe8 <__retarget_lock_release_recursive>
 800b84a:	e7dd      	b.n	800b808 <_fflush_r+0xc>

0800b84c <__malloc_lock>:
 800b84c:	4801      	ldr	r0, [pc, #4]	@ (800b854 <__malloc_lock+0x8>)
 800b84e:	f7ff bbca 	b.w	800afe6 <__retarget_lock_acquire_recursive>
 800b852:	bf00      	nop
 800b854:	20011538 	.word	0x20011538

0800b858 <__malloc_unlock>:
 800b858:	4801      	ldr	r0, [pc, #4]	@ (800b860 <__malloc_unlock+0x8>)
 800b85a:	f7ff bbc5 	b.w	800afe8 <__retarget_lock_release_recursive>
 800b85e:	bf00      	nop
 800b860:	20011538 	.word	0x20011538

0800b864 <__sread>:
 800b864:	b510      	push	{r4, lr}
 800b866:	460c      	mov	r4, r1
 800b868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86c:	f000 fa2a 	bl	800bcc4 <_read_r>
 800b870:	2800      	cmp	r0, #0
 800b872:	bfab      	itete	ge
 800b874:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b876:	89a3      	ldrhlt	r3, [r4, #12]
 800b878:	181b      	addge	r3, r3, r0
 800b87a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b87e:	bfac      	ite	ge
 800b880:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b882:	81a3      	strhlt	r3, [r4, #12]
 800b884:	bd10      	pop	{r4, pc}

0800b886 <__swrite>:
 800b886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b88a:	461f      	mov	r7, r3
 800b88c:	898b      	ldrh	r3, [r1, #12]
 800b88e:	05db      	lsls	r3, r3, #23
 800b890:	4605      	mov	r5, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4616      	mov	r6, r2
 800b896:	d505      	bpl.n	800b8a4 <__swrite+0x1e>
 800b898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89c:	2302      	movs	r3, #2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f000 f9ce 	bl	800bc40 <_lseek_r>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	463b      	mov	r3, r7
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ba:	f000 ba39 	b.w	800bd30 <_write_r>

0800b8be <__sseek>:
 800b8be:	b510      	push	{r4, lr}
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8c6:	f000 f9bb 	bl	800bc40 <_lseek_r>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	bf15      	itete	ne
 800b8d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8da:	81a3      	strheq	r3, [r4, #12]
 800b8dc:	bf18      	it	ne
 800b8de:	81a3      	strhne	r3, [r4, #12]
 800b8e0:	bd10      	pop	{r4, pc}

0800b8e2 <__sclose>:
 800b8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e6:	f000 b979 	b.w	800bbdc <_close_r>

0800b8ea <__swbuf_r>:
 800b8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ec:	460e      	mov	r6, r1
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	b118      	cbz	r0, 800b8fc <__swbuf_r+0x12>
 800b8f4:	6a03      	ldr	r3, [r0, #32]
 800b8f6:	b90b      	cbnz	r3, 800b8fc <__swbuf_r+0x12>
 800b8f8:	f7ff fa2e 	bl	800ad58 <__sinit>
 800b8fc:	69a3      	ldr	r3, [r4, #24]
 800b8fe:	60a3      	str	r3, [r4, #8]
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	071a      	lsls	r2, r3, #28
 800b904:	d501      	bpl.n	800b90a <__swbuf_r+0x20>
 800b906:	6923      	ldr	r3, [r4, #16]
 800b908:	b943      	cbnz	r3, 800b91c <__swbuf_r+0x32>
 800b90a:	4621      	mov	r1, r4
 800b90c:	4628      	mov	r0, r5
 800b90e:	f000 f82b 	bl	800b968 <__swsetup_r>
 800b912:	b118      	cbz	r0, 800b91c <__swbuf_r+0x32>
 800b914:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b918:	4638      	mov	r0, r7
 800b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	1a98      	subs	r0, r3, r2
 800b922:	6963      	ldr	r3, [r4, #20]
 800b924:	b2f6      	uxtb	r6, r6
 800b926:	4283      	cmp	r3, r0
 800b928:	4637      	mov	r7, r6
 800b92a:	dc05      	bgt.n	800b938 <__swbuf_r+0x4e>
 800b92c:	4621      	mov	r1, r4
 800b92e:	4628      	mov	r0, r5
 800b930:	f7ff ff64 	bl	800b7fc <_fflush_r>
 800b934:	2800      	cmp	r0, #0
 800b936:	d1ed      	bne.n	800b914 <__swbuf_r+0x2a>
 800b938:	68a3      	ldr	r3, [r4, #8]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60a3      	str	r3, [r4, #8]
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	1c5a      	adds	r2, r3, #1
 800b942:	6022      	str	r2, [r4, #0]
 800b944:	701e      	strb	r6, [r3, #0]
 800b946:	6962      	ldr	r2, [r4, #20]
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d004      	beq.n	800b958 <__swbuf_r+0x6e>
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	07db      	lsls	r3, r3, #31
 800b952:	d5e1      	bpl.n	800b918 <__swbuf_r+0x2e>
 800b954:	2e0a      	cmp	r6, #10
 800b956:	d1df      	bne.n	800b918 <__swbuf_r+0x2e>
 800b958:	4621      	mov	r1, r4
 800b95a:	4628      	mov	r0, r5
 800b95c:	f7ff ff4e 	bl	800b7fc <_fflush_r>
 800b960:	2800      	cmp	r0, #0
 800b962:	d0d9      	beq.n	800b918 <__swbuf_r+0x2e>
 800b964:	e7d6      	b.n	800b914 <__swbuf_r+0x2a>
	...

0800b968 <__swsetup_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4b29      	ldr	r3, [pc, #164]	@ (800ba10 <__swsetup_r+0xa8>)
 800b96c:	4605      	mov	r5, r0
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	460c      	mov	r4, r1
 800b972:	b118      	cbz	r0, 800b97c <__swsetup_r+0x14>
 800b974:	6a03      	ldr	r3, [r0, #32]
 800b976:	b90b      	cbnz	r3, 800b97c <__swsetup_r+0x14>
 800b978:	f7ff f9ee 	bl	800ad58 <__sinit>
 800b97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b980:	0719      	lsls	r1, r3, #28
 800b982:	d422      	bmi.n	800b9ca <__swsetup_r+0x62>
 800b984:	06da      	lsls	r2, r3, #27
 800b986:	d407      	bmi.n	800b998 <__swsetup_r+0x30>
 800b988:	2209      	movs	r2, #9
 800b98a:	602a      	str	r2, [r5, #0]
 800b98c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b996:	e033      	b.n	800ba00 <__swsetup_r+0x98>
 800b998:	0758      	lsls	r0, r3, #29
 800b99a:	d512      	bpl.n	800b9c2 <__swsetup_r+0x5a>
 800b99c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b99e:	b141      	cbz	r1, 800b9b2 <__swsetup_r+0x4a>
 800b9a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9a4:	4299      	cmp	r1, r3
 800b9a6:	d002      	beq.n	800b9ae <__swsetup_r+0x46>
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f000 f9d3 	bl	800bd54 <_free_r>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f043 0308 	orr.w	r3, r3, #8
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	6923      	ldr	r3, [r4, #16]
 800b9cc:	b94b      	cbnz	r3, 800b9e2 <__swsetup_r+0x7a>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9d8:	d003      	beq.n	800b9e2 <__swsetup_r+0x7a>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4628      	mov	r0, r5
 800b9de:	f000 f83f 	bl	800ba60 <__smakebuf_r>
 800b9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e6:	f013 0201 	ands.w	r2, r3, #1
 800b9ea:	d00a      	beq.n	800ba02 <__swsetup_r+0x9a>
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	60a2      	str	r2, [r4, #8]
 800b9f0:	6962      	ldr	r2, [r4, #20]
 800b9f2:	4252      	negs	r2, r2
 800b9f4:	61a2      	str	r2, [r4, #24]
 800b9f6:	6922      	ldr	r2, [r4, #16]
 800b9f8:	b942      	cbnz	r2, 800ba0c <__swsetup_r+0xa4>
 800b9fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9fe:	d1c5      	bne.n	800b98c <__swsetup_r+0x24>
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	0799      	lsls	r1, r3, #30
 800ba04:	bf58      	it	pl
 800ba06:	6962      	ldrpl	r2, [r4, #20]
 800ba08:	60a2      	str	r2, [r4, #8]
 800ba0a:	e7f4      	b.n	800b9f6 <__swsetup_r+0x8e>
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e7f7      	b.n	800ba00 <__swsetup_r+0x98>
 800ba10:	2000003c 	.word	0x2000003c

0800ba14 <__swhatbuf_r>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	460c      	mov	r4, r1
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	b096      	sub	sp, #88	@ 0x58
 800ba20:	4615      	mov	r5, r2
 800ba22:	461e      	mov	r6, r3
 800ba24:	da0d      	bge.n	800ba42 <__swhatbuf_r+0x2e>
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba2c:	f04f 0100 	mov.w	r1, #0
 800ba30:	bf14      	ite	ne
 800ba32:	2340      	movne	r3, #64	@ 0x40
 800ba34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba38:	2000      	movs	r0, #0
 800ba3a:	6031      	str	r1, [r6, #0]
 800ba3c:	602b      	str	r3, [r5, #0]
 800ba3e:	b016      	add	sp, #88	@ 0x58
 800ba40:	bd70      	pop	{r4, r5, r6, pc}
 800ba42:	466a      	mov	r2, sp
 800ba44:	f000 f8da 	bl	800bbfc <_fstat_r>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	dbec      	blt.n	800ba26 <__swhatbuf_r+0x12>
 800ba4c:	9901      	ldr	r1, [sp, #4]
 800ba4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba56:	4259      	negs	r1, r3
 800ba58:	4159      	adcs	r1, r3
 800ba5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba5e:	e7eb      	b.n	800ba38 <__swhatbuf_r+0x24>

0800ba60 <__smakebuf_r>:
 800ba60:	898b      	ldrh	r3, [r1, #12]
 800ba62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba64:	079d      	lsls	r5, r3, #30
 800ba66:	4606      	mov	r6, r0
 800ba68:	460c      	mov	r4, r1
 800ba6a:	d507      	bpl.n	800ba7c <__smakebuf_r+0x1c>
 800ba6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	2301      	movs	r3, #1
 800ba76:	6163      	str	r3, [r4, #20]
 800ba78:	b003      	add	sp, #12
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7c:	ab01      	add	r3, sp, #4
 800ba7e:	466a      	mov	r2, sp
 800ba80:	f7ff ffc8 	bl	800ba14 <__swhatbuf_r>
 800ba84:	9f00      	ldr	r7, [sp, #0]
 800ba86:	4605      	mov	r5, r0
 800ba88:	4639      	mov	r1, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff fc26 	bl	800b2dc <_malloc_r>
 800ba90:	b948      	cbnz	r0, 800baa6 <__smakebuf_r+0x46>
 800ba92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba96:	059a      	lsls	r2, r3, #22
 800ba98:	d4ee      	bmi.n	800ba78 <__smakebuf_r+0x18>
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	f043 0302 	orr.w	r3, r3, #2
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	e7e2      	b.n	800ba6c <__smakebuf_r+0xc>
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	6020      	str	r0, [r4, #0]
 800baaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	9b01      	ldr	r3, [sp, #4]
 800bab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bab6:	b15b      	cbz	r3, 800bad0 <__smakebuf_r+0x70>
 800bab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babc:	4630      	mov	r0, r6
 800babe:	f000 f8af 	bl	800bc20 <_isatty_r>
 800bac2:	b128      	cbz	r0, 800bad0 <__smakebuf_r+0x70>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	431d      	orrs	r5, r3
 800bad4:	81a5      	strh	r5, [r4, #12]
 800bad6:	e7cf      	b.n	800ba78 <__smakebuf_r+0x18>

0800bad8 <lflush>:
 800bad8:	898b      	ldrh	r3, [r1, #12]
 800bada:	f003 0309 	and.w	r3, r3, #9
 800bade:	2b09      	cmp	r3, #9
 800bae0:	d103      	bne.n	800baea <lflush+0x12>
 800bae2:	4b03      	ldr	r3, [pc, #12]	@ (800baf0 <lflush+0x18>)
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f7ff be89 	b.w	800b7fc <_fflush_r>
 800baea:	2000      	movs	r0, #0
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	2000003c 	.word	0x2000003c

0800baf4 <__srefill_r>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	460c      	mov	r4, r1
 800baf8:	4605      	mov	r5, r0
 800bafa:	b118      	cbz	r0, 800bb04 <__srefill_r+0x10>
 800bafc:	6a03      	ldr	r3, [r0, #32]
 800bafe:	b90b      	cbnz	r3, 800bb04 <__srefill_r+0x10>
 800bb00:	f7ff f92a 	bl	800ad58 <__sinit>
 800bb04:	2300      	movs	r3, #0
 800bb06:	6063      	str	r3, [r4, #4]
 800bb08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb0c:	069e      	lsls	r6, r3, #26
 800bb0e:	d408      	bmi.n	800bb22 <__srefill_r+0x2e>
 800bb10:	0758      	lsls	r0, r3, #29
 800bb12:	d445      	bmi.n	800bba0 <__srefill_r+0xac>
 800bb14:	06d9      	lsls	r1, r3, #27
 800bb16:	d407      	bmi.n	800bb28 <__srefill_r+0x34>
 800bb18:	2209      	movs	r2, #9
 800bb1a:	602a      	str	r2, [r5, #0]
 800bb1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb26:	bd70      	pop	{r4, r5, r6, pc}
 800bb28:	071a      	lsls	r2, r3, #28
 800bb2a:	d50b      	bpl.n	800bb44 <__srefill_r+0x50>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f7ff fe64 	bl	800b7fc <_fflush_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d1f4      	bne.n	800bb22 <__srefill_r+0x2e>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	60a0      	str	r0, [r4, #8]
 800bb3c:	f023 0308 	bic.w	r3, r3, #8
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	61a0      	str	r0, [r4, #24]
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	f043 0304 	orr.w	r3, r3, #4
 800bb4a:	81a3      	strh	r3, [r4, #12]
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	b91b      	cbnz	r3, 800bb58 <__srefill_r+0x64>
 800bb50:	4621      	mov	r1, r4
 800bb52:	4628      	mov	r0, r5
 800bb54:	f7ff ff84 	bl	800ba60 <__smakebuf_r>
 800bb58:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800bb5c:	07b3      	lsls	r3, r6, #30
 800bb5e:	d00f      	beq.n	800bb80 <__srefill_r+0x8c>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4a1b      	ldr	r2, [pc, #108]	@ (800bbd0 <__srefill_r+0xdc>)
 800bb64:	491b      	ldr	r1, [pc, #108]	@ (800bbd4 <__srefill_r+0xe0>)
 800bb66:	481c      	ldr	r0, [pc, #112]	@ (800bbd8 <__srefill_r+0xe4>)
 800bb68:	81a3      	strh	r3, [r4, #12]
 800bb6a:	f7ff f91f 	bl	800adac <_fwalk_sglue>
 800bb6e:	81a6      	strh	r6, [r4, #12]
 800bb70:	f006 0609 	and.w	r6, r6, #9
 800bb74:	2e09      	cmp	r6, #9
 800bb76:	d103      	bne.n	800bb80 <__srefill_r+0x8c>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f7ff fdba 	bl	800b6f4 <__sflush_r>
 800bb80:	6922      	ldr	r2, [r4, #16]
 800bb82:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800bb84:	6963      	ldr	r3, [r4, #20]
 800bb86:	6a21      	ldr	r1, [r4, #32]
 800bb88:	6022      	str	r2, [r4, #0]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	47b0      	blx	r6
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	6060      	str	r0, [r4, #4]
 800bb92:	dc17      	bgt.n	800bbc4 <__srefill_r+0xd0>
 800bb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb98:	d116      	bne.n	800bbc8 <__srefill_r+0xd4>
 800bb9a:	f043 0320 	orr.w	r3, r3, #32
 800bb9e:	e7bf      	b.n	800bb20 <__srefill_r+0x2c>
 800bba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bba2:	2900      	cmp	r1, #0
 800bba4:	d0d2      	beq.n	800bb4c <__srefill_r+0x58>
 800bba6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	d002      	beq.n	800bbb4 <__srefill_r+0xc0>
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f000 f8d0 	bl	800bd54 <_free_r>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbba:	6063      	str	r3, [r4, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d0c5      	beq.n	800bb4c <__srefill_r+0x58>
 800bbc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	e7ae      	b.n	800bb26 <__srefill_r+0x32>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	6062      	str	r2, [r4, #4]
 800bbcc:	e7a6      	b.n	800bb1c <__srefill_r+0x28>
 800bbce:	bf00      	nop
 800bbd0:	20000030 	.word	0x20000030
 800bbd4:	0800bad9 	.word	0x0800bad9
 800bbd8:	20000040 	.word	0x20000040

0800bbdc <_close_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	@ (800bbf8 <_close_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f000 f8fe 	bl	800bde8 <_close>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_close_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_close_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	20011544 	.word	0x20011544

0800bbfc <_fstat_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	@ (800bc1c <_fstat_r+0x20>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	4611      	mov	r1, r2
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	f000 f8f5 	bl	800bdf8 <_fstat>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d102      	bne.n	800bc18 <_fstat_r+0x1c>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	b103      	cbz	r3, 800bc18 <_fstat_r+0x1c>
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20011544 	.word	0x20011544

0800bc20 <_isatty_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d06      	ldr	r5, [pc, #24]	@ (800bc3c <_isatty_r+0x1c>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f000 f8f4 	bl	800be18 <_isatty>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_isatty_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_isatty_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20011544 	.word	0x20011544

0800bc40 <_lseek_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	@ (800bc60 <_lseek_r+0x20>)
 800bc44:	4604      	mov	r4, r0
 800bc46:	4608      	mov	r0, r1
 800bc48:	4611      	mov	r1, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f000 f8f2 	bl	800be38 <_lseek>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_lseek_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_lseek_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20011544 	.word	0x20011544

0800bc64 <_raise_r>:
 800bc64:	291f      	cmp	r1, #31
 800bc66:	b538      	push	{r3, r4, r5, lr}
 800bc68:	4605      	mov	r5, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	d904      	bls.n	800bc78 <_raise_r+0x14>
 800bc6e:	2316      	movs	r3, #22
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc7a:	b112      	cbz	r2, 800bc82 <_raise_r+0x1e>
 800bc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc80:	b94b      	cbnz	r3, 800bc96 <_raise_r+0x32>
 800bc82:	4628      	mov	r0, r5
 800bc84:	f000 f842 	bl	800bd0c <_getpid_r>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc92:	f000 b829 	b.w	800bce8 <_kill_r>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d00a      	beq.n	800bcb0 <_raise_r+0x4c>
 800bc9a:	1c59      	adds	r1, r3, #1
 800bc9c:	d103      	bne.n	800bca6 <_raise_r+0x42>
 800bc9e:	2316      	movs	r3, #22
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	2001      	movs	r0, #1
 800bca4:	e7e7      	b.n	800bc76 <_raise_r+0x12>
 800bca6:	2100      	movs	r1, #0
 800bca8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcac:	4620      	mov	r0, r4
 800bcae:	4798      	blx	r3
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e7e0      	b.n	800bc76 <_raise_r+0x12>

0800bcb4 <raise>:
 800bcb4:	4b02      	ldr	r3, [pc, #8]	@ (800bcc0 <raise+0xc>)
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f7ff bfd3 	b.w	800bc64 <_raise_r>
 800bcbe:	bf00      	nop
 800bcc0:	2000003c 	.word	0x2000003c

0800bcc4 <_read_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	@ (800bce4 <_read_r+0x20>)
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4608      	mov	r0, r1
 800bccc:	4611      	mov	r1, r2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	602a      	str	r2, [r5, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	f7fb fe7c 	bl	80079d0 <_read>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_read_r+0x1e>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_read_r+0x1e>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	20011544 	.word	0x20011544

0800bce8 <_kill_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d07      	ldr	r5, [pc, #28]	@ (800bd08 <_kill_r+0x20>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	f000 f897 	bl	800be28 <_kill>
 800bcfa:	1c43      	adds	r3, r0, #1
 800bcfc:	d102      	bne.n	800bd04 <_kill_r+0x1c>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	b103      	cbz	r3, 800bd04 <_kill_r+0x1c>
 800bd02:	6023      	str	r3, [r4, #0]
 800bd04:	bd38      	pop	{r3, r4, r5, pc}
 800bd06:	bf00      	nop
 800bd08:	20011544 	.word	0x20011544

0800bd0c <_getpid_r>:
 800bd0c:	f000 b87c 	b.w	800be08 <_getpid>

0800bd10 <_sbrk_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d06      	ldr	r5, [pc, #24]	@ (800bd2c <_sbrk_r+0x1c>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f000 f894 	bl	800be48 <_sbrk>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_sbrk_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_sbrk_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20011544 	.word	0x20011544

0800bd30 <_write_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4d07      	ldr	r5, [pc, #28]	@ (800bd50 <_write_r+0x20>)
 800bd34:	4604      	mov	r4, r0
 800bd36:	4608      	mov	r0, r1
 800bd38:	4611      	mov	r1, r2
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	602a      	str	r2, [r5, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	f7fb fe7e 	bl	8007a40 <_write>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_write_r+0x1e>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_write_r+0x1e>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20011544 	.word	0x20011544

0800bd54 <_free_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4605      	mov	r5, r0
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	d041      	beq.n	800bde0 <_free_r+0x8c>
 800bd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd60:	1f0c      	subs	r4, r1, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfb8      	it	lt
 800bd66:	18e4      	addlt	r4, r4, r3
 800bd68:	f7ff fd70 	bl	800b84c <__malloc_lock>
 800bd6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bde4 <_free_r+0x90>)
 800bd6e:	6813      	ldr	r3, [r2, #0]
 800bd70:	b933      	cbnz	r3, 800bd80 <_free_r+0x2c>
 800bd72:	6063      	str	r3, [r4, #4]
 800bd74:	6014      	str	r4, [r2, #0]
 800bd76:	4628      	mov	r0, r5
 800bd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd7c:	f7ff bd6c 	b.w	800b858 <__malloc_unlock>
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d908      	bls.n	800bd96 <_free_r+0x42>
 800bd84:	6820      	ldr	r0, [r4, #0]
 800bd86:	1821      	adds	r1, r4, r0
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf01      	itttt	eq
 800bd8c:	6819      	ldreq	r1, [r3, #0]
 800bd8e:	685b      	ldreq	r3, [r3, #4]
 800bd90:	1809      	addeq	r1, r1, r0
 800bd92:	6021      	streq	r1, [r4, #0]
 800bd94:	e7ed      	b.n	800bd72 <_free_r+0x1e>
 800bd96:	461a      	mov	r2, r3
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b10b      	cbz	r3, 800bda0 <_free_r+0x4c>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d9fa      	bls.n	800bd96 <_free_r+0x42>
 800bda0:	6811      	ldr	r1, [r2, #0]
 800bda2:	1850      	adds	r0, r2, r1
 800bda4:	42a0      	cmp	r0, r4
 800bda6:	d10b      	bne.n	800bdc0 <_free_r+0x6c>
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	4401      	add	r1, r0
 800bdac:	1850      	adds	r0, r2, r1
 800bdae:	4283      	cmp	r3, r0
 800bdb0:	6011      	str	r1, [r2, #0]
 800bdb2:	d1e0      	bne.n	800bd76 <_free_r+0x22>
 800bdb4:	6818      	ldr	r0, [r3, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	6053      	str	r3, [r2, #4]
 800bdba:	4408      	add	r0, r1
 800bdbc:	6010      	str	r0, [r2, #0]
 800bdbe:	e7da      	b.n	800bd76 <_free_r+0x22>
 800bdc0:	d902      	bls.n	800bdc8 <_free_r+0x74>
 800bdc2:	230c      	movs	r3, #12
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	e7d6      	b.n	800bd76 <_free_r+0x22>
 800bdc8:	6820      	ldr	r0, [r4, #0]
 800bdca:	1821      	adds	r1, r4, r0
 800bdcc:	428b      	cmp	r3, r1
 800bdce:	bf04      	itt	eq
 800bdd0:	6819      	ldreq	r1, [r3, #0]
 800bdd2:	685b      	ldreq	r3, [r3, #4]
 800bdd4:	6063      	str	r3, [r4, #4]
 800bdd6:	bf04      	itt	eq
 800bdd8:	1809      	addeq	r1, r1, r0
 800bdda:	6021      	streq	r1, [r4, #0]
 800bddc:	6054      	str	r4, [r2, #4]
 800bdde:	e7ca      	b.n	800bd76 <_free_r+0x22>
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	bf00      	nop
 800bde4:	20011540 	.word	0x20011540

0800bde8 <_close>:
 800bde8:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <_close+0xc>)
 800bdea:	2258      	movs	r2, #88	@ 0x58
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdf2:	4770      	bx	lr
 800bdf4:	20011544 	.word	0x20011544

0800bdf8 <_fstat>:
 800bdf8:	4b02      	ldr	r3, [pc, #8]	@ (800be04 <_fstat+0xc>)
 800bdfa:	2258      	movs	r2, #88	@ 0x58
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be02:	4770      	bx	lr
 800be04:	20011544 	.word	0x20011544

0800be08 <_getpid>:
 800be08:	4b02      	ldr	r3, [pc, #8]	@ (800be14 <_getpid+0xc>)
 800be0a:	2258      	movs	r2, #88	@ 0x58
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be12:	4770      	bx	lr
 800be14:	20011544 	.word	0x20011544

0800be18 <_isatty>:
 800be18:	4b02      	ldr	r3, [pc, #8]	@ (800be24 <_isatty+0xc>)
 800be1a:	2258      	movs	r2, #88	@ 0x58
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	2000      	movs	r0, #0
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20011544 	.word	0x20011544

0800be28 <_kill>:
 800be28:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <_kill+0xc>)
 800be2a:	2258      	movs	r2, #88	@ 0x58
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be32:	4770      	bx	lr
 800be34:	20011544 	.word	0x20011544

0800be38 <_lseek>:
 800be38:	4b02      	ldr	r3, [pc, #8]	@ (800be44 <_lseek+0xc>)
 800be3a:	2258      	movs	r2, #88	@ 0x58
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be42:	4770      	bx	lr
 800be44:	20011544 	.word	0x20011544

0800be48 <_sbrk>:
 800be48:	4a04      	ldr	r2, [pc, #16]	@ (800be5c <_sbrk+0x14>)
 800be4a:	4905      	ldr	r1, [pc, #20]	@ (800be60 <_sbrk+0x18>)
 800be4c:	6813      	ldr	r3, [r2, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	bf08      	it	eq
 800be52:	460b      	moveq	r3, r1
 800be54:	4418      	add	r0, r3
 800be56:	6010      	str	r0, [r2, #0]
 800be58:	4618      	mov	r0, r3
 800be5a:	4770      	bx	lr
 800be5c:	20011548 	.word	0x20011548
 800be60:	2001154c 	.word	0x2001154c

0800be64 <_exit>:
 800be64:	e7fe      	b.n	800be64 <_exit>
 800be66:	bf00      	nop
 800be68:	00000020 	.word	0x00000020
	...
 800be74:	00000002 	.word	0x00000002
	...
 800be80:	52005020 	.word	0x52005020
	...
 800be8c:	20000000 	.word	0x20000000
 800be90:	00000016 	.word	0x00000016
	...
 800bebc:	000000c0 	.word	0x000000c0
 800bec0:	80000000 	.word	0x80000000
	...
 800becc:	0000007f 	.word	0x0000007f
 800bed0:	00020000 	.word	0x00020000
 800bed4:	00004000 	.word	0x00004000
	...
 800bee8:	00000008 	.word	0x00000008
	...
 800bf00:	00000020 	.word	0x00000020
 800bf04:	00000064 	.word	0x00000064
 800bf08:	00000020 	.word	0x00000020
 800bf0c:	00000020 	.word	0x00000020
 800bf10:	00000020 	.word	0x00000020
 800bf14:	00000000 	.word	0x00000000
 800bf18:	00000200 	.word	0x00000200
 800bf1c:	00000000 	.word	0x00000000
 800bf20:	74617453 	.word	0x74617453
 800bf24:	00203a65 	.word	0x00203a65
 800bf28:	454c4449 	.word	0x454c4449
 800bf2c:	00000000 	.word	0x00000000
 800bf30:	544e5953 	.word	0x544e5953
 800bf34:	00000048 	.word	0x00000048
 800bf38:	4f434552 	.word	0x4f434552
 800bf3c:	00004452 	.word	0x00004452
 800bf40:	59414c50 	.word	0x59414c50
 800bf44:	00000000 	.word	0x00000000
 800bf48:	504f5453 	.word	0x504f5453
 800bf4c:	00000000 	.word	0x00000000
 800bf50:	45564153 	.word	0x45564153
 800bf54:	00000000 	.word	0x00000000
 800bf58:	53415245 	.word	0x53415245
 800bf5c:	00000045 	.word	0x00000045
 800bf60:	49474542 	.word	0x49474542
 800bf64:	52575f4e 	.word	0x52575f4e
 800bf68:	00455449 	.word	0x00455449
 800bf6c:	54495257 	.word	0x54495257
 800bf70:	00000045 	.word	0x00000045
 800bf74:	4d4d4f43 	.word	0x4d4d4f43
 800bf78:	00005449 	.word	0x00005449
 800bf7c:	4e415453 	.word	0x4e415453
 800bf80:	00594244 	.word	0x00594244
 800bf84:	52415453 	.word	0x52415453
 800bf88:	00505554 	.word	0x00505554
 800bf8c:	49444e45 	.word	0x49444e45
 800bf90:	0000474e 	.word	0x0000474e
 800bf94:	73617245 	.word	0x73617245
 800bf98:	61662065 	.word	0x61662065
 800bf9c:	64656c69 	.word	0x64656c69
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	65766153 	.word	0x65766153
 800bfa8:	6f626120 	.word	0x6f626120
 800bfac:	64657472 	.word	0x64657472
 800bfb0:	00000000 	.word	0x00000000
 800bfb4:	65766153 	.word	0x65766153
 800bfb8:	6d6f6320 	.word	0x6d6f6320
 800bfbc:	74656c70 	.word	0x74656c70
 800bfc0:	00006465 	.word	0x00006465
 800bfc4:	20202020 	.word	0x20202020
 800bfc8:	00000000 	.word	0x00000000
 800bfcc:	64417325 	.word	0x64417325
 800bfd0:	73657264 	.word	0x73657264
 800bfd4:	30203a73 	.word	0x30203a73
 800bfd8:	38302578 	.word	0x38302578
 800bfdc:	000a586c 	.word	0x000a586c
 800bfe0:	69537325 	.word	0x69537325
 800bfe4:	203a657a 	.word	0x203a657a
 800bfe8:	30202020 	.word	0x30202020
 800bfec:	38302578 	.word	0x38302578
 800bff0:	000a586c 	.word	0x000a586c
 800bff4:	52437325 	.word	0x52437325
 800bff8:	3a323343 	.word	0x3a323343
 800bffc:	30202020 	.word	0x30202020
 800c000:	38302578 	.word	0x38302578
 800c004:	000a586c 	.word	0x000a586c
 800c008:	65766153 	.word	0x65766153
 800c00c:	74616420 	.word	0x74616420
 800c010:	6f662061 	.word	0x6f662061
 800c014:	3a646e75 	.word	0x3a646e75
 800c018:	00000000 	.word	0x00000000
 800c01c:	73206f4e 	.word	0x73206f4e
 800c020:	20657661 	.word	0x20657661
 800c024:	61746164 	.word	0x61746164
 800c028:	756f6620 	.word	0x756f6620
 800c02c:	0000646e 	.word	0x0000646e
 800c030:	61766e49 	.word	0x61766e49
 800c034:	2064696c 	.word	0x2064696c
 800c038:	72646461 	.word	0x72646461
 800c03c:	00737365 	.word	0x00737365
 800c040:	64616f4c 	.word	0x64616f4c
 800c044:	20676e69 	.word	0x20676e69
 800c048:	69647561 	.word	0x69647561
 800c04c:	2e2e2e6f 	.word	0x2e2e2e6f
 800c050:	00000020 	.word	0x00000020
 800c054:	656e6f64 	.word	0x656e6f64
 800c058:	00000000 	.word	0x00000000
 800c05c:	61766e69 	.word	0x61766e69
 800c060:	2064696c 	.word	0x2064696c
 800c064:	33435243 	.word	0x33435243
 800c068:	30203a32 	.word	0x30203a32
 800c06c:	38302578 	.word	0x38302578
 800c070:	000a586c 	.word	0x000a586c
 800c074:	6b6361ff 	.word	0x6b6361ff
 800c078:	00000000 	.word	0x00000000
 800c07c:	0a7325ff 	.word	0x0a7325ff
 800c080:	00000000 	.word	0x00000000
 800c084:	6e717269 	.word	0x6e717269
 800c088:	203d3e20 	.word	0x203d3e20
 800c08c:	4d6e6f4e 	.word	0x4d6e6f4e
 800c090:	616b7361 	.word	0x616b7361
 800c094:	49656c62 	.word	0x49656c62
 800c098:	495f746e 	.word	0x495f746e
 800c09c:	006e5152 	.word	0x006e5152
 800c0a0:	64696f76 	.word	0x64696f76
 800c0a4:	63657220 	.word	0x63657220
 800c0a8:	6564726f 	.word	0x6564726f
 800c0ac:	693a3a72 	.word	0x693a3a72
 800c0b0:	3a3a7172 	.word	0x3a3a7172
 800c0b4:	69676552 	.word	0x69676552
 800c0b8:	72657473 	.word	0x72657473
 800c0bc:	646e6148 	.word	0x646e6148
 800c0c0:	2872656c 	.word	0x2872656c
 800c0c4:	6e515249 	.word	0x6e515249
 800c0c8:	7079545f 	.word	0x7079545f
 800c0cc:	56202c65 	.word	0x56202c65
 800c0d0:	6f746365 	.word	0x6f746365
 800c0d4:	00002972 	.word	0x00002972
 800c0d8:	76697264 	.word	0x76697264
 800c0dc:	2f737265 	.word	0x2f737265
 800c0e0:	2e717269 	.word	0x2e717269
 800c0e4:	00707063 	.word	0x00707063
 800c0e8:	65637865 	.word	0x65637865
 800c0ec:	6f697470 	.word	0x6f697470
 800c0f0:	756e5f6e 	.word	0x756e5f6e
 800c0f4:	203c206d 	.word	0x203c206d
 800c0f8:	6d754e6b 	.word	0x6d754e6b
 800c0fc:	74636556 	.word	0x74636556
 800c100:	0073726f 	.word	0x0073726f
 800c104:	6e717269 	.word	0x6e717269
 800c108:	203d3e20 	.word	0x203d3e20
 800c10c:	00000030 	.word	0x00000030
 800c110:	64696f76 	.word	0x64696f76
 800c114:	63657220 	.word	0x63657220
 800c118:	6564726f 	.word	0x6564726f
 800c11c:	693a3a72 	.word	0x693a3a72
 800c120:	3a3a7172 	.word	0x3a3a7172
 800c124:	62616e45 	.word	0x62616e45
 800c128:	4928656c 	.word	0x4928656c
 800c12c:	5f6e5152 	.word	0x5f6e5152
 800c130:	65707954 	.word	0x65707954
 800c134:	00000029 	.word	0x00000029
 800c138:	65736552 	.word	0x65736552
 800c13c:	6f732074 	.word	0x6f732074
 800c140:	65637275 	.word	0x65637275
 800c144:	73617720 	.word	0x73617720
 800c148:	00000020 	.word	0x00000020
 800c14c:	00524f50 	.word	0x00524f50
 800c150:	5453524e 	.word	0x5453524e
 800c154:	00000000 	.word	0x00000000
 800c158:	00524f42 	.word	0x00524f42
 800c15c:	00544653 	.word	0x00544653
 800c160:	00555043 	.word	0x00555043
 800c164:	47445757 	.word	0x47445757
 800c168:	00000031 	.word	0x00000031
 800c16c:	47445749 	.word	0x47445749
 800c170:	00000031 	.word	0x00000031
 800c174:	454b4157 	.word	0x454b4157
 800c178:	00000000 	.word	0x00000000
 800c17c:	5257504c 	.word	0x5257504c
 800c180:	00000000 	.word	0x00000000
 800c184:	6e6b6e75 	.word	0x6e6b6e75
 800c188:	3a6e776f 	.word	0x3a6e776f
 800c18c:	25783020 	.word	0x25783020
 800c190:	586c3830 	.word	0x586c3830
 800c194:	0000000a 	.word	0x0000000a
 800c198:	656b6157 	.word	0x656b6157
 800c19c:	65207075 	.word	0x65207075
 800c1a0:	746e6576 	.word	0x746e6576
 800c1a4:	73617720 	.word	0x73617720
 800c1a8:	63657220 	.word	0x63657220
 800c1ac:	2064726f 	.word	0x2064726f
 800c1b0:	74747562 	.word	0x74747562
 800c1b4:	00006e6f 	.word	0x00006e6f
 800c1b8:	656b6157 	.word	0x656b6157
 800c1bc:	65207075 	.word	0x65207075
 800c1c0:	746e6576 	.word	0x746e6576
 800c1c4:	73617720 	.word	0x73617720
 800c1c8:	616c7020 	.word	0x616c7020
 800c1cc:	75622079 	.word	0x75622079
 800c1d0:	6e6f7474 	.word	0x6e6f7474
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <recorder::JingleEngine::ending_jingle_>:
 800c1d8:	4412d333 43c47333 43a4d0a4 4382d0a4     3..D3s.C...C...C

0800c1e8 <recorder::JingleEngine::startup_jingle_>:
 800c1e8:	4382d0a4 43a4d0a4 43c47333 4412d51f     ...C...C3s.C...D

0800c1f8 <recorder::SynthEngine::minor_scale_chord_types_>:
 800c1f8:	00000001 00000002 00000000 00000001     ................
 800c208:	00000001 00000000 00000000 00000001     ................

0800c218 <recorder::SynthEngine::major_scale_chord_types_>:
 800c218:	00000000 00000001 00000001 00000000     ................
 800c228:	00000000 00000001 00000002 00000000     ................

0800c238 <recorder::SynthEngine::diminished_chord_multipliers_>:
 800c238:	3f800000 3f9837ef 3fb504f7 40000000     ...?.7.?...?...@

0800c248 <recorder::SynthEngine::minor_chord_multipliers_>:
 800c248:	3f800000 3f9837ef 3fbfc886 40000000     ...?.7.?...?...@

0800c258 <recorder::SynthEngine::major_chord_multipliers_>:
 800c258:	3f800000 3fa14517 3fbfc886 40000000     ...?.E.?...?...@

0800c268 <recorder::SynthEngine::minor_scale_multipliers_>:
 800c268:	3f800000 3f8facd6 3f9837ef 3faadc0a     ...?...?.7.?...?
 800c278:	3fbfc886 3fcb2ff5 3fe411ed 40000000     ...?./.?...?...@

0800c288 <recorder::SynthEngine::major_scale_multipliers_>:
 800c288:	3f800000 3f8facd6 3fa14517 3faadc0a     ...?...?.E.?...?
 800c298:	3fbfc886 3fd744fe 3ff1a1c2 40000000     ...?.D.?...?...@

0800c2a8 <recorder::SynthEngine::chromatic_frequencies_>:
 800c2a8:	4382d0a4 438a970a 4392d47b 439b90a4     ...C...C{..C...C
 800c2b8:	43a4d0a4 43ae9d71 43b8feb8 43c40000     ...Cq..C...C...C
 800c2c8:	43cfa666 43dc0000 43e9147b 43f6f0a4     f..C...C{..C...C
 800c2d8:	4402d000                                ...D

0800c2dc <recorder::SynthEngine::kAttenuationLevels>:
 800c2dc:	3f666666 3f4ccccd 3f333333 3f19999a     fff?..L?333?...?
 800c2ec:	3f000000                                ...?

0800c2f0 <recorder::Adc::PotFilter::kPotCorrection>:
 800c2f0:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 800c300:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 800c310:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 800c320:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 800c330:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 800c340:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 800c350:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 800c360:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 800c370:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 800c380:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 800c390:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 800c3a0:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 800c3b0:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 800c3c0:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 800c3d0:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 800c3e0:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 800c3f0:	3f800000                                ...?

0800c3f4 <D1CorePrescTable>:
 800c3f4:	00000000 04030201 04030201 09080706     ................

0800c404 <LL_DMA_STR_OFFSET_TAB>:
 800c404:	58402810 b8a08870                       .(@Xp...

0800c40c <LL_MDMA_CH_OFFSET_TAB>:
 800c40c:	00000040 00000080 000000c0 00000100     @...............
 800c41c:	00000140 00000180 000001c0 00000200     @...............
 800c42c:	00000240 00000280 000002c0 00000300     @...............
 800c43c:	00000340 00000380 000003c0 00000400     @...............

0800c44c <LL_RCC_PrescTable>:
 800c44c:	00000000 04030201 04030201 09080706     ................

0800c45c <USART_PRESCALER_TAB>:
 800c45c:	00020001 00060004 000a0008 0010000c     ................
 800c46c:	00400020 01000080 00000000               .@.........

0800c478 <__exp2f_data>:
 800c478:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 800c488:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 800c498:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 800c4a8:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 800c4b8:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 800c4c8:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 800c4d8:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 800c4e8:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 800c4f8:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 800c508:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 800c518:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 800c528:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 800c538:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 800c548:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 800c558:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 800c568:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 800c578:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 800c588:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 800c598:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 800c5a8:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 800c5b8:	ff0c52d6 3f962e42                       .R..B..?

0800c5c0 <__inv_pio4>:
 800c5c0:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 800c5d0:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 800c5e0:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 800c5f0:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 800c600:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 800c610:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

0800c620 <__sincosf_table>:
 800c620:	00000000 3ff00000 00000000 bff00000     .......?........
 800c630:	00000000 bff00000 00000000 3ff00000     ...............?
 800c640:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800c650:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 800c660:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 800c670:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 800c680:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 800c690:	00000000 3ff00000 00000000 bff00000     .......?........
 800c6a0:	00000000 bff00000 00000000 3ff00000     ...............?
 800c6b0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800c6c0:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 800c6d0:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 800c6e0:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 800c6f0:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

0800c700 <tiny>:
 800c700:	0da24260                                `B..

0800c704 <two>:
 800c704:	40000000                                ...@

0800c708 <one>:
 800c708:	3f800000 00000000                       ...?....

0800c710 <__logf_data>:
 800c710:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 800c720:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 800c730:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 800c740:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 800c750:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 800c760:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 800c770:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 800c780:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 800c790:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 800c7a0:	00000000 3ff00000 00000000 00000000     .......?........
 800c7b0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 800c7c0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 800c7d0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 800c7e0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 800c7f0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 800c800:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 800c810:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 800c820:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......
 800c830:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
 800c840:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
 800c850:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
 800c860:	20656e69 73256425 000a7325 2b302d23     ine %d%s%s..#-0+
 800c870:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
 800c880:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
 800c890:	35343332 39383736 64636261 00006665     23456789abcdef..

0800c8a0 <_init>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	bf00      	nop
 800c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a6:	bc08      	pop	{r3}
 800c8a8:	469e      	mov	lr, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_fini>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr
