
build/recorder.no-line-in/artifact/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000aa74  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  0800ad14  0800ad14  0000c08c  2**0
                  CONTENTS
  3 .exidx        00000008  0800ad14  0800ad14  0000bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.attributes 00000030  0800ad1c  0800ad1c  0000c08c  2**0
                  CONTENTS, READONLY
  5 .init_array   0000000c  0800ad1c  0800ad1c  0000bd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800ad28  0800ad28  0000bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000008c  20000000  0800ad2c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001114c  20000400  0800adb8  0000c400  2**10
                  ALLOC
  9 .sram1        00080000  24000000  24000000  0000d000  2**2
                  ALLOC
 10 .sram2        00048000  30000000  30000000  0000d000  2**2
                  ALLOC
 11 .sram3        0000fc00  38000000  38000000  0000d000  2**2
                  ALLOC
 12 .dma          00000048  3800fc00  3800fc00  0000d000  2**2
                  ALLOC
 13 .heap         00000000  2001154c  2001154c  0000c0bc  2**0
                  CONTENTS
 14 .reserved_for_stack 00000000  2001154c  2001154c  0000c0bc  2**0
                  CONTENTS
 15 .debug_info   0004a2ac  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000784d  00000000  00000000  00056368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00013052  00000000  00000000  0005dbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000b60  00000000  00000000  00070c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00004508  00000000  00000000  00071767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000536d1  00000000  00000000  00075c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002c76f  00000000  00000000  000c9340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00207ba3  00000000  00000000  000f5aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000044  00000000  00000000  002fd652  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002d10  00000000  00000000  002fd698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000001d4  00000000  00000000  003003a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080002a0 l    d  .text	00000000 .text
0800ad14 l    d  .ARM.extab	00000000 .ARM.extab
0800ad14 l    d  .exidx	00000000 .exidx
0800ad1c l    d  .ARM.attributes	00000000 .ARM.attributes
0800ad1c l    d  .init_array	00000000 .init_array
0800ad28 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000400 l    d  .bss	00000000 .bss
24000000 l    d  .sram1	00000000 .sram1
30000000 l    d  .sram2	00000000 .sram2
38000000 l    d  .sram3	00000000 .sram3
3800fc00 l    d  .dma	00000000 .dma
2001154c l    d  .heap	00000000 .heap
2001154c l    d  .reserved_for_stack	00000000 .reserved_for_stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 startup_stm32h750xx.c
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 crtstuff.c
080006c8 l     F .text	00000000 deregister_tm_clones
080006e4 l     F .text	00000000 register_tm_clones
08000708 l     F .text	00000000 __do_global_dtors_aux
20000400 l     O .bss	00000000 completed.1
0800ad28 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000730 l     F .text	00000000 frame_dummy
20000404 l     O .bss	00000000 object.0
0800ad1c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
20000420 l     O .bss	00000004 recorder::last_strum_pot
2000041c l     O .bss	00000004 recorder::StateMachine(bool)::synthReleaseCounter
08004060 l     F .text	0000010c _GLOBAL__sub_I__ZN8recorder7analog_E
00000000 l    df *ABS*	00000000 adc.cpp
00000000 l    df *ABS*	00000000 analog.cpp
00000000 l    df *ABS*	00000000 dac.cpp
00000000 l    df *ABS*	00000000 flash.cpp
00000000 l    df *ABS*	00000000 irq.cpp
20011000 l     O .bss	00000298 recorder::irq::RAMVectorTable
00000000 l    df *ABS*	00000000 serial.cpp
00000000 l    df *ABS*	00000000 system.cpp
08005ba4 l     F .text	00000024 NVIC_SystemReset
200112a4 l     O .bss	00000004 recorder::system::ticks_
08005be4 l     F .text	000000e0 recorder::system::ConfigureClocks()
200112a8 l     O .bss	00000150 recorder::system::serial_
200112a0 l     O .bss	00000004 recorder::system::wakeup_flags_
2001129d l     O .bss	00000001 _read::prev_was_cr
2001129c l     O .bss	00000001 _write::prev
08006358 l     F .text	00000014 _GLOBAL__sub_I_TickHandler
00000000 l    df *ABS*	00000000 system_stm32h7xx.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal.c
200113f8 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_hal_rcc_ex.c
08006d50 l     F .text	000000e0 RCCEx_PLL2_Config.part.0
08006e30 l     F .text	000000e0 RCCEx_PLL3_Config.part.0
00000000 l    df *ABS*	00000000 stm32h7xx_ll_adc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dac.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_dma.c
0800a988 l     O .text	00000008 LL_DMA_STR_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_gpio.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_mdma.c
0800a990 l     O .text	00000040 LL_MDMA_CH_OFFSET_TAB
00000000 l    df *ABS*	00000000 stm32h7xx_ll_rcc.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_tim.c
00000000 l    df *ABS*	00000000 stm32h7xx_ll_usart.c
0800a9e0 l     O .text	00000018 USART_PRESCALER_TAB
00000000 l    df *ABS*	00000000 sf_exp2.c
00000000 l    df *ABS*	00000000 sinf.c
00000000 l    df *ABS*	00000000 cosf.c
00000000 l    df *ABS*	00000000 math_errf.c
08008cec l     F .text	0000001c with_errnof
08008d08 l     F .text	0000001e xflowf
00000000 l    df *ABS*	00000000 sf_tanh.c
0800ac88 l     O .text	00000004 one
0800ac80 l     O .text	00000004 tiny
0800ac84 l     O .text	00000004 two
00000000 l    df *ABS*	00000000 sf_expm1.c
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 clearerr.c
00000000 l    df *ABS*	00000000 feof.c
00000000 l    df *ABS*	00000000 ferror.c
00000000 l    df *ABS*	00000000 findfp.c
080091f4 l     F .text	0000006c std
08009260 l     F .text	00000018 stdio_exit_handler
08009278 l     F .text	00000040 cleanup_stdio
080092b8 l     F .text	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080095c8 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 mallocr.c
0800984c l     F .text	00000044 sbrk_aligned
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 refill.c
0800a08c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 sbrk.c
20011548 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 sf_exp2_data.c
00000000 l    df *ABS*	00000000 sincosf_data.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 reent.c
0800636c  w    F .text	00000002 RTC_Alarm_IRQHandler
0800636c  w    F .text	00000002 HASH_RNG_IRQHandler
0800636c  w    F .text	00000002 EXTI2_IRQHandler
0800a9d0 g     O .text	00000010 LL_RCC_PrescTable
080061f4 g     F .text	00000006 recorder::system::Reset()
0800636c  w    F .text	00000002 TIM8_CC_IRQHandler
0800a1d4 g     F .text	00000020 _isatty_r
08005b04 g     F .text	00000094 recorder::Serial::InterruptService()
200108e0 g     O .bss	00000004 recorder::play_button_
0800a3bc g     F .text	00000010 _getpid
08009420 g     F .text	000000aa _puts_r
0800636c  w    F .text	00000002 HRTIM1_Master_IRQHandler
0800a1f4 g     F .text	00000024 _lseek_r
0800636c  w    F .text	00000002 DebugMon_Handler
0800636c  w    F .text	00000002 UART8_IRQHandler
0800636c  w    F .text	00000002 SPI4_IRQHandler
0800525c g     F .text	000000b8 recorder::Dac::Init()
08008864 g     F .text	000000d0 exp2f
0800066c g     F .text	0000005a .hidden __floatdidf
0800a29c g     F .text	00000024 _kill_r
24000000  w    O .sram1	00080000 recorder::SampleMemoryBase::buffer1_
080093fc g     F .text	00000024 printf
0800636c  w    F .text	00000002 TIM1_CC_IRQHandler
0800636c  w    F .text	00000002 BDMA_Channel6_IRQHandler
08009e72 g     F .text	00000024 __sseek
0800930c g     F .text	00000030 __sinit
0800636c  w    F .text	00000002 DMA2_Stream5_IRQHandler
08009e9e g     F .text	0000007c __swbuf_r
08005cc8 g     F .text	00000010 recorder::system::ReloadWatchdog()
0800636c  w    F .text	00000002 HardFault_Handler
0800636c  w    F .text	00000002 HRTIM1_FLT_IRQHandler
0800636c  w    F .text	00000002 JPEG_IRQHandler
20010da8  w    O .bss	00000004 recorder::Analog::instance_
0800636c  w    F .text	00000002 DMA1_Stream5_IRQHandler
08009e0c g     F .text	0000000c __malloc_unlock
0800636c  w    F .text	00000002 SysTick_Handler
0800636c  w    F .text	00000002 BDMA_Channel1_IRQHandler
0800636c  w    F .text	00000002 HRTIM1_TIMD_IRQHandler
0800636c  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800ad2c g       *ABS*	00000000 _sidata
0800636c  w    F .text	00000002 PendSV_Handler
0800636c  w    F .text	00000002 NMI_Handler
20010c3c g     O .bss	00000164 recorder::analog_
0800636c  w    F .text	00000002 EXTI3_IRQHandler
080069fc g     F .text	0000011c HAL_RCC_GetSysClockFreq
0800636c  w    F .text	00000002 LPTIM4_IRQHandler
08009544 g     F .text	0000000c __errno
08008d34 g     F .text	0000000c .hidden __math_may_uflowf
20000424 g     O .bss	0000012c recorder::monitor_
0800636c  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08008d6c g     F .text	000000f8 tanhf
20011534 g     O .bss	00000004 __stdio_exit_handler
0800636c  w    F .text	00000002 LPTIM2_IRQHandler
0800636c  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
080060cc g     F .text	0000002c recorder::system::Delay_ms(unsigned long)
0800a1b0 g     F .text	00000024 _fstat_r
08005cd8 g     F .text	000003f4 recorder::system::Init()
20011544 g     O .bss	00000004 errno
0800ad14 g       .text	00000000 _etext
0800636c  w    F .text	00000002 DMAMUX2_OVR_IRQHandler
20000400 g       .bss	00000000 _sbss
08004b54 g     F .text	000000b4 recorder::Adc::Stop()
20010904 g     O .bss	00000004 recorder::button_2_
08006440 g     F .text	0000000c HAL_GetREVID
0800636c  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
0800636c  w    F .text	00000002 I2C3_ER_IRQHandler
0800636c  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
080061fc g     F .text	00000084 fgets
080084a4 g     F .text	000001e8 LL_RCC_GetUSARTClockFreq
08004558 g     F .text	000000dc recorder::Adc::InitAudioSequence()
0800636c  w    F .text	00000002 MDMA_IRQHandler
0800a9f8 g     O .text	00000148 .hidden __exp2f_data
20010908 g     O .bss	00000004 recorder::button_1_
0800636c  w    F .text	00000002 LPTIM3_IRQHandler
0800939c g     F .text	00000060 getc
20000550 g     O .bss	0000002c recorder::io_
0800a7cc  w    O .text	00000010 recorder::SynthEngine::minor_chord_multipliers_
0800959e g     F .text	0000001c memcpy
2000008c g     O .data	00000000 .hidden __TMC_END__
0800636c  w    F .text	00000002 HSEM1_IRQHandler
080005f4 g     F .text	00000022 .hidden __floatsidf
08002580 g     F .text	000007f4 recorder::StateMachine(bool)
0800636c  w    F .text	00000002 EXTI0_IRQHandler
0800636c  w    F .text	00000002 I2C2_EV_IRQHandler
080094cc g     F .text	00000010 puts
0800636c  w    F .text	00000002 DMA1_Stream2_IRQHandler
0800636c  w    F .text	00000002 FPU_IRQHandler
2000002c g     O .data	00000004 SystemCoreClock
08009164 g     F .text	00000048 feof
0800636c  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
0800636c  w    F .text	00000002 FDCAN1_IT1_IRQHandler
0800a218 g     F .text	00000050 _raise_r
0800a3ac g     F .text	00000010 _fstat
080090e0 g     F .text	0000003c __assert_func
0800636c  w    F .text	00000002 UsageFault_Handler
08004810 g     F .text	000002d0 recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
080051b8 g     F .text	000000a4 recorder::Dac::InitDMA()
0800636c  w    F .text	00000002 LTDC_ER_IRQHandler
0800a7ec  w    O .text	00000020 recorder::SynthEngine::minor_scale_multipliers_
0800636c  w    F .text	00000002 DMA2_Stream2_IRQHandler
0800a2c0 g     F .text	00000004 _getpid_r
20000400 g       .bss	00000000 __bss_start__
0800636c  w    F .text	00000002 HRTIM1_TIME_IRQHandler
200108e8 g     O .bss	00000001 recorder::state_
080005d4 g     F .text	0000001e .hidden __aeabi_ui2d
08007c58 g     F .text	0000006e LL_DAC_Init
20000000 g       .data	00000000 _sdata
0800636c  w    F .text	00000002 SPI1_IRQHandler
080057d8 g     F .text	00000050 recorder::irq::Init()
08000350 g     F .text	00000000 .hidden __aeabi_drsub
0800a2c4 g     F .text	00000020 _sbrk_r
08002f64  w    F .text	000002c4 recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()
08008d4c g     F .text	0000001e .hidden __math_invalidf
0800636c  w    F .text	00000002 TIM6_DAC_IRQHandler
080090d0 g     F .text	0000000e fabsf
0800a278 g     F .text	00000024 _read_r
080056cc g     F .text	0000010c recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)
0800636c  w    F .text	00000002 DCMI_IRQHandler
08005a54 g     F .text	00000020 recorder::Serial::GetByteBlocking()
0800636c  w    F .text	00000002 HRTIM1_TIMC_IRQHandler
08002d74  w    F .text	000001f0 recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()
20000028 g     O .data	00000004 SystemD2Clock
08000618 g     F .text	00000042 .hidden __extendsfdf2
08006104 g     F .text	000000e0 recorder::system::Standby()
20010da4  w    O .bss	00000004 recorder::Analog::callback_
0800035c g     F .text	00000276 .hidden __adddf3
08005a74 g     F .text	00000058 recorder::Serial::Write(unsigned char, bool)
0800636c  w    F .text	00000002 DMA2_Stream3_IRQHandler
08008758 g     F .text	0000010c LL_USART_Init
0800a3cc g     F .text	00000010 _isatty
0800a978 g     O .text	00000010 D1CorePrescTable
08009550 g     F .text	00000048 __libc_init_array
08000754  w    F .text	000001e4 recorder::Switches::Init()
0800636c  w    F .text	00000002 SAI2_IRQHandler
20010748 g     O .bss	00000144 recorder::recording_
080095ba g     F .text	0000000e abort
080005d4 g     F .text	0000001e .hidden __floatunsidf
08004634 g     F .text	000001dc recorder::Adc::InitPotSequence()
0800a3fc g     F .text	0000001c _sbrk
0800636c  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
0800636c  w    F .text	00000002 USART6_IRQHandler
080044c8 g     F .text	0000008c recorder::Adc::InitADC(ADC_TypeDef*)
0800acfc g     F .text	00000000 _init
0800aba0 g     O .text	000000e0 .hidden __sincosf_table
08008b18 g     F .text	000001d4 cosf
0800636c  w    F .text	00000002 TIM17_IRQHandler
0800a80c  w    O .text	00000020 recorder::SynthEngine::major_scale_multipliers_
0800636c  w    F .text	00000002 USART3_IRQHandler
0800636c  w    F .text	00000002 CRYP_IRQHandler
0800636c  w    F .text	00000002 BDMA_Channel7_IRQHandler
2001154c g       .bss	00000000 _ebss
08006370 g     F .text	00000044 Reset_Handler
0800636c  w    F .text	00000002 LPTIM5_IRQHandler
0800636c  w    F .text	00000002 UART5_IRQHandler
20011538 g     O .bss	00000001 __lock___malloc_recursive_mutex
0800a82c  w    O .text	00000034 recorder::SynthEngine::chromatic_frequencies_
0800636c  w    F .text	00000002 ADC3_IRQHandler
0800636c  w    F .text	00000002 DMA2_Stream0_IRQHandler
0800416c g     F .text	00000350 recorder::Adc::DMAService()
200113fc g     O .bss	00000138 __sf
0800a7bc  w    O .text	00000010 recorder::SynthEngine::diminished_chord_multipliers_
0800868c g     F .text	000000cc LL_TIM_Init
08004c08  w    F .text	0000036c recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
0800933c g     F .text	00000024 fprintf
0800636c  w    F .text	00000002 TIM4_IRQHandler
0800035c g     F .text	00000276 .hidden __aeabi_dadd
30000000  w    O .sram2	00048000 recorder::SampleMemoryBase::buffer2_
080058a0 g     F .text	00000058 recorder::irq::SetPriority(IRQn_Type, unsigned long)
0800636c  w    F .text	00000002 BDMA_Channel2_IRQHandler
0800644c g     F .text	00000010 HAL_DBGMCU_DisableDBGSleepMode
0800065c g     F .text	0000006a .hidden __aeabi_ul2d
0800636c  w    F .text	00000002 QUADSPI_IRQHandler
0800645c g     F .text	00000010 HAL_DBGMCU_DisableDBGStopMode
2001154c g       .bss	00000000 end
0800636c  w    F .text	00000002 I2C1_EV_IRQHandler
080058f8 g     F .text	00000150 recorder::Serial::Init(unsigned long)
0800959c g     F .text	00000002 __retarget_lock_release_recursive
0800636c  w    F .text	00000002 DMA1_Stream6_IRQHandler
08007ef4 g     F .text	00000016 LL_GPIO_StructInit
08003228  w    F .text	000003b0 recorder::SampleMemory<half>::Init()
20011298  w    O .bss	00000004 recorder::Serial::instance_
08008d28 g     F .text	0000000c .hidden __math_uflowf
08007fe4 g     F .text	00000190 LL_RCC_GetPLL1ClockFreq
0800636c  w    F .text	00000002 DMAMUX1_OVR_IRQHandler
0800636c  w    F .text	00000002 DMA1_Stream1_IRQHandler
0800636c  w    F .text	00000002 TIM16_IRQHandler
080095f6 g     F .text	00000024 __sfputs_r
0800636c  w    F .text	00000002 UART4_IRQHandler
080092f4 g     F .text	0000000c __sfp_lock_acquire
080002b0 g     F .text	00000000 memchr
2001154c g       .bss	00000000 __bss_end__
0800636c  w    F .text	00000002 BDMA_Channel5_IRQHandler
0800a308 g     F .text	00000094 _free_r
0800636c  w    F .text	00000002 TIM3_IRQHandler
0800636c  w    F .text	00000002 RCC_IRQHandler
0800636c  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
0800636c  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
080094dc g     F .text	00000030 __srget_r
08000358 g     F .text	0000027a .hidden __aeabi_dsub
0800636c g     F .text	00000002 Default_Handler
0800636c  w    F .text	00000002 ECC_IRQHandler
080091ac g     F .text	00000048 ferror
0800065c g     F .text	0000006a .hidden __floatundidf
0800a3ec g     F .text	00000010 _lseek
0800636c  w    F .text	00000002 CEC_IRQHandler
0800636c  w    F .text	00000002 EXTI15_10_IRQHandler
08005a48 g     F .text	0000000c recorder::Serial::BytesAvailable()
08007f0c g     F .text	000000d8 LL_MDMA_Init
0800636c  w    F .text	00000002 BDMA_Channel0_IRQHandler
0800636c  w    F .text	00000002 ADC_IRQHandler
0800586c g     F .text	00000034 recorder::irq::Enable(IRQn_Type)
08006b18 g     F .text	00000238 HAL_RCC_ClockConfig
0800950c g     F .text	00000026 strncpy
0800636c  w    F .text	00000002 DMA1_Stream7_IRQHandler
0800636c  w    F .text	00000002 HRTIM1_TIMA_IRQHandler
080050b8 g     F .text	00000014 recorder::Analog::StartTimer()
08008174 g     F .text	00000190 LL_RCC_GetPLL2ClockFreq
0800636c  w    F .text	00000002 SPI5_IRQHandler
08005828 g     F .text	00000044 recorder::irq::RegisterHandler(IRQn_Type, void (*)())
0800636c  w    F .text	00000002 TIM7_IRQHandler
0800636c  w    F .text	00000002 SDMMC1_IRQHandler
0800a190 g     F .text	00000020 _close_r
080005f4 g     F .text	00000022 .hidden __aeabi_i2d
3800fc30  w    O .dma	00000018 recorder::Dac::dma_buffer_
0800636c  w    F .text	00000002 TIM5_IRQHandler
2001088c g     O .bss	00000054 recorder::sample_memory_
0800636c  w    F .text	00000002 DMA2_Stream7_IRQHandler
0800636c  w    F .text	00000002 TIM15_IRQHandler
0800636c  w    F .text	00000002 PVD_AVD_IRQHandler
0800636c  w    F .text	00000002 I2C3_EV_IRQHandler
08009f1c g     F .text	000000ac __swsetup_r
0800636c  w    F .text	00000002 EXTI9_5_IRQHandler
38000000  w    O .sram3	0000fc00 recorder::SampleMemoryBase::buffer3_
0800636c  w    F .text	00000002 RTC_WKUP_IRQHandler
0800636c  w    F .text	00000002 LTDC_IRQHandler
200108e4 g     O .bss	00000004 recorder::idle_timeout_
08009e18 g     F .text	00000022 __sread
0800636c  w    F .text	00000002 SAI3_IRQHandler
0800636c  w    F .text	00000002 ETH_WKUP_IRQHandler
08006434  w    F .text	0000000c HAL_GetTick
0800636c  w    F .text	00000002 SPDIF_RX_IRQHandler
08009e00 g     F .text	0000000c __malloc_lock
08008304 g     F .text	000001a0 LL_RCC_GetPLL3ClockFreq
08009db0 g     F .text	00000050 _fflush_r
0800636c  w    F .text	00000002 SPI2_IRQHandler
20000000  w    O .data	00000024 recorder::SampleMemory<half>::link_info_
0800959a g     F .text	00000002 __retarget_lock_acquire_recursive
0800636c  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08009532 g     F .text	00000010 memset
0800636c  w    F .text	00000002 MemManage_Handler
080035d8 g     F .text	00000a84 main
0800636c  w    F .text	00000002 DMA1_Stream0_IRQHandler
08009598 g     F .text	00000002 __retarget_lock_init_recursive
0800911c g     F .text	00000048 clearerr
0800636c  w    F .text	00000002 SVC_Handler
08009e96 g     F .text	00000008 __sclose
0800636c  w    F .text	00000002 CRS_IRQHandler
0800ad28 g       .init_array	00000000 __init_array_end
08009890 g     F .text	00000100 _malloc_r
20000024 g     O .data	00000004 recorder::buttonIDs
080024b0 g     F .text	000000d0 recorder::Transition(recorder::State)
0800066c g     F .text	0000005a .hidden __aeabi_l2d
0800636c  w    F .text	00000002 EXTI4_IRQHandler
08005acc g     F .text	00000038 recorder::Serial::FlushTx(bool)
0800a7dc  w    O .text	00000010 recorder::SynthEngine::major_chord_multipliers_
08000938  w    F .text	00001920 recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)
080063b4 g     F .text	00000080 SystemInit
0800636c  w    F .text	00000002 HRTIM1_TIMB_IRQHandler
0800ad08 g     F .text	00000000 _fini
080093fc g     F .text	00000024 iprintf
08005158 g     F .text	00000060 recorder::Dac::Stop()
20010b30 g     O .bss	00000001 recorder::synth_inactive_
080050e0 g     F .text	00000078 recorder::Dac::Start()
0800636c  w    F .text	00000002 FDCAN2_IT1_IRQHandler
0800a2e4 g     F .text	00000024 _write_r
0800647c g     F .text	0000001c HAL_PWR_EnterSLEEPMode
08005cc4 g     F .text	00000004 HAL_InitTick
0800636c  w    F .text	00000002 ETH_IRQHandler
08009990 g     F .text	000000da _printf_common
2000003c g     O .data	00000004 _impure_ptr
0800636c  w    F .text	00000002 TIM1_UP_IRQHandler
080044bc g     F .text	0000000c recorder::Adc::DMAHandler()
08009ca8 g     F .text	00000108 __sflush_r
0800636c  w    F .text	00000002 BDMA_Channel4_IRQHandler
0800636c  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
08009360 g     F .text	0000003c _fwalk_sglue
0800a79c  w    O .text	00000020 recorder::SynthEngine::major_scale_chord_types_
20010da0  w    O .bss	00000004 recorder::Adc::instance_
0800ad1c g       .ARM.attributes	00000000 __preinit_array_end
0800a0a8 g     F .text	000000e8 __srefill_r
0800636c  w    F .text	00000002 WWDG_IRQHandler
0800636c  w    F .text	00000002 SPI6_IRQHandler
20010b34 g     O .bss	00000108 recorder::switches_
0800636c  w    F .text	00000002 I2C4_EV_IRQHandler
0800636c  w    F .text	00000002 MDIOS_IRQHandler
0800636c  w    F .text	00000002 FDCAN2_IT0_IRQHandler
08007bd4 g     F .text	00000034 LL_ADC_Init
0800636c  w    F .text	00000002 LPUART1_IRQHandler
0800636c  w    F .text	00000002 FDCAN1_IT0_IRQHandler
0800636c  w    F .text	00000002 TIM2_IRQHandler
08008938 g     F .text	000001dc sinf
08004ae0 g     F .text	00000074 recorder::Adc::Start()
0800636c  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
0800636c  w    F .text	00000002 OTG_HS_IRQHandler
0800636c  w    F .text	00000002 DMA2D_IRQHandler
0800636c  w    F .text	00000002 TIM1_BRK_IRQHandler
20010900 g     O .bss	00000004 recorder::button_3_
08009fc8 g     F .text	0000004c __swhatbuf_r
20000580 g     O .bss	000101c8 recorder::playback_
20020000 g       *ABS*	00000000 _estack
0800636c  w    F .text	00000002 EXTI1_IRQHandler
0800636c  w    F .text	00000002 SDMMC2_IRQHandler
20000030 g     O .data	0000000c __sglue
08007d8c g     F .text	00000166 LL_GPIO_Init
080062f0 g     F .text	00000068 _write
2000008c g       .data	00000000 _edata
0800636c  w    F .text	00000002 OTG_FS_EP1_OUT_IRQHandler
08002258 g     F .text	00000258 recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)
20010924 g     O .bss	0000020c recorder::synth_engine_
0800636c  w    F .text	00000002 BDMA_Channel3_IRQHandler
08004f74 g     F .text	00000144 recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))
0800a874  w    O .text	00000104 recorder::Adc::PotFilter::kPotCorrection
0800636c  w    F .text	00000002 UART7_IRQHandler
08007cc8 g     F .text	000000c4 LL_DMA_Init
0800636c  w    F .text	00000002 MDIOS_WKUP_IRQHandler
0800636c  w    F .text	00000002 USART2_IRQHandler
08009e3a g     F .text	00000038 __swrite
080064e4  w    F .text	00000518 HAL_RCC_OscConfig
0800636c  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
0800636c  w    F .text	00000002 SAI4_IRQHandler
0800933c g     F .text	00000024 fiprintf
0800961c g     F .text	00000230 _vfiprintf_r
08000000 g     O .isr_vector	00000298 g_pfnVectors
08006f10 g     F .text	00000cc4 HAL_RCCEx_PeriphCLKConfig
0800a3dc g     F .text	00000010 _kill
08005b98 g     F .text	0000000c recorder::Serial::InterruptHandler()
20000040 g     O .data	0000004c _impure_data
0800636c  w    F .text	00000002 I2C2_ER_IRQHandler
200108ec g     O .bss	00000010 recorder::buttons
08009300 g     F .text	0000000c __sfp_lock_release
0800a75c  w    O .text	00000010 recorder::JingleEngine::ending_jingle_
0800636c  w    F .text	00000002 DMA2_Stream1_IRQHandler
08005bc8 g     F .text	0000001c TickHandler
3800fc00  w    O .dma	00000030 recorder::Adc::dma_buffer_
08006280 g     F .text	00000070 _read
0800ad1c g       .init_array	00000000 __init_array_start
0800636c  w    F .text	00000002 FLASH_IRQHandler
0800a418 g     F .text	00000002 _exit
080060f8 g     F .text	0000000c recorder::system::SerialFlushTx(bool)
0800636c  w    F .text	00000002 DMA2_Stream4_IRQHandler
0800636c  w    F .text	00000002 BusFault_Handler
0800636c  w    F .text	00000002 USART1_IRQHandler
0800a014 g     F .text	00000078 __smakebuf_r
080002a0 g       .text	00000000 _stext
0800a76c  w    O .text	00000010 recorder::JingleEngine::startup_jingle_
08008d40 g     F .text	0000000c .hidden __math_oflowf
080002a0 g     F .text	00000010 strlen
0800a77c  w    O .text	00000020 recorder::SynthEngine::minor_scale_chord_types_
0800636c  w    F .text	00000002 OTG_FS_IRQHandler
08009a6c g     F .text	0000023c _printf_i
0800636c  w    F .text	00000002 SPI3_IRQHandler
0800636c  w    F .text	00000002 WAKEUP_PIN_IRQHandler
0800636c  w    F .text	00000002 DMA1_Stream4_IRQHandler
2001153c g     O .bss	00000004 __malloc_sbrk_start
0800636c  w    F .text	00000002 OTG_FS_EP1_IN_IRQHandler
200108fc g     O .bss	00000004 recorder::button_4_
0800636c  w    F .text	00000002 I2C1_ER_IRQHandler
0800646c g     F .text	00000010 HAL_DBGMCU_DisableDBGStandbyMode
0800636c  w    F .text	00000002 FMC_IRQHandler
08000618 g     F .text	00000042 .hidden __aeabi_f2d
0800ab40 g     O .text	00000060 .hidden __inv_pio4
0800636c  w    F .text	00000002 FDCAN_CAL_IRQHandler
20011540 g     O .bss	00000004 __malloc_free_list
0800636c  w    F .text	00000002 SWPMI1_IRQHandler
0800636c  w    F .text	00000002 COMP1_IRQHandler
0800636c  w    F .text	00000002 LPTIM1_IRQHandler
080061e4 g     F .text	00000010 recorder::system::WakeupWasPlayButton()
08000358 g     F .text	0000027a .hidden __subdf3
0800961c g     F .text	00000230 _vfprintf_r
0800ad1c g       .ARM.attributes	00000000 __preinit_array_start
0800636c  w    F .text	00000002 I2C4_ER_IRQHandler
0800a860  w    O .text	00000014 recorder::SynthEngine::kAttenuationLevels
08008e64 g     F .text	0000026c expm1f
08006498 g     F .text	0000004c HAL_PWREx_ConfigSupply
0800636c  w    F .text	00000002 DMA2_Stream6_IRQHandler
080050cc g     F .text	00000014 recorder::Dac::DMAHandler()
08007c08 g     F .text	00000050 LL_ADC_REG_Init
0800636c  w    F .text	00000002 SAI1_IRQHandler
0800636c  w    F .text	00000002 DMA1_Stream3_IRQHandler
20011539 g     O .bss	00000001 __lock___sfp_recursive_mutex
0800a39c g     F .text	00000010 _close
0800a268 g     F .text	00000010 raise
2001090c g     O .bss	00000018 recorder::jingle_engine_
08005314 g     F .text	000003b8 recorder::Flash::Init()



Disassembly of section .text:

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	@ 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <deregister_tm_clones>:
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <deregister_tm_clones+0x10>)
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <deregister_tm_clones+0x14>)
 80006cc:	4283      	cmp	r3, r0
 80006ce:	d002      	beq.n	80006d6 <deregister_tm_clones+0xe>
 80006d0:	4b03      	ldr	r3, [pc, #12]	@ (80006e0 <deregister_tm_clones+0x18>)
 80006d2:	b103      	cbz	r3, 80006d6 <deregister_tm_clones+0xe>
 80006d4:	4718      	bx	r3
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	00000000 	.word	0x00000000

080006e4 <register_tm_clones>:
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <register_tm_clones+0x18>)
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <register_tm_clones+0x1c>)
 80006e8:	1a1b      	subs	r3, r3, r0
 80006ea:	0fd9      	lsrs	r1, r3, #31
 80006ec:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80006f0:	1049      	asrs	r1, r1, #1
 80006f2:	d002      	beq.n	80006fa <register_tm_clones+0x16>
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <register_tm_clones+0x20>)
 80006f6:	b103      	cbz	r3, 80006fa <register_tm_clones+0x16>
 80006f8:	4718      	bx	r3
 80006fa:	4770      	bx	lr
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	2000008c 	.word	0x2000008c
 8000704:	00000000 	.word	0x00000000

08000708 <__do_global_dtors_aux>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4c06      	ldr	r4, [pc, #24]	@ (8000724 <__do_global_dtors_aux+0x1c>)
 800070c:	7823      	ldrb	r3, [r4, #0]
 800070e:	b943      	cbnz	r3, 8000722 <__do_global_dtors_aux+0x1a>
 8000710:	f7ff ffda 	bl	80006c8 <deregister_tm_clones>
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__do_global_dtors_aux+0x20>)
 8000716:	b113      	cbz	r3, 800071e <__do_global_dtors_aux+0x16>
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <__do_global_dtors_aux+0x24>)
 800071a:	f3af 8000 	nop.w
 800071e:	2301      	movs	r3, #1
 8000720:	7023      	strb	r3, [r4, #0]
 8000722:	bd10      	pop	{r4, pc}
 8000724:	20000400 	.word	0x20000400
 8000728:	00000000 	.word	0x00000000
 800072c:	0800ad14 	.word	0x0800ad14

08000730 <frame_dummy>:
 8000730:	b508      	push	{r3, lr}
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <frame_dummy+0x18>)
 8000734:	b11b      	cbz	r3, 800073e <frame_dummy+0xe>
 8000736:	4905      	ldr	r1, [pc, #20]	@ (800074c <frame_dummy+0x1c>)
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <frame_dummy+0x20>)
 800073a:	f3af 8000 	nop.w
 800073e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000742:	f7ff bfcf 	b.w	80006e4 <register_tm_clones>
 8000746:	bf00      	nop
 8000748:	00000000 	.word	0x00000000
 800074c:	20000404 	.word	0x20000404
 8000750:	0800ad14 	.word	0x0800ad14

08000754 <recorder::Switches::Init()>:
protected:
    static void ClockEnable(uint32_t gpio_base)
    {
        switch (gpio_base)
        {
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8000754:	4b74      	ldr	r3, [pc, #464]	@ (8000928 <recorder::Switches::Init()+0x1d4>)
        LL_GPIO_SetPinPull(gpio_struct(gpio_base), 1 << pin_number, pull);
        LL_GPIO_SetPinMode(gpio_struct(gpio_base), 1 << pin_number,
            LL_GPIO_MODE_INPUT);

        gpio_base_ = gpio_base;
        pin_number_ = pin_number;
 8000756:	f04f 0c0b 	mov.w	ip, #11
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800075a:	4a74      	ldr	r2, [pc, #464]	@ (800092c <recorder::Switches::Init()+0x1d8>)
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800075c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8000760:	f041 0101 	orr.w	r1, r1, #1
{

class Switches
{
public:
    void Init(void)
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        pin_number_ = pin_number;
 8000770:	2500      	movs	r5, #0
        invert_ = invert;
 8000772:	2701      	movs	r7, #1
 8000774:	4604      	mov	r4, r0
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8000776:	f001 0101 	and.w	r1, r1, #1
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	9901      	ldr	r1, [sp, #4]
 800077e:	68d1      	ldr	r1, [r2, #12]
 8000780:	f021 0103 	bic.w	r1, r1, #3
 8000784:	f041 0101 	orr.w	r1, r1, #1
 8000788:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800078a:	6811      	ldr	r1, [r2, #0]
 800078c:	f021 0103 	bic.w	r1, r1, #3
 8000790:	6011      	str	r1, [r2, #0]
        invert_ = invert;
 8000792:	f880 7044 	strb.w	r7, [r0, #68]	@ 0x44
        pin_number_ = pin_number;
 8000796:	e9c0 250f 	strd	r2, r5, [r0, #60]	@ 0x3c
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800079a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800079e:	4339      	orrs	r1, r7
 80007a0:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007a4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007a8:	4039      	ands	r1, r7
 80007aa:	9102      	str	r1, [sp, #8]
 80007ac:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007ae:	68d1      	ldr	r1, [r2, #12]
 80007b0:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80007b4:	f041 0110 	orr.w	r1, r1, #16
 80007b8:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80007ba:	6811      	ldr	r1, [r2, #0]
 80007bc:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80007c0:	6011      	str	r1, [r2, #0]
        pin_number_ = pin_number;
 80007c2:	2102      	movs	r1, #2
        gpio_base_ = gpio_base;
 80007c4:	6002      	str	r2, [r0, #0]
        pin_number_ = pin_number;
 80007c6:	6041      	str	r1, [r0, #4]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80007c8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
        invert_ = invert;
 80007cc:	7207      	strb	r7, [r0, #8]
            case GPIOD_BASE: __HAL_RCC_GPIOD_CLK_ENABLE(); return;
 80007ce:	f041 0108 	orr.w	r1, r1, #8
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80007d2:	4857      	ldr	r0, [pc, #348]	@ (8000930 <recorder::Switches::Init()+0x1dc>)
 80007d4:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80007d8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80007dc:	f001 0108 	and.w	r1, r1, #8
 80007e0:	9103      	str	r1, [sp, #12]
 80007e2:	9903      	ldr	r1, [sp, #12]
 80007e4:	68c6      	ldr	r6, [r0, #12]
 80007e6:	4953      	ldr	r1, [pc, #332]	@ (8000934 <recorder::Switches::Init()+0x1e0>)
 80007e8:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 80007ec:	f446 0680 	orr.w	r6, r6, #4194304	@ 0x400000
 80007f0:	60c6      	str	r6, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80007f2:	6806      	ldr	r6, [r0, #0]
 80007f4:	f426 0640 	bic.w	r6, r6, #12582912	@ 0xc00000
 80007f8:	6006      	str	r6, [r0, #0]
class Debouncer
{
public:
    void Init(uint32_t duration, bool initial_state = false)
    {
        duration_ = duration;
 80007fa:	260a      	movs	r6, #10
        invert_ = invert;
 80007fc:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
        pin_number_ = pin_number;
 8000800:	2704      	movs	r7, #4
 8000802:	e9c4 0c12 	strd	r0, ip, [r4, #72]	@ 0x48
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8000806:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800080a:	f040 0004 	orr.w	r0, r0, #4
 800080e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000812:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000816:	f000 0004 	and.w	r0, r0, #4
 800081a:	9004      	str	r0, [sp, #16]
 800081c:	9804      	ldr	r0, [sp, #16]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800081e:	68c8      	ldr	r0, [r1, #12]
 8000820:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000824:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8000828:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800082a:	6808      	ldr	r0, [r1, #0]
 800082c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8000830:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 8000832:	60e1      	str	r1, [r4, #12]
        pin_number_ = pin_number;
 8000834:	6127      	str	r7, [r4, #16]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 8000836:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 800083a:	7525      	strb	r5, [r4, #20]
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 800083c:	f040 0001 	orr.w	r0, r0, #1
 8000840:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000844:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000848:	f000 0001 	and.w	r0, r0, #1
 800084c:	9005      	str	r0, [sp, #20]
 800084e:	9805      	ldr	r0, [sp, #20]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000850:	68d0      	ldr	r0, [r2, #12]
 8000852:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8000856:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 800085a:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800085c:	6810      	ldr	r0, [r2, #0]
 800085e:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8000862:	6010      	str	r0, [r2, #0]
        pin_number_ = pin_number;
 8000864:	2007      	movs	r0, #7
        gpio_base_ = gpio_base;
 8000866:	61a2      	str	r2, [r4, #24]
        pin_number_ = pin_number;
 8000868:	61e0      	str	r0, [r4, #28]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 800086a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
        invert_ = invert;
 800086e:	f884 5020 	strb.w	r5, [r4, #32]
            case GPIOC_BASE: __HAL_RCC_GPIOC_CLK_ENABLE(); return;
 8000872:	4338      	orrs	r0, r7
 8000874:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000878:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800087c:	4038      	ands	r0, r7
 800087e:	9006      	str	r0, [sp, #24]
 8000880:	9806      	ldr	r0, [sp, #24]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000882:	68c8      	ldr	r0, [r1, #12]
 8000884:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8000888:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800088c:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800088e:	6808      	ldr	r0, [r1, #0]
 8000890:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8000894:	6008      	str	r0, [r1, #0]
        gpio_base_ = gpio_base;
 8000896:	6261      	str	r1, [r4, #36]	@ 0x24
        pin_number_ = pin_number;
 8000898:	2103      	movs	r1, #3
        invert_ = invert;
 800089a:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
        pin_number_ = pin_number;
 800089e:	62a1      	str	r1, [r4, #40]	@ 0x28
            case GPIOA_BASE: __HAL_RCC_GPIOA_CLK_ENABLE(); return;
 80008a0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80008a4:	f041 0101 	orr.w	r1, r1, #1
 80008a8:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	9307      	str	r3, [sp, #28]
 80008b6:	9b07      	ldr	r3, [sp, #28]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008b8:	68d3      	ldr	r3, [r2, #12]
 80008ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80008be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008c2:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80008ca:	6013      	str	r3, [r2, #0]
        invert_ = invert;
 80008cc:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
        count_ = 0;
        history_ = initial_state;
 80008d0:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 80008d4:	f8a4 50a4 	strh.w	r5, [r4, #164]	@ 0xa4
 80008d8:	f8a4 50b0 	strh.w	r5, [r4, #176]	@ 0xb0
 80008dc:	f8a4 50bc 	strh.w	r5, [r4, #188]	@ 0xbc
        pin_number_ = pin_number;
 80008e0:	e9c4 270c 	strd	r2, r7, [r4, #48]	@ 0x30
        count_ = 0;
 80008e4:	e9c4 6524 	strd	r6, r5, [r4, #144]	@ 0x90
 80008e8:	e9c4 6527 	strd	r6, r5, [r4, #156]	@ 0x9c
 80008ec:	e9c4 652a 	strd	r6, r5, [r4, #168]	@ 0xa8
 80008f0:	e9c4 652d 	strd	r6, r5, [r4, #180]	@ 0xb4
 80008f4:	e9c4 6530 	strd	r6, r5, [r4, #192]	@ 0xc0
        history_ = initial_state;
 80008f8:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
        db_[SWITCH_KEY_3].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_KEY_4].Init(kButtonDebounceDuration_ms);


        db_[SWITCH_RECORD].Init(kButtonDebounceDuration_ms);
        db_[SWITCH_PLAY].Init(kButtonDebounceDuration_ms,
 80008fc:	f005 fc72 	bl	80061e4 <recorder::system::WakeupWasPlayButton()>
 8000900:	462b      	mov	r3, r5
 8000902:	f8a4 50d4 	strh.w	r5, [r4, #212]	@ 0xd4
 8000906:	f360 0307 	bfi	r3, r0, #0, #8
 800090a:	f8a4 5104 	strh.w	r5, [r4, #260]	@ 0x104
 800090e:	f360 230f 	bfi	r3, r0, #8, #8
        count_ = 0;
 8000912:	e9c4 6521 	strd	r6, r5, [r4, #132]	@ 0x84
 8000916:	e9c4 6533 	strd	r6, r5, [r4, #204]	@ 0xcc
 800091a:	e9c4 653f 	strd	r6, r5, [r4, #252]	@ 0xfc
        history_ = initial_state;
 800091e:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
            system::WakeupWasPlayButton());
        db_[SWITCH_LOOP].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_EFFECT].Init(kButtonDebounceDuration_ms);
        //db_[SWITCH_REVERSE].Init(kButtonDebounceDuration_ms);
        db_[NUM_SWITCHES + DETECT_LINE_IN].Init(kButtonDebounceDuration_ms);
    }
 8000922:	b009      	add	sp, #36	@ 0x24
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	58024400 	.word	0x58024400
 800092c:	58020000 	.word	0x58020000
 8000930:	58020c00 	.word	0x58020c00
 8000934:	58020800 	.word	0x58020800

08000938 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)>:
    }

    // mode = false → major scale, true → minor scale
    // major7: apply major seventh; minor7: apply minor seventh
    // if both major7 and minor7: apply major sixth
    void Process(float (&block)[kAudioOSFactor],
 8000938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800093c:	ed2d 8b08 	vpush	{d8-d11}
 8000940:	b093      	sub	sp, #76	@ 0x4c
 8000942:	4696      	mov	lr, r2
 8000944:	eeb0 aa41 	vmov.f32	s20, s2
 8000948:	4604      	mov	r4, r0
 800094a:	f89d 7090 	ldrb.w	r7, [sp, #144]	@ 0x90
 800094e:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8000952:	9101      	str	r1, [sp, #4]
                 bool mode,
                 bool major7,
                 bool minor7)
    {
        // Check for entering/exiting base frequency mode
        if (major7 && minor7) {
 8000954:	ea17 0602 	ands.w	r6, r7, r2
 8000958:	f000 8366 	beq.w	8001028 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6f0>
            seventh_hold_counter_++;
 800095c:	6981      	ldr	r1, [r0, #24]
 800095e:	3101      	adds	r1, #1
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000960:	2963      	cmp	r1, #99	@ 0x63
            seventh_hold_counter_++;
 8000962:	6181      	str	r1, [r0, #24]
            if (seventh_hold_counter_ >= kSeventhHoldCycles) {
 8000964:	f300 8148 	bgt.w	8000bf8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2c0>
                // Return to normal operation
                updateChordTargets(major7, minor7);
            }
        }

        if (!in_base_freq_mode_) {
 8000968:	7d01      	ldrb	r1, [r0, #20]
 800096a:	2900      	cmp	r1, #0
 800096c:	f001 828d 	beq.w	8001e8a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1552>
                
            }
            
        } else {
            // Base frequency selection mode
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000970:	eddf 7aa5 	vldr	s15, [pc, #660]	@ 8000c08 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d0>
            // Only first voice plays the base frequency
            target_freq_[0] = base_frequency_;
            
            // Turn off all other voices
            for (int v = 1; v < kNumVoices; ++v) {
                target_freq_[v] = 0.0f;
 8000974:	2200      	movs	r2, #0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000976:	4ba5      	ldr	r3, [pc, #660]	@ (8000c0c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d4>)
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000978:	ee20 0a27 	vmul.f32	s0, s0, s15
                target_freq_[v] = 0.0f;
 800097c:	6622      	str	r2, [r4, #96]	@ 0x60
 800097e:	6662      	str	r2, [r4, #100]	@ 0x64
 8000980:	66a2      	str	r2, [r4, #104]	@ 0x68
            int chromatic_idx = int(chord_pot * 12.99f); // 0-12 for C4-C5
 8000982:	eebd 0ac0 	vcvt.s32.f32	s0, s0
            base_frequency_ = chromatic_frequencies_[chromatic_idx];
 8000986:	ee10 2a10 	vmov	r2, s0
 800098a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6123      	str	r3, [r4, #16]
            target_freq_[0] = base_frequency_;
 8000992:	65e3      	str	r3, [r4, #92]	@ 0x5c
            }
            
            // No strum activation in base freq mode
            last_strum_ = -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000998:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
    int current_chord_;
    bool mode_;

    static inline void slew(float &c, float t, float r)
    {
        float d = t - c;
 800099c:	edd4 6a33 	vldr	s13, [r4, #204]	@ 0xcc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009a0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
        float d = t - c;
 80009a4:	edd4 7a39 	vldr	s15, [r4, #228]	@ 0xe4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009a8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
        phase_inc_(0.0f),
        waveform_(Waveform::SINE)
    {}

    inline void SetFrequency(float freq) {
        phase_inc_ = freq * kPhaseFactor;
 80009ac:	ed9f 8a98 	vldr	s16, [pc, #608]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
        float d = t - c;
 80009b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 80009b4:	ed94 5a19 	vldr	s10, [r4, #100]	@ 0x64
 80009b8:	edd4 5a1a 	vldr	s11, [r4, #104]	@ 0x68
 80009bc:	ee65 9a08 	vmul.f32	s19, s10, s16
            current_freq_[v] = target_freq_[v];
 80009c0:	ed84 5a15 	vstr	s10, [r4, #84]	@ 0x54
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 80009c8:	ed94 4a17 	vldr	s8, [r4, #92]	@ 0x5c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009cc:	eef0 7ae7 	vabs.f32	s15, s15
            slew(current_freq_[v], target_freq_[v], kFreqSlew);
 80009d0:	edd4 4a18 	vldr	s9, [r4, #96]	@ 0x60
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009d4:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
            current_freq_[v] = target_freq_[v];
 80009d8:	edc4 5a16 	vstr	s11, [r4, #88]	@ 0x58
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            current_freq_[v] = target_freq_[v];
 80009e0:	ed84 4a13 	vstr	s8, [r4, #76]	@ 0x4c
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009e4:	eef4 7ac6 	vcmpe.f32	s15, s12
        float d = t - c;
 80009e8:	edd4 7a3a 	vldr	s15, [r4, #232]	@ 0xe8
 80009ec:	ee64 8a08 	vmul.f32	s17, s8, s16
            current_freq_[v] = target_freq_[v];
 80009f0:	edc4 4a14 	vstr	s9, [r4, #80]	@ 0x50
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 80009f4:	bf88      	it	hi
 80009f6:	eeb0 7a46 	vmovhi.f32	s14, s12
 80009fa:	ed9f 6a85 	vldr	s12, [pc, #532]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
 80009fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a02:	edc4 9a0e 	vstr	s19, [r4, #56]	@ 0x38
 8000a06:	ee24 9a88 	vmul.f32	s18, s9, s16
 8000a0a:	edc4 8a08 	vstr	s17, [r4, #32]
 8000a0e:	ee25 8a88 	vmul.f32	s16, s11, s16
 8000a12:	bfc8      	it	gt
 8000a14:	ee76 6a87 	vaddgt.f32	s13, s13, s14
        float d = t - c;
 8000a18:	ed94 7a34 	vldr	s14, [r4, #208]	@ 0xd0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a1c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000a20:	ed84 9a0b 	vstr	s18, [r4, #44]	@ 0x2c
        float d = t - c;
 8000a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a28:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
 8000a2c:	ee26 6a86 	vmul.f32	s12, s13, s12
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a30:	edc4 6a33 	vstr	s13, [r4, #204]	@ 0xcc
        float d = t - c;
 8000a34:	edd4 6a35 	vldr	s13, [r4, #212]	@ 0xd4
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3c:	eef0 7ae7 	vabs.f32	s15, s15
 8000a40:	ed84 6a22 	vstr	s12, [r4, #136]	@ 0x88
 8000a44:	ed9f 6a72 	vldr	s12, [pc, #456]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
 8000a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4c:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000a50:	edd4 7a3b 	vldr	s15, [r4, #236]	@ 0xec
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a54:	bf88      	it	hi
 8000a56:	eef0 5a45 	vmovhi.f32	s11, s10
        float d = t - c;
 8000a5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a6a:	bfc8      	it	gt
 8000a6c:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000a70:	eef0 7ae7 	vabs.f32	s15, s15
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000a7c:	ed84 7a34 	vstr	s14, [r4, #208]	@ 0xd0
 8000a80:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000a84:	ed94 7a36 	vldr	s14, [r4, #216]	@ 0xd8
 8000a88:	edd4 7a3c 	vldr	s15, [r4, #240]	@ 0xf0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a8c:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000a90:	ed84 6a25 	vstr	s12, [r4, #148]	@ 0x94
        float d = t - c;
 8000a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a98:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000a9c:	bf88      	it	hi
 8000a9e:	eef0 5a45 	vmovhi.f32	s11, s10
 8000aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa6:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aae:	eef0 7ae7 	vabs.f32	s15, s15
 8000ab2:	bfc8      	it	gt
 8000ab4:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000ac0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8000ac4:	edc4 6a35 	vstr	s13, [r4, #212]	@ 0xd4
 8000ac8:	ee26 6a86 	vmul.f32	s12, s13, s12
        float d = t - c;
 8000acc:	edd4 7a3d 	vldr	s15, [r4, #244]	@ 0xf4
 8000ad0:	edd4 6a37 	vldr	s13, [r4, #220]	@ 0xdc
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000ad4:	bf88      	it	hi
 8000ad6:	eef0 5a45 	vmovhi.f32	s11, s10
 8000ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000ade:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000ae2:	ed84 6a28 	vstr	s12, [r4, #160]	@ 0xa0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000ae6:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000aea:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
 8000aee:	bfc8      	it	gt
 8000af0:	ee37 7a25 	vaddgt.f32	s14, s14, s11
 8000af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000af8:	eef0 7ae7 	vabs.f32	s15, s15
 8000afc:	ee27 6a06 	vmul.f32	s12, s14, s12
 8000b00:	ed84 7a36 	vstr	s14, [r4, #216]	@ 0xd8
 8000b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float d = t - c;
 8000b08:	ed94 7a3e 	vldr	s14, [r4, #248]	@ 0xf8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b0c:	eef4 7ac5 	vcmpe.f32	s15, s10
        float d = t - c;
 8000b10:	edd4 7a38 	vldr	s15, [r4, #224]	@ 0xe0
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b14:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000b18:	ed84 6a2b 	vstr	s12, [r4, #172]	@ 0xac
        float d = t - c;
 8000b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b20:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b24:	bf88      	it	hi
 8000b26:	eef0 5a45 	vmovhi.f32	s11, s10
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 8000b32:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000b36:	eeb0 7ac7 	vabs.f32	s14, s14
 8000b3a:	bfc8      	it	gt
 8000b3c:	ee76 6aa5 	vaddgt.f32	s13, s13, s11
 8000b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b44:	eefe 5a00 	vmov.f32	s11, #224	@ 0xbf000000 -0.5
 8000b48:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8000b4c:	edc4 6a37 	vstr	s13, [r4, #220]	@ 0xdc
 8000b50:	ee26 6a86 	vmul.f32	s12, s13, s12
 8000b54:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000c18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2e0>
 8000b58:	bf88      	it	hi
 8000b5a:	eef0 5a45 	vmovhi.f32	s11, s10
 8000b5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000c10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2d8>
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            bool g = button[v];
 8000b66:	f89e 7000 	ldrb.w	r7, [lr]
 8000b6a:	eeb4 aae6 	vcmpe.f32	s20, s13
            if (g && !gate_[v])
 8000b6e:	f894 2080 	ldrb.w	r2, [r4, #128]	@ 0x80
 8000b72:	ed84 6a2e 	vstr	s12, [r4, #184]	@ 0xb8
        c += (d > 0 ? r : -r) * (fabsf(d) > r);
 8000b76:	bfc8      	it	gt
 8000b78:	ee77 7aa5 	vaddgt.f32	s15, s15, s11
 8000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b80:	edc4 7a38 	vstr	s15, [r4, #224]	@ 0xe0
 8000b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b88:	bfac      	ite	ge
 8000b8a:	2303      	movge	r3, #3
 8000b8c:	2304      	movlt	r3, #4
 8000b8e:	edc4 7a31 	vstr	s15, [r4, #196]	@ 0xc4
            if (g && !gate_[v])
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d054      	beq.n	8000c40 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x308>
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	f000 8528 	beq.w	80015ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xcb4>
            gate_[v] = g;
 8000b9c:	f884 7080 	strb.w	r7, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 8000ba0:	f894 2081 	ldrb.w	r2, [r4, #129]	@ 0x81
            bool g = button[v];
 8000ba4:	f89e 8001 	ldrb.w	r8, [lr, #1]
            if (in_base_freq_mode_ && v != 0) {
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d155      	bne.n	8000c58 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x320>
            if (g && !gate_[v])
 8000bac:	f1b8 0f00 	cmp.w	r8, #0
 8000bb0:	f040 84ac 	bne.w	800150c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbd4>
            gate_[v] = g;
 8000bb4:	f884 6081 	strb.w	r6, [r4, #129]	@ 0x81
            else if (!g && gate_[v])
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8523 	beq.w	8001604 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xccc>
            bool g = button[v];
 8000bbe:	f89e 5002 	ldrb.w	r5, [lr, #2]
            if (g && !gate_[v])
 8000bc2:	f894 2082 	ldrb.w	r2, [r4, #130]	@ 0x82
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000bc6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (g && !gate_[v])
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f040 84ac 	bne.w	8001528 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbf0>
            gate_[v] = g;
 8000bd0:	f884 5082 	strb.w	r5, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f000 84ae 	beq.w	8001536 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbfe>
            bool g = button[v];
 8000bda:	f89e 9003 	ldrb.w	r9, [lr, #3]
            if (g && !gate_[v])
 8000bde:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000be2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 8000be6:	f1b9 0f00 	cmp.w	r9, #0
 8000bea:	d04a      	beq.n	8000c82 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x34a>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d14d      	bne.n	8000c8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x354>
                env_state_[v] = ENV_ATTACK;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8000bf6:	e049      	b.n	8000c8c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x354>
                in_base_freq_mode_ = true;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	7503      	strb	r3, [r0, #20]
                        env_state_[v] = ENV_ATTACK;
 8000bfc:	f103 2304 	add.w	r3, r3, #67109888	@ 0x4000400
 8000c00:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 8000c04:	66c3      	str	r3, [r0, #108]	@ 0x6c
        if (!in_base_freq_mode_) {
 8000c06:	e6b3      	b.n	8000970 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x38>
 8000c08:	414fd70a 	.word	0x414fd70a
 8000c0c:	0800a82c 	.word	0x0800a82c
 8000c10:	39cde32e 	.word	0x39cde32e
 8000c14:	412f73da 	.word	0x412f73da
 8000c18:	3f7fbe77 	.word	0x3f7fbe77
 8000c1c:	3c4ccccd 	.word	0x3c4ccccd
 8000c20:	40a7ef06 	.word	0x40a7ef06
 8000c24:	3f334bc6 	.word	0x3f334bc6
 8000c28:	3aa3d70b 	.word	0x3aa3d70b
 8000c2c:	3f7f3333 	.word	0x3f7f3333
 8000c30:	00000000 	.word	0x00000000
 8000c34:	3b4ccccd 	.word	0x3b4ccccd
 8000c38:	40c90fdb 	.word	0x40c90fdb
 8000c3c:	3ca3d70a 	.word	0x3ca3d70a
            else if (!g && gate_[v])
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d0ab      	beq.n	8000b9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x264>
            gate_[v] = g;
 8000c44:	f884 7080 	strb.w	r7, [r4, #128]	@ 0x80
            if (g && !gate_[v])
 8000c48:	f894 2081 	ldrb.w	r2, [r4, #129]	@ 0x81
            bool g = button[v];
 8000c4c:	f89e 8001 	ldrb.w	r8, [lr, #1]
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000c50:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (in_base_freq_mode_ && v != 0) {
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0a9      	beq.n	8000bac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x274>
            else if (!g && gate_[v])
 8000c58:	b122      	cbz	r2, 8000c64 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x32c>
            gate_[v] = g;
 8000c5a:	2200      	movs	r2, #0
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000c5c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            gate_[v] = g;
 8000c60:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
            if (g && !gate_[v])
 8000c64:	f894 8082 	ldrb.w	r8, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8000c68:	f1b8 0f00 	cmp.w	r8, #0
 8000c6c:	f000 84c3 	beq.w	80015f6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xcbe>
            gate_[v] = g;
 8000c70:	f04f 0800 	mov.w	r8, #0
            if (g && !gate_[v])
 8000c74:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000c78:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (g && !gate_[v])
 8000c7c:	4645      	mov	r5, r8
            gate_[v] = g;
 8000c7e:	f884 8082 	strb.w	r8, [r4, #130]	@ 0x82
            else if (!g && gate_[v])
 8000c82:	b10a      	cbz	r2, 8000c88 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x350>
                env_state_[v] = (hold_pot >= 0.999f ? ENV_SUSTAIN : ENV_RELEASE);
 8000c84:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
            if (g && !gate_[v])
 8000c88:	f04f 0900 	mov.w	r9, #0
        float releaseTime = kMinRelTime * exp2f(hold_pot * kRelLog2Ratio);
 8000c8c:	ed1f 0a1f 	vldr	s0, [pc, #-124]	@ 8000c14 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2dc>
            gate_[v] = g;
 8000c90:	f884 9083 	strb.w	r9, [r4, #131]	@ 0x83
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 8000c94:	ee20 0a4a 	vnmul.f32	s0, s0, s20
 8000c98:	f007 fde4 	bl	8008864 <exp2f>
        if (hold_pot < 0.999f)
 8000c9c:	ed5f 7a22 	vldr	s15, [pc, #-136]	@ 8000c18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2e0>
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 8000ca0:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8000c1c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2e4>
        if (hold_pot < 0.999f)
 8000ca4:	eeb4 aae7 	vcmpe.f32	s20, s15
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8000ca8:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
        float relInc = 1.0f / (releaseTime * kAudioSampleRate);
 8000cac:	ee60 aa07 	vmul.f32	s21, s0, s14
        if (hold_pot < 0.999f)
 8000cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb4:	f100 8543 	bmi.w	800173e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe06>
 8000cb8:	f894 706d 	ldrb.w	r7, [r4, #109]	@ 0x6d
 8000cbc:	f894 806e 	ldrb.w	r8, [r4, #110]	@ 0x6e
 8000cc0:	f894 506f 	ldrb.w	r5, [r4, #111]	@ 0x6f
            switch (env_state_[v])
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	f000 8759 	beq.w	8001b7c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1244>
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	f000 870e 	beq.w	8001aec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x11b4>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 84f7 	bne.w	80016c4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd8c>
                    env_level_[v] += kAttackInc;
 8000cd6:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] >= 1.0f)
 8000cda:	ed1f 7a2c 	vldr	s14, [pc, #-176]	@ 8000c2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f4>
 8000cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce6:	f281 809a 	bge.w	8001e1e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x14e6>
                    env_level_[v] += kAttackInc;
 8000cea:	ed1f 7a2e 	vldr	s14, [pc, #-184]	@ 8000c34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2fc>
 8000cee:	ed1f ba2d 	vldr	s22, [pc, #-180]	@ 8000c3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x304>
 8000cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cf6:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8000cfa:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
        waveform_ = w;
    }

    inline float Process() {
        float out;
        if (waveform_ == Waveform::SINE) {
 8000cfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
            out = sinf(phase_);
 8000d00:	edd4 ba07 	vldr	s23, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f040 8708 	bne.w	8001b1a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x11e2>
            out = sinf(phase_);
 8000d0a:	eeb0 0a6b 	vmov.f32	s0, s23
 8000d0e:	f007 fe13 	bl	8008938 <sinf>
            float tri = (phi < 1.0f)
                      ? phi
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
            out = tri * 2.0f - 1.0f;
        }
        phase_ += phase_inc_;
 8000d12:	ee7b 7aa8 	vadd.f32	s15, s23, s17
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000d16:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 8000c38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x300>
 8000d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d22:	db01      	blt.n	8000d28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3f0>
 8000d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
            switch (env_state_[v])
 8000d28:	2f02      	cmp	r7, #2
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8000d2a:	ee60 8a0b 	vmul.f32	s17, s0, s22
 8000d2e:	edc4 7a07 	vstr	s15, [r4, #28]
            switch (env_state_[v])
 8000d32:	f000 84cf 	beq.w	80016d4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd9c>
 8000d36:	2f04      	cmp	r7, #4
 8000d38:	f000 870d 	beq.w	8001b56 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x121e>
 8000d3c:	2f01      	cmp	r7, #1
 8000d3e:	f040 84b6 	bne.w	80016ae <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd76>
                    env_level_[v] += kAttackInc;
 8000d42:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] >= 1.0f)
 8000d46:	ed1f 7a47 	vldr	s14, [pc, #-284]	@ 8000c2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f4>
 8000d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	f281 8078 	bge.w	8001e46 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x150e>
                    env_level_[v] += kAttackInc;
 8000d56:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 8000c34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2fc>
 8000d5a:	ed1f ba48 	vldr	s22, [pc, #-288]	@ 8000c3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x304>
 8000d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d62:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8000d66:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
        if (waveform_ == Waveform::SINE) {
 8000d6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            out = sinf(phase_);
 8000d6c:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
        if (waveform_ == Waveform::SINE) {
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f040 84c6 	bne.w	8001702 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xdca>
            out = sinf(phase_);
 8000d76:	eeb0 0a6b 	vmov.f32	s0, s23
 8000d7a:	f007 fddd 	bl	8008938 <sinf>
        phase_ += phase_inc_;
 8000d7e:	ee7b 7a89 	vadd.f32	s15, s23, s18
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000d82:	ed1f 7a53 	vldr	s14, [pc, #-332]	@ 8000c38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x300>
 8000d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	db01      	blt.n	8000d94 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x45c>
 8000d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8000d94:	eee0 8a0b 	vfma.f32	s17, s0, s22
 8000d98:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
            switch (env_state_[v])
 8000d9c:	f1b8 0f02 	cmp.w	r8, #2
 8000da0:	f000 86ff 	beq.w	8001ba2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x126a>
 8000da4:	f1b8 0f04 	cmp.w	r8, #4
 8000da8:	f000 866b 	beq.w	8001a82 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x114a>
 8000dac:	f1b8 0f01 	cmp.w	r8, #1
 8000db0:	f040 8471 	bne.w	8001696 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd5e>
                    env_level_[v] += kAttackInc;
 8000db4:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] >= 1.0f)
 8000db8:	ed1f 7a64 	vldr	s14, [pc, #-400]	@ 8000c2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f4>
 8000dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	f281 8035 	bge.w	8001e32 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x14fa>
                    env_level_[v] += kAttackInc;
 8000dc8:	ed1f 7a66 	vldr	s14, [pc, #-408]	@ 8000c34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2fc>
 8000dcc:	ed1f 9a65 	vldr	s18, [pc, #-404]	@ 8000c3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x304>
 8000dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dd4:	ee27 9a89 	vmul.f32	s18, s15, s18
 8000dd8:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
        if (waveform_ == Waveform::SINE) {
 8000ddc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
            out = sinf(phase_);
 8000dde:	ed94 ba0d 	vldr	s22, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8664 	bne.w	8001ab0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1178>
            out = sinf(phase_);
 8000de8:	eeb0 0a4b 	vmov.f32	s0, s22
 8000dec:	f007 fda4 	bl	8008938 <sinf>
        phase_ += phase_inc_;
 8000df0:	ee7b 7a29 	vadd.f32	s15, s22, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000df4:	ed1f 7a70 	vldr	s14, [pc, #-448]	@ 8000c38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x300>
 8000df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	db01      	blt.n	8000e06 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4ce>
 8000e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8000e06:	eee9 8a00 	vfma.f32	s17, s18, s0
 8000e0a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
            switch (env_state_[v])
 8000e0e:	2d02      	cmp	r5, #2
 8000e10:	f000 85f6 	beq.w	8001a00 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c8>
 8000e14:	2d04      	cmp	r5, #4
 8000e16:	f000 8621 	beq.w	8001a5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1124>
 8000e1a:	2d01      	cmp	r5, #1
 8000e1c:	f040 8430 	bne.w	8001680 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd48>
                    env_level_[v] += kAttackInc;
 8000e20:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] >= 1.0f)
 8000e24:	ed1f 7a7f 	vldr	s14, [pc, #-508]	@ 8000c2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f4>
 8000e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	f2c0 87e9 	blt.w	8001e06 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x14ce>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8000e34:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e38:	2202      	movs	r2, #2
 8000e3a:	ed1f 9a80 	vldr	s18, [pc, #-512]	@ 8000c3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x304>
 8000e3e:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
 8000e42:	67e3      	str	r3, [r4, #124]	@ 0x7c
        if (waveform_ == Waveform::SINE) {
 8000e44:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            out = sinf(phase_);
 8000e46:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
        if (waveform_ == Waveform::SINE) {
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 85f2 	bne.w	8001a34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10fc>
            out = sinf(phase_);
 8000e50:	eeb0 0a69 	vmov.f32	s0, s19
 8000e54:	f007 fd70 	bl	8008938 <sinf>
        phase_ += phase_inc_;
 8000e58:	ee78 7a29 	vadd.f32	s15, s16, s19
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000e5c:	ed1f 7a8a 	vldr	s14, [pc, #-552]	@ 8000c38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x300>
                mix += voices_[v].Process() * env_level_[v] * kVoiceScale;
 8000e60:	eee0 8a09 	vfma.f32	s17, s0, s18
 8000e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	bfa8      	it	ge
 8000e6e:	ee77 7ac7 	vsubge.f32	s15, s15, s14
        phase_ += phase_inc_;
 8000e72:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
        if (!in_base_freq_mode_) {
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d16a      	bne.n	8000f50 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x618>
        float strumReleaseTime = kStrumMinRelTime * exp2f(hold_pot * kStrumRelLog2Ratio);
 8000e7a:	ed1f 0a97 	vldr	s0, [pc, #-604]	@ 8000c20 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2e8>
 8000e7e:	f104 07fb 	add.w	r7, r4, #251	@ 0xfb
 8000e82:	f504 7b82 	add.w	fp, r4, #260	@ 0x104
 8000e86:	46a0      	mov	r8, r4
 8000e88:	ee20 0a4a 	vnmul.f32	s0, s0, s20
                        if (strum_level_[s] <= kSustain)
 8000e8c:	ed5f aa9b 	vldr	s21, [pc, #-620]	@ 8000c24 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2ec>
 8000e90:	f007 fce8 	bl	8008864 <exp2f>
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 8000e94:	ed5f 7a9c 	vldr	s15, [pc, #-624]	@ 8000c28 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f0>
                        if (strum_level_[s] >= 1.0f)
 8000e98:	ed1f aa9c 	vldr	s20, [pc, #-624]	@ 8000c2c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f4>
 8000e9c:	f204 1601 	addw	r6, r4, #257	@ 0x101
        float strumRelInc = 1.0f / (strumReleaseTime * kAudioSampleRate);
 8000ea0:	ee60 9a27 	vmul.f32	s19, s0, s15
                        if (strum_level_[s] <= 0.0f)
 8000ea4:	ed1f ba9e 	vldr	s22, [pc, #-632]	@ 8000c30 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2f8>
 8000ea8:	e015      	b.n	8000ed6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x59e>
                switch (strum_state_[s])
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10d      	bne.n	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                        strum_level_[s] += kAttackInc;
 8000eae:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] >= 1.0f)
 8000eb2:	eef4 7aca 	vcmpe.f32	s15, s20
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	f280 8463 	bge.w	8001784 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe4c>
                        strum_level_[s] += kAttackInc;
 8000ebe:	ed1f 7aa3 	vldr	s14, [pc, #-652]	@ 8000c34 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2fc>
 8000ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ec6:	edcb 7a00 	vstr	s15, [fp]
            for (int s = 0; s < kNumStrum; ++s)
 8000eca:	42b7      	cmp	r7, r6
 8000ecc:	f10b 0b04 	add.w	fp, fp, #4
 8000ed0:	f108 080c 	add.w	r8, r8, #12
 8000ed4:	d03c      	beq.n	8000f50 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x618>
                switch (strum_state_[s])
 8000ed6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	f000 83c1 	beq.w	8001662 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd2a>
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d1e2      	bne.n	8000eaa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x572>
                        strum_level_[s] -= strumRelInc;
 8000ee4:	ed9b 8a00 	vldr	s16, [fp]
 8000ee8:	ee38 8a69 	vsub.f32	s16, s16, s19
                        if (strum_level_[s] <= 0.0f)
 8000eec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
                        strum_level_[s] -= strumRelInc;
 8000ef0:	ed8b 8a00 	vstr	s16, [fp]
                        if (strum_level_[s] <= 0.0f)
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	f240 8487 	bls.w	800180a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xed2>
        if (waveform_ == Waveform::SINE) {
 8000efc:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
            out = sinf(phase_);
 8000f00:	ed98 9a21 	vldr	s18, [r8, #132]	@ 0x84
        if (waveform_ == Waveform::SINE) {
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 865f 	bne.w	8001bc8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1290>
            out = sinf(phase_);
 8000f0a:	eeb0 0a49 	vmov.f32	s0, s18
 8000f0e:	f007 fd13 	bl	8008938 <sinf>
        phase_ += phase_inc_;
 8000f12:	edd8 7a22 	vldr	s15, [r8, #136]	@ 0x88
            for (int s = 0; s < kNumStrum; ++s)
 8000f16:	f10b 0b04 	add.w	fp, fp, #4
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000f1a:	ed1f 7ab9 	vldr	s14, [pc, #-740]	@ 8000c38 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x300>
 8000f1e:	f108 080c 	add.w	r8, r8, #12
        phase_ += phase_inc_;
 8000f22:	ee79 7a27 	vadd.f32	s15, s18, s15
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8000f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	bfa8      	it	ge
 8000f30:	ee77 7ac7 	vsubge.f32	s15, s15, s14
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 8000f34:	ed1f 7abf 	vldr	s14, [pc, #-764]	@ 8000c3c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x304>
            for (int s = 0; s < kNumStrum; ++s)
 8000f38:	42b7      	cmp	r7, r6
        phase_ += phase_inc_;
 8000f3a:	edc8 7a1e 	vstr	s15, [r8, #120]	@ 0x78
                            mix += strum_voices_[s].Process() * strum_level_[s] * strum_attenuation_[s] * kVoiceScale;
 8000f3e:	eddb 7a0d 	vldr	s15, [fp, #52]	@ 0x34
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f46:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000f4a:	eee7 8a80 	vfma.f32	s17, s15, s0
            for (int s = 0; s < kNumStrum; ++s)
 8000f4e:	d1c2      	bne.n	8000ed6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x59e>
    }

    inline float ApplyCompressor(float in)
    {
        float absIn = fabsf(in);
 8000f50:	eef0 6ae8 	vabs.f32	s13, s17
        if (absIn > compEnv_)
 8000f54:	ed94 7a00 	vldr	s14, [r4]
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 8000f58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        mix = tanh(2.5 * mix);
 8000f5c:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
        if (absIn > compEnv_)
 8000f60:	eef4 6ac7 	vcmpe.f32	s13, s14
        mix = tanh(2.5 * mix);
 8000f64:	ee28 0a80 	vmul.f32	s0, s17, s0
        if (absIn > compEnv_)
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compEnv_ = alphaAtk_ * compEnv_ + (1 - alphaAtk_) * absIn;
 8000f6c:	bfcc      	ite	gt
 8000f6e:	ed94 6a02 	vldrgt	s12, [r4, #8]
        else
            compEnv_ = alphaRel_ * compEnv_ + (1 - alphaRel_) * absIn;
 8000f72:	ed94 6a03 	vldrle	s12, [r4, #12]
 8000f76:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f7e:	eee7 7a06 	vfma.f32	s15, s14, s12
        float targetGain = (compEnv_ > kCompThreshold)
                            ? (kCompThreshold / compEnv_)
 8000f82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f8a:	edc4 7a00 	vstr	s15, [r4]
 8000f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f92:	bfcc      	ite	gt
 8000f94:	eec7 6a27 	vdivgt.f32	s13, s14, s15
 8000f98:	eef0 6a47 	vmovle.f32	s13, s14
                            : 1.0f;
        if (targetGain < compGain_)
 8000f9c:	ed94 7a01 	vldr	s14, [r4, #4]
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 8000fa0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
        if (targetGain < compGain_)
 8000fa4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            compGain_ = alphaAtk_ * compGain_ + (1 - alphaAtk_) * targetGain;
 8000fac:	bfcc      	ite	gt
 8000fae:	ed94 6a02 	vldrgt	s12, [r4, #8]
        else
            compGain_ = alphaRel_ * compGain_ + (1 - alphaRel_) * targetGain;
 8000fb2:	ed94 6a03 	vldrle	s12, [r4, #12]
 8000fb6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8000fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fbe:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6dc>
 8000fc2:	eee7 7a06 	vfma.f32	s15, s14, s12
 8000fc6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001018 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6e0>
 8000fca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000fce:	edc4 7a01 	vstr	s15, [r4, #4]
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
 8000fd2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000fd6:	f007 fec9 	bl	8008d6c <tanhf>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000fda:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800101c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6e4>
 8000fde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe6:	f100 83d5 	bmi.w	8001794 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe5c>
        mix *= kAudioOSFactor * kAudioOutputLevel;
 8000fea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001020 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6e8>
      if (__b < __a)
 8000fee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8000ff2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000ff6:	fe80 0a67 	vminnm.f32	s0, s0, s15
           block[i] = mix;
 8000ffa:	9b01      	ldr	r3, [sp, #4]
 8000ffc:	ed83 0a00 	vstr	s0, [r3]
 8001000:	ed83 0a01 	vstr	s0, [r3, #4]
 8001004:	ed83 0a02 	vstr	s0, [r3, #8]
    }
 8001008:	b013      	add	sp, #76	@ 0x4c
 800100a:	ecbd 8b08 	vpop	{d8-d11}
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	bf00      	nop
 8001014:	3f333333 	.word	0x3f333333
 8001018:	3e99999a 	.word	0x3e99999a
 800101c:	beb3a62d 	.word	0xbeb3a62d
 8001020:	40366666 	.word	0x40366666
 8001024:	3f7ff972 	.word	0x3f7ff972
            if (in_base_freq_mode_) {
 8001028:	7d01      	ldrb	r1, [r0, #20]
        // Get the scale multipliers based on mode
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
        const int* chord_types = mode_ ? minor_scale_chord_types_ : major_scale_chord_types_;
        
        // Get the root frequency for this chord
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 800102a:	edd0 6a04 	vldr	s13, [r0, #16]
            seventh_hold_counter_ = 0;
 800102e:	6186      	str	r6, [r0, #24]
            if (in_base_freq_mode_) {
 8001030:	2900      	cmp	r1, #0
 8001032:	f040 8633 	bne.w	8001c9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1364>
 8001036:	f082 0001 	eor.w	r0, r2, #1
 800103a:	f894 c208 	ldrb.w	ip, [r4, #520]	@ 0x208
 800103e:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
 8001042:	9005      	str	r0, [sp, #20]
 8001044:	f894 00fc 	ldrb.w	r0, [r4, #252]	@ 0xfc
 8001048:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 800104c:	9002      	str	r0, [sp, #8]
 800104e:	f894 00fd 	ldrb.w	r0, [r4, #253]	@ 0xfd
 8001052:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 8001056:	9003      	str	r0, [sp, #12]
 8001058:	f894 8101 	ldrb.w	r8, [r4, #257]	@ 0x101
 800105c:	f894 00fe 	ldrb.w	r0, [r4, #254]	@ 0xfe
 8001060:	9004      	str	r0, [sp, #16]
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8001062:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
        if (a < b) {
 8001066:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 8001024 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6ec>
            if (mode != mode_) { mode_ = mode; }
 800106a:	459c      	cmp	ip, r3
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 800106c:	eeb4 0ac7 	vcmpe.f32	s0, s14
        if (a < b) {
 8001070:	fe80 7a47 	vminnm.f32	s14, s0, s14
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 8001074:	ee27 7a27 	vmul.f32	s14, s14, s15
            if (mode != mode_) { mode_ = mode; }
 8001078:	bf18      	it	ne
 800107a:	f884 3208 	strbne.w	r3, [r4, #520]	@ 0x208
            int chord_idx = int(Min(chord_pot, 0.9999f) * (float)(kNumChords - 1)) + (chord_pot >= 0.9999f);
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001086:	bfac      	ite	ge
 8001088:	f04f 0c01 	movge.w	ip, #1
 800108c:	f04f 0c00 	movlt.w	ip, #0
 8001090:	ee17 0a10 	vmov	r0, s14
 8001094:	4460      	add	r0, ip
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8001096:	f8df c37c 	ldr.w	ip, [pc, #892]	@ 8001414 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xadc>
            if (chord_idx != current_chord_)
 800109a:	4281      	cmp	r1, r0
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 800109c:	49d3      	ldr	r1, [pc, #844]	@ (80013ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xab4>)
                current_chord_ = chord_idx;
 800109e:	bf18      	it	ne
 80010a0:	f8c4 0204 	strne.w	r0, [r4, #516]	@ 0x204
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	4bd2      	ldr	r3, [pc, #840]	@ (80013f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xab8>)
 80010a8:	bf08      	it	eq
 80010aa:	460b      	moveq	r3, r1
 80010ac:	49d1      	ldr	r1, [pc, #836]	@ (80013f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xabc>)
 80010ae:	bf18      	it	ne
 80010b0:	4661      	movne	r1, ip
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80010b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        
        // Determine chord type (major, minor, diminished)
        int chord_type = chord_types[current_chord_];
 80010b6:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 80010ba:	eb01 0180 	add.w	r1, r1, r0, lsl #2
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80010be:	ed93 7a00 	vldr	s14, [r3]
        const float* chord_multipliers;
        
        switch (chord_type) {
 80010c2:	f1bc 0f01 	cmp.w	ip, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80010c6:	ee26 7a87 	vmul.f32	s14, s13, s14
        switch (chord_type) {
 80010ca:	f000 85e4 	beq.w	8001c96 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x135e>
 80010ce:	48ca      	ldr	r0, [pc, #808]	@ (80013f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xac0>)
 80010d0:	f8df a338 	ldr.w	sl, [pc, #824]	@ 800140c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xad4>
 80010d4:	f1bc 0f02 	cmp.w	ip, #2
 80010d8:	bf18      	it	ne
 80010da:	4650      	movne	r0, sl
            default:
                chord_multipliers = major_chord_multipliers_;
        }
        
        // Calculate frequencies for the first three voices
        target_freq_[0] = root_freq * chord_multipliers[0];
 80010dc:	ed84 7a17 	vstr	s14, [r4, #92]	@ 0x5c
        target_freq_[1] = root_freq * chord_multipliers[1];
 80010e0:	edd0 7a01 	vldr	s15, [r0, #4]
        target_freq_[2] = root_freq * chord_multipliers[2];
        
        // Calculate the fourth voice based on seventh flags
        if (major7 && !minor7)
 80010e4:	9d05      	ldr	r5, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ea:	edc4 7a18 	vstr	s15, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 80010ee:	edd0 7a02 	vldr	s15, [r0, #8]
 80010f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f6:	edc4 7a19 	vstr	s15, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	f000 8221 	beq.w	8001542 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc0a>
 8001100:	2f00      	cmp	r7, #0
 8001102:	f000 821e 	beq.w	8001542 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc0a>
            target_freq_[3] = root_freq * kMajor7Ratio;
 8001106:	eddf 7abd 	vldr	s15, [pc, #756]	@ 80013fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xac4>
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
        for (int s = 0; s < kNumStrum; ++s)
 800110e:	f1bc 0f02 	cmp.w	ip, #2
            if (strum_state_[s] != ENV_IDLE)
 8001112:	9a02      	ldr	r2, [sp, #8]
        else if (minor7 && !major7)
            target_freq_[3] = root_freq * kMinor7Ratio;
        else if (major7 && minor7)
            target_freq_[3] = root_freq * kMajor6Ratio;
 8001114:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 8001118:	f000 8224 	beq.w	8001564 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc2c>
 800111c:	f1bc 0f01 	cmp.w	ip, #1
 8001120:	f000 8276 	beq.w	8001610 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xcd8>
            if (strum_state_[s] != ENV_IDLE)
 8001124:	b12a      	cbz	r2, 8001132 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x7fa>
                strum_target_[s] = note * (1 << oct);
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800112e:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001132:	9a03      	ldr	r2, [sp, #12]
 8001134:	b14a      	cbz	r2, 800114a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x812>
                strum_target_[s] = note * (1 << oct);
 8001136:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001400 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xac8>
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001146:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 800114a:	9a04      	ldr	r2, [sp, #16]
 800114c:	b14a      	cbz	r2, 8001162 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x82a>
                strum_target_[s] = note * (1 << oct);
 800114e:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8001428 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaf0>
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee26 7a87 	vmul.f32	s14, s13, s14
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115e:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8001162:	f1bb 0f00 	cmp.w	fp, #0
 8001166:	d007      	beq.n	8001178 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x840>
                strum_target_[s] = note * (1 << oct);
 8001168:	ee36 7aa6 	vadd.f32	s14, s13, s13
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8001178:	f1b9 0f00 	cmp.w	r9, #0
 800117c:	d007      	beq.n	800118e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x856>
                strum_target_[s] = note * (1 << oct);
 800117e:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 800118e:	f1b8 0f00 	cmp.w	r8, #0
 8001192:	d009      	beq.n	80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x870>
                strum_target_[s] = note * (1 << oct);
 8001194:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8001404 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xacc>
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee26 7a87 	vmul.f32	s14, s13, s14
 80011a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a4:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
            int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions            
 80011a8:	eddf 7a97 	vldr	s15, [pc, #604]	@ 8001408 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xad0>
            if (strum_idx != last_strum_)
 80011ac:	f8d4 011c 	ldr.w	r0, [r4, #284]	@ 0x11c
            int strum_idx = int(strum_pot * 5.99f); // 0-5 for 6 strum positions            
 80011b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80011b4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80011b8:	ee17 2a90 	vmov	r2, s15
            if (strum_idx != last_strum_)
 80011bc:	4290      	cmp	r0, r2
 80011be:	f000 8321 	beq.w	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
                int idx = strum_idx % kNumVoices;
 80011c2:	4250      	negs	r0, r2
 80011c4:	f002 0603 	and.w	r6, r2, #3
                last_strum_ = strum_idx;
 80011c8:	edc4 7a47 	vstr	s15, [r4, #284]	@ 0x11c
                int idx = strum_idx % kNumVoices;
 80011cc:	f000 0003 	and.w	r0, r0, #3
                int chord_type = chord_types[current_chord_];
 80011d0:	680d      	ldr	r5, [r1, #0]
                float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 80011d2:	edd3 5a00 	vldr	s11, [r3]
                int idx = strum_idx % kNumVoices;
 80011d6:	bf58      	it	pl
 80011d8:	4246      	negpl	r6, r0
                int oct = strum_idx / kNumVoices;
 80011da:	2a00      	cmp	r2, #0
 80011dc:	4610      	mov	r0, r2
 80011de:	bfb8      	it	lt
 80011e0:	1cd0      	addlt	r0, r2, #3
                switch (chord_type) {
 80011e2:	2d01      	cmp	r5, #1
                int oct = strum_idx / kNumVoices;
 80011e4:	ea4f 00a0 	mov.w	r0, r0, asr #2
                switch (chord_type) {
 80011e8:	f000 86e7 	beq.w	8001fba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1682>
                    case 0: chord_multipliers = major_chord_multipliers_; break;
 80011ec:	4982      	ldr	r1, [pc, #520]	@ (80013f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xac0>)
 80011ee:	4f87      	ldr	r7, [pc, #540]	@ (800140c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xad4>)
 80011f0:	2d02      	cmp	r5, #2
 80011f2:	bf18      	it	ne
 80011f4:	4639      	movne	r1, r7
                float note = root_freq * chord_multipliers[idx];
 80011f6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
                float target_note = note * (1 << oct);
 80011fa:	2601      	movs	r6, #1
        phase_inc_ = freq * kPhaseFactor;
 80011fc:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001410 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xad8>
 8001200:	2d02      	cmp	r5, #2
 8001202:	ed91 6a00 	vldr	s12, [r1]
 8001206:	fa06 f100 	lsl.w	r1, r6, r0
 800120a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800120e:	ee07 1a90 	vmov	s15, r1
 8001212:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8001216:	eb04 0080 	add.w	r0, r4, r0, lsl #2
                strum_state_[voice_idx] = ENV_ATTACK;
 800121a:	4422      	add	r2, r4
                float target_note = note * (1 << oct);
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001224:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001228:	ee67 7a86 	vmul.f32	s15, s15, s12
 800122c:	ee27 7a87 	vmul.f32	s14, s15, s14
                strum_current_[voice_idx] = target_note;
 8001230:	edc1 7a33 	vstr	s15, [r1, #204]	@ 0xcc
                strum_target_[voice_idx] = target_note;
 8001234:	edc1 7a39 	vstr	s15, [r1, #228]	@ 0xe4
 8001238:	ed80 7a22 	vstr	s14, [r0, #136]	@ 0x88
                strum_level_[voice_idx] = 0.0f;
 800123c:	f04f 0000 	mov.w	r0, #0
 8001240:	f8c1 0104 	str.w	r0, [r1, #260]	@ 0x104
                strum_state_[voice_idx] = ENV_ATTACK;
 8001244:	f882 60fc 	strb.w	r6, [r2, #252]	@ 0xfc
                strum_activation_time_[voice_idx] = ++strum_activation_counter_;
 8001248:	f8d4 2138 	ldr.w	r2, [r4, #312]	@ 0x138
 800124c:	4432      	add	r2, r6
 800124e:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8001252:	f8c1 2120 	str.w	r2, [r1, #288]	@ 0x120
                strum_attenuation_[voice_idx] = 1.0f;
 8001256:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800125a:	f8c1 213c 	str.w	r2, [r1, #316]	@ 0x13c
            if (strum_state_[s] != ENV_IDLE)
 800125e:	f894 20fc 	ldrb.w	r2, [r4, #252]	@ 0xfc
 8001262:	9202      	str	r2, [sp, #8]
 8001264:	f000 865a 	beq.w	8001f1c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15e4>
 8001268:	42b5      	cmp	r5, r6
 800126a:	f000 8700 	beq.w	800206e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1736>
 800126e:	b12a      	cbz	r2, 800127c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x944>
                strum_target_[s] = note * (1 << oct);
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001278:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 800127c:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8001280:	9203      	str	r2, [sp, #12]
 8001282:	b14a      	cbz	r2, 8001298 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x960>
                strum_target_[s] = note * (1 << oct);
 8001284:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8001400 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xac8>
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001298:	f894 20fe 	ldrb.w	r2, [r4, #254]	@ 0xfe
 800129c:	9204      	str	r2, [sp, #16]
 800129e:	b14a      	cbz	r2, 80012b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x97c>
                strum_target_[s] = note * (1 << oct);
 80012a0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001428 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaf0>
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 80012b4:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 80012b8:	f1bb 0f00 	cmp.w	fp, #0
 80012bc:	d007      	beq.n	80012ce <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x996>
                strum_target_[s] = note * (1 << oct);
 80012be:	ee36 7aa6 	vadd.f32	s14, s13, s13
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80012ce:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 80012d2:	f1b9 0f00 	cmp.w	r9, #0
 80012d6:	d007      	beq.n	80012e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9b0>
                strum_target_[s] = note * (1 << oct);
 80012d8:	ee36 7aa6 	vadd.f32	s14, s13, s13
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e4:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80012e8:	f894 8101 	ldrb.w	r8, [r4, #257]	@ 0x101
 80012ec:	f1b8 0f00 	cmp.w	r8, #0
 80012f0:	d009      	beq.n	8001306 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9ce>
                strum_target_[s] = note * (1 << oct);
 80012f2:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001404 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xacc>
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee26 7a87 	vmul.f32	s14, s13, s14
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
            if (strum_state_[s] != ENV_IDLE)
 8001306:	9b02      	ldr	r3, [sp, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8564 	beq.w	8001dd6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x149e>
                active_voices[active_count].index = s;
 800130e:	2300      	movs	r3, #0
                active_count++;
 8001310:	2501      	movs	r5, #1
                active_voices[active_count].index = s;
 8001312:	9306      	str	r3, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001314:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8001318:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 800131a:	9b03      	ldr	r3, [sp, #12]
 800131c:	b153      	cbz	r3, 8001334 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9fc>
                active_voices[active_count].index = s;
 800131e:	aa12      	add	r2, sp, #72	@ 0x48
 8001320:	2301      	movs	r3, #1
 8001322:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8001326:	441d      	add	r5, r3
 8001328:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800132c:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 8001330:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001334:	9b04      	ldr	r3, [sp, #16]
 8001336:	b153      	cbz	r3, 800134e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xa16>
                active_voices[active_count].index = s;
 8001338:	aa12      	add	r2, sp, #72	@ 0x48
 800133a:	2302      	movs	r3, #2
 800133c:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8001340:	3501      	adds	r5, #1
 8001342:	f842 3c30 	str.w	r3, [r2, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001346:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
 800134a:	f842 3c2c 	str.w	r3, [r2, #-44]
            if (strum_state_[s] != ENV_IDLE)
 800134e:	f1bb 0f00 	cmp.w	fp, #0
 8001352:	d00a      	beq.n	800136a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xa32>
                active_voices[active_count].index = s;
 8001354:	ab12      	add	r3, sp, #72	@ 0x48
 8001356:	2203      	movs	r2, #3
 8001358:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800135c:	3501      	adds	r5, #1
 800135e:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001362:	f8d4 212c 	ldr.w	r2, [r4, #300]	@ 0x12c
 8001366:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 800136a:	f1b9 0f00 	cmp.w	r9, #0
 800136e:	d00a      	beq.n	8001386 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xa4e>
                active_voices[active_count].index = s;
 8001370:	ab12      	add	r3, sp, #72	@ 0x48
 8001372:	2204      	movs	r2, #4
 8001374:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001378:	3501      	adds	r5, #1
 800137a:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800137e:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 8001382:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001386:	f1b8 0f00 	cmp.w	r8, #0
 800138a:	d00a      	beq.n	80013a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xa6a>
                active_voices[active_count].index = s;
 800138c:	ab12      	add	r3, sp, #72	@ 0x48
 800138e:	2205      	movs	r2, #5
 8001390:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001394:	3501      	adds	r5, #1
 8001396:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800139a:	f8d4 2134 	ldr.w	r2, [r4, #308]	@ 0x134
 800139e:	f843 2c2c 	str.w	r2, [r3, #-44]
            strum_attenuation_[s] = 1.0f;
 80013a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 80013a6:	2d01      	cmp	r5, #1
            strum_attenuation_[s] = 1.0f;
 80013a8:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 80013ac:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80013b0:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 80013b4:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80013b8:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80013bc:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 80013c0:	f340 8220 	ble.w	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
            for (int i = 0; i < active_count - 1; i++)
 80013c4:	1e6f      	subs	r7, r5, #1
 80013c6:	9a07      	ldr	r2, [sp, #28]
 80013c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 80013ca:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80013ce:	463b      	mov	r3, r7
 80013d0:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80013d4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80013d8:	f10d 0c20 	add.w	ip, sp, #32
 80013dc:	e9cd 7402 	strd	r7, r4, [sp, #8]
                for (int j = 0; j < active_count - i - 1; j++)
 80013e0:	1c59      	adds	r1, r3, #1
 80013e2:	2901      	cmp	r1, #1
 80013e4:	dd4f      	ble.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80013e6:	42b2      	cmp	r2, r6
 80013e8:	d853      	bhi.n	8001492 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb5a>
 80013ea:	e029      	b.n	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb08>
 80013ec:	0800a80c 	.word	0x0800a80c
 80013f0:	0800a7ec 	.word	0x0800a7ec
 80013f4:	0800a79c 	.word	0x0800a79c
 80013f8:	0800a7bc 	.word	0x0800a7bc
 80013fc:	3ff1a1c2 	.word	0x3ff1a1c2
 8001400:	3fa14517 	.word	0x3fa14517
 8001404:	40214517 	.word	0x40214517
 8001408:	40bfae14 	.word	0x40bfae14
 800140c:	0800a7dc 	.word	0x0800a7dc
 8001410:	39cde32e 	.word	0x39cde32e
 8001414:	0800a77c 	.word	0x0800a77c
 8001418:	3fe411ed 	.word	0x3fe411ed
 800141c:	3fb504f7 	.word	0x3fb504f7
 8001420:	401837ef 	.word	0x401837ef
 8001424:	3f9837ef 	.word	0x3f9837ef
 8001428:	3fbfc886 	.word	0x3fbfc886
 800142c:	3fd744fe 	.word	0x3fd744fe
 8001430:	39c49ba6 	.word	0x39c49ba6
 8001434:	3ca3d70a 	.word	0x3ca3d70a
 8001438:	00000000 	.word	0x00000000
 800143c:	3f334bc6 	.word	0x3f334bc6
                for (int j = 0; j < active_count - i - 1; j++)
 8001440:	2b01      	cmp	r3, #1
 8001442:	f000 81aa 	beq.w	800179a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe62>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001446:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001448:	42b7      	cmp	r7, r6
 800144a:	d332      	bcc.n	80014b2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb7a>
                for (int j = 0; j < active_count - i - 1; j++)
 800144c:	2b02      	cmp	r3, #2
 800144e:	f000 85d2 	beq.w	8001ff6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16be>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001452:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8001456:	4557      	cmp	r7, sl
 8001458:	d83b      	bhi.n	80014d2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb9a>
                for (int j = 0; j < active_count - i - 1; j++)
 800145a:	2b03      	cmp	r3, #3
 800145c:	f000 8604 	beq.w	8002068 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1730>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001460:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8001462:	45ba      	cmp	sl, r7
 8001464:	d843      	bhi.n	80014ee <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbb6>
                for (int j = 0; j < active_count - i - 1; j++)
 8001466:	2b04      	cmp	r3, #4
 8001468:	f000 8642 	beq.w	80020f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17b8>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800146c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800146e:	42b9      	cmp	r1, r7
 8001470:	d209      	bcs.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
 8001472:	a90e      	add	r1, sp, #56	@ 0x38
 8001474:	460c      	mov	r4, r1
                        active_voices[j] = active_voices[j + 1];
 8001476:	a910      	add	r1, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 8001478:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 800147c:	c903      	ldmia	r1, {r0, r1}
 800147e:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001482:	e9cd a710 	strd	sl, r7, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 8001486:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	2901      	cmp	r1, #1
 800148c:	ddfb      	ble.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800148e:	42b2      	cmp	r2, r6
 8001490:	d9d6      	bls.n	8001440 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb08>
                        VoiceInfo temp = active_voices[j];
 8001492:	9e06      	ldr	r6, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 8001494:	ac06      	add	r4, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 8001496:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 8001498:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800149c:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 80014a0:	e9cd 6208 	strd	r6, r2, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 80014a4:	f000 8179 	beq.w	800179a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe62>
 80014a8:	4616      	mov	r6, r2
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80014aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80014ac:	460a      	mov	r2, r1
 80014ae:	42b7      	cmp	r7, r6
 80014b0:	d2cc      	bcs.n	800144c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb14>
                        VoiceInfo temp = active_voices[j];
 80014b2:	9f08      	ldr	r7, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 80014b4:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 80014b6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80014ba:	e88c 0003 	stmia.w	ip, {r0, r1}
                        active_voices[j + 1] = temp;
 80014be:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 80014c2:	f000 8595 	beq.w	8001ff0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16b8>
 80014c6:	4637      	mov	r7, r6
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80014c8:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80014cc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80014ce:	4557      	cmp	r7, sl
 80014d0:	d9c3      	bls.n	800145a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb22>
                        VoiceInfo temp = active_voices[j];
 80014d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 80014d6:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 80014d8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80014dc:	e888 0003 	stmia.w	r8, {r0, r1}
                        active_voices[j + 1] = temp;
 80014e0:	e9cd a70c 	strd	sl, r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 80014e4:	d0cf      	beq.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
 80014e6:	46ba      	mov	sl, r7
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80014e8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80014ea:	45ba      	cmp	sl, r7
 80014ec:	d9bb      	bls.n	8001466 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb2e>
                        VoiceInfo temp = active_voices[j];
 80014ee:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 80014f0:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 80014f2:	465c      	mov	r4, fp
 80014f4:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80014f8:	e889 0003 	stmia.w	r9, {r0, r1}
                        active_voices[j + 1] = temp;
 80014fc:	e9cd 7a0e 	strd	r7, sl, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 8001500:	d0c1      	beq.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001502:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001504:	458a      	cmp	sl, r1
 8001506:	d9be      	bls.n	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
 8001508:	4657      	mov	r7, sl
 800150a:	e7b4      	b.n	8001476 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb3e>
            if (g && !gate_[v])
 800150c:	b912      	cbnz	r2, 8001514 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbdc>
                env_state_[v] = ENV_ATTACK;
 800150e:	2201      	movs	r2, #1
 8001510:	f884 206d 	strb.w	r2, [r4, #109]	@ 0x6d
            gate_[v] = g;
 8001514:	2201      	movs	r2, #1
 8001516:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
            bool g = button[v];
 800151a:	f89e 5002 	ldrb.w	r5, [lr, #2]
            if (g && !gate_[v])
 800151e:	f894 2082 	ldrb.w	r2, [r4, #130]	@ 0x82
 8001522:	2d00      	cmp	r5, #0
 8001524:	f43f ab54 	beq.w	8000bd0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x298>
 8001528:	b912      	cbnz	r2, 8001530 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xbf8>
                env_state_[v] = ENV_ATTACK;
 800152a:	2201      	movs	r2, #1
 800152c:	f884 206e 	strb.w	r2, [r4, #110]	@ 0x6e
            gate_[v] = g;
 8001530:	2201      	movs	r2, #1
 8001532:	f884 2082 	strb.w	r2, [r4, #130]	@ 0x82
            bool g = button[v];
 8001536:	f89e 9003 	ldrb.w	r9, [lr, #3]
            if (g && !gate_[v])
 800153a:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 800153e:	f7ff bb52 	b.w	8000be6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x2ae>
        else if (minor7 && !major7)
 8001542:	2f01      	cmp	r7, #1
 8001544:	f000 8085 	beq.w	8001652 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd1a>
 8001548:	2a00      	cmp	r2, #0
 800154a:	f000 8082 	beq.w	8001652 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd1a>
            target_freq_[3] = root_freq * kMinor7Ratio;
 800154e:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8001418 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xae0>
 8001552:	f1bc 0f02 	cmp.w	ip, #2
            if (strum_state_[s] != ENV_IDLE)
 8001556:	9a02      	ldr	r2, [sp, #8]
            target_freq_[3] = root_freq * kMinor7Ratio;
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
            target_freq_[3] = root_freq * kMajor6Ratio;
 800155c:	ed84 7a1a 	vstr	s14, [r4, #104]	@ 0x68
 8001560:	f47f addc 	bne.w	800111c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x7e4>
            if (strum_state_[s] != ENV_IDLE)
 8001564:	b12a      	cbz	r2, 8001572 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc3a>
                strum_target_[s] = note * (1 << oct);
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800156e:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001572:	9a03      	ldr	r2, [sp, #12]
 8001574:	b14a      	cbz	r2, 800158a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc52>
                strum_target_[s] = note * (1 << oct);
 8001576:	ed5f 7a55 	vldr	s15, [pc, #-340]	@ 8001424 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaec>
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 800158a:	9a04      	ldr	r2, [sp, #16]
 800158c:	b14a      	cbz	r2, 80015a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc6a>
                strum_target_[s] = note * (1 << oct);
 800158e:	ed5f 7a5d 	vldr	s15, [pc, #-372]	@ 800141c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xae4>
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159e:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 80015a2:	f1bb 0f00 	cmp.w	fp, #0
 80015a6:	d007      	beq.n	80015b8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc80>
                strum_target_[s] = note * (1 << oct);
 80015a8:	ee76 7aa6 	vadd.f32	s15, s13, s13
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b4:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80015b8:	f1b9 0f00 	cmp.w	r9, #0
 80015bc:	d007      	beq.n	80015ce <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc96>
                strum_target_[s] = note * (1 << oct);
 80015be:	ee76 7aa6 	vadd.f32	s15, s13, s13
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80015ce:	f1b8 0f00 	cmp.w	r8, #0
 80015d2:	f43f ade9 	beq.w	80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x870>
                strum_target_[s] = note * (1 << oct);
 80015d6:	ed5f 7a6e 	vldr	s15, [pc, #-440]	@ 8001420 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xae8>
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e6:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 80015ea:	e5dd      	b.n	80011a8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x870>
                env_state_[v] = ENV_ATTACK;
 80015ec:	2201      	movs	r2, #1
 80015ee:	f884 206c 	strb.w	r2, [r4, #108]	@ 0x6c
 80015f2:	f7ff bad3 	b.w	8000b9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x264>
            if (g && !gate_[v])
 80015f6:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 80015fa:	4645      	mov	r5, r8
            gate_[v] = g;
 80015fc:	f884 8082 	strb.w	r8, [r4, #130]	@ 0x82
            if (in_base_freq_mode_ && v != 0) {
 8001600:	f7ff bb3f 	b.w	8000c82 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x34a>
            if (g && !gate_[v])
 8001604:	f894 2082 	ldrb.w	r2, [r4, #130]	@ 0x82
            bool g = button[v];
 8001608:	f89e 5002 	ldrb.w	r5, [lr, #2]
            if (in_base_freq_mode_ && v != 0) {
 800160c:	f7ff badd 	b.w	8000bca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x292>
            if (strum_state_[s] != ENV_IDLE)
 8001610:	b12a      	cbz	r2, 800161e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xce6>
                strum_target_[s] = note * (1 << oct);
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800161a:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 800161e:	9a03      	ldr	r2, [sp, #12]
 8001620:	b14a      	cbz	r2, 8001636 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xcfe>
                strum_target_[s] = note * (1 << oct);
 8001622:	ed1f 7a80 	vldr	s14, [pc, #-512]	@ 8001424 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaec>
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800162e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001632:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001636:	9a04      	ldr	r2, [sp, #16]
 8001638:	2a00      	cmp	r2, #0
 800163a:	d0b2      	beq.n	80015a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc6a>
                strum_target_[s] = note * (1 << oct);
 800163c:	ed5f 7a86 	vldr	s15, [pc, #-536]	@ 8001428 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaf0>
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164c:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
 8001650:	e7a7      	b.n	80015a2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xc6a>
        else if (major7 && minor7)
 8001652:	2e00      	cmp	r6, #0
 8001654:	f000 854f 	beq.w	80020f6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17be>
            target_freq_[3] = root_freq * kMajor6Ratio;
 8001658:	ed5f 7a8c 	vldr	s15, [pc, #-560]	@ 800142c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaf4>
 800165c:	ee27 7a27 	vmul.f32	s14, s14, s15
        for (int s = 0; s < kNumStrum; ++s)
 8001660:	e555      	b.n	800110e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x7d6>
                        strum_level_[s] -= kDecayInc;
 8001662:	eddb 7a00 	vldr	s15, [fp]
                        if (strum_level_[s] <= kSustain)
 8001666:	eef4 7aea 	vcmpe.f32	s15, s21
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	f240 8082 	bls.w	8001776 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe3e>
                        strum_level_[s] -= kDecayInc;
 8001672:	ed1f 7a91 	vldr	s14, [pc, #-580]	@ 8001430 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaf8>
 8001676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800167a:	edcb 7a00 	vstr	s15, [fp]
 800167e:	e424      	b.n	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
            if (env_state_[v] != ENV_IDLE)
 8001680:	2d00      	cmp	r5, #0
 8001682:	f43f abf8 	beq.w	8000e76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x53e>
 8001686:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
 800168a:	ed5f 7a96 	vldr	s15, [pc, #-600]	@ 8001434 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xafc>
 800168e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001692:	f7ff bbd7 	b.w	8000e44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x50c>
 8001696:	f1b8 0f00 	cmp.w	r8, #0
 800169a:	f43f abb8 	beq.w	8000e0e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4d6>
 800169e:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
 80016a2:	ed5f 7a9c 	vldr	s15, [pc, #-624]	@ 8001434 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xafc>
 80016a6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80016aa:	f7ff bb97 	b.w	8000ddc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4a4>
 80016ae:	2f00      	cmp	r7, #0
 80016b0:	f43f ab74 	beq.w	8000d9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x464>
 80016b4:	ed94 ba1d 	vldr	s22, [r4, #116]	@ 0x74
 80016b8:	ed5f 7aa2 	vldr	s15, [pc, #-648]	@ 8001434 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xafc>
 80016bc:	ee2b ba27 	vmul.f32	s22, s22, s15
 80016c0:	f7ff bb53 	b.w	8000d6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x432>
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 85af 	bne.w	8002228 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x18f0>
            switch (env_state_[v])
 80016ca:	2f02      	cmp	r7, #2
        float mix = 0.0f;
 80016cc:	ed5f 8aa6 	vldr	s17, [pc, #-664]	@ 8001438 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb00>
            switch (env_state_[v])
 80016d0:	f47f ab31 	bne.w	8000d36 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3fe>
                    env_level_[v] -= kDecayInc;
 80016d4:	edd4 7a1d 	vldr	s15, [r4, #116]	@ 0x74
                    if (env_level_[v] <= kSustain)
 80016d8:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 800143c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb04>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	f200 83b9 	bhi.w	8001e5a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1522>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 80016e8:	4bbb      	ldr	r3, [pc, #748]	@ (80019d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10a0>)
 80016ea:	ed9f babc 	vldr	s22, [pc, #752]	@ 80019dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10a4>
 80016ee:	6763      	str	r3, [r4, #116]	@ 0x74
 80016f0:	2303      	movs	r3, #3
            out = sinf(phase_);
 80016f2:	edd4 ba0a 	vldr	s23, [r4, #40]	@ 0x28
 80016f6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
        if (waveform_ == Waveform::SINE) {
 80016fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f43f ab3a 	beq.w	8000d76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x43e>
                      ? phi
 8001702:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80019ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b4>
            float phi = phase_ * kInvPi;
 8001706:	eddf 7aba 	vldr	s15, [pc, #744]	@ 80019f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b8>
                      ? phi
 800170a:	eef4 bac7 	vcmpe.f32	s23, s14
            float phi = phase_ * kInvPi;
 800170e:	ee6b 7aa7 	vmul.f32	s15, s23, s15
                      ? phi
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	f2c0 848e 	blt.w	8002036 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16fe>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800171a:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80019f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10bc>
 800171e:	eef4 bac7 	vcmpe.f32	s23, s14
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	f140 84fe 	bpl.w	8002126 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17ee>
 800172a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 800172e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001732:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001736:	eea7 0a87 	vfma.f32	s0, s15, s14
 800173a:	f7ff bb20 	b.w	8000d7e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x446>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 800173e:	2b03      	cmp	r3, #3
 8001740:	f000 82a2 	beq.w	8001c88 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1350>
 8001744:	f894 706d 	ldrb.w	r7, [r4, #109]	@ 0x6d
 8001748:	2f03      	cmp	r7, #3
 800174a:	f000 8295 	beq.w	8001c78 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1340>
 800174e:	f894 806e 	ldrb.w	r8, [r4, #110]	@ 0x6e
 8001752:	f1b8 0f03 	cmp.w	r8, #3
 8001756:	f000 8287 	beq.w	8001c68 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1330>
 800175a:	f894 506f 	ldrb.w	r5, [r4, #111]	@ 0x6f
 800175e:	2d03      	cmp	r5, #3
 8001760:	f47f aab0 	bne.w	8000cc4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x38c>
 8001764:	f1b9 0f00 	cmp.w	r9, #0
 8001768:	f47f aaac 	bne.w	8000cc4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x38c>
                    env_state_[v] = ENV_RELEASE;
 800176c:	2504      	movs	r5, #4
 800176e:	f884 506f 	strb.w	r5, [r4, #111]	@ 0x6f
            for (int v = 0; v < kNumVoices; ++v)
 8001772:	f7ff baa7 	b.w	8000cc4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x38c>
                            { strum_level_[s] = kSustain; strum_state_[s] = ENV_SUSTAIN; }
 8001776:	4b98      	ldr	r3, [pc, #608]	@ (80019d8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10a0>)
 8001778:	f8cb 3000 	str.w	r3, [fp]
 800177c:	2303      	movs	r3, #3
 800177e:	703b      	strb	r3, [r7, #0]
 8001780:	f7ff bba3 	b.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                            { strum_level_[s] = 1.0f; strum_state_[s] = ENV_DECAY; }
 8001784:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001788:	f8cb 3000 	str.w	r3, [fp]
 800178c:	2302      	movs	r3, #2
 800178e:	703b      	strb	r3, [r7, #0]
 8001790:	f7ff bb9b 	b.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
      return __a;
 8001794:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001798:	e42f      	b.n	8000ffa <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6c2>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 800179a:	4b91      	ldr	r3, [pc, #580]	@ (80019e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10a8>)
 800179c:	9a06      	ldr	r2, [sp, #24]
 800179e:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80017a2:	e9dd 7402 	ldrd	r7, r4, [sp, #8]
 80017a6:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80017aa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 80017ae:	2f01      	cmp	r7, #1
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017b0:	f8c2 113c 	str.w	r1, [r2, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 80017b4:	d026      	beq.n	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017b6:	9a08      	ldr	r2, [sp, #32]
 80017b8:	eb03 0185 	add.w	r1, r3, r5, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 80017bc:	2f02      	cmp	r7, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017c2:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 80017c6:	f8c2 113c 	str.w	r1, [r2, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 80017ca:	d01b      	beq.n	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80017ce:	eb03 0185 	add.w	r1, r3, r5, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 80017d2:	2f03      	cmp	r7, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017d8:	f851 1c10 	ldr.w	r1, [r1, #-16]
 80017dc:	f8c2 113c 	str.w	r1, [r2, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 80017e0:	d010      	beq.n	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 80017e6:	2f05      	cmp	r7, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017e8:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80017ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80017ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80017f2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 80017f6:	d105      	bne.n	8001804 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xecc>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 80017f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80017fa:	4a7a      	ldr	r2, [pc, #488]	@ (80019e4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10ac>)
 80017fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001800:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001804:	2600      	movs	r6, #0
 8001806:	f7ff b8c9 	b.w	800099c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x64>
                            strum_state_[s] = ENV_IDLE; 
 800180a:	2200      	movs	r2, #0
                            strum_level_[s] = 0.0f; 
 800180c:	ed8b ba00 	vstr	s22, [fp]
                            strum_state_[s] = ENV_IDLE; 
 8001810:	703a      	strb	r2, [r7, #0]
            if (strum_state_[s] != ENV_IDLE)
 8001812:	f894 30fc 	ldrb.w	r3, [r4, #252]	@ 0xfc
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 82da 	beq.w	8001dd0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1498>
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800181c:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
                active_count++;
 8001820:	f04f 0e01 	mov.w	lr, #1
                active_voices[active_count].index = s;
 8001824:	9206      	str	r2, [sp, #24]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001826:	2202      	movs	r2, #2
 8001828:	9307      	str	r3, [sp, #28]
            if (strum_state_[s] != ENV_IDLE)
 800182a:	f894 30fd 	ldrb.w	r3, [r4, #253]	@ 0xfd
 800182e:	b153      	cbz	r3, 8001846 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xf0e>
                active_voices[active_count].index = s;
 8001830:	ab12      	add	r3, sp, #72	@ 0x48
 8001832:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
                active_count++;
 8001836:	4696      	mov	lr, r2
                active_voices[active_count].index = s;
 8001838:	2201      	movs	r2, #1
 800183a:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800183e:	f8d4 2124 	ldr.w	r2, [r4, #292]	@ 0x124
 8001842:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001846:	f894 30fe 	ldrb.w	r3, [r4, #254]	@ 0xfe
 800184a:	b15b      	cbz	r3, 8001864 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xf2c>
                active_voices[active_count].index = s;
 800184c:	ab12      	add	r3, sp, #72	@ 0x48
 800184e:	2202      	movs	r2, #2
 8001850:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8001854:	f10e 0e01 	add.w	lr, lr, #1
 8001858:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800185c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
 8001860:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001864:	f894 30ff 	ldrb.w	r3, [r4, #255]	@ 0xff
 8001868:	b15b      	cbz	r3, 8001882 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xf4a>
                active_voices[active_count].index = s;
 800186a:	ab12      	add	r3, sp, #72	@ 0x48
 800186c:	2203      	movs	r2, #3
 800186e:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8001872:	f10e 0e01 	add.w	lr, lr, #1
 8001876:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 800187a:	f8d4 212c 	ldr.w	r2, [r4, #300]	@ 0x12c
 800187e:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 8001882:	f894 3100 	ldrb.w	r3, [r4, #256]	@ 0x100
 8001886:	b15b      	cbz	r3, 80018a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xf68>
                active_voices[active_count].index = s;
 8001888:	ab12      	add	r3, sp, #72	@ 0x48
 800188a:	2204      	movs	r2, #4
 800188c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 8001890:	f10e 0e01 	add.w	lr, lr, #1
 8001894:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 8001898:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 800189c:	f843 2c2c 	str.w	r2, [r3, #-44]
            if (strum_state_[s] != ENV_IDLE)
 80018a0:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 80018a4:	b15b      	cbz	r3, 80018be <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xf86>
                active_voices[active_count].index = s;
 80018a6:	ab12      	add	r3, sp, #72	@ 0x48
 80018a8:	2205      	movs	r2, #5
 80018aa:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 80018ae:	f10e 0e01 	add.w	lr, lr, #1
 80018b2:	f843 2c30 	str.w	r2, [r3, #-48]
                active_voices[active_count].activation_time = strum_activation_time_[s];
 80018b6:	f8d4 2134 	ldr.w	r2, [r4, #308]	@ 0x134
 80018ba:	f843 2c2c 	str.w	r2, [r3, #-44]
            strum_attenuation_[s] = 1.0f;
 80018be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
        if (active_count >= 2)
 80018c2:	f1be 0f01 	cmp.w	lr, #1
            strum_attenuation_[s] = 1.0f;
 80018c6:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 80018ca:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80018ce:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 80018d2:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80018d6:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80018da:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
        if (active_count >= 2)
 80018de:	f77f aaf4 	ble.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
            for (int i = 0; i < active_count - 1; i++)
 80018e2:	f10e 35ff 	add.w	r5, lr, #4294967295	@ 0xffffffff
 80018e6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80018ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                        active_voices[j] = active_voices[j + 1];
 80018ec:	f10d 0a20 	add.w	sl, sp, #32
 80018f0:	462b      	mov	r3, r5
 80018f2:	46a9      	mov	r9, r5
 80018f4:	e9cd e403 	strd	lr, r4, [sp, #12]
                for (int j = 0; j < active_count - i - 1; j++)
 80018f8:	1c59      	adds	r1, r3, #1
 80018fa:	2901      	cmp	r1, #1
 80018fc:	dd25      	ble.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80018fe:	4562      	cmp	r2, ip
 8001900:	d329      	bcc.n	8001956 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x101e>
                for (int j = 0; j < active_count - i - 1; j++)
 8001902:	2b01      	cmp	r3, #1
 8001904:	f000 8174 	beq.w	8001bf0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x12b8>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001908:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 800190c:	4572      	cmp	r2, lr
 800190e:	d833      	bhi.n	8001978 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1040>
                for (int j = 0; j < active_count - i - 1; j++)
 8001910:	2b02      	cmp	r3, #2
 8001912:	f000 8373 	beq.w	8001ffc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16c4>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001916:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8001918:	45ae      	cmp	lr, r5
 800191a:	d83c      	bhi.n	8001996 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x105e>
                for (int j = 0; j < active_count - i - 1; j++)
 800191c:	2b03      	cmp	r3, #3
 800191e:	f000 83e5 	beq.w	80020ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17b4>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001922:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8001926:	4575      	cmp	r5, lr
 8001928:	d844      	bhi.n	80019b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x107c>
                for (int j = 0; j < active_count - i - 1; j++)
 800192a:	2b04      	cmp	r3, #4
 800192c:	f000 83e9 	beq.w	8002102 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17ca>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001930:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001932:	4571      	cmp	r1, lr
 8001934:	d209      	bcs.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
 8001936:	a90e      	add	r1, sp, #56	@ 0x38
 8001938:	9102      	str	r1, [sp, #8]
                        active_voices[j] = active_voices[j + 1];
 800193a:	a910      	add	r1, sp, #64	@ 0x40
                        VoiceInfo temp = active_voices[j];
 800193c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
                        active_voices[j] = active_voices[j + 1];
 800193e:	9c02      	ldr	r4, [sp, #8]
 8001940:	c903      	ldmia	r1, {r0, r1}
 8001942:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001946:	e9cd 5e10 	strd	r5, lr, [sp, #64]	@ 0x40
            for (int i = 0; i < active_count - 1; i++)
 800194a:	3b01      	subs	r3, #1
                for (int j = 0; j < active_count - i - 1; j++)
 800194c:	1c59      	adds	r1, r3, #1
 800194e:	2901      	cmp	r1, #1
 8001950:	ddfb      	ble.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 8001952:	4562      	cmp	r2, ip
 8001954:	d2d5      	bcs.n	8001902 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfca>
                        VoiceInfo temp = active_voices[j];
 8001956:	9a06      	ldr	r2, [sp, #24]
                        active_voices[j] = active_voices[j + 1];
 8001958:	ac06      	add	r4, sp, #24
                for (int j = 0; j < active_count - i - 1; j++)
 800195a:	2b01      	cmp	r3, #1
                        active_voices[j] = active_voices[j + 1];
 800195c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001960:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 8001964:	e9cd 2c08 	strd	r2, ip, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 8001968:	f000 8142 	beq.w	8001bf0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x12b8>
 800196c:	4662      	mov	r2, ip
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800196e:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8001972:	468c      	mov	ip, r1
 8001974:	4572      	cmp	r2, lr
 8001976:	d9cb      	bls.n	8001910 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfd8>
                        active_voices[j] = active_voices[j + 1];
 8001978:	a90a      	add	r1, sp, #40	@ 0x28
                        VoiceInfo temp = active_voices[j];
 800197a:	9d08      	ldr	r5, [sp, #32]
                for (int j = 0; j < active_count - i - 1; j++)
 800197c:	2b02      	cmp	r3, #2
                        active_voices[j] = active_voices[j + 1];
 800197e:	c903      	ldmia	r1, {r0, r1}
 8001980:	e88a 0003 	stmia.w	sl, {r0, r1}
                        active_voices[j + 1] = temp;
 8001984:	e9cd 520a 	strd	r5, r2, [sp, #40]	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 8001988:	f000 833a 	beq.w	8002000 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16c8>
 800198c:	4696      	mov	lr, r2
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 800198e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8001990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001992:	45ae      	cmp	lr, r5
 8001994:	d9c2      	bls.n	800191c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfe4>
                        active_voices[j] = active_voices[j + 1];
 8001996:	a90c      	add	r1, sp, #48	@ 0x30
                        VoiceInfo temp = active_voices[j];
 8001998:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
                        active_voices[j] = active_voices[j + 1];
 800199a:	ac0a      	add	r4, sp, #40	@ 0x28
                for (int j = 0; j < active_count - i - 1; j++)
 800199c:	2b03      	cmp	r3, #3
                        active_voices[j] = active_voices[j + 1];
 800199e:	c903      	ldmia	r1, {r0, r1}
 80019a0:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 80019a4:	e9cd 5e0c 	strd	r5, lr, [sp, #48]	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 80019a8:	d0cf      	beq.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
 80019aa:	4675      	mov	r5, lr
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80019ac:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 80019b0:	4575      	cmp	r5, lr
 80019b2:	d9ba      	bls.n	800192a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xff2>
                        active_voices[j] = active_voices[j + 1];
 80019b4:	a90e      	add	r1, sp, #56	@ 0x38
                        VoiceInfo temp = active_voices[j];
 80019b6:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
                        active_voices[j] = active_voices[j + 1];
 80019ba:	ac0c      	add	r4, sp, #48	@ 0x30
                for (int j = 0; j < active_count - i - 1; j++)
 80019bc:	2b04      	cmp	r3, #4
                        active_voices[j] = active_voices[j + 1];
 80019be:	9102      	str	r1, [sp, #8]
 80019c0:	c903      	ldmia	r1, {r0, r1}
 80019c2:	e884 0003 	stmia.w	r4, {r0, r1}
                        active_voices[j + 1] = temp;
 80019c6:	e9cd e50e 	strd	lr, r5, [sp, #56]	@ 0x38
                for (int j = 0; j < active_count - i - 1; j++)
 80019ca:	d0be      	beq.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
                    if (active_voices[j].activation_time > active_voices[j + 1].activation_time)
 80019cc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80019ce:	428d      	cmp	r5, r1
 80019d0:	d9bb      	bls.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
 80019d2:	46ae      	mov	lr, r5
 80019d4:	e7b1      	b.n	800193a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1002>
 80019d6:	bf00      	nop
 80019d8:	3f333333 	.word	0x3f333333
 80019dc:	3c656041 	.word	0x3c656041
 80019e0:	0800a860 	.word	0x0800a860
 80019e4:	3f666666 	.word	0x3f666666
 80019e8:	39c49ba6 	.word	0x39c49ba6
 80019ec:	40490fdb 	.word	0x40490fdb
 80019f0:	3ea2f983 	.word	0x3ea2f983
 80019f4:	40c90fdb 	.word	0x40c90fdb
 80019f8:	3ca3d70a 	.word	0x3ca3d70a
 80019fc:	3f334bc6 	.word	0x3f334bc6
                    env_level_[v] -= kDecayInc;
 8001a00:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= kSustain)
 8001a04:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80019fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c4>
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	f240 81e4 	bls.w	8001ddc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x14a4>
                    env_level_[v] -= kDecayInc;
 8001a14:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80019e8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b0>
 8001a18:	ed1f 9a09 	vldr	s18, [pc, #-36]	@ 80019f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c0>
 8001a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (waveform_ == Waveform::SINE) {
 8001a20:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
            out = sinf(phase_);
 8001a22:	edd4 9a10 	vldr	s19, [r4, #64]	@ 0x40
 8001a26:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001a2a:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
        if (waveform_ == Waveform::SINE) {
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f43f aa0e 	beq.w	8000e50 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x518>
                      ? phi
 8001a34:	ed1f 7a13 	vldr	s14, [pc, #-76]	@ 80019ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b4>
            float phi = phase_ * kInvPi;
 8001a38:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80019f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b8>
                      ? phi
 8001a3c:	eef4 9ac7 	vcmpe.f32	s19, s14
            float phi = phase_ * kInvPi;
 8001a40:	ee69 7aa7 	vmul.f32	s15, s19, s15
                      ? phi
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	f280 82e4 	bge.w	8002014 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16dc>
            out = tri * 2.0f - 1.0f;
 8001a4c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a50:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001a54:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001a58:	f7ff b9fe 	b.w	8000e58 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x520>
                    env_level_[v] -= relInc;
 8001a5c:	ed94 9a1f 	vldr	s18, [r4, #124]	@ 0x7c
                    if (env_level_[v] <= 0.0f)
 8001a60:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001a62:	ee39 9a6a 	vsub.f32	s18, s18, s21
                    if (env_level_[v] <= 0.0f)
 8001a66:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	f240 82a7 	bls.w	8001fc0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1688>
 8001a72:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 80019f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c0>
                    env_level_[v] -= relInc;
 8001a76:	ed84 9a1f 	vstr	s18, [r4, #124]	@ 0x7c
 8001a7a:	ee29 9a27 	vmul.f32	s18, s18, s15
 8001a7e:	f7ff b9e1 	b.w	8000e44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x50c>
 8001a82:	ed94 9a1e 	vldr	s18, [r4, #120]	@ 0x78
                    if (env_level_[v] <= 0.0f)
 8001a86:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001a88:	ee39 9a6a 	vsub.f32	s18, s18, s21
                    if (env_level_[v] <= 0.0f)
 8001a8c:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	f240 82a0 	bls.w	8001fd8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16a0>
 8001a98:	ed5f 7a29 	vldr	s15, [pc, #-164]	@ 80019f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c0>
        if (waveform_ == Waveform::SINE) {
 8001a9c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                    env_level_[v] -= relInc;
 8001a9e:	ed84 9a1e 	vstr	s18, [r4, #120]	@ 0x78
 8001aa2:	ee29 9a27 	vmul.f32	s18, s18, s15
            out = sinf(phase_);
 8001aa6:	ed94 ba0d 	vldr	s22, [r4, #52]	@ 0x34
        if (waveform_ == Waveform::SINE) {
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f43f a99c 	beq.w	8000de8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4b0>
                      ? phi
 8001ab0:	ed1f 7a32 	vldr	s14, [pc, #-200]	@ 80019ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b4>
            float phi = phase_ * kInvPi;
 8001ab4:	ed5f 7a32 	vldr	s15, [pc, #-200]	@ 80019f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b8>
                      ? phi
 8001ab8:	eeb4 bac7 	vcmpe.f32	s22, s14
            float phi = phase_ * kInvPi;
 8001abc:	ee6b 7a27 	vmul.f32	s15, s22, s15
                      ? phi
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	f2c0 829e 	blt.w	8002004 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16cc>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001ac8:	ed1f 7a36 	vldr	s14, [pc, #-216]	@ 80019f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10bc>
 8001acc:	eeb4 bac7 	vcmpe.f32	s22, s14
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	f140 832b 	bpl.w	800212e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17f6>
 8001ad8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001adc:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001ae4:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001ae8:	f7ff b982 	b.w	8000df0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4b8>
 8001aec:	ed94 ba1c 	vldr	s22, [r4, #112]	@ 0x70
                    if (env_level_[v] <= 0.0f)
 8001af0:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001af2:	ee3b ba6a 	vsub.f32	s22, s22, s21
                    if (env_level_[v] <= 0.0f)
 8001af6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	f240 8265 	bls.w	8001fcc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1694>
 8001b02:	ed5f 7a43 	vldr	s15, [pc, #-268]	@ 80019f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c0>
        if (waveform_ == Waveform::SINE) {
 8001b06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
                    env_level_[v] -= relInc;
 8001b08:	ed84 ba1c 	vstr	s22, [r4, #112]	@ 0x70
 8001b0c:	ee2b ba27 	vmul.f32	s22, s22, s15
            out = sinf(phase_);
 8001b10:	edd4 ba07 	vldr	s23, [r4, #28]
        if (waveform_ == Waveform::SINE) {
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f43f a8f8 	beq.w	8000d0a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3d2>
                      ? phi
 8001b1a:	ed1f 7a4c 	vldr	s14, [pc, #-304]	@ 80019ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b4>
            float phi = phase_ * kInvPi;
 8001b1e:	ed5f 7a4c 	vldr	s15, [pc, #-304]	@ 80019f0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10b8>
                      ? phi
 8001b22:	eef4 bac7 	vcmpe.f32	s23, s14
            float phi = phase_ * kInvPi;
 8001b26:	ee6b 7aa7 	vmul.f32	s15, s23, s15
                      ? phi
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	f2c0 8293 	blt.w	8002058 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1720>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001b32:	ed1f 7a50 	vldr	s14, [pc, #-320]	@ 80019f4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10bc>
 8001b36:	eef4 bac7 	vcmpe.f32	s23, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	f140 82ee 	bpl.w	800211e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17e6>
 8001b42:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001b46:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001b4e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001b52:	f7ff b8de 	b.w	8000d12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3da>
 8001b56:	ed94 ba1d 	vldr	s22, [r4, #116]	@ 0x74
                    if (env_level_[v] <= 0.0f)
 8001b5a:	2300      	movs	r3, #0
                    env_level_[v] -= relInc;
 8001b5c:	ee3b ba6a 	vsub.f32	s22, s22, s21
                    if (env_level_[v] <= 0.0f)
 8001b60:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	f240 823c 	bls.w	8001fe4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x16ac>
 8001b6c:	ed5f 7a5e 	vldr	s15, [pc, #-376]	@ 80019f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c0>
                    env_level_[v] -= relInc;
 8001b70:	ed84 ba1d 	vstr	s22, [r4, #116]	@ 0x74
 8001b74:	ee2b ba27 	vmul.f32	s22, s22, s15
 8001b78:	f7ff b8f7 	b.w	8000d6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x432>
                    env_level_[v] -= kDecayInc;
 8001b7c:	edd4 7a1c 	vldr	s15, [r4, #112]	@ 0x70
                    if (env_level_[v] <= kSustain)
 8001b80:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 80019fc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x10c4>
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	f200 8171 	bhi.w	8001e72 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x153a>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001b90:	4bc9      	ldr	r3, [pc, #804]	@ (8001eb8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1580>)
 8001b92:	ed9f baca 	vldr	s22, [pc, #808]	@ 8001ebc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1584>
 8001b96:	6723      	str	r3, [r4, #112]	@ 0x70
 8001b98:	2303      	movs	r3, #3
 8001b9a:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001b9e:	f7ff b8ae 	b.w	8000cfe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3c6>
                    env_level_[v] -= kDecayInc;
 8001ba2:	edd4 7a1e 	vldr	s15, [r4, #120]	@ 0x78
                    if (env_level_[v] <= kSustain)
 8001ba6:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001ec0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1588>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	f200 811c 	bhi.w	8001dee <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x14b6>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001bb6:	4bc0      	ldr	r3, [pc, #768]	@ (8001eb8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1580>)
 8001bb8:	ed9f 9ac0 	vldr	s18, [pc, #768]	@ 8001ebc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1584>
 8001bbc:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001bc4:	f7ff b90a 	b.w	8000ddc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4a4>
                      ? phi
 8001bc8:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001ec4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x158c>
            float phi = phase_ * kInvPi;
 8001bcc:	eddf 7abe 	vldr	s15, [pc, #760]	@ 8001ec8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1590>
                      ? phi
 8001bd0:	eeb4 9ac7 	vcmpe.f32	s18, s14
            float phi = phase_ * kInvPi;
 8001bd4:	ee69 7a27 	vmul.f32	s15, s18, s15
                      ? phi
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	f280 8159 	bge.w	8001e92 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x155a>
            out = tri * 2.0f - 1.0f;
 8001be0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001be4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8001be8:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001bec:	f7ff b991 	b.w	8000f12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x5da>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001bf0:	e9dd e403 	ldrd	lr, r4, [sp, #12]
 8001bf4:	4ab5      	ldr	r2, [pc, #724]	@ (8001ecc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1594>)
 8001bf6:	464d      	mov	r5, r9
 8001bf8:	9b06      	ldr	r3, [sp, #24]
 8001bfa:	eb02 018e 	add.w	r1, r2, lr, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001bfe:	2d01      	cmp	r5, #1
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c04:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8001c08:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001c0c:	f43f a95d 	beq.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c10:	9b08      	ldr	r3, [sp, #32]
 8001c12:	eb02 018e 	add.w	r1, r2, lr, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001c16:	2d02      	cmp	r5, #2
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c1c:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 8001c20:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001c24:	f43f a951 	beq.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001c2a:	eb02 018e 	add.w	r1, r2, lr, lsl #2
            for (int i = 0; i < active_count - 1; i++)
 8001c2e:	2d03      	cmp	r5, #3
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c34:	f851 1c10 	ldr.w	r1, [r1, #-16]
 8001c38:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001c3c:	f43f a945 	beq.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c40:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8001c44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            for (int i = 0; i < active_count - 1; i++)
 8001c46:	2d05      	cmp	r5, #5
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c48:	f852 2c14 	ldr.w	r2, [r2, #-20]
 8001c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c50:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001c54:	f47f a939 	bne.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                strum_attenuation_[voice_idx] = kAttenuationLevels[att_idx];
 8001c58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001c5a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ed0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1598>)
 8001c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c60:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
            for (int i = 0; i < active_count - 1; i++)
 8001c64:	f7ff b931 	b.w	8000eca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x592>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	f47f ad76 	bne.w	800175a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe22>
                    env_state_[v] = ENV_RELEASE;
 8001c6e:	f04f 0804 	mov.w	r8, #4
 8001c72:	f884 806e 	strb.w	r8, [r4, #110]	@ 0x6e
 8001c76:	e570      	b.n	800175a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe22>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001c78:	f1b8 0f00 	cmp.w	r8, #0
 8001c7c:	f47f ad67 	bne.w	800174e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe16>
                    env_state_[v] = ENV_RELEASE;
 8001c80:	2704      	movs	r7, #4
 8001c82:	f884 706d 	strb.w	r7, [r4, #109]	@ 0x6d
 8001c86:	e562      	b.n	800174e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe16>
                if (env_state_[v] == ENV_SUSTAIN && !gate_[v])
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	f47f ad5b 	bne.w	8001744 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe0c>
                    env_state_[v] = ENV_RELEASE;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001c94:	e556      	b.n	8001744 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xe0c>
                chord_multipliers = minor_chord_multipliers_;
 8001c96:	488f      	ldr	r0, [pc, #572]	@ (8001ed4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x159c>)
 8001c98:	f7ff ba20 	b.w	80010dc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x7a4>
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8001c9c:	f890 c208 	ldrb.w	ip, [r0, #520]	@ 0x208
 8001ca0:	498d      	ldr	r1, [pc, #564]	@ (8001ed8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15a0>)
 8001ca2:	f1bc 0f00 	cmp.w	ip, #0
 8001ca6:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 8001f08 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15d0>
 8001caa:	4d8c      	ldr	r5, [pc, #560]	@ (8001edc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15a4>)
                in_base_freq_mode_ = false;
 8001cac:	7506      	strb	r6, [r0, #20]
        const float* scale_multipliers = mode_ ? minor_scale_multipliers_ : major_scale_multipliers_;
 8001cae:	bf18      	it	ne
 8001cb0:	4645      	movne	r5, r8
 8001cb2:	488b      	ldr	r0, [pc, #556]	@ (8001ee0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15a8>)
 8001cb4:	bf18      	it	ne
 8001cb6:	4608      	movne	r0, r1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8001cb8:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
 8001cbc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
        int chord_type = chord_types[current_chord_];
 8001cc0:	f855 8021 	ldr.w	r8, [r5, r1, lsl #2]
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8001cc4:	edd0 7a00 	vldr	s15, [r0]
        switch (chord_type) {
 8001cc8:	f1b8 0f01 	cmp.w	r8, #1
        float root_freq = base_frequency_ * scale_multipliers[current_chord_];
 8001ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
        switch (chord_type) {
 8001cd0:	f000 821e 	beq.w	8002110 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17d8>
 8001cd4:	4d83      	ldr	r5, [pc, #524]	@ (8001ee4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15ac>)
 8001cd6:	f8df 9234 	ldr.w	r9, [pc, #564]	@ 8001f0c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15d4>
 8001cda:	f1b8 0f02 	cmp.w	r8, #2
 8001cde:	bf08      	it	eq
 8001ce0:	46a9      	moveq	r9, r5
        target_freq_[0] = root_freq * chord_multipliers[0];
 8001ce2:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
        if (major7 && !minor7)
 8001ce6:	f082 0501 	eor.w	r5, r2, #1
        target_freq_[1] = root_freq * chord_multipliers[1];
 8001cea:	ed99 7a01 	vldr	s14, [r9, #4]
        if (major7 && !minor7)
 8001cee:	2a01      	cmp	r2, #1
 8001cf0:	9505      	str	r5, [sp, #20]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	ed84 7a18 	vstr	s14, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 8001cfa:	ed99 7a02 	vldr	s14, [r9, #8]
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
        if (major7 && !minor7)
 8001d06:	f000 819e 	beq.w	8002046 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x170e>
 8001d0a:	2f00      	cmp	r7, #0
 8001d0c:	f000 819b 	beq.w	8002046 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x170e>
            target_freq_[3] = root_freq * kMajor7Ratio;
 8001d10:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001ee8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15b0>
 8001d14:	ee67 7a87 	vmul.f32	s15, s15, s14
            if (strum_state_[s] != ENV_IDLE)
 8001d18:	f894 50fc 	ldrb.w	r5, [r4, #252]	@ 0xfc
 8001d1c:	f1b8 0f02 	cmp.w	r8, #2
            target_freq_[3] = root_freq * kMajor7Ratio;
 8001d20:	edc4 7a1a 	vstr	s15, [r4, #104]	@ 0x68
            if (strum_state_[s] != ENV_IDLE)
 8001d24:	9502      	str	r5, [sp, #8]
 8001d26:	f000 820b 	beq.w	8002140 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1808>
 8001d2a:	f1b8 0f01 	cmp.w	r8, #1
 8001d2e:	f000 8256 	beq.w	80021de <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x18a6>
 8001d32:	b12d      	cbz	r5, 8001d40 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1408>
                strum_target_[s] = note * (1 << oct);
 8001d34:	edd0 7a00 	vldr	s15, [r0]
 8001d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d3c:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001d40:	f894 50fd 	ldrb.w	r5, [r4, #253]	@ 0xfd
 8001d44:	9503      	str	r5, [sp, #12]
 8001d46:	b14d      	cbz	r5, 8001d5c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1424>
                strum_target_[s] = note * (1 << oct);
 8001d48:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001eec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15b4>
 8001d4c:	edd0 7a00 	vldr	s15, [r0]
 8001d50:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001d5c:	f894 50fe 	ldrb.w	r5, [r4, #254]	@ 0xfe
 8001d60:	9504      	str	r5, [sp, #16]
 8001d62:	b14d      	cbz	r5, 8001d78 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1440>
                strum_target_[s] = note * (1 << oct);
 8001d64:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001ef0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15b8>
 8001d68:	edd0 7a00 	vldr	s15, [r0]
 8001d6c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8001d78:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8001d7c:	f1bb 0f00 	cmp.w	fp, #0
 8001d80:	d007      	beq.n	8001d92 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x145a>
                strum_target_[s] = note * (1 << oct);
 8001d82:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8001d86:	edd0 7a00 	vldr	s15, [r0]
 8001d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8e:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8001d92:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 8001d96:	f1b9 0f00 	cmp.w	r9, #0
 8001d9a:	d007      	beq.n	8001dac <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1474>
                strum_target_[s] = note * (1 << oct);
 8001d9c:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8001da0:	edd0 7a00 	vldr	s15, [r0]
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8001dac:	f894 8101 	ldrb.w	r8, [r4, #257]	@ 0x101
 8001db0:	f1b8 0f00 	cmp.w	r8, #0
 8001db4:	f43f a955 	beq.w	8001062 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x72a>
                strum_target_[s] = note * (1 << oct);
 8001db8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001ef4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15bc>
 8001dbc:	edd0 7a00 	vldr	s15, [r0]
 8001dc0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc8:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 8001dcc:	f7ff b949 	b.w	8001062 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x72a>
        int active_count = 0;
 8001dd0:	469e      	mov	lr, r3
            if (strum_state_[s] != ENV_IDLE)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	e529      	b.n	800182a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xef2>
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	f7ff ba9f 	b.w	800131a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9e2>
                        { env_level_[v] = kSustain; env_state_[v] = ENV_SUSTAIN; }
 8001ddc:	4a36      	ldr	r2, [pc, #216]	@ (8001eb8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1580>)
 8001dde:	2303      	movs	r3, #3
 8001de0:	ed9f 9a36 	vldr	s18, [pc, #216]	@ 8001ebc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1584>
 8001de4:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8001de6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8001dea:	f7ff b82b 	b.w	8000e44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x50c>
                    env_level_[v] -= kDecayInc;
 8001dee:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001ef8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c0>
 8001df2:	ed9f 9a42 	vldr	s18, [pc, #264]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001df6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dfa:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001dfe:	edc4 7a1e 	vstr	s15, [r4, #120]	@ 0x78
 8001e02:	f7fe bfeb 	b.w	8000ddc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4a4>
                    env_level_[v] += kAttackInc;
 8001e06:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001f00 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c8>
 8001e0a:	ed9f 9a3c 	vldr	s18, [pc, #240]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e12:	ee27 9a89 	vmul.f32	s18, s15, s18
 8001e16:	edc4 7a1f 	vstr	s15, [r4, #124]	@ 0x7c
 8001e1a:	f7ff b813 	b.w	8000e44 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x50c>
                        { env_level_[v] = 1.0f; env_state_[v] = ENV_DECAY; }
 8001e1e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e22:	ed9f ba36 	vldr	s22, [pc, #216]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e26:	6723      	str	r3, [r4, #112]	@ 0x70
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8001e2e:	f7fe bf66 	b.w	8000cfe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3c6>
 8001e32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e36:	ed9f 9a31 	vldr	s18, [pc, #196]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e3a:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8001e42:	f7fe bfcb 	b.w	8000ddc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4a4>
 8001e46:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e4a:	ed9f ba2c 	vldr	s22, [pc, #176]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e4e:	6763      	str	r3, [r4, #116]	@ 0x74
 8001e50:	2302      	movs	r3, #2
 8001e52:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8001e56:	f7fe bf88 	b.w	8000d6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x432>
                    env_level_[v] -= kDecayInc;
 8001e5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001ef8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c0>
 8001e5e:	ed9f ba27 	vldr	s22, [pc, #156]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e66:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8001e6a:	edc4 7a1d 	vstr	s15, [r4, #116]	@ 0x74
 8001e6e:	f7fe bf7c 	b.w	8000d6a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x432>
 8001e72:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001ef8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c0>
 8001e76:	ed9f ba21 	vldr	s22, [pc, #132]	@ 8001efc <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15c4>
 8001e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e7e:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8001e82:	edc4 7a1c 	vstr	s15, [r4, #112]	@ 0x70
 8001e86:	f7fe bf3a 	b.w	8000cfe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3c6>
 8001e8a:	edd0 6a04 	vldr	s13, [r0, #16]
 8001e8e:	f7ff b8d2 	b.w	8001036 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x6fe>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001e92:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f04 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15cc>
 8001e96:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	f140 8133 	bpl.w	8002108 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17d0>
 8001ea2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8001ea6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8001eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 8001eae:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001eb2:	f7ff b82e 	b.w	8000f12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x5da>
 8001eb6:	bf00      	nop
 8001eb8:	3f333333 	.word	0x3f333333
 8001ebc:	3c656041 	.word	0x3c656041
 8001ec0:	3f334bc6 	.word	0x3f334bc6
 8001ec4:	40490fdb 	.word	0x40490fdb
 8001ec8:	3ea2f983 	.word	0x3ea2f983
 8001ecc:	0800a860 	.word	0x0800a860
 8001ed0:	3f666666 	.word	0x3f666666
 8001ed4:	0800a7cc 	.word	0x0800a7cc
 8001ed8:	0800a7ec 	.word	0x0800a7ec
 8001edc:	0800a79c 	.word	0x0800a79c
 8001ee0:	0800a80c 	.word	0x0800a80c
 8001ee4:	0800a7bc 	.word	0x0800a7bc
 8001ee8:	3ff1a1c2 	.word	0x3ff1a1c2
 8001eec:	3fa14517 	.word	0x3fa14517
 8001ef0:	3fbfc886 	.word	0x3fbfc886
 8001ef4:	40214517 	.word	0x40214517
 8001ef8:	39c49ba6 	.word	0x39c49ba6
 8001efc:	3ca3d70a 	.word	0x3ca3d70a
 8001f00:	3b4ccccd 	.word	0x3b4ccccd
 8001f04:	40c90fdb 	.word	0x40c90fdb
 8001f08:	0800a77c 	.word	0x0800a77c
 8001f0c:	0800a7dc 	.word	0x0800a7dc
 8001f10:	3f9837ef 	.word	0x3f9837ef
 8001f14:	3fb504f7 	.word	0x3fb504f7
 8001f18:	401837ef 	.word	0x401837ef
            if (strum_state_[s] != ENV_IDLE)
 8001f1c:	b12a      	cbz	r2, 8001f2a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15f2>
                strum_target_[s] = note * (1 << oct);
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f26:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 8001f2a:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8001f2e:	9203      	str	r2, [sp, #12]
 8001f30:	b14a      	cbz	r2, 8001f46 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x160e>
                strum_target_[s] = note * (1 << oct);
 8001f32:	ed5f 7a09 	vldr	s15, [pc, #-36]	@ 8001f10 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15d8>
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8001f46:	f894 20fe 	ldrb.w	r2, [r4, #254]	@ 0xfe
 8001f4a:	9204      	str	r2, [sp, #16]
 8001f4c:	b14a      	cbz	r2, 8001f62 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x162a>
                strum_target_[s] = note * (1 << oct);
 8001f4e:	ed5f 7a0f 	vldr	s15, [pc, #-60]	@ 8001f14 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15dc>
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5e:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8001f62:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 8001f66:	f1bb 0f00 	cmp.w	fp, #0
 8001f6a:	d007      	beq.n	8001f7c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1644>
                strum_target_[s] = note * (1 << oct);
 8001f6c:	ee76 7aa6 	vadd.f32	s15, s13, s13
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 8001f7c:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 8001f80:	f1b9 0f00 	cmp.w	r9, #0
 8001f84:	d007      	beq.n	8001f96 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x165e>
                strum_target_[s] = note * (1 << oct);
 8001f86:	ee76 7aa6 	vadd.f32	s15, s13, s13
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f92:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 8001f96:	f894 8101 	ldrb.w	r8, [r4, #257]	@ 0x101
 8001f9a:	f1b8 0f00 	cmp.w	r8, #0
 8001f9e:	f43f a9b2 	beq.w	8001306 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9ce>
                strum_target_[s] = note * (1 << oct);
 8001fa2:	ed5f 7a23 	vldr	s15, [pc, #-140]	@ 8001f18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x15e0>
 8001fa6:	ed93 7a00 	vldr	s14, [r3]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb2:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        for (int s = 0; s < kNumStrum; ++s)
 8001fb6:	f7ff b9a6 	b.w	8001306 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x9ce>
                switch (chord_type) {
 8001fba:	499f      	ldr	r1, [pc, #636]	@ (8002238 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1900>)
 8001fbc:	f7ff b91b 	b.w	80011f6 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x8be>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8001fc4:	f884 206f 	strb.w	r2, [r4, #111]	@ 0x6f
            if (env_state_[v] != ENV_IDLE)
 8001fc8:	f7fe bf55 	b.w	8000e76 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x53e>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8001fcc:	6723      	str	r3, [r4, #112]	@ 0x70
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
            if (env_state_[v] != ENV_IDLE)
 8001fd4:	f7ff bb79 	b.w	80016ca <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xd92>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8001fd8:	67a3      	str	r3, [r4, #120]	@ 0x78
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
            if (env_state_[v] != ENV_IDLE)
 8001fe0:	f7fe bf15 	b.w	8000e0e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4d6>
                        { env_level_[v] = 0.0f; env_state_[v] = ENV_IDLE; }
 8001fe4:	6763      	str	r3, [r4, #116]	@ 0x74
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
            if (env_state_[v] != ENV_IDLE)
 8001fec:	f7fe bed6 	b.w	8000d9c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x464>
 8001ff0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8001ff2:	f7ff ba48 	b.w	8001486 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xb4e>
            for (int i = 0; i < active_count - 1; i++)
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f7ff b9f2 	b.w	80013e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaa8>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e47b      	b.n	80018f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfc0>
 8002000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002002:	e4a2      	b.n	800194a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1012>
 8002004:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002008:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800200c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002010:	f7fe beee 	b.w	8000df0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4b8>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002014:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800223c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1904>
 8002018:	eef4 9ac7 	vcmpe.f32	s19, s14
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d579      	bpl.n	8002116 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17de>
 8002022:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
            out = tri * 2.0f - 1.0f;
 8002026:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800202a:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 800202e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002032:	f7fe bf11 	b.w	8000e58 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x520>
 8002036:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800203a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800203e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002042:	f7fe be9c 	b.w	8000d7e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x446>
        else if (minor7 && !major7)
 8002046:	2f01      	cmp	r7, #1
 8002048:	d075      	beq.n	8002136 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17fe>
 800204a:	2a00      	cmp	r2, #0
 800204c:	d073      	beq.n	8002136 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x17fe>
            target_freq_[3] = root_freq * kMinor7Ratio;
 800204e:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8002240 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1908>
 8002052:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (int s = 0; s < kNumStrum; ++s)
 8002056:	e65f      	b.n	8001d18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x13e0>
 8002058:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800205c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002060:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002064:	f7fe be55 	b.w	8000d12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3da>
            for (int i = 0; i < active_count - 1; i++)
 8002068:	2302      	movs	r3, #2
 800206a:	f7ff b9b9 	b.w	80013e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaa8>
            if (strum_state_[s] != ENV_IDLE)
 800206e:	b12a      	cbz	r2, 800207c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1744>
                strum_target_[s] = note * (1 << oct);
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002078:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 800207c:	f894 20fd 	ldrb.w	r2, [r4, #253]	@ 0xfd
 8002080:	9203      	str	r2, [sp, #12]
 8002082:	b14a      	cbz	r2, 8002098 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1760>
                strum_target_[s] = note * (1 << oct);
 8002084:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002244 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x190c>
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002094:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002098:	f894 20fe 	ldrb.w	r2, [r4, #254]	@ 0xfe
 800209c:	9204      	str	r2, [sp, #16]
 800209e:	b14a      	cbz	r2, 80020b4 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x177c>
                strum_target_[s] = note * (1 << oct);
 80020a0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002248 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1910>
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80020ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b0:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 80020b4:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 80020b8:	f1bb 0f00 	cmp.w	fp, #0
 80020bc:	d007      	beq.n	80020ce <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1796>
                strum_target_[s] = note * (1 << oct);
 80020be:	ee36 7aa6 	vadd.f32	s14, s13, s13
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ca:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80020ce:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 80020d2:	f1b9 0f00 	cmp.w	r9, #0
 80020d6:	f43f af5e 	beq.w	8001f96 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x165e>
                strum_target_[s] = note * (1 << oct);
 80020da:	ee36 7aa6 	vadd.f32	s14, s13, s13
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e6:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
 80020ea:	e754      	b.n	8001f96 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x165e>
            for (int i = 0; i < active_count - 1; i++)
 80020ec:	2302      	movs	r3, #2
 80020ee:	e403      	b.n	80018f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfc0>
 80020f0:	2303      	movs	r3, #3
 80020f2:	f7ff b975 	b.w	80013e0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xaa8>
        else
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 80020f6:	edd0 7a03 	vldr	s15, [r0, #12]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
        for (int s = 0; s < kNumStrum; ++s)
 80020fe:	f7ff b806 	b.w	800110e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x7d6>
            for (int i = 0; i < active_count - 1; i++)
 8002102:	2303      	movs	r3, #3
 8002104:	f7ff bbf8 	b.w	80018f8 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0xfc0>
 8002108:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800210c:	f7fe bf01 	b.w	8000f12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x5da>
                chord_multipliers = minor_chord_multipliers_;
 8002110:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 8002238 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1900>
 8002114:	e5e5      	b.n	8001ce2 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x13aa>
 8002116:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800211a:	f7fe be9d 	b.w	8000e58 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x520>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800211e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 8002122:	f7fe bdf6 	b.w	8000d12 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3da>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002126:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 800212a:	f7fe be28 	b.w	8000d7e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x446>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800212e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
            out = tri * 2.0f - 1.0f;
 8002132:	f7fe be5d 	b.w	8000df0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x4b8>
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 8002136:	ed99 7a03 	vldr	s14, [r9, #12]
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (int s = 0; s < kNumStrum; ++s)
 800213e:	e5eb      	b.n	8001d18 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x13e0>
            if (strum_state_[s] != ENV_IDLE)
 8002140:	b12d      	cbz	r5, 800214e <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1816>
                strum_target_[s] = note * (1 << oct);
 8002142:	edd0 7a00 	vldr	s15, [r0]
 8002146:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800214a:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 800214e:	f894 50fd 	ldrb.w	r5, [r4, #253]	@ 0xfd
 8002152:	9503      	str	r5, [sp, #12]
 8002154:	b14d      	cbz	r5, 800216a <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1832>
                strum_target_[s] = note * (1 << oct);
 8002156:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8002244 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x190c>
 800215a:	ed90 7a00 	vldr	s14, [r0]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002166:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 800216a:	f894 50fe 	ldrb.w	r5, [r4, #254]	@ 0xfe
 800216e:	9504      	str	r5, [sp, #16]
 8002170:	b14d      	cbz	r5, 8002186 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x184e>
                strum_target_[s] = note * (1 << oct);
 8002172:	eddf 7a36 	vldr	s15, [pc, #216]	@ 800224c <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1914>
 8002176:	ed90 7a00 	vldr	s14, [r0]
 800217a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
            if (strum_state_[s] != ENV_IDLE)
 8002186:	f894 b0ff 	ldrb.w	fp, [r4, #255]	@ 0xff
 800218a:	f1bb 0f00 	cmp.w	fp, #0
 800218e:	d007      	beq.n	80021a0 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1868>
                strum_target_[s] = note * (1 << oct);
 8002190:	ee76 7aa6 	vadd.f32	s15, s13, s13
 8002194:	ed90 7a00 	vldr	s14, [r0]
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	edc4 7a3c 	vstr	s15, [r4, #240]	@ 0xf0
            if (strum_state_[s] != ENV_IDLE)
 80021a0:	f894 9100 	ldrb.w	r9, [r4, #256]	@ 0x100
 80021a4:	f1b9 0f00 	cmp.w	r9, #0
 80021a8:	d007      	beq.n	80021ba <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1882>
                strum_target_[s] = note * (1 << oct);
 80021aa:	ee76 7aa6 	vadd.f32	s15, s13, s13
 80021ae:	ed90 7a00 	vldr	s14, [r0]
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b6:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4
            if (strum_state_[s] != ENV_IDLE)
 80021ba:	f894 8101 	ldrb.w	r8, [r4, #257]	@ 0x101
 80021be:	f1b8 0f00 	cmp.w	r8, #0
 80021c2:	f43e af4e 	beq.w	8001062 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x72a>
                strum_target_[s] = note * (1 << oct);
 80021c6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002250 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1918>
 80021ca:	edd0 7a00 	vldr	s15, [r0]
 80021ce:	ee26 7a87 	vmul.f32	s14, s13, s14
 80021d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d6:	edc4 7a3e 	vstr	s15, [r4, #248]	@ 0xf8
        if (!in_base_freq_mode_) {
 80021da:	f7fe bf42 	b.w	8001062 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x72a>
            if (strum_state_[s] != ENV_IDLE)
 80021de:	b12d      	cbz	r5, 80021ec <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x18b4>
                strum_target_[s] = note * (1 << oct);
 80021e0:	edd0 7a00 	vldr	s15, [r0]
 80021e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021e8:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
            if (strum_state_[s] != ENV_IDLE)
 80021ec:	f894 50fd 	ldrb.w	r5, [r4, #253]	@ 0xfd
 80021f0:	9503      	str	r5, [sp, #12]
 80021f2:	b14d      	cbz	r5, 8002208 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x18d0>
                strum_target_[s] = note * (1 << oct);
 80021f4:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8002244 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x190c>
 80021f8:	ed90 7a00 	vldr	s14, [r0]
 80021fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002204:	edc4 7a3a 	vstr	s15, [r4, #232]	@ 0xe8
            if (strum_state_[s] != ENV_IDLE)
 8002208:	f894 50fe 	ldrb.w	r5, [r4, #254]	@ 0xfe
 800220c:	9504      	str	r5, [sp, #16]
 800220e:	2d00      	cmp	r5, #0
 8002210:	d0b9      	beq.n	8002186 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x184e>
                strum_target_[s] = note * (1 << oct);
 8002212:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8002248 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x1910>
 8002216:	ed90 7a00 	vldr	s14, [r0]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002222:	edc4 7a3b 	vstr	s15, [r4, #236]	@ 0xec
 8002226:	e7ae      	b.n	8002186 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x184e>
 8002228:	ed94 ba1c 	vldr	s22, [r4, #112]	@ 0x70
 800222c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8002254 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x191c>
 8002230:	ee2b ba27 	vmul.f32	s22, s22, s15
 8002234:	f7fe bd63 	b.w	8000cfe <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)+0x3c6>
 8002238:	0800a7cc 	.word	0x0800a7cc
 800223c:	40c90fdb 	.word	0x40c90fdb
 8002240:	3fe411ed 	.word	0x3fe411ed
 8002244:	3f9837ef 	.word	0x3f9837ef
 8002248:	3fbfc886 	.word	0x3fbfc886
 800224c:	3fb504f7 	.word	0x3fb504f7
 8002250:	401837ef 	.word	0x401837ef
 8002254:	3ca3d70a 	.word	0x3ca3d70a

08002258 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
            // The actual startup transition happens in main() after system wakeup
        }
    }

    const AudioOutput Process(const AudioInput &audio_in, const PotInput &pot)
    {
 8002258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        ScopedProfilingPin<PROFILE_PROCESS> profile;
        io_.human.in.pot = pot;
 800225c:	4f84      	ldr	r7, [pc, #528]	@ (8002470 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x218>)
 800225e:	468e      	mov	lr, r1
    {
 8002260:	460d      	mov	r5, r1

        AudioOutput audio_out = {};
 8002262:	2400      	movs	r4, #0
        io_.human.in.pot = pot;
 8002264:	46bc      	mov	ip, r7
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8002266:	f8df 8244 	ldr.w	r8, [pc, #580]	@ 80024ac <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x254>
 800226a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    {
 800226e:	ed2d 8b02 	vpush	{d8}
        io_.human.in.pot = pot;
 8002272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    {
 8002276:	b08c      	sub	sp, #48	@ 0x30
        io_.human.in.pot = pot;
 8002278:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
        AudioOutput audio_out = {};
 800227c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002280:	9408      	str	r4, [sp, #32]
 8002282:	ae06      	add	r6, sp, #24
        io_.human.in.pot = pot;
 8002284:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002288:	f898 3000 	ldrb.w	r3, [r8]
 800228c:	f3bf 8f5b 	dmb	ish
        State cur = state_.load(std::memory_order_acquire);

        if (cur == STATE_SYNTH)
 8002290:	2b01      	cmp	r3, #1
 8002292:	d013      	beq.n	80022bc <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x64>
                audio_out[AUDIO_OUT_LINE],
                synth_buttons,
                chord_pot, strum, hold,
                mode, seventh, minor_seventh);
        }
        else if (cur == STATE_STARTUP || cur == STATE_ENDING)
 8002294:	b2da      	uxtb	r2, r3
 8002296:	3a0b      	subs	r2, #11
 8002298:	2a01      	cmp	r2, #1
 800229a:	d93c      	bls.n	8002316 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xbe>
 800229c:	ad09      	add	r5, sp, #36	@ 0x24
        {
            // Process jingle audio
            jingle_engine_.Process(audio_out[AUDIO_OUT_LINE]);
        }

        return audio_out;
 800229e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80022a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    }
 80022a6:	eddd 0a0a 	vldr	s1, [sp, #40]	@ 0x28
 80022aa:	ed9d 1a0b 	vldr	s2, [sp, #44]	@ 0x2c
 80022ae:	ed9d 0a09 	vldr	s0, [sp, #36]	@ 0x24
 80022b2:	b00c      	add	sp, #48	@ 0x30
 80022b4:	ecbd 8b02 	vpop	{d8}
 80022b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return history_ == (1 << kShift);
    }

    bool level(void)
    {
        return history_ & 1;
 80022bc:	4b6d      	ldr	r3, [pc, #436]	@ (8002474 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x21c>)
            synth_engine_.Process(
 80022be:	ed95 1a00 	vldr	s2, [r5]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	edd5 0a01 	vldr	s1, [r5, #4]
 80022c8:	f002 0201 	and.w	r2, r2, #1
 80022cc:	ed95 0a04 	vldr	s0, [r5, #16]
 80022d0:	ad09      	add	r5, sp, #36	@ 0x24
 80022d2:	4869      	ldr	r0, [pc, #420]	@ (8002478 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x220>)
                synth_buttons[i] = buttons[i].is_high();
 80022d4:	f362 0407 	bfi	r4, r2, #0, #8
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	f002 0201 	and.w	r2, r2, #1
 80022de:	f362 240f 	bfi	r4, r2, #8, #8
 80022e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e6:	f002 0201 	and.w	r2, r2, #1
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	f362 4417 	bfi	r4, r2, #16, #8
 80022f2:	4a62      	ldr	r2, [pc, #392]	@ (800247c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x224>)
            synth_engine_.Process(
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80022fc:	f002 0201 	and.w	r2, r2, #1
 8002300:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002304:	9101      	str	r1, [sp, #4]
 8002306:	4631      	mov	r1, r6
                synth_buttons[i] = buttons[i].is_high();
 8002308:	f362 641f 	bfi	r4, r2, #24, #8
            synth_engine_.Process(
 800230c:	462a      	mov	r2, r5
                synth_buttons[i] = buttons[i].is_high();
 800230e:	9409      	str	r4, [sp, #36]	@ 0x24
            synth_engine_.Process(
 8002310:	f7fe fb12 	bl	8000938 <recorder::SynthEngine::Process(float (&) [3], bool const*, float, float, float, bool, bool, bool)>
 8002314:	e7c3      	b.n	800229e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46>
        }

        // Process audio samples just like SynthEngine
        void Process(float (&block)[kAudioOSFactor])
        {
            if (!is_active_)
 8002316:	4f5a      	ldr	r7, [pc, #360]	@ (8002480 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x228>)
 8002318:	7b3b      	ldrb	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d05a      	beq.n	80023d4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x17c>
                }
                return;
            }

            // Update note timer and advance to next note if needed
            note_timer_++;
 800231e:	697d      	ldr	r5, [r7, #20]
 8002320:	3501      	adds	r5, #1
            if (note_timer_ >= kNoteDuration)
 8002322:	f5b5 6ffa 	cmp.w	r5, #2000	@ 0x7d0
            note_timer_++;
 8002326:	617d      	str	r5, [r7, #20]
            if (note_timer_ >= kNoteDuration)
 8002328:	f2c0 8087 	blt.w	800243a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1e2>
            {
                note_timer_ = 0;
                current_note_++;
 800232c:	693b      	ldr	r3, [r7, #16]

                // Check if we've reached the end of the jingle
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 800232e:	7b78      	ldrb	r0, [r7, #13]
                current_note_++;
 8002330:	3301      	adds	r3, #1
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 8002332:	4a54      	ldr	r2, [pc, #336]	@ (8002484 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x22c>)
 8002334:	4954      	ldr	r1, [pc, #336]	@ (8002488 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x230>)
                note_timer_ = 0;
 8002336:	617c      	str	r4, [r7, #20]
                const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
 8002338:	2800      	cmp	r0, #0
 800233a:	bf18      	it	ne
 800233c:	460a      	movne	r2, r1
                int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

                if (current_note_ >= jingle_length)
 800233e:	2b03      	cmp	r3, #3
                current_note_++;
 8002340:	613b      	str	r3, [r7, #16]
                if (current_note_ >= jingle_length)
 8002342:	dc4d      	bgt.n	80023e0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x188>
            const float *current_jingle = is_startup_ ? startup_jingle_ : ending_jingle_;
            int jingle_length = is_startup_ ? kStartupJingleLength : kEndingJingleLength;

            if (current_note_ < jingle_length)
            {
                voice_.SetFrequency(current_jingle[current_note_]);
 8002344:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        phase_inc_ = freq * kPhaseFactor;
 8002348:	eddf 7a50 	vldr	s15, [pc, #320]	@ 800248c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x234>
            }
            else
            {
                voice_.SetFrequency(0.0f);
            }
        }
 800234c:	4625      	mov	r5, r4
 800234e:	edd2 8a00 	vldr	s17, [r2]
 8002352:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8002356:	edc7 8a01 	vstr	s17, [r7, #4]
        if (waveform_ == Waveform::SINE) {
 800235a:	68bb      	ldr	r3, [r7, #8]
            out = sinf(phase_);
 800235c:	ed97 8a00 	vldr	s16, [r7]
        if (waveform_ == Waveform::SINE) {
 8002360:	2b00      	cmp	r3, #0
 8002362:	d154      	bne.n	800240e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1b6>
            out = sinf(phase_);
 8002364:	eeb0 0a48 	vmov.f32	s0, s16
 8002368:	f006 fae6 	bl	8008938 <sinf>
 800236c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8002490 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x238>
 8002370:	ee20 0a27 	vmul.f32	s0, s0, s15
        phase_ += phase_inc_;
 8002374:	ee78 7a28 	vadd.f32	s15, s16, s17
        if (phase_ >= kTwoPi) phase_ -= kTwoPi;
 8002378:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002494 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x23c>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	bfa8      	it	ge
 8002386:	ee77 7ac7 	vsubge.f32	s15, s15, s14
            if (note_timer_ < kFadeInSamples)
 800238a:	f5b5 7fa0 	cmp.w	r5, #320	@ 0x140
        phase_ += phase_inc_;
 800238e:	edc7 7a00 	vstr	s15, [r7]
 8002392:	da2c      	bge.n	80023ee <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x196>
                envelope = float(note_timer_) / float(kFadeInSamples);
 8002394:	ee07 5a90 	vmov	s15, r5
 8002398:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002498 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x240>
 800239c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 80023a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023a8:	f006 fce0 	bl	8008d6c <tanhf>
      if (__b < __a)
 80023ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
            sample *= kAudioOSFactor * kAudioOutputLevel;
 80023b0:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80023b4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800249c <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x244>
 80023b8:	ad09      	add	r5, sp, #36	@ 0x24
 80023ba:	fec0 7a67 	vminnm.f32	s15, s0, s15
 80023be:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80023c2:	ee67 7a87 	vmul.f32	s15, s15, s14
                block[i] = sample;
 80023c6:	edcd 7a06 	vstr	s15, [sp, #24]
 80023ca:	edcd 7a07 	vstr	s15, [sp, #28]
 80023ce:	edcd 7a08 	vstr	s15, [sp, #32]
            for (uint32_t i = 0; i < kAudioOSFactor; ++i)
 80023d2:	e764      	b.n	800229e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46>
                    block[i] = 0.0f;
 80023d4:	2300      	movs	r3, #0
 80023d6:	ad09      	add	r5, sp, #36	@ 0x24
 80023d8:	9306      	str	r3, [sp, #24]
 80023da:	9307      	str	r3, [sp, #28]
 80023dc:	9308      	str	r3, [sp, #32]
                for (uint32_t i = 0; i < kAudioOSFactor; ++i)
 80023de:	e75e      	b.n	800229e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46>
                        block[i] = 0.0f;
 80023e0:	2300      	movs	r3, #0
 80023e2:	ad09      	add	r5, sp, #36	@ 0x24
                    is_active_ = false;
 80023e4:	733c      	strb	r4, [r7, #12]
                        block[i] = 0.0f;
 80023e6:	9306      	str	r3, [sp, #24]
 80023e8:	9307      	str	r3, [sp, #28]
 80023ea:	9308      	str	r3, [sp, #32]
                    for (uint32_t i = 0; i < kAudioOSFactor; ++i)
 80023ec:	e757      	b.n	800229e <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x46>
            else if (note_timer_ > kNoteDuration - kFadeOutSamples)
 80023ee:	f5b5 6fd2 	cmp.w	r5, #1680	@ 0x690
 80023f2:	ddd9      	ble.n	80023a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x150>
                envelope = float(kNoteDuration - note_timer_) / float(kFadeOutSamples);
 80023f4:	f5c5 63fa 	rsb	r3, r5, #2000	@ 0x7d0
 80023f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002498 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x240>
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ee67 7a87 	vmul.f32	s15, s15, s14
            sample = tanh(1.5 * sample);
 8002408:	ee20 0a27 	vmul.f32	s0, s0, s15
 800240c:	e7cc      	b.n	80023a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x150>
                      ? phi
 800240e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80024a0 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x248>
            float phi = phase_ * kInvPi;
 8002412:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80024a4 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x24c>
                      ? phi
 8002416:	eeb4 8ac7 	vcmpe.f32	s16, s14
            float phi = phase_ * kInvPi;
 800241a:	ee68 7a27 	vmul.f32	s15, s16, s15
                      ? phi
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	da0d      	bge.n	8002440 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1e8>
            out = tri * 2.0f - 1.0f;
 8002424:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002428:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002490 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x238>
 800242c:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002430:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8002434:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002438:	e79c      	b.n	8002374 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11c>
        phase_ += phase_inc_;
 800243a:	edd7 8a01 	vldr	s17, [r7, #4]
 800243e:	e78c      	b.n	800235a <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x102>
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 8002440:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002494 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x23c>
 8002444:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	d50c      	bpl.n	8002468 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x210>
 800244e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002452:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002490 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x238>
            out = tri * 2.0f - 1.0f;
 8002456:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
                      : (phi < 2.0f ? 2.0f - phi : 0.0f);
 800245a:	ee77 7a67 	vsub.f32	s15, s14, s15
            out = tri * 2.0f - 1.0f;
 800245e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8002462:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002466:	e785      	b.n	8002374 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11c>
 8002468:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80024a8 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x250>
 800246c:	e782      	b.n	8002374 <recorder::Process(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11c>
 800246e:	bf00      	nop
 8002470:	20000550 	.word	0x20000550
 8002474:	200108ec 	.word	0x200108ec
 8002478:	20010924 	.word	0x20010924
 800247c:	200108e0 	.word	0x200108e0
 8002480:	2001090c 	.word	0x2001090c
 8002484:	0800a75c 	.word	0x0800a75c
 8002488:	0800a76c 	.word	0x0800a76c
 800248c:	39cde32e 	.word	0x39cde32e
 8002490:	3d75c28f 	.word	0x3d75c28f
 8002494:	40c90fdb 	.word	0x40c90fdb
 8002498:	3b4ccccd 	.word	0x3b4ccccd
 800249c:	40366666 	.word	0x40366666
 80024a0:	40490fdb 	.word	0x40490fdb
 80024a4:	3ea2f983 	.word	0x3ea2f983
 80024a8:	bd75c28f 	.word	0xbd75c28f
 80024ac:	200108e8 	.word	0x200108e8

080024b0 <recorder::Transition(recorder::State)>:
    {
 80024b0:	b510      	push	{r4, lr}
 80024b2:	4604      	mov	r4, r0
        printf("State: ");
 80024b4:	4823      	ldr	r0, [pc, #140]	@ (8002544 <recorder::Transition(recorder::State)+0x94>)
 80024b6:	f006 ffa1 	bl	80093fc <iprintf>
        switch (new_state)
 80024ba:	2c0c      	cmp	r4, #12
 80024bc:	d80b      	bhi.n	80024d6 <recorder::Transition(recorder::State)+0x26>
 80024be:	e8df f004 	tbb	[pc, r4]
 80024c2:	1915      	.short	0x1915
 80024c4:	2925211d 	.word	0x2925211d
 80024c8:	3935312d 	.word	0x3935312d
 80024cc:	073d      	.short	0x073d
 80024ce:	11          	.byte	0x11
 80024cf:	00          	.byte	0x00
            printf("STARTUP\n");
 80024d0:	481d      	ldr	r0, [pc, #116]	@ (8002548 <recorder::Transition(recorder::State)+0x98>)
 80024d2:	f006 fffb 	bl	80094cc <puts>
	__atomic_store(std::__addressof(_M_i),
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <recorder::Transition(recorder::State)+0x9c>)
 80024d8:	f3bf 8f5b 	dmb	ish
 80024dc:	701c      	strb	r4, [r3, #0]
 80024de:	f3bf 8f5b 	dmb	ish
    }
 80024e2:	bd10      	pop	{r4, pc}
            printf("ENDING\n");
 80024e4:	481a      	ldr	r0, [pc, #104]	@ (8002550 <recorder::Transition(recorder::State)+0xa0>)
 80024e6:	f006 fff1 	bl	80094cc <puts>
            break;
 80024ea:	e7f4      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("IDLE\n");
 80024ec:	4819      	ldr	r0, [pc, #100]	@ (8002554 <recorder::Transition(recorder::State)+0xa4>)
 80024ee:	f006 ffed 	bl	80094cc <puts>
            break;
 80024f2:	e7f0      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("SYNTH\n");
 80024f4:	4818      	ldr	r0, [pc, #96]	@ (8002558 <recorder::Transition(recorder::State)+0xa8>)
 80024f6:	f006 ffe9 	bl	80094cc <puts>
            break;
 80024fa:	e7ec      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("RECORD\n");
 80024fc:	4817      	ldr	r0, [pc, #92]	@ (800255c <recorder::Transition(recorder::State)+0xac>)
 80024fe:	f006 ffe5 	bl	80094cc <puts>
            break;
 8002502:	e7e8      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("PLAY\n");
 8002504:	4816      	ldr	r0, [pc, #88]	@ (8002560 <recorder::Transition(recorder::State)+0xb0>)
 8002506:	f006 ffe1 	bl	80094cc <puts>
            break;
 800250a:	e7e4      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("STOP\n");
 800250c:	4815      	ldr	r0, [pc, #84]	@ (8002564 <recorder::Transition(recorder::State)+0xb4>)
 800250e:	f006 ffdd 	bl	80094cc <puts>
            break;
 8002512:	e7e0      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("SAVE\n");
 8002514:	4814      	ldr	r0, [pc, #80]	@ (8002568 <recorder::Transition(recorder::State)+0xb8>)
 8002516:	f006 ffd9 	bl	80094cc <puts>
            break;
 800251a:	e7dc      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("ERASE\n");
 800251c:	4813      	ldr	r0, [pc, #76]	@ (800256c <recorder::Transition(recorder::State)+0xbc>)
 800251e:	f006 ffd5 	bl	80094cc <puts>
            break;
 8002522:	e7d8      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("BEGIN_WRITE\n");
 8002524:	4812      	ldr	r0, [pc, #72]	@ (8002570 <recorder::Transition(recorder::State)+0xc0>)
 8002526:	f006 ffd1 	bl	80094cc <puts>
            break;
 800252a:	e7d4      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("WRITE\n");
 800252c:	4811      	ldr	r0, [pc, #68]	@ (8002574 <recorder::Transition(recorder::State)+0xc4>)
 800252e:	f006 ffcd 	bl	80094cc <puts>
            break;
 8002532:	e7d0      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("COMMIT\n");
 8002534:	4810      	ldr	r0, [pc, #64]	@ (8002578 <recorder::Transition(recorder::State)+0xc8>)
 8002536:	f006 ffc9 	bl	80094cc <puts>
            break;
 800253a:	e7cc      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
            printf("STANDBY\n");
 800253c:	480f      	ldr	r0, [pc, #60]	@ (800257c <recorder::Transition(recorder::State)+0xcc>)
 800253e:	f006 ffc5 	bl	80094cc <puts>
            break;
 8002542:	e7c8      	b.n	80024d6 <recorder::Transition(recorder::State)+0x26>
 8002544:	0800a4d4 	.word	0x0800a4d4
 8002548:	0800a538 	.word	0x0800a538
 800254c:	200108e8 	.word	0x200108e8
 8002550:	0800a540 	.word	0x0800a540
 8002554:	0800a4dc 	.word	0x0800a4dc
 8002558:	0800a4e4 	.word	0x0800a4e4
 800255c:	0800a4ec 	.word	0x0800a4ec
 8002560:	0800a4f4 	.word	0x0800a4f4
 8002564:	0800a4fc 	.word	0x0800a4fc
 8002568:	0800a504 	.word	0x0800a504
 800256c:	0800a50c 	.word	0x0800a50c
 8002570:	0800a514 	.word	0x0800a514
 8002574:	0800a520 	.word	0x0800a520
 8002578:	0800a528 	.word	0x0800a528
 800257c:	0800a530 	.word	0x0800a530

08002580 <recorder::StateMachine(bool)>:
    }

    uint32_t Read(void)
    {
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002580:	4bba      	ldr	r3, [pc, #744]	@ (800286c <recorder::StateMachine(bool)+0x2ec>)
 8002582:	e9d3 2100 	ldrd	r2, r1, [r3]
    {
 8002586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800258a:	6912      	ldr	r2, [r2, #16]
 800258c:	4682      	mov	sl, r0

        if (invert_)
 800258e:	7a1c      	ldrb	r4, [r3, #8]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002590:	40ca      	lsrs	r2, r1
        if (invert_)
 8002592:	4054      	eors	r4, r2
        state_ = initial_state;
    }

    T Process(T in)
    {
        if (in != history_)
 8002594:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
    {
        for (uint32_t i = 0; i < NUM_SWITCHES; i++)
        {
            if (kEnableReverse || i != SWITCH_REVERSE)
            {
                in.sw[i] = db_[i].Process(sw_[i].Read());
 8002598:	f004 0401 	and.w	r4, r4, #1
 800259c:	42a2      	cmp	r2, r4
 800259e:	f000 824e 	beq.w	8002a3e <recorder::StateMachine(bool)+0x4be>
        {
            count_ = 0;
 80025a2:	2200      	movs	r2, #0
                state_ = in;
            }
        }

        history_ = in;
        return state_;
 80025a4:	f893 908d 	ldrb.w	r9, [r3, #141]	@ 0x8d
            count_ = 0;
 80025a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80025ac:	7d19      	ldrb	r1, [r3, #20]
 80025ae:	4ab0      	ldr	r2, [pc, #704]	@ (8002870 <recorder::StateMachine(bool)+0x2f0>)
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80025b0:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 80025b4:	692d      	ldr	r5, [r5, #16]
        history_ = in;
 80025b6:	f883 408c 	strb.w	r4, [r3, #140]	@ 0x8c
 80025ba:	40f5      	lsrs	r5, r6
        if (in != history_)
 80025bc:	f893 4098 	ldrb.w	r4, [r3, #152]	@ 0x98
 80025c0:	f882 9020 	strb.w	r9, [r2, #32]
        if (invert_)
 80025c4:	4069      	eors	r1, r5
 80025c6:	f001 0101 	and.w	r1, r1, #1
 80025ca:	428c      	cmp	r4, r1
 80025cc:	f000 8224 	beq.w	8002a18 <recorder::StateMachine(bool)+0x498>
            count_ = 0;
 80025d0:	2400      	movs	r4, #0
 80025d2:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
        return state_;
 80025d6:	f893 4099 	ldrb.w	r4, [r3, #153]	@ 0x99
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80025da:	699e      	ldr	r6, [r3, #24]
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80025dc:	69dd      	ldr	r5, [r3, #28]
 80025de:	f882 4021 	strb.w	r4, [r2, #33]	@ 0x21
 80025e2:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 80025e4:	f883 1098 	strb.w	r1, [r3, #152]	@ 0x98
 80025e8:	40ec      	lsrs	r4, r5
        if (invert_)
 80025ea:	f893 1020 	ldrb.w	r1, [r3, #32]
 80025ee:	4061      	eors	r1, r4
        if (in != history_)
 80025f0:	f893 40a4 	ldrb.w	r4, [r3, #164]	@ 0xa4
 80025f4:	f001 0101 	and.w	r1, r1, #1
 80025f8:	428c      	cmp	r4, r1
 80025fa:	f000 81fa 	beq.w	80029f2 <recorder::StateMachine(bool)+0x472>
            count_ = 0;
 80025fe:	2400      	movs	r4, #0
 8002600:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
        return state_;
 8002604:	f893 40a5 	ldrb.w	r4, [r3, #165]	@ 0xa5
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8002608:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 800260a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800260c:	f882 4022 	strb.w	r4, [r2, #34]	@ 0x22
 8002610:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 8002612:	f883 10a4 	strb.w	r1, [r3, #164]	@ 0xa4
 8002616:	40ec      	lsrs	r4, r5
        if (invert_)
 8002618:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 800261c:	4061      	eors	r1, r4
        if (in != history_)
 800261e:	f893 40b0 	ldrb.w	r4, [r3, #176]	@ 0xb0
 8002622:	f001 0101 	and.w	r1, r1, #1
 8002626:	428c      	cmp	r4, r1
 8002628:	f000 81d0 	beq.w	80029cc <recorder::StateMachine(bool)+0x44c>
            count_ = 0;
 800262c:	2400      	movs	r4, #0
 800262e:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
        return state_;
 8002632:	f893 40b1 	ldrb.w	r4, [r3, #177]	@ 0xb1
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8002636:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002638:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800263a:	f882 4023 	strb.w	r4, [r2, #35]	@ 0x23
 800263e:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 8002640:	f883 10b0 	strb.w	r1, [r3, #176]	@ 0xb0
 8002644:	40ec      	lsrs	r4, r5
        if (invert_)
 8002646:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800264a:	4061      	eors	r1, r4
        if (in != history_)
 800264c:	f893 40bc 	ldrb.w	r4, [r3, #188]	@ 0xbc
 8002650:	f001 0101 	and.w	r1, r1, #1
 8002654:	428c      	cmp	r4, r1
 8002656:	f000 81a6 	beq.w	80029a6 <recorder::StateMachine(bool)+0x426>
            count_ = 0;
 800265a:	2400      	movs	r4, #0
 800265c:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
        return state_;
 8002660:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8002664:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002666:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8002668:	f882 4024 	strb.w	r4, [r2, #36]	@ 0x24
 800266c:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 800266e:	f883 10bc 	strb.w	r1, [r3, #188]	@ 0xbc
 8002672:	40ec      	lsrs	r4, r5
        if (invert_)
 8002674:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8002678:	4061      	eors	r1, r4
        if (in != history_)
 800267a:	f893 40c8 	ldrb.w	r4, [r3, #200]	@ 0xc8
 800267e:	f001 0101 	and.w	r1, r1, #1
 8002682:	428c      	cmp	r4, r1
 8002684:	f000 817c 	beq.w	8002980 <recorder::StateMachine(bool)+0x400>
            count_ = 0;
 8002688:	2400      	movs	r4, #0
 800268a:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
        return state_;
 800268e:	f893 40c9 	ldrb.w	r4, [r3, #201]	@ 0xc9
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 8002692:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002694:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8002696:	f882 4025 	strb.w	r4, [r2, #37]	@ 0x25
 800269a:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 800269c:	f883 10c8 	strb.w	r1, [r3, #200]	@ 0xc8
 80026a0:	40ec      	lsrs	r4, r5
        if (invert_)
 80026a2:	f893 1050 	ldrb.w	r1, [r3, #80]	@ 0x50
 80026a6:	4061      	eors	r1, r4
        if (in != history_)
 80026a8:	f893 40d4 	ldrb.w	r4, [r3, #212]	@ 0xd4
 80026ac:	f001 0101 	and.w	r1, r1, #1
 80026b0:	428c      	cmp	r4, r1
 80026b2:	f000 8152 	beq.w	800295a <recorder::StateMachine(bool)+0x3da>
            count_ = 0;
 80026b6:	2400      	movs	r4, #0
 80026b8:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
        return state_;
 80026bc:	f893 40d5 	ldrb.w	r4, [r3, #213]	@ 0xd5
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80026c0:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80026c2:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80026c4:	f882 4026 	strb.w	r4, [r2, #38]	@ 0x26
 80026c8:	6934      	ldr	r4, [r6, #16]
        history_ = in;
 80026ca:	f883 10d4 	strb.w	r1, [r3, #212]	@ 0xd4
 80026ce:	40ec      	lsrs	r4, r5
        if (invert_)
 80026d0:	f893 105c 	ldrb.w	r1, [r3, #92]	@ 0x5c
 80026d4:	4061      	eors	r1, r4
        if (in != history_)
 80026d6:	f893 40e0 	ldrb.w	r4, [r3, #224]	@ 0xe0
 80026da:	f001 0101 	and.w	r1, r1, #1
 80026de:	428c      	cmp	r4, r1
 80026e0:	f000 8128 	beq.w	8002934 <recorder::StateMachine(bool)+0x3b4>
            count_ = 0;
 80026e4:	2400      	movs	r4, #0
 80026e6:	f8c3 40dc 	str.w	r4, [r3, #220]	@ 0xdc
        return state_;
 80026ea:	f893 40e1 	ldrb.w	r4, [r3, #225]	@ 0xe1
        return reinterpret_cast<GPIO_TypeDef*>(gpio_base);
 80026ee:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
        history_ = in;
 80026f0:	f883 10e0 	strb.w	r1, [r3, #224]	@ 0xe0
 80026f4:	f882 4027 	strb.w	r4, [r2, #39]	@ 0x27
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 80026f8:	6929      	ldr	r1, [r5, #16]
 80026fa:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
        if (invert_)
 80026fc:	f893 c068 	ldrb.w	ip, [r3, #104]	@ 0x68
        uint32_t pin = (gpio_struct(gpio_base_)->IDR >> pin_number_) & 1;
 8002700:	40e1      	lsrs	r1, r4
        if (invert_)
 8002702:	ea8c 0c01 	eor.w	ip, ip, r1
        if (in != history_)
 8002706:	f893 10ec 	ldrb.w	r1, [r3, #236]	@ 0xec
 800270a:	f00c 0c01 	and.w	ip, ip, #1
 800270e:	4561      	cmp	r1, ip
 8002710:	f000 80fd 	beq.w	800290e <recorder::StateMachine(bool)+0x38e>
            count_ = 0;
 8002714:	2100      	movs	r1, #0
        return state_;
 8002716:	f893 60ed 	ldrb.w	r6, [r3, #237]	@ 0xed
            count_ = 0;
 800271a:	f8c3 10e8 	str.w	r1, [r3, #232]	@ 0xe8
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 800271e:	4c55      	ldr	r4, [pc, #340]	@ (8002874 <recorder::StateMachine(bool)+0x2f4>)
            }
            else
            {
                in.sw[i] = false;
 8002720:	2500      	movs	r5, #0
        history_ = in;
 8002722:	f883 c0ec 	strb.w	ip, [r3, #236]	@ 0xec
 8002726:	7823      	ldrb	r3, [r4, #0]
        history_ = (history_ << kShift) | level;
 8002728:	4953      	ldr	r1, [pc, #332]	@ (8002878 <recorder::StateMachine(bool)+0x2f8>)
 800272a:	4413      	add	r3, r2
                in.sw[i] = db_[i].Process(sw_[i].Read());
 800272c:	f882 6028 	strb.w	r6, [r2, #40]	@ 0x28
                in.sw[i] = false;
 8002730:	f882 5029 	strb.w	r5, [r2, #41]	@ 0x29
 8002734:	4f51      	ldr	r7, [pc, #324]	@ (800287c <recorder::StateMachine(bool)+0x2fc>)
            }
        }

        for (uint32_t i = 0; i < NUM_DETECTS; i++)
        {
            in.detect[i] = kEnableLineIn &&
 8002736:	f882 502a 	strb.w	r5, [r2, #42]	@ 0x2a
 800273a:	f893 5020 	ldrb.w	r5, [r3, #32]
 800273e:	680b      	ldr	r3, [r1, #0]
 8002740:	7866      	ldrb	r6, [r4, #1]
 8002742:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4416      	add	r6, r2
        float strum_pot = io_.human.in.pot[POT_2];
 800274a:	edd2 7a01 	vldr	s15, [r2, #4]
 800274e:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8002752:	6888      	ldr	r0, [r1, #8]
 8002754:	f896 c020 	ldrb.w	ip, [r6, #32]
 8002758:	603b      	str	r3, [r7, #0]
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 800275a:	78a6      	ldrb	r6, [r4, #2]
 800275c:	78e7      	ldrb	r7, [r4, #3]
 800275e:	1994      	adds	r4, r2, r6
        bool strum_moved = fabsf(strum_pot - last_strum_pot) > 0.00001f;
 8002760:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 80028ac <recorder::StateMachine(bool)+0x32c>
            buttons[i].Process(io_.human.in.sw[buttonIDs[i]]);
 8002764:	443a      	add	r2, r7
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8002766:	4e46      	ldr	r6, [pc, #280]	@ (8002880 <recorder::StateMachine(bool)+0x300>)
 8002768:	f894 4020 	ldrb.w	r4, [r4, #32]
 800276c:	f892 7020 	ldrb.w	r7, [r2, #32]
 8002770:	68ca      	ldr	r2, [r1, #12]
 8002772:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        bool strum_moved = fabsf(strum_pot - last_strum_pot) > 0.00001f;
 8002776:	ed98 7a00 	vldr	s14, [r8]
 800277a:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 800277e:	684a      	ldr	r2, [r1, #4]
        last_strum_pot = strum_pot;
 8002780:	edc8 7a00 	vstr	s15, [r8]
 8002784:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
 8002788:	600d      	str	r5, [r1, #0]
 800278a:	60cf      	str	r7, [r1, #12]
 800278c:	e9c1 2401 	strd	r2, r4, [r1, #4]
 8002790:	f896 c000 	ldrb.w	ip, [r6]
        if (cur == STATE_STARTUP)
 8002794:	f1bc 0f0b 	cmp.w	ip, #11
 8002798:	fa5f fe8c 	uxtb.w	lr, ip
 800279c:	f000 8162 	beq.w	8002a64 <recorder::StateMachine(bool)+0x4e4>
        else if (cur == STATE_ENDING)
 80027a0:	f1be 0f0c 	cmp.w	lr, #12
 80027a4:	f000 8255 	beq.w	8002c52 <recorder::StateMachine(bool)+0x6d2>
        if (standby)
 80027a8:	f1ba 0f00 	cmp.w	sl, #0
 80027ac:	d12a      	bne.n	8002804 <recorder::StateMachine(bool)+0x284>
        bool strum_moved = fabsf(strum_pot - last_strum_pot) > 0.00001f;
 80027ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b2:	eef0 7ae7 	vabs.f32	s15, s15
        if (cur == STATE_IDLE)
 80027b6:	f1be 0f00 	cmp.w	lr, #0
 80027ba:	f040 816f 	bne.w	8002a9c <recorder::StateMachine(bool)+0x51c>
            if (play_button_.is_high() || buttons[0].is_high() || buttons[1].is_high() || buttons[2].is_high() || buttons[3].is_high() || strum_moved)
 80027be:	07d8      	lsls	r0, r3, #31
 80027c0:	d476      	bmi.n	80028b0 <recorder::StateMachine(bool)+0x330>
 80027c2:	07e9      	lsls	r1, r5, #31
 80027c4:	d474      	bmi.n	80028b0 <recorder::StateMachine(bool)+0x330>
 80027c6:	07d2      	lsls	r2, r2, #31
 80027c8:	d472      	bmi.n	80028b0 <recorder::StateMachine(bool)+0x330>
 80027ca:	07e3      	lsls	r3, r4, #31
 80027cc:	d470      	bmi.n	80028b0 <recorder::StateMachine(bool)+0x330>
 80027ce:	07ff      	lsls	r7, r7, #31
 80027d0:	d46e      	bmi.n	80028b0 <recorder::StateMachine(bool)+0x330>
 80027d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002884 <recorder::StateMachine(bool)+0x304>
 80027d6:	eef4 7a47 	vcmp.f32	s15, s14
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	dc67      	bgt.n	80028b0 <recorder::StateMachine(bool)+0x330>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80027e0:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <recorder::StateMachine(bool)+0x308>)
            else if (kEnableIdleStandby &&
 80027e2:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800288c <recorder::StateMachine(bool)+0x30c>
                     ++idle_timeout_ > kIdleStandbyTime * 1000)
 80027e6:	6813      	ldr	r3, [r2, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	ee07 3a10 	vmov	s14, r3
 80027ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
            else if (kEnableIdleStandby &&
 80027f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	f300 8172 	bgt.w	8002ae2 <recorder::StateMachine(bool)+0x562>
 80027fe:	6013      	str	r3, [r2, #0]
    }
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return state_ == STATE_STOPPED;
        }

        void Start(bool enable_amplifier)
        {
            if (state_ == STATE_STOPPED)
 8002804:	4c22      	ldr	r4, [pc, #136]	@ (8002890 <recorder::StateMachine(bool)+0x310>)
 8002806:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8171 	bne.w	8002af2 <recorder::StateMachine(bool)+0x572>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002810:	4920      	ldr	r1, [pc, #128]	@ (8002894 <recorder::StateMachine(bool)+0x314>)
 8002812:	f44f 7000 	mov.w	r0, #512	@ 0x200
            {
                state_ = STATE_STARTING;
                fade_position_ = 0;
 8002816:	2200      	movs	r2, #0
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <recorder::StateMachine(bool)+0x318>)
 800281a:	6188      	str	r0, [r1, #24]
                cue_stop_ = false;

                boost_enable_.Set();
                amp_enable_.Write(enable_amplifier);

                dac_.Start();
 800281c:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
                fade_position_ = 0;
 8002820:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8002824:	2201      	movs	r2, #1
 8002826:	f8a4 2160 	strh.w	r2, [r4, #352]	@ 0x160
 800282a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800282e:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8002830:	f002 fc56 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 8002834:	1d20      	adds	r0, r4, #4
 8002836:	f002 f953 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 800283a:	4620      	mov	r0, r4
 800283c:	f002 fc3c 	bl	80050b8 <recorder::Analog::StartTimer()>
            is_active_ = true;
 8002840:	4b16      	ldr	r3, [pc, #88]	@ (800289c <recorder::StateMachine(bool)+0x31c>)
 8002842:	2001      	movs	r0, #1
            current_note_ = 0;
 8002844:	2200      	movs	r2, #0
        phase_inc_ = freq * kPhaseFactor;
 8002846:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <recorder::StateMachine(bool)+0x320>)
            is_active_ = true;
 8002848:	8198      	strh	r0, [r3, #12]
        printf("State: ");
 800284a:	4816      	ldr	r0, [pc, #88]	@ (80028a4 <recorder::StateMachine(bool)+0x324>)
 800284c:	6059      	str	r1, [r3, #4]
            note_timer_ = 0;
 800284e:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002852:	f006 fdd3 	bl	80093fc <iprintf>
            printf("ENDING\n");
 8002856:	4814      	ldr	r0, [pc, #80]	@ (80028a8 <recorder::StateMachine(bool)+0x328>)
 8002858:	f006 fe38 	bl	80094cc <puts>
	__atomic_store(std::__addressof(_M_i),
 800285c:	230c      	movs	r3, #12
 800285e:	f3bf 8f5b 	dmb	ish
 8002862:	7033      	strb	r3, [r6, #0]
 8002864:	f3bf 8f5b 	dmb	ish
    }
 8002868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800286c:	20010b34 	.word	0x20010b34
 8002870:	20000550 	.word	0x20000550
 8002874:	20000024 	.word	0x20000024
 8002878:	200108ec 	.word	0x200108ec
 800287c:	200108e0 	.word	0x200108e0
 8002880:	200108e8 	.word	0x200108e8
 8002884:	3727c5ac 	.word	0x3727c5ac
 8002888:	200108e4 	.word	0x200108e4
 800288c:	46ea6000 	.word	0x46ea6000
 8002890:	20010c3c 	.word	0x20010c3c
 8002894:	58021800 	.word	0x58021800
 8002898:	58020400 	.word	0x58020400
 800289c:	2001090c 	.word	0x2001090c
 80028a0:	3e6c2ad7 	.word	0x3e6c2ad7
 80028a4:	0800a4d4 	.word	0x0800a4d4
 80028a8:	0800a540 	.word	0x0800a540
 80028ac:	20000420 	.word	0x20000420
            if (state_ == STATE_STOPPED)
 80028b0:	4c9c      	ldr	r4, [pc, #624]	@ (8002b24 <recorder::StateMachine(bool)+0x5a4>)
 80028b2:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8127 	bne.w	8002b0a <recorder::StateMachine(bool)+0x58a>
 80028bc:	499a      	ldr	r1, [pc, #616]	@ (8002b28 <recorder::StateMachine(bool)+0x5a8>)
 80028be:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 80028c2:	2200      	movs	r2, #0
 80028c4:	4b99      	ldr	r3, [pc, #612]	@ (8002b2c <recorder::StateMachine(bool)+0x5ac>)
 80028c6:	6188      	str	r0, [r1, #24]
                dac_.Start();
 80028c8:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
                fade_position_ = 0;
 80028cc:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
                state_ = STATE_STARTING;
 80028d0:	2201      	movs	r2, #1
 80028d2:	f8a4 2160 	strh.w	r2, [r4, #352]	@ 0x160
 80028d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028da:	619a      	str	r2, [r3, #24]
                dac_.Start();
 80028dc:	f002 fc00 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 80028e0:	1d20      	adds	r0, r4, #4
 80028e2:	f002 f8fd 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 80028e6:	4620      	mov	r0, r4
 80028e8:	f002 fbe6 	bl	80050b8 <recorder::Analog::StartTimer()>
                idle_timeout_ = 0; // Reset timeout on activity
 80028ec:	4b90      	ldr	r3, [pc, #576]	@ (8002b30 <recorder::StateMachine(bool)+0x5b0>)
 80028ee:	2200      	movs	r2, #0
        printf("State: ");
 80028f0:	4890      	ldr	r0, [pc, #576]	@ (8002b34 <recorder::StateMachine(bool)+0x5b4>)
                idle_timeout_ = 0; // Reset timeout on activity
 80028f2:	601a      	str	r2, [r3, #0]
        printf("State: ");
 80028f4:	f006 fd82 	bl	80093fc <iprintf>
            printf("SYNTH\n");
 80028f8:	488f      	ldr	r0, [pc, #572]	@ (8002b38 <recorder::StateMachine(bool)+0x5b8>)
 80028fa:	f006 fde7 	bl	80094cc <puts>
 80028fe:	2301      	movs	r3, #1
 8002900:	f3bf 8f5b 	dmb	ish
 8002904:	7033      	strb	r3, [r6, #0]
 8002906:	f3bf 8f5b 	dmb	ish
    }
 800290a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if (in != state_)
 800290e:	f893 60ed 	ldrb.w	r6, [r3, #237]	@ 0xed
 8002912:	45b4      	cmp	ip, r6
 8002914:	f43f af03 	beq.w	800271e <recorder::StateMachine(bool)+0x19e>
            if (++count_ == duration_)
 8002918:	f8d3 10e8 	ldr.w	r1, [r3, #232]	@ 0xe8
 800291c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 8002920:	3101      	adds	r1, #1
 8002922:	42a1      	cmp	r1, r4
 8002924:	f8c3 10e8 	str.w	r1, [r3, #232]	@ 0xe8
 8002928:	f47f aef9 	bne.w	800271e <recorder::StateMachine(bool)+0x19e>
                in.sw[i] = db_[i].Process(sw_[i].Read());
 800292c:	4666      	mov	r6, ip
                state_ = in;
 800292e:	f883 c0ed 	strb.w	ip, [r3, #237]	@ 0xed
 8002932:	e6f4      	b.n	800271e <recorder::StateMachine(bool)+0x19e>
        else if (in != state_)
 8002934:	f893 40e1 	ldrb.w	r4, [r3, #225]	@ 0xe1
 8002938:	42a1      	cmp	r1, r4
 800293a:	f43f aed8 	beq.w	80026ee <recorder::StateMachine(bool)+0x16e>
            if (++count_ == duration_)
 800293e:	f8d3 50dc 	ldr.w	r5, [r3, #220]	@ 0xdc
 8002942:	f8d3 60d8 	ldr.w	r6, [r3, #216]	@ 0xd8
 8002946:	3501      	adds	r5, #1
 8002948:	42b5      	cmp	r5, r6
 800294a:	f8c3 50dc 	str.w	r5, [r3, #220]	@ 0xdc
 800294e:	f47f aece 	bne.w	80026ee <recorder::StateMachine(bool)+0x16e>
 8002952:	460c      	mov	r4, r1
                state_ = in;
 8002954:	f883 10e1 	strb.w	r1, [r3, #225]	@ 0xe1
 8002958:	e6c9      	b.n	80026ee <recorder::StateMachine(bool)+0x16e>
        else if (in != state_)
 800295a:	f893 40d5 	ldrb.w	r4, [r3, #213]	@ 0xd5
 800295e:	42a1      	cmp	r1, r4
 8002960:	f43f aeae 	beq.w	80026c0 <recorder::StateMachine(bool)+0x140>
            if (++count_ == duration_)
 8002964:	f8d3 50d0 	ldr.w	r5, [r3, #208]	@ 0xd0
 8002968:	f8d3 60cc 	ldr.w	r6, [r3, #204]	@ 0xcc
 800296c:	3501      	adds	r5, #1
 800296e:	42b5      	cmp	r5, r6
 8002970:	f8c3 50d0 	str.w	r5, [r3, #208]	@ 0xd0
 8002974:	f47f aea4 	bne.w	80026c0 <recorder::StateMachine(bool)+0x140>
 8002978:	460c      	mov	r4, r1
                state_ = in;
 800297a:	f883 10d5 	strb.w	r1, [r3, #213]	@ 0xd5
 800297e:	e69f      	b.n	80026c0 <recorder::StateMachine(bool)+0x140>
        else if (in != state_)
 8002980:	f893 40c9 	ldrb.w	r4, [r3, #201]	@ 0xc9
 8002984:	42a1      	cmp	r1, r4
 8002986:	f43f ae84 	beq.w	8002692 <recorder::StateMachine(bool)+0x112>
            if (++count_ == duration_)
 800298a:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 800298e:	f8d3 60c0 	ldr.w	r6, [r3, #192]	@ 0xc0
 8002992:	3501      	adds	r5, #1
 8002994:	42b5      	cmp	r5, r6
 8002996:	f8c3 50c4 	str.w	r5, [r3, #196]	@ 0xc4
 800299a:	f47f ae7a 	bne.w	8002692 <recorder::StateMachine(bool)+0x112>
 800299e:	460c      	mov	r4, r1
                state_ = in;
 80029a0:	f883 10c9 	strb.w	r1, [r3, #201]	@ 0xc9
 80029a4:	e675      	b.n	8002692 <recorder::StateMachine(bool)+0x112>
        else if (in != state_)
 80029a6:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
 80029aa:	42a1      	cmp	r1, r4
 80029ac:	f43f ae5a 	beq.w	8002664 <recorder::StateMachine(bool)+0xe4>
            if (++count_ == duration_)
 80029b0:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 80029b4:	f8d3 60b4 	ldr.w	r6, [r3, #180]	@ 0xb4
 80029b8:	3501      	adds	r5, #1
 80029ba:	42b5      	cmp	r5, r6
 80029bc:	f8c3 50b8 	str.w	r5, [r3, #184]	@ 0xb8
 80029c0:	f47f ae50 	bne.w	8002664 <recorder::StateMachine(bool)+0xe4>
 80029c4:	460c      	mov	r4, r1
                state_ = in;
 80029c6:	f883 10bd 	strb.w	r1, [r3, #189]	@ 0xbd
 80029ca:	e64b      	b.n	8002664 <recorder::StateMachine(bool)+0xe4>
        else if (in != state_)
 80029cc:	f893 40b1 	ldrb.w	r4, [r3, #177]	@ 0xb1
 80029d0:	42a1      	cmp	r1, r4
 80029d2:	f43f ae30 	beq.w	8002636 <recorder::StateMachine(bool)+0xb6>
            if (++count_ == duration_)
 80029d6:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 80029da:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 80029de:	3501      	adds	r5, #1
 80029e0:	42b5      	cmp	r5, r6
 80029e2:	f8c3 50ac 	str.w	r5, [r3, #172]	@ 0xac
 80029e6:	f47f ae26 	bne.w	8002636 <recorder::StateMachine(bool)+0xb6>
 80029ea:	460c      	mov	r4, r1
                state_ = in;
 80029ec:	f883 10b1 	strb.w	r1, [r3, #177]	@ 0xb1
 80029f0:	e621      	b.n	8002636 <recorder::StateMachine(bool)+0xb6>
        else if (in != state_)
 80029f2:	f893 40a5 	ldrb.w	r4, [r3, #165]	@ 0xa5
 80029f6:	42a1      	cmp	r1, r4
 80029f8:	f43f ae06 	beq.w	8002608 <recorder::StateMachine(bool)+0x88>
            if (++count_ == duration_)
 80029fc:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 8002a00:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8002a04:	3501      	adds	r5, #1
 8002a06:	42b5      	cmp	r5, r6
 8002a08:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
 8002a0c:	f47f adfc 	bne.w	8002608 <recorder::StateMachine(bool)+0x88>
 8002a10:	460c      	mov	r4, r1
                state_ = in;
 8002a12:	f883 10a5 	strb.w	r1, [r3, #165]	@ 0xa5
 8002a16:	e5f7      	b.n	8002608 <recorder::StateMachine(bool)+0x88>
        else if (in != state_)
 8002a18:	f893 4099 	ldrb.w	r4, [r3, #153]	@ 0x99
 8002a1c:	42a1      	cmp	r1, r4
 8002a1e:	f43f addc 	beq.w	80025da <recorder::StateMachine(bool)+0x5a>
            if (++count_ == duration_)
 8002a22:	f8d3 5094 	ldr.w	r5, [r3, #148]	@ 0x94
 8002a26:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
 8002a2a:	3501      	adds	r5, #1
 8002a2c:	42b5      	cmp	r5, r6
 8002a2e:	f8c3 5094 	str.w	r5, [r3, #148]	@ 0x94
 8002a32:	f47f add2 	bne.w	80025da <recorder::StateMachine(bool)+0x5a>
 8002a36:	460c      	mov	r4, r1
                state_ = in;
 8002a38:	f883 1099 	strb.w	r1, [r3, #153]	@ 0x99
 8002a3c:	e5cd      	b.n	80025da <recorder::StateMachine(bool)+0x5a>
        else if (in != state_)
 8002a3e:	f893 908d 	ldrb.w	r9, [r3, #141]	@ 0x8d
 8002a42:	454c      	cmp	r4, r9
 8002a44:	f43f adb2 	beq.w	80025ac <recorder::StateMachine(bool)+0x2c>
            if (++count_ == duration_)
 8002a48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a4c:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8002a50:	3201      	adds	r2, #1
 8002a52:	428a      	cmp	r2, r1
 8002a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002a58:	f47f ada8 	bne.w	80025ac <recorder::StateMachine(bool)+0x2c>
 8002a5c:	46a1      	mov	r9, r4
                state_ = in;
 8002a5e:	f883 408d 	strb.w	r4, [r3, #141]	@ 0x8d
 8002a62:	e5a3      	b.n	80025ac <recorder::StateMachine(bool)+0x2c>
            return is_active_;
 8002a64:	4b35      	ldr	r3, [pc, #212]	@ (8002b3c <recorder::StateMachine(bool)+0x5bc>)
            if (!jingle_engine_.JingleActive())
 8002a66:	7b1c      	ldrb	r4, [r3, #12]
 8002a68:	2c00      	cmp	r4, #0
 8002a6a:	f47f aec9 	bne.w	8002800 <recorder::StateMachine(bool)+0x280>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b2c <recorder::StateMachine(bool)+0x5ac>)
 8002a70:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8002a74:	4a2c      	ldr	r2, [pc, #176]	@ (8002b28 <recorder::StateMachine(bool)+0x5a8>)
 8002a76:	6199      	str	r1, [r3, #24]
 8002a78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
                synth_inactive_ = true;   // Set the inactive flag
 8002a7c:	4b30      	ldr	r3, [pc, #192]	@ (8002b40 <recorder::StateMachine(bool)+0x5c0>)
 8002a7e:	6191      	str	r1, [r2, #24]
 8002a80:	2201      	movs	r2, #1
        printf("State: ");
 8002a82:	482c      	ldr	r0, [pc, #176]	@ (8002b34 <recorder::StateMachine(bool)+0x5b4>)
                synth_inactive_ = true;   // Set the inactive flag
 8002a84:	701a      	strb	r2, [r3, #0]
        printf("State: ");
 8002a86:	f006 fcb9 	bl	80093fc <iprintf>
            printf("IDLE\n");
 8002a8a:	482e      	ldr	r0, [pc, #184]	@ (8002b44 <recorder::StateMachine(bool)+0x5c4>)
 8002a8c:	f006 fd1e 	bl	80094cc <puts>
 8002a90:	f3bf 8f5b 	dmb	ish
 8002a94:	7034      	strb	r4, [r6, #0]
 8002a96:	f3bf 8f5b 	dmb	ish
    }
 8002a9a:	e6b1      	b.n	8002800 <recorder::StateMachine(bool)+0x280>
        else if (cur == STATE_SYNTH)
 8002a9c:	f1be 0f01 	cmp.w	lr, #1
 8002aa0:	d054      	beq.n	8002b4c <recorder::StateMachine(bool)+0x5cc>
        else if (cur == STATE_STANDBY)
 8002aa2:	f1be 0f0a 	cmp.w	lr, #10
 8002aa6:	f47f aeab 	bne.w	8002800 <recorder::StateMachine(bool)+0x280>
            system::SerialFlushTx();
 8002aaa:	4650      	mov	r0, sl
 8002aac:	f003 fb24 	bl	80060f8 <recorder::system::SerialFlushTx(bool)>
            }
        }

        void Stop(void)
        {
            if (state_ == STATE_RUNNING && !kADCAlwaysOn)
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <recorder::StateMachine(bool)+0x5a4>)
 8002ab2:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
 8002ab6:	2a02      	cmp	r2, #2
 8002ab8:	d102      	bne.n	8002ac0 <recorder::StateMachine(bool)+0x540>
            {
                cue_stop_ = true;
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2161 	strb.w	r2, [r3, #353]	@ 0x161
    static constexpr uint32_t kIndirectWrite = 0;
    static constexpr uint32_t kIndirectRead = QUADSPI_CCR_FMODE_0;

    void SendCommand(Command cmd)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8002ac0:	4921      	ldr	r1, [pc, #132]	@ (8002b48 <recorder::StateMachine(bool)+0x5c8>)
 8002ac2:	688b      	ldr	r3, [r1, #8]
 8002ac4:	069a      	lsls	r2, r3, #26
 8002ac6:	d4fc      	bmi.n	8002ac2 <recorder::StateMachine(bool)+0x542>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8002ac8:	f240 13b9 	movw	r3, #441	@ 0x1b9
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8002acc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b48 <recorder::StateMachine(bool)+0x5c8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8002ace:	614b      	str	r3, [r1, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8002ad0:	6893      	ldr	r3, [r2, #8]
 8002ad2:	079b      	lsls	r3, r3, #30
 8002ad4:	d5fc      	bpl.n	8002ad0 <recorder::StateMachine(bool)+0x550>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8002ad6:	2302      	movs	r3, #2
    }
 8002ad8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002adc:	60d3      	str	r3, [r2, #12]
            system::Standby();
 8002ade:	f003 bb11 	b.w	8006104 <recorder::system::Standby()>
            if (state_ == STATE_STOPPED)
 8002ae2:	4c10      	ldr	r4, [pc, #64]	@ (8002b24 <recorder::StateMachine(bool)+0x5a4>)
                idle_timeout_ = 0;
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 8002aea:	6011      	str	r1, [r2, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f43f ae8f 	beq.w	8002810 <recorder::StateMachine(bool)+0x290>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	f47f aea4 	bne.w	8002840 <recorder::StateMachine(bool)+0x2c0>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002af8:	490b      	ldr	r1, [pc, #44]	@ (8002b28 <recorder::StateMachine(bool)+0x5a8>)
 8002afa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <recorder::StateMachine(bool)+0x5ac>)
 8002b00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b04:	6188      	str	r0, [r1, #24]
 8002b06:	619a      	str	r2, [r3, #24]
    }
 8002b08:	e69a      	b.n	8002840 <recorder::StateMachine(bool)+0x2c0>
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f47f aeee 	bne.w	80028ec <recorder::StateMachine(bool)+0x36c>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002b10:	4905      	ldr	r1, [pc, #20]	@ (8002b28 <recorder::StateMachine(bool)+0x5a8>)
 8002b12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <recorder::StateMachine(bool)+0x5ac>)
 8002b18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b1c:	6188      	str	r0, [r1, #24]
 8002b1e:	619a      	str	r2, [r3, #24]
    }
 8002b20:	e6e4      	b.n	80028ec <recorder::StateMachine(bool)+0x36c>
 8002b22:	bf00      	nop
 8002b24:	20010c3c 	.word	0x20010c3c
 8002b28:	58021800 	.word	0x58021800
 8002b2c:	58020400 	.word	0x58020400
 8002b30:	200108e4 	.word	0x200108e4
 8002b34:	0800a4d4 	.word	0x0800a4d4
 8002b38:	0800a4e4 	.word	0x0800a4e4
 8002b3c:	2001090c 	.word	0x2001090c
 8002b40:	20010b30 	.word	0x20010b30
 8002b44:	0800a4dc 	.word	0x0800a4dc
 8002b48:	52005000 	.word	0x52005000
                button_3_.is_high() || button_4_.is_high() || strum_moved)
 8002b4c:	f013 0301 	ands.w	r3, r3, #1
 8002b50:	d116      	bne.n	8002b80 <recorder::StateMachine(bool)+0x600>
        return history_ & 1;
 8002b52:	4a76      	ldr	r2, [pc, #472]	@ (8002d2c <recorder::StateMachine(bool)+0x7ac>)
 8002b54:	6812      	ldr	r2, [r2, #0]
            if (play_button_.is_high() || button_1_.is_high() || button_2_.is_high() || 
 8002b56:	07d5      	lsls	r5, r2, #31
 8002b58:	d412      	bmi.n	8002b80 <recorder::StateMachine(bool)+0x600>
 8002b5a:	4a75      	ldr	r2, [pc, #468]	@ (8002d30 <recorder::StateMachine(bool)+0x7b0>)
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	07d4      	lsls	r4, r2, #31
 8002b60:	d40e      	bmi.n	8002b80 <recorder::StateMachine(bool)+0x600>
 8002b62:	4a74      	ldr	r2, [pc, #464]	@ (8002d34 <recorder::StateMachine(bool)+0x7b4>)
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	07d0      	lsls	r0, r2, #31
 8002b68:	d40a      	bmi.n	8002b80 <recorder::StateMachine(bool)+0x600>
                button_3_.is_high() || button_4_.is_high() || strum_moved)
 8002b6a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8002d38 <recorder::StateMachine(bool)+0x7b8>
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	dc03      	bgt.n	8002b80 <recorder::StateMachine(bool)+0x600>
 8002b78:	4a70      	ldr	r2, [pc, #448]	@ (8002d3c <recorder::StateMachine(bool)+0x7bc>)
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	07d2      	lsls	r2, r2, #31
 8002b7e:	d502      	bpl.n	8002b86 <recorder::StateMachine(bool)+0x606>
                idle_timeout_ = 0;
 8002b80:	4a6f      	ldr	r2, [pc, #444]	@ (8002d40 <recorder::StateMachine(bool)+0x7c0>)
 8002b82:	2000      	movs	r0, #0
 8002b84:	6010      	str	r0, [r2, #0]
            if (synth_inactive_)
 8002b86:	4c6f      	ldr	r4, [pc, #444]	@ (8002d44 <recorder::StateMachine(bool)+0x7c4>)
 8002b88:	7822      	ldrb	r2, [r4, #0]
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d02e      	beq.n	8002bec <recorder::StateMachine(bool)+0x66c>
 8002b8e:	680a      	ldr	r2, [r1, #0]
                    if (buttons[i].is_high())
 8002b90:	07d7      	lsls	r7, r2, #31
 8002b92:	d40a      	bmi.n	8002baa <recorder::StateMachine(bool)+0x62a>
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	07d5      	lsls	r5, r2, #31
 8002b98:	d407      	bmi.n	8002baa <recorder::StateMachine(bool)+0x62a>
 8002b9a:	688a      	ldr	r2, [r1, #8]
 8002b9c:	07d0      	lsls	r0, r2, #31
 8002b9e:	d404      	bmi.n	8002baa <recorder::StateMachine(bool)+0x62a>
 8002ba0:	68ca      	ldr	r2, [r1, #12]
 8002ba2:	07d1      	lsls	r1, r2, #31
 8002ba4:	d401      	bmi.n	8002baa <recorder::StateMachine(bool)+0x62a>
                if (anyKey || play_button_.is_high())
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d074      	beq.n	8002c94 <recorder::StateMachine(bool)+0x714>
            if (state_ == STATE_STOPPED)
 8002baa:	4d67      	ldr	r5, [pc, #412]	@ (8002d48 <recorder::StateMachine(bool)+0x7c8>)
 8002bac:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d164      	bne.n	8002c7e <recorder::StateMachine(bool)+0x6fe>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002bb4:	4965      	ldr	r1, [pc, #404]	@ (8002d4c <recorder::StateMachine(bool)+0x7cc>)
 8002bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
                fade_position_ = 0;
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4b64      	ldr	r3, [pc, #400]	@ (8002d50 <recorder::StateMachine(bool)+0x7d0>)
 8002bbe:	6188      	str	r0, [r1, #24]
                dac_.Start();
 8002bc0:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
                fade_position_ = 0;
 8002bc4:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f8a5 2160 	strh.w	r2, [r5, #352]	@ 0x160
 8002bce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bd2:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8002bd4:	f002 fa84 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 8002bd8:	1d28      	adds	r0, r5, #4
 8002bda:	f001 ff81 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 8002bde:	4628      	mov	r0, r5
 8002be0:	f002 fa6a 	bl	80050b8 <recorder::Analog::StartTimer()>
                    synth_inactive_ = false;
 8002be4:	2300      	movs	r3, #0
                    idle_timeout_ = 0; // Reset timeout on activity
 8002be6:	4a56      	ldr	r2, [pc, #344]	@ (8002d40 <recorder::StateMachine(bool)+0x7c0>)
                    synth_inactive_ = false;
 8002be8:	7023      	strb	r3, [r4, #0]
                    idle_timeout_ = 0; // Reset timeout on activity
 8002bea:	6013      	str	r3, [r2, #0]
            if (env_state_[v] != ENV_IDLE) return true;
 8002bec:	4a59      	ldr	r2, [pc, #356]	@ (8002d54 <recorder::StateMachine(bool)+0x7d4>)
            if (strum_state_[s] != ENV_IDLE) return true;
 8002bee:	f892 006c 	ldrb.w	r0, [r2, #108]	@ 0x6c
 8002bf2:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 8002bf6:	f892 106e 	ldrb.w	r1, [r2, #110]	@ 0x6e
 8002bfa:	4303      	orrs	r3, r0
 8002bfc:	f892 006f 	ldrb.w	r0, [r2, #111]	@ 0x6f
 8002c00:	430b      	orrs	r3, r1
 8002c02:	f892 10fc 	ldrb.w	r1, [r2, #252]	@ 0xfc
 8002c06:	4303      	orrs	r3, r0
 8002c08:	f892 00fd 	ldrb.w	r0, [r2, #253]	@ 0xfd
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f892 10fe 	ldrb.w	r1, [r2, #254]	@ 0xfe
 8002c12:	4303      	orrs	r3, r0
 8002c14:	f892 00ff 	ldrb.w	r0, [r2, #255]	@ 0xff
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	f892 1100 	ldrb.w	r1, [r2, #256]	@ 0x100
 8002c1e:	f892 2101 	ldrb.w	r2, [r2, #257]	@ 0x101
 8002c22:	4303      	orrs	r3, r0
 8002c24:	430b      	orrs	r3, r1
 8002c26:	4313      	orrs	r3, r2
 8002c28:	d125      	bne.n	8002c76 <recorder::StateMachine(bool)+0x6f6>
                if (++synthReleaseCounter >= 10)
 8002c2a:	494b      	ldr	r1, [pc, #300]	@ (8002d58 <recorder::StateMachine(bool)+0x7d8>)
 8002c2c:	680a      	ldr	r2, [r1, #0]
 8002c2e:	3201      	adds	r2, #1
 8002c30:	2a09      	cmp	r2, #9
 8002c32:	600a      	str	r2, [r1, #0]
 8002c34:	f67f ade4 	bls.w	8002800 <recorder::StateMachine(bool)+0x280>
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8002c38:	4a45      	ldr	r2, [pc, #276]	@ (8002d50 <recorder::StateMachine(bool)+0x7d0>)
 8002c3a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002c3e:	6190      	str	r0, [r2, #24]
 8002c40:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8002c44:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8002c48:	6190      	str	r0, [r2, #24]
                    synth_inactive_ = true;
 8002c4a:	2201      	movs	r2, #1
                    synthReleaseCounter = 0;
 8002c4c:	600b      	str	r3, [r1, #0]
                    synth_inactive_ = true;
 8002c4e:	7022      	strb	r2, [r4, #0]
                    synthReleaseCounter = 0;
 8002c50:	e5d6      	b.n	8002800 <recorder::StateMachine(bool)+0x280>
 8002c52:	4b42      	ldr	r3, [pc, #264]	@ (8002d5c <recorder::StateMachine(bool)+0x7dc>)
            if (!jingle_engine_.JingleActive())
 8002c54:	7b1b      	ldrb	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f47f add2 	bne.w	8002800 <recorder::StateMachine(bool)+0x280>
        printf("State: ");
 8002c5c:	4840      	ldr	r0, [pc, #256]	@ (8002d60 <recorder::StateMachine(bool)+0x7e0>)
 8002c5e:	f006 fbcd 	bl	80093fc <iprintf>
            printf("STANDBY\n");
 8002c62:	4840      	ldr	r0, [pc, #256]	@ (8002d64 <recorder::StateMachine(bool)+0x7e4>)
 8002c64:	f006 fc32 	bl	80094cc <puts>
 8002c68:	230a      	movs	r3, #10
 8002c6a:	f3bf 8f5b 	dmb	ish
 8002c6e:	7033      	strb	r3, [r6, #0]
 8002c70:	f3bf 8f5b 	dmb	ish
    }
 8002c74:	e5c4      	b.n	8002800 <recorder::StateMachine(bool)+0x280>
                synthReleaseCounter = 0;
 8002c76:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <recorder::StateMachine(bool)+0x7d8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e5c0      	b.n	8002800 <recorder::StateMachine(bool)+0x280>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d1b0      	bne.n	8002be4 <recorder::StateMachine(bool)+0x664>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002c82:	4932      	ldr	r1, [pc, #200]	@ (8002d4c <recorder::StateMachine(bool)+0x7cc>)
 8002c84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c88:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <recorder::StateMachine(bool)+0x7d0>)
 8002c8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c8e:	6188      	str	r0, [r1, #24]
 8002c90:	619a      	str	r2, [r3, #24]
    }
 8002c92:	e7a7      	b.n	8002be4 <recorder::StateMachine(bool)+0x664>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8002c94:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <recorder::StateMachine(bool)+0x7c0>)
                else if (kEnableIdleStandby &&
 8002c96:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8002d68 <recorder::StateMachine(bool)+0x7e8>
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	ee07 3a10 	vmov	s14, r3
                else if (kEnableIdleStandby &&
 8002ca2:	6013      	str	r3, [r2, #0]
                         ++idle_timeout_ > kIdleStandbyTime * 1000)
 8002ca4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                else if (kEnableIdleStandby &&
 8002ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	dd9c      	ble.n	8002bec <recorder::StateMachine(bool)+0x66c>
            if (state_ == STATE_STOPPED)
 8002cb2:	4d25      	ldr	r5, [pc, #148]	@ (8002d48 <recorder::StateMachine(bool)+0x7c8>)
 8002cb4:	f895 3160 	ldrb.w	r3, [r5, #352]	@ 0x160
 8002cb8:	bb63      	cbnz	r3, 8002d14 <recorder::StateMachine(bool)+0x794>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8002cba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cbe:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <recorder::StateMachine(bool)+0x7cc>)
                fade_position_ = 0;
 8002cc0:	2300      	movs	r3, #0
                dac_.Start();
 8002cc2:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
 8002cc6:	6191      	str	r1, [r2, #24]
 8002cc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
                fade_position_ = 0;
 8002ccc:	f8c5 315c 	str.w	r3, [r5, #348]	@ 0x15c
                state_ = STATE_STARTING;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f8a5 3160 	strh.w	r3, [r5, #352]	@ 0x160
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <recorder::StateMachine(bool)+0x7d0>)
 8002cd8:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8002cda:	f002 fa01 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 8002cde:	1d28      	adds	r0, r5, #4
 8002ce0:	f001 fefe 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f002 f9e7 	bl	80050b8 <recorder::Analog::StartTimer()>
            is_active_ = true;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <recorder::StateMachine(bool)+0x7dc>)
            current_note_ = 0;
 8002cec:	2200      	movs	r2, #0
            is_active_ = true;
 8002cee:	2101      	movs	r1, #1
        printf("State: ");
 8002cf0:	481b      	ldr	r0, [pc, #108]	@ (8002d60 <recorder::StateMachine(bool)+0x7e0>)
            note_timer_ = 0;
 8002cf2:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <recorder::StateMachine(bool)+0x7ec>)
            is_active_ = true;
 8002cf8:	8199      	strh	r1, [r3, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	f006 fb7e 	bl	80093fc <iprintf>
            printf("ENDING\n");
 8002d00:	481b      	ldr	r0, [pc, #108]	@ (8002d70 <recorder::StateMachine(bool)+0x7f0>)
 8002d02:	f006 fbe3 	bl	80094cc <puts>
 8002d06:	230c      	movs	r3, #12
 8002d08:	f3bf 8f5b 	dmb	ish
 8002d0c:	7033      	strb	r3, [r6, #0]
 8002d0e:	f3bf 8f5b 	dmb	ish
    }
 8002d12:	e76b      	b.n	8002bec <recorder::StateMachine(bool)+0x66c>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d1e8      	bne.n	8002cea <recorder::StateMachine(bool)+0x76a>
 8002d18:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <recorder::StateMachine(bool)+0x7cc>)
 8002d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <recorder::StateMachine(bool)+0x7d0>)
 8002d20:	6191      	str	r1, [r2, #24]
 8002d22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d26:	619a      	str	r2, [r3, #24]
    }
 8002d28:	e7df      	b.n	8002cea <recorder::StateMachine(bool)+0x76a>
 8002d2a:	bf00      	nop
 8002d2c:	20010908 	.word	0x20010908
 8002d30:	20010904 	.word	0x20010904
 8002d34:	20010900 	.word	0x20010900
 8002d38:	3727c5ac 	.word	0x3727c5ac
 8002d3c:	200108fc 	.word	0x200108fc
 8002d40:	200108e4 	.word	0x200108e4
 8002d44:	20010b30 	.word	0x20010b30
 8002d48:	20010c3c 	.word	0x20010c3c
 8002d4c:	58021800 	.word	0x58021800
 8002d50:	58020400 	.word	0x58020400
 8002d54:	20010924 	.word	0x20010924
 8002d58:	2000041c 	.word	0x2000041c
 8002d5c:	2001090c 	.word	0x2001090c
 8002d60:	0800a4d4 	.word	0x0800a4d4
 8002d64:	0800a530 	.word	0x0800a530
 8002d68:	46ea6000 	.word	0x46ea6000
 8002d6c:	3e6c2ad7 	.word	0x3e6c2ad7
 8002d70:	0800a540 	.word	0x0800a540

08002d74 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()>:
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 8002d74:	2200      	movs	r2, #0
    void SetCoefficients(const SOSCoefficients* sections)
    {
        for (int n = 0; n < num_sections_; n++)
        {
            sections_[n].b[0] = sections[n].b[0];
            sections_[n].b[1] = sections[n].b[1];
 8002d76:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8002f44 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1d0>
            x_[n][0] = 0;
 8002d7a:	2300      	movs	r3, #0
            sections_[n].b[0] = sections[n].b[0];
 8002d7c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
class RecordingEngine
{
public:
    RecordingEngine(T& memory) : memory_{memory} {}

    void Init(void)
 8002d80:	b410      	push	{r4}
 8002d82:	6042      	str	r2, [r0, #4]
        num_sections_ = num_sections;
 8002d84:	2405      	movs	r4, #5
 8002d86:	6082      	str	r2, [r0, #8]
            sections_[n].b[0] = sections[n].b[0];
 8002d88:	4a66      	ldr	r2, [pc, #408]	@ (8002f24 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1b0>)
            sections_[n].b[1] = sections[n].b[1];
 8002d8a:	f8c0 c09c 	str.w	ip, [r0, #156]	@ 0x9c
            sections_[n].b[2] = sections[n].b[2];

            sections_[n].a[0] = sections[n].a[0];
 8002d8e:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8002f48 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1d4>
            sections_[n].b[0] = sections[n].b[0];
 8002d92:	f8c0 2098 	str.w	r2, [r0, #152]	@ 0x98
            sections_[n].b[2] = sections[n].b[2];
 8002d96:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
            sections_[n].a[0] = sections[n].a[0];
 8002d9a:	f8c0 c0a4 	str.w	ip, [r0, #164]	@ 0xa4
            sections_[n].b[1] = sections[n].b[1];
 8002d9e:	4a62      	ldr	r2, [pc, #392]	@ (8002f28 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1b4>)
            sections_[n].a[1] = sections[n].a[1];
 8002da0:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8002f4c <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1d8>
            sections_[n].b[1] = sections[n].b[1];
 8002da4:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
            sections_[n].a[1] = sections[n].a[1];
 8002da8:	f8c0 c0a8 	str.w	ip, [r0, #168]	@ 0xa8
 8002dac:	4a5f      	ldr	r2, [pc, #380]	@ (8002f2c <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1b8>)
            sections_[n].a[0] = sections[n].a[0];
 8002dae:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002f50 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1dc>
        num_sections_ = num_sections;
 8002db2:	f8c0 4094 	str.w	r4, [r0, #148]	@ 0x94
            sections_[n].a[0] = sections[n].a[0];
 8002db6:	f8c0 c0b8 	str.w	ip, [r0, #184]	@ 0xb8
            x_[n][0] = 0;
 8002dba:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
            x_[n][1] = 0;
 8002dbe:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
            x_[n][2] = 0;
 8002dc2:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
            x_[n][0] = 0;
 8002dc6:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
            x_[n][1] = 0;
 8002dca:	f8c0 310c 	str.w	r3, [r0, #268]	@ 0x10c
            x_[n][2] = 0;
 8002dce:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
            x_[n][0] = 0;
 8002dd2:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
            x_[n][1] = 0;
 8002dd6:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
            x_[n][2] = 0;
 8002dda:	f8c0 311c 	str.w	r3, [r0, #284]	@ 0x11c
            x_[n][0] = 0;
 8002dde:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
            x_[n][1] = 0;
 8002de2:	f8c0 3124 	str.w	r3, [r0, #292]	@ 0x124
            x_[n][2] = 0;
 8002de6:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
            x_[n][0] = 0;
 8002dea:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
            x_[n][1] = 0;
 8002dee:	f8c0 3130 	str.w	r3, [r0, #304]	@ 0x130
            x_[n][2] = 0;
 8002df2:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
        x_[num_sections_][0] = 0;
 8002df6:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
        x_[num_sections_][1] = 0;
 8002dfa:	f8c0 313c 	str.w	r3, [r0, #316]	@ 0x13c
        x_[num_sections_][2] = 0;
 8002dfe:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
            sections_[n].b[0] = sections[n].b[0];
 8002e02:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
            sections_[n].b[2] = sections[n].b[2];
 8002e06:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
            sections_[n].b[0] = sections[n].b[0];
 8002e0a:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
            sections_[n].a[1] = sections[n].a[1];
 8002e0e:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
            sections_[n].a[0] = sections[n].a[0];
 8002e12:	4a47      	ldr	r2, [pc, #284]	@ (8002f30 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1bc>)
            sections_[n].b[1] = sections[n].b[1];
 8002e14:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8002f54 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1e0>
            sections_[n].a[0] = sections[n].a[0];
 8002e18:	f8c0 20cc 	str.w	r2, [r0, #204]	@ 0xcc
            sections_[n].b[1] = sections[n].b[1];
 8002e1c:	4a45      	ldr	r2, [pc, #276]	@ (8002f34 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1c0>)
 8002e1e:	f8c0 c0c4 	str.w	ip, [r0, #196]	@ 0xc4
 8002e22:	f8c0 20d8 	str.w	r2, [r0, #216]	@ 0xd8
            sections_[n].a[1] = sections[n].a[1];
 8002e26:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8002f58 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1e4>
 8002e2a:	4a43      	ldr	r2, [pc, #268]	@ (8002f38 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1c4>)
 8002e2c:	f8c0 c0d0 	str.w	ip, [r0, #208]	@ 0xd0
 8002e30:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
            sections_[n].a[0] = sections[n].a[0];
 8002e34:	f8df c124 	ldr.w	ip, [pc, #292]	@ 8002f5c <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1e8>
 8002e38:	4a40      	ldr	r2, [pc, #256]	@ (8002f3c <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1c8>)
 8002e3a:	f8c0 c0e0 	str.w	ip, [r0, #224]	@ 0xe0
 8002e3e:	f8c0 20f4 	str.w	r2, [r0, #244]	@ 0xf4
            sections_[n].b[1] = sections[n].b[1];
 8002e42:	f8df c11c 	ldr.w	ip, [pc, #284]	@ 8002f60 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1ec>
            sections_[n].a[1] = sections[n].a[1];
 8002e46:	4a3e      	ldr	r2, [pc, #248]	@ (8002f40 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x1cc>)
            sections_[n].b[2] = sections[n].b[2];
 8002e48:	f8c0 10c8 	str.w	r1, [r0, #200]	@ 0xc8
            sections_[n].b[0] = sections[n].b[0];
 8002e4c:	f8c0 10d4 	str.w	r1, [r0, #212]	@ 0xd4
            sections_[n].b[2] = sections[n].b[2];
 8002e50:	f8c0 10dc 	str.w	r1, [r0, #220]	@ 0xdc
            sections_[n].b[0] = sections[n].b[0];
 8002e54:	f8c0 10e8 	str.w	r1, [r0, #232]	@ 0xe8
            sections_[n].b[2] = sections[n].b[2];
 8002e58:	f8c0 10f0 	str.w	r1, [r0, #240]	@ 0xf0
            sections_[n].b[1] = sections[n].b[1];
 8002e5c:	f8c0 c0ec 	str.w	ip, [r0, #236]	@ 0xec
            sections_[n].a[1] = sections[n].a[1];
 8002e60:	f8c0 20f8 	str.w	r2, [r0, #248]	@ 0xf8
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8002e64:	6882      	ldr	r2, [r0, #8]
 8002e66:	f3bf 8f5b 	dmb	ish
	__atomic_store_n(&_M_i, __i, int(__m));
 8002e6a:	f3bf 8f5b 	dmb	ish
 8002e6e:	6042      	str	r2, [r0, #4]
        for (int n = 0; n < num_sections_; n++)
 8002e70:	f8d0 2094 	ldr.w	r2, [r0, #148]	@ 0x94
    }

    void Reset(void)
    {
        output_.Flush();
        input_phase_ = 1;
 8002e74:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8002e78:	2a00      	cmp	r2, #0
        history_ = 0;
 8002e7a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
 8002e7e:	dd43      	ble.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002e80:	2a01      	cmp	r2, #1
            x_[n][0] = 0;
 8002e82:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
            x_[n][1] = 0;
 8002e86:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
            x_[n][2] = 0;
 8002e8a:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
        for (int n = 0; n < num_sections_; n++)
 8002e8e:	d03b      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002e90:	2a02      	cmp	r2, #2
            x_[n][0] = 0;
 8002e92:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
            x_[n][1] = 0;
 8002e96:	f8c0 310c 	str.w	r3, [r0, #268]	@ 0x10c
            x_[n][2] = 0;
 8002e9a:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
        for (int n = 0; n < num_sections_; n++)
 8002e9e:	d033      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002ea0:	2a03      	cmp	r2, #3
            x_[n][0] = 0;
 8002ea2:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
            x_[n][1] = 0;
 8002ea6:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
            x_[n][2] = 0;
 8002eaa:	f8c0 311c 	str.w	r3, [r0, #284]	@ 0x11c
        for (int n = 0; n < num_sections_; n++)
 8002eae:	d02b      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002eb0:	2a04      	cmp	r2, #4
            x_[n][0] = 0;
 8002eb2:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
            x_[n][1] = 0;
 8002eb6:	f8c0 3124 	str.w	r3, [r0, #292]	@ 0x124
            x_[n][2] = 0;
 8002eba:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        for (int n = 0; n < num_sections_; n++)
 8002ebe:	d023      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002ec0:	42a2      	cmp	r2, r4
            x_[n][0] = 0;
 8002ec2:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
            x_[n][1] = 0;
 8002ec6:	f8c0 3130 	str.w	r3, [r0, #304]	@ 0x130
            x_[n][2] = 0;
 8002eca:	f8c0 3134 	str.w	r3, [r0, #308]	@ 0x134
        for (int n = 0; n < num_sections_; n++)
 8002ece:	d01b      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002ed0:	2a06      	cmp	r2, #6
            x_[n][0] = 0;
 8002ed2:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
            x_[n][1] = 0;
 8002ed6:	f8c0 313c 	str.w	r3, [r0, #316]	@ 0x13c
            x_[n][2] = 0;
 8002eda:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
        for (int n = 0; n < num_sections_; n++)
 8002ede:	d013      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002ee0:	2a07      	cmp	r2, #7
            x_[n][0] = 0;
 8002ee2:	f8c0 3144 	str.w	r3, [r0, #324]	@ 0x144
            x_[n][1] = 0;
 8002ee6:	f8c0 3148 	str.w	r3, [r0, #328]	@ 0x148
            x_[n][2] = 0;
 8002eea:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
        for (int n = 0; n < num_sections_; n++)
 8002eee:	d00b      	beq.n	8002f08 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x194>
 8002ef0:	4601      	mov	r1, r0
 8002ef2:	2407      	movs	r4, #7
 8002ef4:	3401      	adds	r4, #1
            x_[n][0] = 0;
 8002ef6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
            x_[n][1] = 0;
 8002efa:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
        for (int n = 0; n < num_sections_; n++)
 8002efe:	310c      	adds	r1, #12
 8002f00:	42a2      	cmp	r2, r4
            x_[n][2] = 0;
 8002f02:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
        for (int n = 0; n < num_sections_; n++)
 8002f06:	d1f5      	bne.n	8002ef4 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()+0x180>
        x_[num_sections_][0] = 0;
 8002f08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f0c:	2300      	movs	r3, #0
    {
        resampler_.Init();
        aa_filter_.Init();
        Reset();
    }
 8002f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f12:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002f16:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
        x_[num_sections_][1] = 0;
 8002f1a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        x_[num_sections_][2] = 0;
 8002f1e:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
 8002f22:	4770      	bx	lr
 8002f24:	3a446737 	.word	0x3a446737
 8002f28:	beade39b 	.word	0xbeade39b
 8002f2c:	3f2d1db0 	.word	0x3f2d1db0
 8002f30:	bfb33dc4 	.word	0xbfb33dc4
 8002f34:	bf954df0 	.word	0xbf954df0
 8002f38:	3f68ba72 	.word	0x3f68ba72
 8002f3c:	bfb140a2 	.word	0xbfb140a2
 8002f40:	3f793977 	.word	0x3f793977
 8002f44:	3a85b218 	.word	0x3a85b218
 8002f48:	bfbc65fb 	.word	0xbfbc65fb
 8002f4c:	3f10296d 	.word	0x3f10296d
 8002f50:	bfb80d8c 	.word	0xbfb80d8c
 8002f54:	bf74e042 	.word	0xbf74e042
 8002f58:	3f4f7eb1 	.word	0x3f4f7eb1
 8002f5c:	bfb0aec0 	.word	0xbfb0aec0
 8002f60:	bf9e3e9d 	.word	0xbf9e3e9d

08002f64 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>:
{
public:
    void Init(float threshold_dB, float ratio, float softness,
        float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8002f64:	f500 3380 	add.w	r3, r0, #65536	@ 0x10000
public:
    SamplePlayer(T& memory) : memory_{memory} {}

    void Init(void)
    {
        position_ = 0;
 8002f68:	2200      	movs	r2, #0
        Reset();
    }

    void Reset(void)
    {
        state_ = STATE_STOPPED;
 8002f6a:	2100      	movs	r1, #0
        ratio_ = 1 / ratio - 1;
        softness_ = softness;
        t_scaler_ = 0.5 / softness;
 8002f6c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
        softness_ = softness;
 8002f70:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
{
public:
    void Init(float attack_ms, float decay_ms, float hold_ms, float sample_rate)
    {
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8002f74:	eddf 7a81 	vldr	s15, [pc, #516]	@ 800317c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x218>
            sections_[n].b[0] = sections[n].b[0];
 8002f78:	ed9f 6a81 	vldr	s12, [pc, #516]	@ 8003180 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x21c>

    void Reset(void)
    {
        for (uint32_t i = 0; i < kBufferSize; i++)
        {
            buffer_[i] = 0;
 8002f7c:	3034      	adds	r0, #52	@ 0x34
        b0_ = (1 - cos(omega)) / 2;
        b1_ = 1 - cos(omega);
        b2_ = (1 - cos(omega)) / 2;

        // Scaling coefficients for unity gain at DC
        b0_ /= a0_;
 8002f7e:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003184 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x220>
    class PlaybackEngine
    {
    public:
        PlaybackEngine(T &memory) : memory_{memory} {}

        void Init(void)
 8002f82:	b530      	push	{r4, r5, lr}
        pregain_ = std::pow(10.0, -threshold_dB / 20);
 8002f84:	4d80      	ldr	r5, [pc, #512]	@ (8003188 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x224>)
        position_ = 0;
 8002f86:	f840 2c20 	str.w	r2, [r0, #-32]
        fade_out_ = 0;
 8002f8a:	f840 2c10 	str.w	r2, [r0, #-16]
        state_ = STATE_STOPPED;
 8002f8e:	f800 1c1c 	strb.w	r1, [r0, #-28]
 8002f92:	639d      	str	r5, [r3, #56]	@ 0x38
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8002f94:	4d7d      	ldr	r5, [pc, #500]	@ (800318c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x228>)
        ratio_ = 1 / ratio - 1;
 8002f96:	4c7e      	ldr	r4, [pc, #504]	@ (8003190 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x22c>)
 8002f98:	649d      	str	r5, [r3, #72]	@ 0x48
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8002f9a:	4d7e      	ldr	r5, [pc, #504]	@ (8003194 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x230>)
 8002f9c:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8002f9e:	64dd      	str	r5, [r3, #76]	@ 0x4c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8002fa0:	f44f 65c8 	mov.w	r5, #1600	@ 0x640
        softness_ = softness;
 8002fa4:	f8c3 c040 	str.w	ip, [r3, #64]	@ 0x40
 8002fa8:	651d      	str	r5, [r3, #80]	@ 0x50
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8002faa:	4d7b      	ldr	r5, [pc, #492]	@ (8003198 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x234>)
    }

    void Reset(void)
    {
        hold_count_ = 0;
        envelope_ = 0;
 8002fac:	659a      	str	r2, [r3, #88]	@ 0x58
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 8002fae:	65dd      	str	r5, [r3, #92]	@ 0x5c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8002fb0:	f44f 557a 	mov.w	r5, #16000	@ 0x3e80
        envelope_ = 0;
 8002fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8002fb6:	665d      	str	r5, [r3, #100]	@ 0x64
        num_sections_ = num_sections;
 8002fb8:	2505      	movs	r5, #5
        Reset(initial_value);
    }

    void Reset(float initial_value = 0)
    {
        history_ = initial_value;
 8002fba:	675a      	str	r2, [r3, #116]	@ 0x74

        write_head_ = 0;
        compressor_.Reset();
        follower_.Reset();
        delay_time_lpf_.Reset();
        interpolator_history_ = 0;
 8002fbc:	679a      	str	r2, [r3, #120]	@ 0x78
            x_[n][0] = 0;
 8002fbe:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 8002fc2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 8002fc6:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            x_[n][0] = 0;
 8002fca:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 8002fce:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 8002fd2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            x_[n][0] = 0;
 8002fd6:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 8002fda:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 8002fde:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            x_[n][0] = 0;
 8002fe2:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8002fe6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        factor_ = 1 - std::exp(-cutoff / sample_rate);
 8002fea:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
        hold_count_ = 0;
 8002fee:	6559      	str	r1, [r3, #84]	@ 0x54
 8002ff0:	6699      	str	r1, [r3, #104]	@ 0x68
        write_head_ = 0;
 8002ff2:	6359      	str	r1, [r3, #52]	@ 0x34
        t_scaler_ = 0.5 / softness;
 8002ff4:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
        num_sections_ = num_sections;
 8002ff8:	f8c3 5114 	str.w	r5, [r3, #276]	@ 0x114
            sections_[n].b[0] = sections[n].b[0];
 8002ffc:	f8c3 c12c 	str.w	ip, [r3, #300]	@ 0x12c
            sections_[n].b[2] = sections[n].b[2];
 8003000:	f8c3 c134 	str.w	ip, [r3, #308]	@ 0x134
            sections_[n].b[0] = sections[n].b[0];
 8003004:	f8c3 c140 	str.w	ip, [r3, #320]	@ 0x140
            sections_[n].b[2] = sections[n].b[2];
 8003008:	f8c3 c148 	str.w	ip, [r3, #328]	@ 0x148
            sections_[n].b[0] = sections[n].b[0];
 800300c:	f8c3 c154 	str.w	ip, [r3, #340]	@ 0x154
            sections_[n].b[2] = sections[n].b[2];
 8003010:	f8c3 c15c 	str.w	ip, [r3, #348]	@ 0x15c
            sections_[n].b[0] = sections[n].b[0];
 8003014:	f8c3 c168 	str.w	ip, [r3, #360]	@ 0x168
            sections_[n].b[2] = sections[n].b[2];
 8003018:	f8c3 c170 	str.w	ip, [r3, #368]	@ 0x170
            sections_[n].b[1] = sections[n].b[1];
 800301c:	f8df c1c4 	ldr.w	ip, [pc, #452]	@ 80031e4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x280>
        Q_ = Q;
 8003020:	4c5e      	ldr	r4, [pc, #376]	@ (800319c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x238>)
 8003022:	f8c3 c11c 	str.w	ip, [r3, #284]	@ 0x11c
            sections_[n].a[0] = sections[n].a[0];
 8003026:	f8df c1c0 	ldr.w	ip, [pc, #448]	@ 80031e8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x284>
            x_[n][1] = 0;
 800302a:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
            sections_[n].a[0] = sections[n].a[0];
 800302e:	f8c3 c124 	str.w	ip, [r3, #292]	@ 0x124
            sections_[n].a[1] = sections[n].a[1];
 8003032:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 80031ec <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x288>
            x_[n][2] = 0;
 8003036:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
            sections_[n].a[1] = sections[n].a[1];
 800303a:	f8c3 c128 	str.w	ip, [r3, #296]	@ 0x128
            sections_[n].b[1] = sections[n].b[1];
 800303e:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 80031f0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x28c>
            x_[n][0] = 0;
 8003042:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
            sections_[n].b[1] = sections[n].b[1];
 8003046:	f8c3 c130 	str.w	ip, [r3, #304]	@ 0x130
            sections_[n].a[0] = sections[n].a[0];
 800304a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 80031f4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x290>
            x_[n][1] = 0;
 800304e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
            sections_[n].a[0] = sections[n].a[0];
 8003052:	f8c3 c138 	str.w	ip, [r3, #312]	@ 0x138
            sections_[n].a[1] = sections[n].a[1];
 8003056:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80031f8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x294>
            x_[n][2] = 0;
 800305a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
            sections_[n].a[1] = sections[n].a[1];
 800305e:	f8c3 c13c 	str.w	ip, [r3, #316]	@ 0x13c
            sections_[n].b[1] = sections[n].b[1];
 8003062:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80031fc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x298>
        x_[num_sections_][0] = 0;
 8003066:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
            sections_[n].b[1] = sections[n].b[1];
 800306a:	f8c3 c144 	str.w	ip, [r3, #324]	@ 0x144
            sections_[n].a[0] = sections[n].a[0];
 800306e:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8003200 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x29c>
        x_[num_sections_][1] = 0;
 8003072:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
            sections_[n].a[0] = sections[n].a[0];
 8003076:	f8c3 c14c 	str.w	ip, [r3, #332]	@ 0x14c
            sections_[n].a[1] = sections[n].a[1];
 800307a:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8003204 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a0>
        x_[num_sections_][2] = 0;
 800307e:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
            sections_[n].a[1] = sections[n].a[1];
 8003082:	f8c3 c150 	str.w	ip, [r3, #336]	@ 0x150
            sections_[n].b[1] = sections[n].b[1];
 8003086:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8003208 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a4>
            sections_[n].b[0] = sections[n].b[0];
 800308a:	ed83 6a46 	vstr	s12, [r3, #280]	@ 0x118
            sections_[n].b[1] = sections[n].b[1];
 800308e:	f8c3 c158 	str.w	ip, [r3, #344]	@ 0x158
            sections_[n].a[0] = sections[n].a[0];
 8003092:	f8df c178 	ldr.w	ip, [pc, #376]	@ 800320c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2a8>
            sections_[n].b[2] = sections[n].b[2];
 8003096:	ed83 6a48 	vstr	s12, [r3, #288]	@ 0x120
            sections_[n].a[0] = sections[n].a[0];
 800309a:	f8c3 c160 	str.w	ip, [r3, #352]	@ 0x160
            sections_[n].a[1] = sections[n].a[1];
 800309e:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8003210 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2ac>
        sampleRate_ = sampleRate;
 80030a2:	f8df e170 	ldr.w	lr, [pc, #368]	@ 8003214 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b0>
 80030a6:	f8c3 c164 	str.w	ip, [r3, #356]	@ 0x164
            sections_[n].b[1] = sections[n].b[1];
 80030aa:	f8df c16c 	ldr.w	ip, [pc, #364]	@ 8003218 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b4>
        a1_ = -2 * cos(omega);
        a2_ = 1 - alpha / A;

        // Scaling coefficients for unity gain at the center frequency
        b0_ /= a0_;
        b1_ /= a0_;
 80030ae:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 80031a0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x23c>
 80030b2:	f8c3 c16c 	str.w	ip, [r3, #364]	@ 0x16c
            sections_[n].a[0] = sections[n].a[0];
 80030b6:	f8df c164 	ldr.w	ip, [pc, #356]	@ 800321c <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2b8>
 80030ba:	f8c3 c174 	str.w	ip, [r3, #372]	@ 0x174
            sections_[n].a[1] = sections[n].a[1];
 80030be:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8003220 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2bc>
 80030c2:	f8c3 c178 	str.w	ip, [r3, #376]	@ 0x178
        Q_ = Q;
 80030c6:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        centerFrequency_ = centerFrequency;
 80030ca:	4c36      	ldr	r4, [pc, #216]	@ (80031a4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x240>)
{
public:
    void Init(float sampleRate, float frequency, float mix)
    {
        sampleRate_ = sampleRate;
        phase_ = 0.0;
 80030cc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80030d0:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
        gain_ = std::pow(10, gainDB / 20.0); // Convert gain from dB to linear scale
 80030d4:	4c34      	ldr	r4, [pc, #208]	@ (80031a8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x244>)
        envelope_ = 0;
 80030d6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80030da:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
        a0_ = 1 + alpha / A;
 80030de:	4c33      	ldr	r4, [pc, #204]	@ (80031ac <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x248>)
        b2_ /= a0_;
        a1_ /= a0_;
        a2_ /= a0_;
 80030e0:	4a33      	ldr	r2, [pc, #204]	@ (80031b0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x24c>)
        a0_ = 1 + alpha / A;
 80030e2:	f8c3 40ec 	str.w	r4, [r3, #236]	@ 0xec
        b0_ /= a0_;
 80030e6:	4c33      	ldr	r4, [pc, #204]	@ (80031b4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x250>)
        b2_ /= a0_;
 80030e8:	f8df c138 	ldr.w	ip, [pc, #312]	@ 8003224 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x2c0>
        b0_ /= a0_;
 80030ec:	f8c3 40f8 	str.w	r4, [r3, #248]	@ 0xf8
        cutoffFrequency_ = cutoffFrequency;
 80030f0:	4c31      	ldr	r4, [pc, #196]	@ (80031b8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x254>)
        a2_ /= a0_;
 80030f2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
            buffer_[i] = 0;
 80030f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030fa:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        a0_ = 1 + alpha;
 80030fe:	4c2f      	ldr	r4, [pc, #188]	@ (80031bc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x258>)
        sampleRate_ = sampleRate;
 8003100:	f8c3 e07c 	str.w	lr, [r3, #124]	@ 0x7c
        a0_ = 1 + alpha;
 8003104:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        b1_ /= a0_;
 8003108:	4c2d      	ldr	r4, [pc, #180]	@ (80031c0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x25c>)
        Q_ = Q;
 800310a:	edc3 6a39 	vstr	s13, [r3, #228]	@ 0xe4
 800310e:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        b2_ /= a0_;
        a1_ /= a0_;
 8003112:	4c2c      	ldr	r4, [pc, #176]	@ (80031c4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x260>)
        b0_ /= a0_;
 8003114:	ed83 7a25 	vstr	s14, [r3, #148]	@ 0x94
        a1_ /= a0_;
 8003118:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        a2_ /= a0_;
 800311c:	4c2a      	ldr	r4, [pc, #168]	@ (80031c8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x264>)
        b2_ /= a0_;
 800311e:	ed83 7a27 	vstr	s14, [r3, #156]	@ 0x9c
        a2_ /= a0_;
 8003122:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 8003126:	4c29      	ldr	r4, [pc, #164]	@ (80031cc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x268>)
        sampleRate_ = sampleRate;
 8003128:	f8c3 e0b0 	str.w	lr, [r3, #176]	@ 0xb0
        twoPiOverSampleRate_ = 2.0 * M_PI / sampleRate_;
 800312c:	f8c3 40c4 	str.w	r4, [r3, #196]	@ 0xc4
        envFollower_.Init(50, 200, 500, 16000);
    }

    void SetFrequency(float frequency)
    {
        frequency_ = frequency;
 8003130:	4c27      	ldr	r4, [pc, #156]	@ (80031d0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x26c>)
        sampleRate_ = sampleRate;
 8003132:	f8c3 e0dc 	str.w	lr, [r3, #220]	@ 0xdc
 8003136:	f8c3 40b4 	str.w	r4, [r3, #180]	@ 0xb4
        phaseIncrement_ = frequency_ * twoPiOverSampleRate_;
 800313a:	4c26      	ldr	r4, [pc, #152]	@ (80031d4 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x270>)
        hold_count_ = 0;
 800313c:	f8c3 10d4 	str.w	r1, [r3, #212]	@ 0xd4
 8003140:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
    }

    void SetMix(float mix)
    {
        mix_ = mix;
 8003144:	4c24      	ldr	r4, [pc, #144]	@ (80031d8 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x274>)
        b1_ /= a0_;
 8003146:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
 800314a:	f8c3 40b8 	str.w	r4, [r3, #184]	@ 0xb8
        attack_rate_ = 1 - std::exp(-1000 / (attack_ms * sample_rate));
 800314e:	4c23      	ldr	r4, [pc, #140]	@ (80031dc <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x278>)
        a1_ /= a0_;
 8003150:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
 8003154:	f8c3 40c8 	str.w	r4, [r3, #200]	@ 0xc8
        decay_rate_ = 1 - std::exp(-1000 / (decay_ms * sample_rate));
 8003158:	4c21      	ldr	r4, [pc, #132]	@ (80031e0 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()+0x27c>)
        b2_ /= a0_;
 800315a:	f8c3 c100 	str.w	ip, [r3, #256]	@ 0x100
 800315e:	f8c3 40cc 	str.w	r4, [r3, #204]	@ 0xcc
        hold_samples_ = std::round(hold_ms * sample_rate / 1000);
 8003162:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8003166:	f8c3 40d0 	str.w	r4, [r3, #208]	@ 0xd0
            Reset();
        }

        void Reset(void)
        {
            state_ = STATE_STOPPED;
 800316a:	f800 1c04 	strb.w	r1, [r0, #-4]
            cue_play_ = false;
 800316e:	f820 1c03 	strh.w	r1, [r0, #-3]
        }
 8003172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003176:	f006 b9dc 	b.w	8009532 <memset>
 800317a:	bf00      	nop
 800317c:	3a23c800 	.word	0x3a23c800
 8003180:	3a446737 	.word	0x3a446737
 8003184:	3c97b968 	.word	0x3c97b968
 8003188:	3f642905 	.word	0x3f642905
 800318c:	3c4b8680 	.word	0x3c4b8680
 8003190:	bd430c20 	.word	0xbd430c20
 8003194:	39831000 	.word	0x39831000
 8003198:	3bcc2980 	.word	0x3bcc2980
 800319c:	41200000 	.word	0x41200000
 80031a0:	bfd87b8b 	.word	0xbfd87b8b
 80031a4:	44610000 	.word	0x44610000
 80031a8:	404a62c2 	.word	0x404a62c2
 80031ac:	3f8e0284 	.word	0x3f8e0284
 80031b0:	3f4d7d3b 	.word	0x3f4d7d3b
 80031b4:	3ff1a63d 	.word	0x3ff1a63d
 80031b8:	442f0000 	.word	0x442f0000
 80031bc:	3f81bcba 	.word	0x3f81bcba
 80031c0:	3d17b968 	.word	0x3d17b968
 80031c4:	bff316de 	.word	0xbff316de
 80031c8:	3f7924e9 	.word	0x3f7924e9
 80031cc:	39cde32e 	.word	0x39cde32e
 80031d0:	43c80000 	.word	0x43c80000
 80031d4:	3e20d97c 	.word	0x3e20d97c
 80031d8:	3f333333 	.word	0x3f333333
 80031dc:	3aa3bc00 	.word	0x3aa3bc00
 80031e0:	39a3d000 	.word	0x39a3d000
 80031e4:	3a85b218 	.word	0x3a85b218
 80031e8:	bfbc65fb 	.word	0xbfbc65fb
 80031ec:	3f10296d 	.word	0x3f10296d
 80031f0:	beade39b 	.word	0xbeade39b
 80031f4:	bfb80d8c 	.word	0xbfb80d8c
 80031f8:	3f2d1db0 	.word	0x3f2d1db0
 80031fc:	bf74e042 	.word	0xbf74e042
 8003200:	bfb33dc4 	.word	0xbfb33dc4
 8003204:	3f4f7eb1 	.word	0x3f4f7eb1
 8003208:	bf954df0 	.word	0xbf954df0
 800320c:	bfb0aec0 	.word	0xbfb0aec0
 8003210:	3f68ba72 	.word	0x3f68ba72
 8003214:	467a0000 	.word	0x467a0000
 8003218:	bf9e3e9d 	.word	0xbf9e3e9d
 800321c:	bfb140a2 	.word	0xbfb140a2
 8003220:	3f793977 	.word	0x3f793977
 8003224:	bdae79fb 	.word	0xbdae79fb

08003228 <recorder::SampleMemory<half>::Init()>:

template <typename T>
class SampleMemory : SampleMemoryBase
{
public:
    void Init(void)
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
   
        dirty_ = false;
 800322c:	2400      	movs	r4, #0
    void Init(void)
 800322e:	b085      	sub	sp, #20
 8003230:	4605      	mov	r5, r0
        dirty_ = false;
 8003232:	7344      	strb	r4, [r0, #13]

    int32_t FindFreshestBlock(void)
    {
        int32_t block = -1;

        for (uint32_t i = 0; i < kNumBlocks; i++)
 8003234:	46a1      	mov	r9, r4
        buffer_index_ = 0;
 8003236:	6104      	str	r4, [r0, #16]
 8003238:	f105 0b20 	add.w	fp, r5, #32
        flash_.Init();
 800323c:	f002 f86a 	bl	8005314 <recorder::Flash::Init()>
class Crc
{
public:
    void Init(void)
    {
        __HAL_RCC_CRC_CLK_ENABLE();
 8003240:	4aae      	ldr	r2, [pc, #696]	@ (80034fc <recorder::SampleMemory<half>::Init()+0x2d4>)
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003242:	4baf      	ldr	r3, [pc, #700]	@ (8003500 <recorder::SampleMemory<half>::Init()+0x2d8>)
 8003244:	f8d2 10e0 	ldr.w	r1, [r2, #224]	@ 0xe0
 8003248:	48ae      	ldr	r0, [pc, #696]	@ (8003504 <recorder::SampleMemory<half>::Init()+0x2dc>)
 800324a:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800324e:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
 8003252:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
 8003256:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 800325a:	9203      	str	r2, [sp, #12]
  WRITE_REG(CRCx->INIT, InitCrc);
 800325c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003260:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003262:	6158      	str	r0, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800326a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	f021 0160 	bic.w	r1, r1, #96	@ 0x60
 8003272:	6099      	str	r1, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8003274:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	f041 0101 	orr.w	r1, r1, #1
 800327c:	6099      	str	r1, [r3, #8]
    };

    template <uint32_t num_links>
    void Init(Link (&chain)[num_links])
    {
        num_links_ = num_links;
 800327e:	2303      	movs	r3, #3
        chain_ = chain;
 8003280:	49a1      	ldr	r1, [pc, #644]	@ (8003508 <recorder::SampleMemory<half>::Init()+0x2e0>)
        num_links_ = num_links;
 8003282:	63eb      	str	r3, [r5, #60]	@ 0x3c
            return length * sizeof(T);
 8003284:	684b      	ldr	r3, [r1, #4]
 8003286:	6908      	ldr	r0, [r1, #16]
 8003288:	005b      	lsls	r3, r3, #1
        total_size_ = 0;

        for (auto& link : chain)
        {
            link.offset = total_size_;
 800328a:	608c      	str	r4, [r1, #8]
        chain_ = chain;
 800328c:	6429      	str	r1, [r5, #64]	@ 0x40
            link.offset = total_size_;
 800328e:	614b      	str	r3, [r1, #20]
            total_size_ += link.size();
 8003290:	eb03 0340 	add.w	r3, r3, r0, lsl #1
        SendCommand(CMD_WRITE_ENABLE);
    }

    uint8_t ReadStatus(void)
    {
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003294:	4c9d      	ldr	r4, [pc, #628]	@ (800350c <recorder::SampleMemory<half>::Init()+0x2e4>)
            link.offset = total_size_;
 8003296:	620b      	str	r3, [r1, #32]
            return length * sizeof(T);
 8003298:	69c9      	ldr	r1, [r1, #28]
 800329a:	9201      	str	r2, [sp, #4]
            total_size_ += link.size();
 800329c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80032a0:	646b      	str	r3, [r5, #68]	@ 0x44
        return block;
    }

    uint32_t BlockLocation(uint32_t block_n)
    {
        uint32_t page_n = block_n / kBlocksPerPage;
 80032a2:	4b9b      	ldr	r3, [pc, #620]	@ (8003510 <recorder::SampleMemory<half>::Init()+0x2e8>)
            QSPI_INSTRUCTION_1_LINE |
            CMD_READ_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
        uint8_t status = DataRead8();
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80032a4:	2702      	movs	r7, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 80032a6:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 80032aa:	fba3 2309 	umull	r2, r3, r3, r9
        QUADSPI->CCR =
 80032ae:	f8df 8264 	ldr.w	r8, [pc, #612]	@ 8003514 <recorder::SampleMemory<half>::Init()+0x2ec>
 80032b2:	eba9 0203 	sub.w	r2, r9, r3
 80032b6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80032ba:	0a1b      	lsrs	r3, r3, #8
        block_n -= page_n * kBlocksPerPage;
        return page_n * kPageSize + block_n * kBlockSize;
 80032bc:	eb03 1603 	add.w	r6, r3, r3, lsl #4
 80032c0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 80032c4:	eba9 0606 	sub.w	r6, r9, r6
 80032c8:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80032cc:	eb06 3603 	add.w	r6, r6, r3, lsl #12
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80032d0:	68a3      	ldr	r3, [r4, #8]
 80032d2:	f013 0320 	ands.w	r3, r3, #32
 80032d6:	d1fb      	bne.n	80032d0 <recorder::SampleMemory<half>::Init()+0xa8>
        QUADSPI->DLR = 0;
 80032d8:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 80032da:	f8c4 8014 	str.w	r8, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80032e4:	d0fb      	beq.n	80032de <recorder::SampleMemory<half>::Init()+0xb6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80032e6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80032ea:	b2db      	uxtb	r3, r3
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80032ec:	68a2      	ldr	r2, [r4, #8]
 80032ee:	0792      	lsls	r2, r2, #30
 80032f0:	d5fc      	bpl.n	80032ec <recorder::SampleMemory<half>::Init()+0xc4>
        while (write_in_progress())
 80032f2:	07db      	lsls	r3, r3, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80032f4:	60e7      	str	r7, [r4, #12]
        while (write_in_progress())
 80032f6:	d503      	bpl.n	8003300 <recorder::SampleMemory<half>::Init()+0xd8>
            system::Delay_ms(1);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f002 fee7 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80032fe:	e7e7      	b.n	80032d0 <recorder::SampleMemory<half>::Init()+0xa8>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8003300:	4632      	mov	r2, r6
 8003302:	230f      	movs	r3, #15
 8003304:	4659      	mov	r1, fp
 8003306:	4650      	mov	r0, sl
 8003308:	f002 f9e0 	bl	80056cc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
            sum += bytes[i];
 800330c:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 8003310:	f895 7020 	ldrb.w	r7, [r5, #32]
 8003314:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8003318:	4417      	add	r7, r2
 800331a:	f895 6023 	ldrb.w	r6, [r5, #35]	@ 0x23
 800331e:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8003322:	443b      	add	r3, r7
 8003324:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8003328:	f895 2026 	ldrb.w	r2, [r5, #38]	@ 0x26
 800332c:	441e      	add	r6, r3
 800332e:	f895 c027 	ldrb.w	ip, [r5, #39]	@ 0x27
 8003332:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8003336:	4430      	add	r0, r6
 8003338:	f895 7029 	ldrb.w	r7, [r5, #41]	@ 0x29
 800333c:	f895 602a 	ldrb.w	r6, [r5, #42]	@ 0x2a
 8003340:	4401      	add	r1, r0
 8003342:	f895 002b 	ldrb.w	r0, [r5, #43]	@ 0x2b
 8003346:	440a      	add	r2, r1
 8003348:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800334c:	4494      	add	ip, r2
 800334e:	f895 202d 	ldrb.w	r2, [r5, #45]	@ 0x2d
 8003352:	4463      	add	r3, ip
 8003354:	441f      	add	r7, r3
 8003356:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 800335a:	443e      	add	r6, r7
 800335c:	4430      	add	r0, r6
 800335e:	4401      	add	r1, r0
 8003360:	440a      	add	r2, r1
 8003362:	4413      	add	r3, r2
            if (LoadBlock(i) && IsValid(block_))
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2bff      	cmp	r3, #255	@ 0xff
 8003368:	d039      	beq.n	80033de <recorder::SampleMemory<half>::Init()+0x1b6>
        for (uint32_t i = 0; i < kNumBlocks; i++)
 800336a:	f109 0901 	add.w	r9, r9, #1
 800336e:	f240 2322 	movw	r3, #546	@ 0x222
 8003372:	4599      	cmp	r9, r3
 8003374:	d195      	bne.n	80032a2 <recorder::SampleMemory<half>::Init()+0x7a>
        active_block_n_ = FindFreshestBlock();
 8003376:	9a01      	ldr	r2, [sp, #4]
        if (block_n == -1)
 8003378:	1c54      	adds	r4, r2, #1
        active_block_n_ = FindFreshestBlock();
 800337a:	632a      	str	r2, [r5, #48]	@ 0x30
        if (block_n == -1)
 800337c:	d051      	beq.n	8003422 <recorder::SampleMemory<half>::Init()+0x1fa>
        uint32_t page_n = block_n / kBlocksPerPage;
 800337e:	4964      	ldr	r1, [pc, #400]	@ (8003510 <recorder::SampleMemory<half>::Init()+0x2e8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003380:	f04f 0a02 	mov.w	sl, #2
        return nvmem_.Read(&block_, BlockLocation(block_n), kBlockSize);
 8003384:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
        uint32_t page_n = block_n / kBlocksPerPage;
 8003388:	fba1 3102 	umull	r3, r1, r1, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800338c:	4c5f      	ldr	r4, [pc, #380]	@ (800350c <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 800338e:	4f61      	ldr	r7, [pc, #388]	@ (8003514 <recorder::SampleMemory<half>::Init()+0x2ec>)
 8003390:	1a50      	subs	r0, r2, r1
 8003392:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 8003396:	0a09      	lsrs	r1, r1, #8
        return page_n * kPageSize + block_n * kBlockSize;
 8003398:	eb01 1001 	add.w	r0, r1, r1, lsl #4
 800339c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80033a0:	1a12      	subs	r2, r2, r0
 80033a2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80033a6:	eb02 3201 	add.w	r2, r2, r1, lsl #12
        while (write_in_progress())
 80033aa:	4691      	mov	r9, r2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80033ac:	68a6      	ldr	r6, [r4, #8]
 80033ae:	f016 0620 	ands.w	r6, r6, #32
 80033b2:	d1fb      	bne.n	80033ac <recorder::SampleMemory<half>::Init()+0x184>
        QUADSPI->DLR = 0;
 80033b4:	6126      	str	r6, [r4, #16]
        QUADSPI->CCR =
 80033b6:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80033b8:	68a3      	ldr	r3, [r4, #8]
 80033ba:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80033be:	d0fb      	beq.n	80033b8 <recorder::SampleMemory<half>::Init()+0x190>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80033c0:	f894 2020 	ldrb.w	r2, [r4, #32]
 80033c4:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80033c6:	68a3      	ldr	r3, [r4, #8]
 80033c8:	0798      	lsls	r0, r3, #30
 80033ca:	d5fc      	bpl.n	80033c6 <recorder::SampleMemory<half>::Init()+0x19e>
        while (write_in_progress())
 80033cc:	f012 0201 	ands.w	r2, r2, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80033d0:	f8c4 a00c 	str.w	sl, [r4, #12]
        while (write_in_progress())
 80033d4:	d01a      	beq.n	800340c <recorder::SampleMemory<half>::Init()+0x1e4>
            system::Delay_ms(1);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f002 fe78 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80033dc:	e7e6      	b.n	80033ac <recorder::SampleMemory<half>::Init()+0x184>
                if ((block == -1) ||
 80033de:	9b01      	ldr	r3, [sp, #4]
                uint32_t sn = block_.sequence_num;
 80033e0:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
                if ((block == -1) ||
 80033e2:	3301      	adds	r3, #1
 80033e4:	d007      	beq.n	80033f6 <recorder::SampleMemory<half>::Init()+0x1ce>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 80033e6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
                if ((block == -1) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d908      	bls.n	80033fe <recorder::SampleMemory<half>::Init()+0x1d6>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f240 2121 	movw	r1, #545	@ 0x221
 80033f2:	428b      	cmp	r3, r1
 80033f4:	d8b9      	bhi.n	800336a <recorder::SampleMemory<half>::Init()+0x142>
            if (LoadBlock(i) && IsValid(block_))
 80033f6:	f8cd 9004 	str.w	r9, [sp, #4]
                    sequence_ = sn;
 80033fa:	636a      	str	r2, [r5, #52]	@ 0x34
 80033fc:	e7b5      	b.n	800336a <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn > sequence_) && (sn - sequence_ < kNumBlocks)) ||
 80033fe:	d2b4      	bcs.n	800336a <recorder::SampleMemory<half>::Init()+0x142>
                    ((sn < sequence_) && (sequence_ - sn >= kNumBlocks)))
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	f240 2121 	movw	r1, #545	@ 0x221
 8003406:	428b      	cmp	r3, r1
 8003408:	d9af      	bls.n	800336a <recorder::SampleMemory<half>::Init()+0x142>
 800340a:	e7f4      	b.n	80033f6 <recorder::SampleMemory<half>::Init()+0x1ce>
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 800340c:	4613      	mov	r3, r2
 800340e:	4640      	mov	r0, r8
 8003410:	464a      	mov	r2, r9
 8003412:	4659      	mov	r1, fp
 8003414:	4699      	mov	r9, r3
 8003416:	230f      	movs	r3, #15
 8003418:	f002 f958 	bl	80056cc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
        if (active_block_n_ != -1)
 800341c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800341e:	3301      	adds	r3, #1
 8003420:	d10a      	bne.n	8003438 <recorder::SampleMemory<half>::Init()+0x210>
                }
            }
        }
        else
        {
            printf("No save data found\n");
 8003422:	483d      	ldr	r0, [pc, #244]	@ (8003518 <recorder::SampleMemory<half>::Init()+0x2f0>)
 8003424:	f006 f852 	bl	80094cc <puts>
            audio_info_.address = kAudioBufferAddress;
 8003428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342c:	2300      	movs	r3, #0
 800342e:	e9c5 2305 	strd	r2, r3, [r5, #20]
            audio_info_.size = 0;
        }
       
    }
 8003432:	b005      	add	sp, #20
 8003434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            std::memcpy(&data, &block_.data, sizeof(T));
 8003438:	f8db 3008 	ldr.w	r3, [fp, #8]
 800343c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8003440:	6a29      	ldr	r1, [r5, #32]
 8003442:	61eb      	str	r3, [r5, #28]
 8003444:	6169      	str	r1, [r5, #20]
 8003446:	61aa      	str	r2, [r5, #24]
            printf("Save data found:\n");
 8003448:	4834      	ldr	r0, [pc, #208]	@ (800351c <recorder::SampleMemory<half>::Init()+0x2f4>)
 800344a:	f006 f83f 	bl	80094cc <puts>
        return save_.Save(audio_info_);
    }

    void PrintInfo(const char* line_prefix)
    {
        printf("%sAddress: 0x%08" PRIX32 "\n", line_prefix, audio_info_.address);
 800344e:	4934      	ldr	r1, [pc, #208]	@ (8003520 <recorder::SampleMemory<half>::Init()+0x2f8>)
 8003450:	696a      	ldr	r2, [r5, #20]
 8003452:	4834      	ldr	r0, [pc, #208]	@ (8003524 <recorder::SampleMemory<half>::Init()+0x2fc>)
 8003454:	f005 ffd2 	bl	80093fc <iprintf>
        printf("%sSize:    0x%08" PRIX32 "\n", line_prefix, audio_info_.size);
 8003458:	4931      	ldr	r1, [pc, #196]	@ (8003520 <recorder::SampleMemory<half>::Init()+0x2f8>)
 800345a:	69aa      	ldr	r2, [r5, #24]
 800345c:	4832      	ldr	r0, [pc, #200]	@ (8003528 <recorder::SampleMemory<half>::Init()+0x300>)
 800345e:	f005 ffcd 	bl	80093fc <iprintf>
        printf("%sCRC32:   0x%08" PRIX32 "\n", line_prefix, audio_info_.crc32);
 8003462:	492f      	ldr	r1, [pc, #188]	@ (8003520 <recorder::SampleMemory<half>::Init()+0x2f8>)
 8003464:	69ea      	ldr	r2, [r5, #28]
 8003466:	4831      	ldr	r0, [pc, #196]	@ (800352c <recorder::SampleMemory<half>::Init()+0x304>)
 8003468:	f005 ffc8 	bl	80093fc <iprintf>
            if (audio_info_.address < kAudioBufferAddress)
 800346c:	696b      	ldr	r3, [r5, #20]
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003472:	d339      	bcc.n	80034e8 <recorder::SampleMemory<half>::Init()+0x2c0>
                printf("Loading audio... ");
 8003474:	482e      	ldr	r0, [pc, #184]	@ (8003530 <recorder::SampleMemory<half>::Init()+0x308>)
 8003476:	f005 ffc1 	bl	80093fc <iprintf>
  WRITE_REG(CRCx->INIT, InitCrc);
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <recorder::SampleMemory<half>::Init()+0x2d8>)
 800347c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003480:	611a      	str	r2, [r3, #16]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	609a      	str	r2, [r3, #8]
        const Link* chain_;
        uint32_t num_ = 0;
    };

    iter begin() {return iter(chain_, 0);}
    iter end() {return iter(chain_, num_links_);}
 800348a:	e9d5 370f 	ldrd	r3, r7, [r5, #60]	@ 0x3c
                uint32_t address = audio_info_.address;
 800348e:	e9d5 9805 	ldrd	r9, r8, [r5, #20]
                for (auto link : buffer_chain_)
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8081 	beq.w	800359a <recorder::SampleMemory<half>::Init()+0x372>
 8003498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800349c:	3704      	adds	r7, #4
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800349e:	4c1b      	ldr	r4, [pc, #108]	@ (800350c <recorder::SampleMemory<half>::Init()+0x2e4>)
        QUADSPI->CCR =
 80034a0:	46ab      	mov	fp, r5
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	e957 5301 	ldrd	r5, r3, [r7, #-4]
            return length * sizeof(T);
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4543      	cmp	r3, r8
 80034ac:	bf28      	it	cs
 80034ae:	4643      	movcs	r3, r8
 80034b0:	469a      	mov	sl, r3
                    system::ReloadWatchdog();
 80034b2:	f002 fc09 	bl	8005cc8 <recorder::system::ReloadWatchdog()>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80034b6:	68a3      	ldr	r3, [r4, #8]
 80034b8:	f013 0320 	ands.w	r3, r3, #32
 80034bc:	d1fb      	bne.n	80034b6 <recorder::SampleMemory<half>::Init()+0x28e>
        QUADSPI->DLR = 0;
 80034be:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <recorder::SampleMemory<half>::Init()+0x2ec>)
 80034c2:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80034c4:	68a3      	ldr	r3, [r4, #8]
 80034c6:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80034ca:	d0fb      	beq.n	80034c4 <recorder::SampleMemory<half>::Init()+0x29c>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80034cc:	f894 2020 	ldrb.w	r2, [r4, #32]
 80034d0:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	0799      	lsls	r1, r3, #30
 80034d6:	d5fc      	bpl.n	80034d2 <recorder::SampleMemory<half>::Init()+0x2aa>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80034d8:	2302      	movs	r3, #2
 80034da:	60e3      	str	r3, [r4, #12]
        while (write_in_progress())
 80034dc:	07d3      	lsls	r3, r2, #31
 80034de:	d52b      	bpl.n	8003538 <recorder::SampleMemory<half>::Init()+0x310>
            system::Delay_ms(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f002 fdf3 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80034e6:	e7e6      	b.n	80034b6 <recorder::SampleMemory<half>::Init()+0x28e>
                printf("Invalid address\n");
 80034e8:	4812      	ldr	r0, [pc, #72]	@ (8003534 <recorder::SampleMemory<half>::Init()+0x30c>)
 80034ea:	f005 ffef 	bl	80094cc <puts>
                audio_info_.address = kAudioBufferAddress;
 80034ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034f2:	e9c5 3905 	strd	r3, r9, [r5, #20]
    }
 80034f6:	b005      	add	sp, #20
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	58024c00 	.word	0x58024c00
 8003504:	04c11db7 	.word	0x04c11db7
 8003508:	20000000 	.word	0x20000000
 800350c:	52005000 	.word	0x52005000
 8003510:	e01e01e1 	.word	0xe01e01e1
 8003514:	05000105 	.word	0x05000105
 8003518:	0800a5a0 	.word	0x0800a5a0
 800351c:	0800a548 	.word	0x0800a548
 8003520:	0800a55c 	.word	0x0800a55c
 8003524:	0800a564 	.word	0x0800a564
 8003528:	0800a578 	.word	0x0800a578
 800352c:	0800a58c 	.word	0x0800a58c
 8003530:	0800a5c4 	.word	0x0800a5c4
 8003534:	0800a5b4 	.word	0x0800a5b4
        ReadData(reinterpret_cast<uint8_t*>(dst), location, length);
 8003538:	4653      	mov	r3, sl
 800353a:	464a      	mov	r2, r9
 800353c:	4629      	mov	r1, r5
 800353e:	4658      	mov	r0, fp
 8003540:	f002 f8c4 	bl	80056cc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>
                    system::ReloadWatchdog();
 8003544:	f002 fbc0 	bl	8005cc8 <recorder::system::ReloadWatchdog()>
        LL_CRC_ResetCRCCalculationUnit(CRC);
    }

    uint32_t Process(const uint8_t* data, uint32_t size)
    {
        while (size >= 4)
 8003548:	f1ba 0f03 	cmp.w	sl, #3
 800354c:	d935      	bls.n	80035ba <recorder::SampleMemory<half>::Init()+0x392>
 800354e:	f1aa 0304 	sub.w	r3, sl, #4
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8003552:	481e      	ldr	r0, [pc, #120]	@ (80035cc <recorder::SampleMemory<half>::Init()+0x3a4>)
 8003554:	f023 0303 	bic.w	r3, r3, #3
 8003558:	3304      	adds	r3, #4
 800355a:	442b      	add	r3, r5
        {
            auto word = *reinterpret_cast<const uint32_t*>(data);
 800355c:	f855 2b04 	ldr.w	r2, [r5], #4
        while (size >= 4)
 8003560:	429d      	cmp	r5, r3
 8003562:	6002      	str	r2, [r0, #0]
 8003564:	d1fa      	bne.n	800355c <recorder::SampleMemory<half>::Init()+0x334>
 8003566:	f00a 0303 	and.w	r3, sl, #3
            LL_CRC_FeedData32(CRC, word);
            size -= 4;
            data += 4;
        }

        while (size--)
 800356a:	b153      	cbz	r3, 8003582 <recorder::SampleMemory<half>::Init()+0x35a>
        {
            LL_CRC_FeedData8(CRC, *data++);
 800356c:	7828      	ldrb	r0, [r5, #0]
        while (size--)
 800356e:	2b01      	cmp	r3, #1
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8003570:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <recorder::SampleMemory<half>::Init()+0x3a4>)
 8003572:	7010      	strb	r0, [r2, #0]
 8003574:	d005      	beq.n	8003582 <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 8003576:	7868      	ldrb	r0, [r5, #1]
        while (size--)
 8003578:	2b02      	cmp	r3, #2
 800357a:	7010      	strb	r0, [r2, #0]
 800357c:	d001      	beq.n	8003582 <recorder::SampleMemory<half>::Init()+0x35a>
            LL_CRC_FeedData8(CRC, *data++);
 800357e:	78ab      	ldrb	r3, [r5, #2]
 8003580:	7013      	strb	r3, [r2, #0]
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <recorder::SampleMemory<half>::Init()+0x3a4>)
                    if (total_size == 0)
 8003584:	ebb8 080a 	subs.w	r8, r8, sl
                    address += read_size;
 8003588:	44d1      	add	r9, sl
 800358a:	681b      	ldr	r3, [r3, #0]
                    if (total_size == 0)
 800358c:	d004      	beq.n	8003598 <recorder::SampleMemory<half>::Init()+0x370>
                for (auto link : buffer_chain_)
 800358e:	3603      	adds	r6, #3
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	370c      	adds	r7, #12
 8003594:	42b3      	cmp	r3, r6
 8003596:	d185      	bne.n	80034a4 <recorder::SampleMemory<half>::Init()+0x27c>
 8003598:	465d      	mov	r5, fp
 800359a:	4a0c      	ldr	r2, [pc, #48]	@ (80035cc <recorder::SampleMemory<half>::Init()+0x3a4>)
                if (audio_info_.crc32 == crc_.value())
 800359c:	69e9      	ldr	r1, [r5, #28]
 800359e:	6813      	ldr	r3, [r2, #0]
        return Process(reinterpret_cast<const uint8_t*>(data), size);
    }

    uint32_t value(void) const
    {
        return ~LL_CRC_ReadData32(CRC);
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4299      	cmp	r1, r3
 80035a4:	d00b      	beq.n	80035be <recorder::SampleMemory<half>::Init()+0x396>
 80035a6:	6811      	ldr	r1, [r2, #0]
                    printf("invalid CRC32: 0x%08" PRIX32 "\n", crc_.value());
 80035a8:	4809      	ldr	r0, [pc, #36]	@ (80035d0 <recorder::SampleMemory<half>::Init()+0x3a8>)
 80035aa:	43c9      	mvns	r1, r1
 80035ac:	f005 ff26 	bl	80093fc <iprintf>
                    audio_info_.size = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61ab      	str	r3, [r5, #24]
    }
 80035b4:	b005      	add	sp, #20
 80035b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (size >= 4)
 80035ba:	4653      	mov	r3, sl
 80035bc:	e7d5      	b.n	800356a <recorder::SampleMemory<half>::Init()+0x342>
                    printf("done\n");
 80035be:	4805      	ldr	r0, [pc, #20]	@ (80035d4 <recorder::SampleMemory<half>::Init()+0x3ac>)
    }
 80035c0:	b005      	add	sp, #20
 80035c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    printf("done\n");
 80035c6:	f005 bf81 	b.w	80094cc <puts>
 80035ca:	bf00      	nop
 80035cc:	58024c00 	.word	0x58024c00
 80035d0:	0800a5e0 	.word	0x0800a5e0
 80035d4:	0800a5d8 	.word	0x0800a5d8

080035d8 <main>:

    extern "C" int main(void)
    {
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        system::Init();
        ProfilingPin<PROFILE_MAIN>::Set();

        analog_.Init(Process);
 80035dc:	f8df 93dc 	ldr.w	r9, [pc, #988]	@ 80039bc <main+0x3e4>
    {
 80035e0:	b083      	sub	sp, #12
        system::Init();
 80035e2:	f002 fb79 	bl	8005cd8 <recorder::system::Init()>
        analog_.Init(Process);
 80035e6:	49cf      	ldr	r1, [pc, #828]	@ (8003924 <main+0x34c>)
 80035e8:	4648      	mov	r0, r9
 80035ea:	f001 fcc3 	bl	8004f74 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
        switches_.Init();
 80035ee:	48ce      	ldr	r0, [pc, #824]	@ (8003928 <main+0x350>)
 80035f0:	f7fd f8b0 	bl	8000754 <recorder::Switches::Init()>
        history_ = initial_state ? ((1 << kShift) | 1) : 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	4acd      	ldr	r2, [pc, #820]	@ (800392c <main+0x354>)
 80035f8:	49cd      	ldr	r1, [pc, #820]	@ (8003930 <main+0x358>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4acd      	ldr	r2, [pc, #820]	@ (8003934 <main+0x35c>)
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	48cd      	ldr	r0, [pc, #820]	@ (8003938 <main+0x360>)
 8003602:	49ce      	ldr	r1, [pc, #824]	@ (800393c <main+0x364>)
 8003604:	6013      	str	r3, [r2, #0]
            if (state_ == STATE_STOPPED)
 8003606:	f899 2160 	ldrb.w	r2, [r9, #352]	@ 0x160
 800360a:	6003      	str	r3, [r0, #0]
 800360c:	600b      	str	r3, [r1, #0]
 800360e:	2a00      	cmp	r2, #0
 8003610:	f040 84f3 	bne.w	8003ffa <main+0xa22>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8003614:	48ca      	ldr	r0, [pc, #808]	@ (8003940 <main+0x368>)
                fade_position_ = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800361c:	4ac9      	ldr	r2, [pc, #804]	@ (8003944 <main+0x36c>)
 800361e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003622:	6184      	str	r4, [r0, #24]
                dac_.Start();
 8003624:	f509 70aa 	add.w	r0, r9, #340	@ 0x154
                fade_position_ = 0;
 8003628:	f8c9 315c 	str.w	r3, [r9, #348]	@ 0x15c
                state_ = STATE_STARTING;
 800362c:	2301      	movs	r3, #1
 800362e:	6191      	str	r1, [r2, #24]
 8003630:	f8a9 3160 	strh.w	r3, [r9, #352]	@ 0x160
                dac_.Start();
 8003634:	f001 fd54 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 8003638:	f109 0004 	add.w	r0, r9, #4
 800363c:	f001 fa50 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 8003640:	4648      	mov	r0, r9
 8003642:	f001 fd39 	bl	80050b8 <recorder::Analog::StartTimer()>
        button_3_.Init();
        button_4_.Init();

        analog_.StartPlayback();
        recording_.Init();
        playback_.Init();
 8003646:	f8df 837c 	ldr.w	r8, [pc, #892]	@ 80039c4 <main+0x3ec>
        mode_ = false;
 800364a:	2700      	movs	r7, #0
        recording_.Init();
 800364c:	48be      	ldr	r0, [pc, #760]	@ (8003948 <main+0x370>)
 800364e:	2600      	movs	r6, #0
 8003650:	4cbe      	ldr	r4, [pc, #760]	@ (800394c <main+0x374>)
 8003652:	f7ff fb8f 	bl	8002d74 <recorder::RecordingEngine<recorder::SampleMemory<half> >::Init()>
        playback_.Init();
 8003656:	4640      	mov	r0, r8
        base_frequency_ = 261.63f; // Default to middle C
 8003658:	4dbd      	ldr	r5, [pc, #756]	@ (8003950 <main+0x378>)
 800365a:	f7ff fc83 	bl	8002f64 <recorder::PlaybackEngine<recorder::SampleMemory<half> >::Init()>
        waveform_ = w;
 800365e:	2301      	movs	r3, #1
            strum_current_[s] = 0.0f;
 8003660:	2230      	movs	r2, #48	@ 0x30
 8003662:	4639      	mov	r1, r7
 8003664:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
        base_frequency_ = 261.63f; // Default to middle C
 8003668:	6125      	str	r5, [r4, #16]
 800366a:	6263      	str	r3, [r4, #36]	@ 0x24
 800366c:	6323      	str	r3, [r4, #48]	@ 0x30
 800366e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8003670:	64a3      	str	r3, [r4, #72]	@ 0x48
        mode_ = false;
 8003672:	f884 7208 	strb.w	r7, [r4, #520]	@ 0x208
        current_chord_ = 0;
 8003676:	f8c4 7204 	str.w	r7, [r4, #516]	@ 0x204
        in_base_freq_mode_ = false;
 800367a:	7527      	strb	r7, [r4, #20]
        seventh_hold_counter_ = 0;
 800367c:	61a7      	str	r7, [r4, #24]
            current_freq_[v] = 0.0f;
 800367e:	64e7      	str	r7, [r4, #76]	@ 0x4c
            env_state_[v] = ENV_IDLE;
 8003680:	66e7      	str	r7, [r4, #108]	@ 0x6c
            current_freq_[v] = 0.0f;
 8003682:	65a7      	str	r7, [r4, #88]	@ 0x58
            env_state_[v] = ENV_IDLE;
 8003684:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
        phase_inc_ = freq * kPhaseFactor;
 8003688:	6226      	str	r6, [r4, #32]
 800368a:	62e6      	str	r6, [r4, #44]	@ 0x2c
 800368c:	63a6      	str	r6, [r4, #56]	@ 0x38
 800368e:	6466      	str	r6, [r4, #68]	@ 0x44
            is_active_ = false;
 8003690:	f8df a334 	ldr.w	sl, [pc, #820]	@ 80039c8 <main+0x3f0>
            current_freq_[v] = 0.0f;
 8003694:	e9c4 7714 	strd	r7, r7, [r4, #80]	@ 0x50
            env_state_[v] = ENV_IDLE;
 8003698:	e9c4 771c 	strd	r7, r7, [r4, #112]	@ 0x70
 800369c:	e9c4 771e 	strd	r7, r7, [r4, #120]	@ 0x78
            strum_current_[s] = 0.0f;
 80036a0:	f005 ff47 	bl	8009532 <memset>
            strum_attenuation_[s] = 1.0f;
 80036a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
            sections_[n].b[0] = sections[n].b[0];
 80036a8:	4aaa      	ldr	r2, [pc, #680]	@ (8003954 <main+0x37c>)
        last_strum_ = -1;
 80036aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
            strum_attenuation_[s] = 1.0f;
 80036ae:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 80036b2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80036b6:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
 80036ba:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80036be:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80036c2:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
            strum_state_[s] = ENV_IDLE;
 80036c6:	f8a4 7100 	strh.w	r7, [r4, #256]	@ 0x100
        waveform_ = w;
 80036ca:	f8c4 708c 	str.w	r7, [r4, #140]	@ 0x8c
 80036ce:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
 80036d2:	f8c4 70a4 	str.w	r7, [r4, #164]	@ 0xa4
 80036d6:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
 80036da:	f8c4 70bc 	str.w	r7, [r4, #188]	@ 0xbc
 80036de:	f8c4 70c8 	str.w	r7, [r4, #200]	@ 0xc8
        phase_inc_ = freq * kPhaseFactor;
 80036e2:	f8c4 6088 	str.w	r6, [r4, #136]	@ 0x88
 80036e6:	f8c4 6094 	str.w	r6, [r4, #148]	@ 0x94
 80036ea:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
 80036ee:	f8c4 60ac 	str.w	r6, [r4, #172]	@ 0xac
 80036f2:	f8c4 60b8 	str.w	r6, [r4, #184]	@ 0xb8
 80036f6:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 80036fa:	f8c4 70fc 	str.w	r7, [r4, #252]	@ 0xfc
            strum_level_[s] = 0.0f;
 80036fe:	f8c4 7104 	str.w	r7, [r4, #260]	@ 0x104
            strum_activation_time_[s] = 0;
 8003702:	f8c4 7120 	str.w	r7, [r4, #288]	@ 0x120
            strum_level_[s] = 0.0f;
 8003706:	f8c4 7118 	str.w	r7, [r4, #280]	@ 0x118
            strum_activation_time_[s] = 0;
 800370a:	f8c4 7134 	str.w	r7, [r4, #308]	@ 0x134
    bool sw[NUM_SWITCHES];
    bool detect[NUM_DETECTS];

    void Init(void)
    {
        *this = {};
 800370e:	4892      	ldr	r0, [pc, #584]	@ (8003958 <main+0x380>)
            strum_level_[s] = 0.0f;
 8003710:	e9c4 7742 	strd	r7, r7, [r4, #264]	@ 0x108
 8003714:	e9c4 7744 	strd	r7, r7, [r4, #272]	@ 0x110
            strum_activation_time_[s] = 0;
 8003718:	e9c4 7749 	strd	r7, r7, [r4, #292]	@ 0x124
 800371c:	e9c4 774b 	strd	r7, r7, [r4, #300]	@ 0x12c
        last_strum_ = -1;
 8003720:	f8c4 111c 	str.w	r1, [r4, #284]	@ 0x11c
 8003724:	4639      	mov	r1, r7
 8003726:	f8c4 2158 	str.w	r2, [r4, #344]	@ 0x158
            sections_[n].b[2] = sections[n].b[2];
 800372a:	f8c4 2160 	str.w	r2, [r4, #352]	@ 0x160
        num_sections_ = num_sections;
 800372e:	2205      	movs	r2, #5
            sections_[n].b[0] = sections[n].b[0];
 8003730:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
        num_sections_ = num_sections;
 8003734:	f8c4 2154 	str.w	r2, [r4, #340]	@ 0x154
            sections_[n].b[1] = sections[n].b[1];
 8003738:	4a88      	ldr	r2, [pc, #544]	@ (800395c <main+0x384>)
            sections_[n].b[2] = sections[n].b[2];
 800373a:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
            sections_[n].b[1] = sections[n].b[1];
 800373e:	f8c4 215c 	str.w	r2, [r4, #348]	@ 0x15c
            sections_[n].a[0] = sections[n].a[0];
 8003742:	4a87      	ldr	r2, [pc, #540]	@ (8003960 <main+0x388>)
            sections_[n].b[0] = sections[n].b[0];
 8003744:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
            sections_[n].a[0] = sections[n].a[0];
 8003748:	f8c4 2164 	str.w	r2, [r4, #356]	@ 0x164
            sections_[n].a[1] = sections[n].a[1];
 800374c:	4a85      	ldr	r2, [pc, #532]	@ (8003964 <main+0x38c>)
        strum_activation_counter_ = 0;
 800374e:	f8c4 7138 	str.w	r7, [r4, #312]	@ 0x138
 8003752:	f8c4 2168 	str.w	r2, [r4, #360]	@ 0x168
            sections_[n].b[1] = sections[n].b[1];
 8003756:	4a84      	ldr	r2, [pc, #528]	@ (8003968 <main+0x390>)
            x_[n][0] = 0;
 8003758:	f8c4 61bc 	str.w	r6, [r4, #444]	@ 0x1bc
            sections_[n].b[1] = sections[n].b[1];
 800375c:	f8c4 2170 	str.w	r2, [r4, #368]	@ 0x170
            sections_[n].a[0] = sections[n].a[0];
 8003760:	4a82      	ldr	r2, [pc, #520]	@ (800396c <main+0x394>)
            x_[n][1] = 0;
 8003762:	f8c4 61c0 	str.w	r6, [r4, #448]	@ 0x1c0
            sections_[n].a[0] = sections[n].a[0];
 8003766:	f8c4 2178 	str.w	r2, [r4, #376]	@ 0x178
            sections_[n].a[1] = sections[n].a[1];
 800376a:	4a81      	ldr	r2, [pc, #516]	@ (8003970 <main+0x398>)
            x_[n][2] = 0;
 800376c:	f8c4 61c4 	str.w	r6, [r4, #452]	@ 0x1c4
            sections_[n].a[1] = sections[n].a[1];
 8003770:	f8c4 217c 	str.w	r2, [r4, #380]	@ 0x17c
            sections_[n].b[1] = sections[n].b[1];
 8003774:	4a7f      	ldr	r2, [pc, #508]	@ (8003974 <main+0x39c>)
            x_[n][0] = 0;
 8003776:	f8c4 61c8 	str.w	r6, [r4, #456]	@ 0x1c8
            sections_[n].b[1] = sections[n].b[1];
 800377a:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 800377e:	222c      	movs	r2, #44	@ 0x2c
            x_[n][1] = 0;
 8003780:	f8c4 61cc 	str.w	r6, [r4, #460]	@ 0x1cc
            x_[n][2] = 0;
 8003784:	f8c4 61d0 	str.w	r6, [r4, #464]	@ 0x1d0
            x_[n][0] = 0;
 8003788:	f8c4 61d4 	str.w	r6, [r4, #468]	@ 0x1d4
            x_[n][1] = 0;
 800378c:	f8c4 61d8 	str.w	r6, [r4, #472]	@ 0x1d8
            x_[n][2] = 0;
 8003790:	f8c4 61dc 	str.w	r6, [r4, #476]	@ 0x1dc
            x_[n][0] = 0;
 8003794:	f8c4 61e0 	str.w	r6, [r4, #480]	@ 0x1e0
            x_[n][1] = 0;
 8003798:	f8c4 61e4 	str.w	r6, [r4, #484]	@ 0x1e4
            x_[n][2] = 0;
 800379c:	f8c4 61e8 	str.w	r6, [r4, #488]	@ 0x1e8
            x_[n][0] = 0;
 80037a0:	f8c4 61ec 	str.w	r6, [r4, #492]	@ 0x1ec
            x_[n][1] = 0;
 80037a4:	f8c4 61f0 	str.w	r6, [r4, #496]	@ 0x1f0
            x_[n][2] = 0;
 80037a8:	f8c4 61f4 	str.w	r6, [r4, #500]	@ 0x1f4
        x_[num_sections_][0] = 0;
 80037ac:	f8c4 61f8 	str.w	r6, [r4, #504]	@ 0x1f8
        x_[num_sections_][1] = 0;
 80037b0:	f8c4 61fc 	str.w	r6, [r4, #508]	@ 0x1fc
        x_[num_sections_][2] = 0;
 80037b4:	f8c4 6200 	str.w	r6, [r4, #512]	@ 0x200
            sections_[n].b[2] = sections[n].b[2];
 80037b8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
            sections_[n].b[0] = sections[n].b[0];
 80037bc:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
            sections_[n].b[2] = sections[n].b[2];
 80037c0:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
            sections_[n].b[0] = sections[n].b[0];
 80037c4:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
            sections_[n].b[2] = sections[n].b[2];
 80037c8:	f8c4 31b0 	str.w	r3, [r4, #432]	@ 0x1b0
        compGain_ = 1.0f;
 80037cc:	6063      	str	r3, [r4, #4]
            sections_[n].a[0] = sections[n].a[0];
 80037ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003978 <main+0x3a0>)
        target_freq_[0] = root_freq * chord_multipliers[0];
 80037d0:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80037d2:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
            sections_[n].a[1] = sections[n].a[1];
 80037d6:	4b69      	ldr	r3, [pc, #420]	@ (800397c <main+0x3a4>)
class Monitor
{
public:
    void Init(void)
    {
        length_ = 0;
 80037d8:	4d69      	ldr	r5, [pc, #420]	@ (8003980 <main+0x3a8>)
 80037da:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
            sections_[n].b[1] = sections[n].b[1];
 80037de:	4b69      	ldr	r3, [pc, #420]	@ (8003984 <main+0x3ac>)
        compEnv_ = 0.0f;
 80037e0:	6026      	str	r6, [r4, #0]
 80037e2:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
            sections_[n].a[0] = sections[n].a[0];
 80037e6:	4b68      	ldr	r3, [pc, #416]	@ (8003988 <main+0x3b0>)
 80037e8:	f88a 700c 	strb.w	r7, [sl, #12]
 80037ec:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
            sections_[n].a[1] = sections[n].a[1];
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <main+0x3b4>)
        waveform_ = w;
 80037f2:	f8ca 7008 	str.w	r7, [sl, #8]
 80037f6:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
            sections_[n].b[1] = sections[n].b[1];
 80037fa:	4b65      	ldr	r3, [pc, #404]	@ (8003990 <main+0x3b8>)
        phase_inc_ = freq * kPhaseFactor;
 80037fc:	f8ca 6004 	str.w	r6, [sl, #4]
 8003800:	f8c4 31ac 	str.w	r3, [r4, #428]	@ 0x1ac
            sections_[n].a[0] = sections[n].a[0];
 8003804:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <main+0x3bc>)
 8003806:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
            sections_[n].a[1] = sections[n].a[1];
 800380a:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <main+0x3c0>)
 800380c:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
        alphaAtk_ = std::exp(-1.0f/(kCompAttackTime * kAudioSampleRate));
 8003810:	4b62      	ldr	r3, [pc, #392]	@ (800399c <main+0x3c4>)
 8003812:	60a3      	str	r3, [r4, #8]
        alphaRel_ = std::exp(-1.0f/(kCompReleaseTime* kAudioSampleRate));
 8003814:	4b62      	ldr	r3, [pc, #392]	@ (80039a0 <main+0x3c8>)
 8003816:	60e3      	str	r3, [r4, #12]
        target_freq_[1] = root_freq * chord_multipliers[1];
 8003818:	4b62      	ldr	r3, [pc, #392]	@ (80039a4 <main+0x3cc>)
 800381a:	6623      	str	r3, [r4, #96]	@ 0x60
        target_freq_[2] = root_freq * chord_multipliers[2];
 800381c:	4b62      	ldr	r3, [pc, #392]	@ (80039a8 <main+0x3d0>)
 800381e:	6663      	str	r3, [r4, #100]	@ 0x64
            target_freq_[3] = root_freq * chord_multipliers[3]; // Default to the octave
 8003820:	4b62      	ldr	r3, [pc, #392]	@ (80039ac <main+0x3d4>)
            note_timer_ = 0;
 8003822:	e9ca 7704 	strd	r7, r7, [sl, #16]
 8003826:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003828:	f005 fe83 	bl	8009532 <memset>
 800382c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003830:	4639      	mov	r1, r7
 8003832:	f108 0034 	add.w	r0, r8, #52	@ 0x34
            state_ = STATE_STOPPED;
 8003836:	f888 7030 	strb.w	r7, [r8, #48]	@ 0x30
            cue_play_ = false;
 800383a:	f8a8 7031 	strh.w	r7, [r8, #49]	@ 0x31
 800383e:	f888 7018 	strb.w	r7, [r8, #24]
 8003842:	f8c5 7080 	str.w	r7, [r5, #128]	@ 0x80
 8003846:	f005 fe74 	bl	8009532 <memset>
        write_head_ = 0;
 800384a:	f508 3380 	add.w	r3, r8, #65536	@ 0x10000
        for (int n = 0; n < num_sections_; n++)
 800384e:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8003852:	635f      	str	r7, [r3, #52]	@ 0x34
 8003854:	42ba      	cmp	r2, r7
        hold_count_ = 0;
 8003856:	655f      	str	r7, [r3, #84]	@ 0x54
 8003858:	669f      	str	r7, [r3, #104]	@ 0x68
        envelope_ = 0;
 800385a:	659e      	str	r6, [r3, #88]	@ 0x58
 800385c:	66de      	str	r6, [r3, #108]	@ 0x6c
        history_ = initial_value;
 800385e:	675e      	str	r6, [r3, #116]	@ 0x74
        interpolator_history_ = 0;
 8003860:	679e      	str	r6, [r3, #120]	@ 0x78
 8003862:	dd2d      	ble.n	80038c0 <main+0x2e8>
 8003864:	2a01      	cmp	r2, #1
            x_[n][0] = 0;
 8003866:	f8c3 617c 	str.w	r6, [r3, #380]	@ 0x17c
            x_[n][1] = 0;
 800386a:	f8c3 6180 	str.w	r6, [r3, #384]	@ 0x180
            x_[n][2] = 0;
 800386e:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184
        for (int n = 0; n < num_sections_; n++)
 8003872:	d025      	beq.n	80038c0 <main+0x2e8>
 8003874:	2a02      	cmp	r2, #2
            x_[n][0] = 0;
 8003876:	f8c3 6188 	str.w	r6, [r3, #392]	@ 0x188
            x_[n][1] = 0;
 800387a:	f8c3 618c 	str.w	r6, [r3, #396]	@ 0x18c
            x_[n][2] = 0;
 800387e:	f8c3 6190 	str.w	r6, [r3, #400]	@ 0x190
        for (int n = 0; n < num_sections_; n++)
 8003882:	d01d      	beq.n	80038c0 <main+0x2e8>
 8003884:	2a03      	cmp	r2, #3
            x_[n][0] = 0;
 8003886:	f8c3 6194 	str.w	r6, [r3, #404]	@ 0x194
            x_[n][1] = 0;
 800388a:	f8c3 6198 	str.w	r6, [r3, #408]	@ 0x198
            x_[n][2] = 0;
 800388e:	f8c3 619c 	str.w	r6, [r3, #412]	@ 0x19c
        for (int n = 0; n < num_sections_; n++)
 8003892:	d015      	beq.n	80038c0 <main+0x2e8>
 8003894:	2a04      	cmp	r2, #4
            x_[n][0] = 0;
 8003896:	f8c3 61a0 	str.w	r6, [r3, #416]	@ 0x1a0
            x_[n][1] = 0;
 800389a:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
            x_[n][2] = 0;
 800389e:	f8c3 61a8 	str.w	r6, [r3, #424]	@ 0x1a8
        for (int n = 0; n < num_sections_; n++)
 80038a2:	d00d      	beq.n	80038c0 <main+0x2e8>
 80038a4:	2a05      	cmp	r2, #5
            x_[n][0] = 0;
 80038a6:	f8c3 61ac 	str.w	r6, [r3, #428]	@ 0x1ac
            x_[n][1] = 0;
 80038aa:	f8c3 61b0 	str.w	r6, [r3, #432]	@ 0x1b0
            x_[n][2] = 0;
 80038ae:	f8c3 61b4 	str.w	r6, [r3, #436]	@ 0x1b4
        for (int n = 0; n < num_sections_; n++)
 80038b2:	d005      	beq.n	80038c0 <main+0x2e8>
            x_[n][0] = 0;
 80038b4:	f8c3 61b8 	str.w	r6, [r3, #440]	@ 0x1b8
            x_[n][1] = 0;
 80038b8:	f8c3 61bc 	str.w	r6, [r3, #444]	@ 0x1bc
            x_[n][2] = 0;
 80038bc:	f8c3 61c0 	str.w	r6, [r3, #448]	@ 0x1c0
        x_[num_sections_][0] = 0;
 80038c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80038c4:	2400      	movs	r4, #0
        synth_engine_.Init();
        jingle_engine_.Init(); // Initialize jingle engine
        io_.Init();
        monitor_.Init();
        playback_.Reset();
        sample_memory_.Init();
 80038c6:	483a      	ldr	r0, [pc, #232]	@ (80039b0 <main+0x3d8>)
 80038c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80038cc:	f8c3 417c 	str.w	r4, [r3, #380]	@ 0x17c
        x_[num_sections_][1] = 0;
 80038d0:	f8c3 4180 	str.w	r4, [r3, #384]	@ 0x180
        x_[num_sections_][2] = 0;
 80038d4:	f8c3 4184 	str.w	r4, [r3, #388]	@ 0x184
 80038d8:	f7ff fca6 	bl	8003228 <recorder::SampleMemory<half>::Init()>
            if (state_ == STATE_STOPPED)
 80038dc:	f899 3160 	ldrb.w	r3, [r9, #352]	@ 0x160
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 837e 	bne.w	8003fe2 <main+0xa0a>
 80038e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <main+0x368>)
                state_ = STATE_STARTING;
 80038ec:	2301      	movs	r3, #1
                fade_position_ = 0;
 80038ee:	f8c9 415c 	str.w	r4, [r9, #348]	@ 0x15c
                dac_.Start();
 80038f2:	4830      	ldr	r0, [pc, #192]	@ (80039b4 <main+0x3dc>)
                state_ = STATE_STARTING;
 80038f4:	f8a9 3160 	strh.w	r3, [r9, #352]	@ 0x160
 80038f8:	6191      	str	r1, [r2, #24]
 80038fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <main+0x36c>)
 8003900:	619a      	str	r2, [r3, #24]
                dac_.Start();
 8003902:	f001 fbed 	bl	80050e0 <recorder::Dac::Start()>
                adc_.Start();
 8003906:	482c      	ldr	r0, [pc, #176]	@ (80039b8 <main+0x3e0>)
 8003908:	f001 f8ea 	bl	8004ae0 <recorder::Adc::Start()>
                StartTimer();
 800390c:	482b      	ldr	r0, [pc, #172]	@ (80039bc <main+0x3e4>)
 800390e:	f001 fbd3 	bl	80050b8 <recorder::Analog::StartTimer()>
            current_note_ = 0;
 8003912:	2400      	movs	r4, #0
 8003914:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <main+0x3e8>)
            is_active_ = true;
 8003916:	f240 1201 	movw	r2, #257	@ 0x101
        
        // Start with startup jingle instead of directly to synth
        analog_.Start(true); // Ensure audio is on for jingle
        jingle_engine_.StartupJingle();
        Transition(STATE_STARTUP);
 800391a:	200b      	movs	r0, #11
 800391c:	f8ca 3004 	str.w	r3, [sl, #4]
        
        // Initialize idle timeout counter
        idle_timeout_ = 0;

        bool expire_watchdog = false;
 8003920:	46a1      	mov	r9, r4
 8003922:	e053      	b.n	80039cc <main+0x3f4>
 8003924:	08002259 	.word	0x08002259
 8003928:	20010b34 	.word	0x20010b34
 800392c:	20010908 	.word	0x20010908
 8003930:	200108e0 	.word	0x200108e0
 8003934:	20010900 	.word	0x20010900
 8003938:	20010904 	.word	0x20010904
 800393c:	200108fc 	.word	0x200108fc
 8003940:	58021800 	.word	0x58021800
 8003944:	58020400 	.word	0x58020400
 8003948:	20010748 	.word	0x20010748
 800394c:	20010924 	.word	0x20010924
 8003950:	4382d0a4 	.word	0x4382d0a4
 8003954:	3a446737 	.word	0x3a446737
 8003958:	20000550 	.word	0x20000550
 800395c:	3a85b218 	.word	0x3a85b218
 8003960:	bfbc65fb 	.word	0xbfbc65fb
 8003964:	3f10296d 	.word	0x3f10296d
 8003968:	beade39b 	.word	0xbeade39b
 800396c:	bfb80d8c 	.word	0xbfb80d8c
 8003970:	3f2d1db0 	.word	0x3f2d1db0
 8003974:	bf74e042 	.word	0xbf74e042
 8003978:	bfb33dc4 	.word	0xbfb33dc4
 800397c:	3f4f7eb1 	.word	0x3f4f7eb1
 8003980:	20000424 	.word	0x20000424
 8003984:	bf954df0 	.word	0xbf954df0
 8003988:	bfb0aec0 	.word	0xbfb0aec0
 800398c:	3f68ba72 	.word	0x3f68ba72
 8003990:	bf9e3e9d 	.word	0xbf9e3e9d
 8003994:	bfb140a2 	.word	0xbfb140a2
 8003998:	3f793977 	.word	0x3f793977
 800399c:	1263ca70 	.word	0x1263ca70
 80039a0:	3f7feb86 	.word	0x3f7feb86
 80039a4:	43a4d10a 	.word	0x43a4d10a
 80039a8:	43c40044 	.word	0x43c40044
 80039ac:	4402d0a4 	.word	0x4402d0a4
 80039b0:	2001088c 	.word	0x2001088c
 80039b4:	20010d90 	.word	0x20010d90
 80039b8:	20010c40 	.word	0x20010c40
 80039bc:	20010c3c 	.word	0x20010c3c
 80039c0:	3dd26a54 	.word	0x3dd26a54
 80039c4:	20000580 	.word	0x20000580
 80039c8:	2001090c 	.word	0x2001090c
 80039cc:	f8aa 200c 	strh.w	r2, [sl, #12]
            note_timer_ = 0;
 80039d0:	e9ca 4404 	strd	r4, r4, [sl, #16]
        Transition(STATE_STARTUP);
 80039d4:	f7fe fd6c 	bl	80024b0 <recorder::Transition(recorder::State)>
        idle_timeout_ = 0;
 80039d8:	4b81      	ldr	r3, [pc, #516]	@ (8003be0 <main+0x608>)
 80039da:	601c      	str	r4, [r3, #0]
        if (kADCAlwaysOn)
 80039dc:	4b81      	ldr	r3, [pc, #516]	@ (8003be4 <main+0x60c>)
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80039de:	4c82      	ldr	r4, [pc, #520]	@ (8003be8 <main+0x610>)
 80039e0:	f103 0ba5 	add.w	fp, r3, #165	@ 0xa5
    }

    const Message& Receive(void)
    {
        char* result =
            std::fgets(line_ + length_, sizeof(line_) - length_, stdin);
 80039e4:	4b81      	ldr	r3, [pc, #516]	@ (8003bec <main+0x614>)
  { __atomic_thread_fence(int(__m)); }
 80039e6:	f3bf 8f5b 	dmb	ish
 80039ea:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f1c0 0180 	rsb	r1, r0, #128	@ 0x80
 80039f4:	4428      	add	r0, r5
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	f002 fc00 	bl	80061fc <fgets>

        if (result != nullptr)
 80039fc:	b1c8      	cbz	r0, 8003a32 <main+0x45a>
        {
            length_ = std::strlen(line_);
 80039fe:	487c      	ldr	r0, [pc, #496]	@ (8003bf0 <main+0x618>)
 8003a00:	f7fc fc4e 	bl	80002a0 <strlen>
 8003a04:	f8c5 0080 	str.w	r0, [r5, #128]	@ 0x80
        }

        if (length_ == 0 || line_[length_ - 1] != '\n')
 8003a08:	b118      	cbz	r0, 8003a12 <main+0x43a>
 8003a0a:	1e43      	subs	r3, r0, #1
 8003a0c:	5cea      	ldrb	r2, [r5, r3]
 8003a0e:	2a0a      	cmp	r2, #10
 8003a10:	d012      	beq.n	8003a38 <main+0x460>
        {
            message_.payload.type = Message::TYPE_NONE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
        for (;;)
        {
            ProfilingPin<PROFILE_MAIN_LOOP>::Set();
            std::atomic_thread_fence(std::memory_order_acq_rel);

            bool standby = false;
 8003a18:	2600      	movs	r6, #0
                system::Reset();
            }
            else if (message.type == Message::TYPE_ERASE)
                sample_memory_.Erase();

            if (!expire_watchdog)
 8003a1a:	f1b9 0f00 	cmp.w	r9, #0
 8003a1e:	d101      	bne.n	8003a24 <main+0x44c>
                system::ReloadWatchdog();
 8003a20:	f002 f952 	bl	8005cc8 <recorder::system::ReloadWatchdog()>

            StateMachine(standby);
 8003a24:	4630      	mov	r0, r6
 8003a26:	f7fe fdab 	bl	8002580 <recorder::StateMachine(bool)>
            ProfilingPin<PROFILE_MAIN_LOOP>::Clear();
            system::Delay_ms(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f002 fb4e 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
        }
 8003a30:	e7d8      	b.n	80039e4 <main+0x40c>
        if (length_ == 0 || line_[length_ - 1] != '\n')
 8003a32:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8003a36:	e7e7      	b.n	8003a08 <main+0x430>
        }
        else
        {
            if (line_[0] == '\xff' && length_ > 1)
 8003a38:	782e      	ldrb	r6, [r5, #0]
 8003a3a:	2801      	cmp	r0, #1
 8003a3c:	f1a6 06ff 	sub.w	r6, r6, #255	@ 0xff
 8003a40:	fab6 f686 	clz	r6, r6
 8003a44:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8003a48:	bf08      	it	eq
 8003a4a:	2600      	moveq	r6, #0
 8003a4c:	b966      	cbnz	r6, 8003a68 <main+0x490>
            }
            else
            {
                message_.payload.type = Message::TYPE_TEXT;
                line_[length_ - 1] = '\0';
                std::strncpy(message_.payload.text, line_,
 8003a4e:	4968      	ldr	r1, [pc, #416]	@ (8003bf0 <main+0x618>)
 8003a50:	2280      	movs	r2, #128	@ 0x80
                line_[length_ - 1] = '\0';
 8003a52:	54ee      	strb	r6, [r5, r3]
                message_.payload.type = Message::TYPE_TEXT;
 8003a54:	2301      	movs	r3, #1
                std::strncpy(message_.payload.text, line_,
 8003a56:	f101 0087 	add.w	r0, r1, #135	@ 0x87
                message_.payload.type = Message::TYPE_TEXT;
 8003a5a:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
                std::strncpy(message_.payload.text, line_,
 8003a5e:	f005 fd55 	bl	800950c <strncpy>
                    sizeof(message_.payload.text));
            }

            length_ = 0;
 8003a62:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 8003a66:	e7d7      	b.n	8003a18 <main+0x440>
                line_[length_ - 1] = '\0';
 8003a68:	2700      	movs	r7, #0
}

inline size_t Decode(void* data, size_t size, const char* str)
{
    auto bytes = reinterpret_cast<uint8_t*>(data);
    size_t length = std::strlen(str);
 8003a6a:	4862      	ldr	r0, [pc, #392]	@ (8003bf4 <main+0x61c>)
 8003a6c:	54ef      	strb	r7, [r5, r3]
 8003a6e:	f7fc fc17 	bl	80002a0 <strlen>
    size_t num_bytes = 0;

    while (length)
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d04e      	beq.n	8003b14 <main+0x53c>
    size_t num_bytes = 0;
 8003a76:	463a      	mov	r2, r7
    while (length)
 8003a78:	495e      	ldr	r1, [pc, #376]	@ (8003bf4 <main+0x61c>)
        uint32_t word = 0;

        for (size_t i = 0; i < 5; i++)
        {
            word *= 85;
            word += group[i];
 8003a7a:	46ca      	mov	sl, r9
 8003a7c:	9601      	str	r6, [sp, #4]
            group[i] = length ? *str - 33 : 84;
 8003a7e:	780b      	ldrb	r3, [r1, #0]
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003a80:	2804      	cmp	r0, #4
            group[i] = length ? *str - 33 : 84;
 8003a82:	f1a3 0321 	sub.w	r3, r3, #33	@ 0x21
 8003a86:	b2db      	uxtb	r3, r3
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003a88:	f240 8254 	bls.w	8003f34 <main+0x95c>
            group[i] = length ? *str - 33 : 84;
 8003a8c:	f891 c001 	ldrb.w	ip, [r1, #1]
                length--;
 8003a90:	3805      	subs	r0, #5
            group[i] = length ? *str - 33 : 84;
 8003a92:	f891 8003 	ldrb.w	r8, [r1, #3]
            word += group[i];
 8003a96:	2704      	movs	r7, #4
            group[i] = length ? *str - 33 : 84;
 8003a98:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003a9c:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
 8003aa0:	f891 e004 	ldrb.w	lr, [r1, #4]
 8003aa4:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
 8003aa8:	f1a9 0921 	sub.w	r9, r9, #33	@ 0x21
            word += group[i];
 8003aac:	fa5f fc8c 	uxtb.w	ip, ip
            group[i] = length ? *str - 33 : 84;
 8003ab0:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
            word += group[i];
 8003ab4:	fa5f f888 	uxtb.w	r8, r8
 8003ab8:	fa5f f989 	uxtb.w	r9, r9
                str++;
 8003abc:	3105      	adds	r1, #5
            word += group[i];
 8003abe:	fa5f fe8e 	uxtb.w	lr, lr
 8003ac2:	2655      	movs	r6, #85	@ 0x55
        }

        for (size_t i = 0; i < 4 - padding; i++)
        {
            if (num_bytes < size)
 8003ac4:	2a82      	cmp	r2, #130	@ 0x82
            word += group[i];
 8003ac6:	fb16 c303 	smlabb	r3, r6, r3, ip
            word *= 85;
 8003aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ace:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8003ad2:	444b      	add	r3, r9
            word *= 85;
 8003ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ad8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8003adc:	4443      	add	r3, r8
            word *= 85;
 8003ade:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ae2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
            word += group[i];
 8003ae6:	4473      	add	r3, lr
            if (num_bytes < size)
 8003ae8:	d810      	bhi.n	8003b0c <main+0x534>
            {
                bytes[num_bytes] = word >> 24;
 8003aea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8003aee:	4e3d      	ldr	r6, [pc, #244]	@ (8003be4 <main+0x60c>)
        for (size_t i = 0; i < 4 - padding; i++)
 8003af0:	2f01      	cmp	r7, #1
                num_bytes++;
 8003af2:	f102 0e01 	add.w	lr, r2, #1
                bytes[num_bytes] = word >> 24;
 8003af6:	f806 c002 	strb.w	ip, [r6, r2]
                word <<= 8;
 8003afa:	ea4f 2c03 	mov.w	ip, r3, lsl #8
        for (size_t i = 0; i < 4 - padding; i++)
 8003afe:	f000 8243 	beq.w	8003f88 <main+0x9b0>
            if (num_bytes < size)
 8003b02:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 8003b06:	f040 81f3 	bne.w	8003ef0 <main+0x918>
        for (size_t i = 0; i < 4 - padding; i++)
 8003b0a:	2283      	movs	r2, #131	@ 0x83
    while (length)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1b6      	bne.n	8003a7e <main+0x4a6>
 8003b10:	46d1      	mov	r9, sl
 8003b12:	9e01      	ldr	r6, [sp, #4]
        checksum = 0;
    }

    bool Verify(void)
    {
        if (size > sizeof(T))
 8003b14:	f895 3084 	ldrb.w	r3, [r5, #132]	@ 0x84
 8003b18:	2b81      	cmp	r3, #129	@ 0x81
 8003b1a:	d81f      	bhi.n	8003b5c <main+0x584>
 8003b1c:	4936      	ldr	r1, [pc, #216]	@ (8003bf8 <main+0x620>)
 8003b1e:	2200      	movs	r2, #0
        auto bytes = reinterpret_cast<uint8_t*>(&payload);
        uint8_t sum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            sum += bytes[i];
 8003b20:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b24:	f002 307f 	and.w	r0, r2, #2139062143	@ 0x7f7f7f7f
 8003b28:	405a      	eors	r2, r3
 8003b2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003b2e:	f002 3280 	and.w	r2, r2, #2155905152	@ 0x80808080
 8003b32:	4403      	add	r3, r0
 8003b34:	405a      	eors	r2, r3
        for (uint32_t i = 0; i < sizeof(T); i++)
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <main+0x624>)
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d1f1      	bne.n	8003b20 <main+0x548>
            sum += bytes[i];
 8003b3c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003b40:	f895 1106 	ldrb.w	r1, [r5, #262]	@ 0x106
 8003b44:	4413      	add	r3, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8003b4c:	440b      	add	r3, r1
 8003b4e:	eb03 6312 	add.w	r3, r3, r2, lsr #24
                if (message_.Verify())
 8003b52:	f895 2085 	ldrb.w	r2, [r5, #133]	@ 0x85
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d005      	beq.n	8003b68 <main+0x590>
                    message_.payload.type = Message::TYPE_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f885 3086 	strb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 8003b62:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8003b66:	e757      	b.n	8003a18 <main+0x440>

    Packet<State> state_;

    void Ack(void)
    {
        printf("\xff" "ack\n");
 8003b68:	4825      	ldr	r0, [pc, #148]	@ (8003c00 <main+0x628>)
 8003b6a:	f005 fcaf 	bl	80094cc <puts>
            auto message = monitor_.Receive();
 8003b6e:	f895 3086 	ldrb.w	r3, [r5, #134]	@ 0x86
            length_ = 0;
 8003b72:	2200      	movs	r2, #0
 8003b74:	3b65      	subs	r3, #101	@ 0x65
 8003b76:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
            if (message.type == Message::TYPE_QUERY)
 8003b7a:	2b12      	cmp	r3, #18
 8003b7c:	f63f af4c 	bhi.w	8003a18 <main+0x440>
 8003b80:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <main+0x5b0>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003da5 	.word	0x08003da5
 8003b8c:	08003a19 	.word	0x08003a19
 8003b90:	08003a19 	.word	0x08003a19
 8003b94:	08003a19 	.word	0x08003a19
 8003b98:	08003a19 	.word	0x08003a19
 8003b9c:	08003a19 	.word	0x08003a19
 8003ba0:	08003a19 	.word	0x08003a19
 8003ba4:	08003a19 	.word	0x08003a19
 8003ba8:	08003a19 	.word	0x08003a19
 8003bac:	08003a19 	.word	0x08003a19
 8003bb0:	08003a19 	.word	0x08003a19
 8003bb4:	08003a19 	.word	0x08003a19
 8003bb8:	08003c05 	.word	0x08003c05
 8003bbc:	08003bd5 	.word	0x08003bd5
 8003bc0:	08003a1b 	.word	0x08003a1b
 8003bc4:	08003a19 	.word	0x08003a19
 8003bc8:	08003a19 	.word	0x08003a19
 8003bcc:	08003a19 	.word	0x08003a19
 8003bd0:	08003ea5 	.word	0x08003ea5
                system::SerialFlushTx();
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f002 fa8f 	bl	80060f8 <recorder::system::SerialFlushTx(bool)>
                system::Reset();
 8003bda:	f002 fb0b 	bl	80061f4 <recorder::system::Reset()>
 8003bde:	e71b      	b.n	8003a18 <main+0x440>
 8003be0:	200108e4 	.word	0x200108e4
 8003be4:	200004a8 	.word	0x200004a8
 8003be8:	52005000 	.word	0x52005000
 8003bec:	2000003c 	.word	0x2000003c
 8003bf0:	20000424 	.word	0x20000424
 8003bf4:	20000425 	.word	0x20000425
 8003bf8:	200004aa 	.word	0x200004aa
 8003bfc:	2000052a 	.word	0x2000052a
 8003c00:	0800a5f8 	.word	0x0800a5f8
        for (uint32_t i = 0; i < NUM_POTS; i++)
        {
            state.pot[i] = human.pot[i];
        }

        state.play = human.sw[SWITCH_PLAY];
 8003c04:	48b2      	ldr	r0, [pc, #712]	@ (8003ed0 <main+0x8f8>)
            state.pot[i] = human.pot[i];
 8003c06:	6802      	ldr	r2, [r0, #0]
        state.play = human.sw[SWITCH_PLAY];
 8003c08:	f890 1025 	ldrb.w	r1, [r0, #37]	@ 0x25
            state.pot[i] = human.pot[i];
 8003c0c:	f8c5 2109 	str.w	r2, [r5, #265]	@ 0x109
 8003c10:	6842      	ldr	r2, [r0, #4]
        state.play = human.sw[SWITCH_PLAY];
 8003c12:	f890 3020 	ldrb.w	r3, [r0, #32]
            state.pot[i] = human.pot[i];
 8003c16:	f8c5 210d 	str.w	r2, [r5, #269]	@ 0x10d
 8003c1a:	6882      	ldr	r2, [r0, #8]
        state.play = human.sw[SWITCH_PLAY];
 8003c1c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003c20:	49ac      	ldr	r1, [pc, #688]	@ (8003ed4 <main+0x8fc>)
            state.pot[i] = human.pot[i];
 8003c22:	f8c5 2111 	str.w	r2, [r5, #273]	@ 0x111
 8003c26:	68c2      	ldr	r2, [r0, #12]
 8003c28:	f8c5 2115 	str.w	r2, [r5, #277]	@ 0x115
 8003c2c:	6902      	ldr	r2, [r0, #16]
 8003c2e:	f8c5 2119 	str.w	r2, [r5, #281]	@ 0x119
 8003c32:	6942      	ldr	r2, [r0, #20]
 8003c34:	f8c5 211d 	str.w	r2, [r5, #285]	@ 0x11d
 8003c38:	6982      	ldr	r2, [r0, #24]
 8003c3a:	f8c5 2121 	str.w	r2, [r5, #289]	@ 0x121
 8003c3e:	69c2      	ldr	r2, [r0, #28]
 8003c40:	f8c5 2125 	str.w	r2, [r5, #293]	@ 0x125
        state.play = human.sw[SWITCH_PLAY];
 8003c44:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8003c48:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8003c4c:	f890 2029 	ldrb.w	r2, [r0, #41]	@ 0x29
 8003c50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c54:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
 8003c58:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c5c:	f895 2129 	ldrb.w	r2, [r5, #297]	@ 0x129
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	f022 021f 	bic.w	r2, r2, #31
 8003c68:	4313      	orrs	r3, r2
        return sum == checksum;
    }

    void Sign(void)
    {
        size = sizeof(T);
 8003c6a:	2221      	movs	r2, #33	@ 0x21
 8003c6c:	f885 3129 	strb.w	r3, [r5, #297]	@ 0x129
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8a5 2107 	strh.w	r2, [r5, #263]	@ 0x107
        auto bytes = reinterpret_cast<uint8_t*>(&(payload));
        checksum = 0;

        for (uint32_t i = 0; i < sizeof(T); i++)
        {
            checksum += bytes[i];
 8003c76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003c7a:	4413      	add	r3, r2
        for (uint32_t i = 0; i < sizeof(T); i++)
 8003c7c:	458b      	cmp	fp, r1
            checksum += bytes[i];
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f885 3108 	strb.w	r3, [r5, #264]	@ 0x108
        for (uint32_t i = 0; i < sizeof(T); i++)
 8003c84:	d1f7      	bne.n	8003c76 <main+0x69e>
 8003c86:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8003c8a:	2021      	movs	r0, #33	@ 0x21
    size_t num_chars = 0;
 8003c8c:	2700      	movs	r7, #0
    auto bytes = reinterpret_cast<const uint8_t*>(data);
 8003c8e:	f8df c25c 	ldr.w	ip, [pc, #604]	@ 8003eec <main+0x914>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8003c92:	f1be 0f03 	cmp.w	lr, #3
 8003c96:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c9a:	d975      	bls.n	8003d88 <main+0x7b0>
                word |= *bytes++;
 8003c9c:	f8bc 3000 	ldrh.w	r3, [ip]
                data_size--;
 8003ca0:	f1ae 0e04 	sub.w	lr, lr, #4
                word |= *bytes++;
 8003ca4:	f89c 2002 	ldrb.w	r2, [ip, #2]
                data_size--;
 8003ca8:	f04f 0805 	mov.w	r8, #5
 8003cac:	ba5b      	rev16	r3, r3
                word |= *bytes++;
 8003cae:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8003cb2:	f10c 0c04 	add.w	ip, ip, #4
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003cbc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            if (num_chars < buf_size - 1)
 8003cc0:	2f7e      	cmp	r7, #126	@ 0x7e
 8003cc2:	d858      	bhi.n	8003d76 <main+0x79e>
            word /= 85;
 8003cc4:	4984      	ldr	r1, [pc, #528]	@ (8003ed8 <main+0x900>)
                num_chars++;
 8003cc6:	f107 0901 	add.w	r9, r7, #1
            word /= 85;
 8003cca:	fba1 2300 	umull	r2, r3, r1, r0
 8003cce:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8003cd2:	fba1 2603 	umull	r2, r6, r1, r3
 8003cd6:	ea4f 1696 	mov.w	r6, r6, lsr #6
 8003cda:	fba1 2106 	umull	r2, r1, r1, r6
 8003cde:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed8 <main+0x900>)
 8003ce0:	ea4f 1191 	mov.w	r1, r1, lsr #6
 8003ce4:	fba2 a201 	umull	sl, r2, r2, r1
 8003ce8:	ea4f 1292 	mov.w	r2, r2, lsr #6
                buf[num_chars] = group[i] + 33;
 8003cec:	f102 0a21 	add.w	sl, r2, #33	@ 0x21
 8003cf0:	f805 a007 	strb.w	sl, [r5, r7]
            if (num_chars < buf_size - 1)
 8003cf4:	f000 80d9 	beq.w	8003eaa <main+0x8d2>
            group[4 - i] = (word % 85);
 8003cf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 8003cfc:	f1b8 0f02 	cmp.w	r8, #2
            group[4 - i] = (word % 85);
 8003d00:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8003d04:	eba1 0202 	sub.w	r2, r1, r2
                buf[num_chars] = group[i] + 33;
 8003d08:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 8003d0c:	f805 2009 	strb.w	r2, [r5, r9]
                num_chars++;
 8003d10:	f107 0202 	add.w	r2, r7, #2
        for (size_t i = 0; i < 5 - padding; i++)
 8003d14:	f000 811b 	beq.w	8003f4e <main+0x976>
            if (num_chars < buf_size - 1)
 8003d18:	2a7f      	cmp	r2, #127	@ 0x7f
 8003d1a:	f000 80c6 	beq.w	8003eaa <main+0x8d2>
            group[4 - i] = (word % 85);
 8003d1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 8003d22:	f1b8 0f03 	cmp.w	r8, #3
            group[4 - i] = (word % 85);
 8003d26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8003d2a:	eba6 0101 	sub.w	r1, r6, r1
                buf[num_chars] = group[i] + 33;
 8003d2e:	f101 0121 	add.w	r1, r1, #33	@ 0x21
 8003d32:	54a9      	strb	r1, [r5, r2]
                num_chars++;
 8003d34:	f107 0103 	add.w	r1, r7, #3
        for (size_t i = 0; i < 5 - padding; i++)
 8003d38:	f000 8124 	beq.w	8003f84 <main+0x9ac>
            if (num_chars < buf_size - 1)
 8003d3c:	297f      	cmp	r1, #127	@ 0x7f
 8003d3e:	f000 80b4 	beq.w	8003eaa <main+0x8d2>
            group[4 - i] = (word % 85);
 8003d42:	eb06 0686 	add.w	r6, r6, r6, lsl #2
        for (size_t i = 0; i < 5 - padding; i++)
 8003d46:	f1b8 0f05 	cmp.w	r8, #5
            group[4 - i] = (word % 85);
 8003d4a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8003d4e:	eba3 0206 	sub.w	r2, r3, r6
                buf[num_chars] = group[i] + 33;
 8003d52:	f102 0221 	add.w	r2, r2, #33	@ 0x21
 8003d56:	546a      	strb	r2, [r5, r1]
                num_chars++;
 8003d58:	f107 0204 	add.w	r2, r7, #4
        for (size_t i = 0; i < 5 - padding; i++)
 8003d5c:	f040 80f7 	bne.w	8003f4e <main+0x976>
            if (num_chars < buf_size - 1)
 8003d60:	2a7f      	cmp	r2, #127	@ 0x7f
 8003d62:	f000 80a2 	beq.w	8003eaa <main+0x8d2>
            group[4 - i] = (word % 85);
 8003d66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                num_chars++;
 8003d6a:	3705      	adds	r7, #5
            group[4 - i] = (word % 85);
 8003d6c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003d70:	1ac3      	subs	r3, r0, r3
                buf[num_chars] = group[i] + 33;
 8003d72:	3321      	adds	r3, #33	@ 0x21
 8003d74:	54ab      	strb	r3, [r5, r2]
    while (data_size)
 8003d76:	f1be 0f00 	cmp.w	lr, #0
 8003d7a:	f000 809b 	beq.w	8003eb4 <main+0x8dc>
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8003d7e:	f1be 0f03 	cmp.w	lr, #3
                word |= *bytes++;
 8003d82:	f89c 0000 	ldrb.w	r0, [ip]
        size_t padding = (data_size >= 4) ? 0 : (-data_size % 4) * 5 / 4;
 8003d86:	d889      	bhi.n	8003c9c <main+0x6c4>
            if (data_size)
 8003d88:	f1be 0f01 	cmp.w	lr, #1
                word |= *bytes++;
 8003d8c:	f10c 0301 	add.w	r3, ip, #1
            if (data_size)
 8003d90:	f040 80df 	bne.w	8003f52 <main+0x97a>
            word <<= 8;
 8003d94:	0400      	lsls	r0, r0, #16
 8003d96:	469c      	mov	ip, r3
 8003d98:	f04f 0802 	mov.w	r8, #2
 8003d9c:	0200      	lsls	r0, r0, #8
 8003d9e:	f04f 0e00 	mov.w	lr, #0
 8003da2:	e78d      	b.n	8003cc0 <main+0x6e8>
        return nvmem_.Erase(0, kRegionSize);
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <main+0x904>)
        state_ =
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
        QUADSPI->CCR =
 8003dac:	4f4c      	ldr	r7, [pc, #304]	@ (8003ee0 <main+0x908>)
 8003dae:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003db0:	2002      	movs	r0, #2
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003db2:	f44f 7e83 	mov.w	lr, #262	@ 0x106
        QUADSPI->CCR =
 8003db6:	f242 5cd7 	movw	ip, #9687	@ 0x25d7
        state_ =
 8003dba:	60b2      	str	r2, [r6, #8]
 8003dbc:	e9c6 2100 	strd	r2, r1, [r6]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003dc0:	68a3      	ldr	r3, [r4, #8]
 8003dc2:	f013 0320 	ands.w	r3, r3, #32
 8003dc6:	d1fb      	bne.n	8003dc0 <main+0x7e8>
        QUADSPI->DLR = 0;
 8003dc8:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8003dca:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 8003dd2:	d0fb      	beq.n	8003dcc <main+0x7f4>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 8003dd4:	f894 8020 	ldrb.w	r8, [r4, #32]
 8003dd8:	fa5f f888 	uxtb.w	r8, r8
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	079b      	lsls	r3, r3, #30
 8003de0:	d5fc      	bpl.n	8003ddc <main+0x804>
        if (write_in_progress())
 8003de2:	f018 0f01 	tst.w	r8, #1
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003de6:	60e0      	str	r0, [r4, #12]
        if (write_in_progress())
 8003de8:	d1ea      	bne.n	8003dc0 <main+0x7e8>
        if ((location % kBlock64Size == 0) && (length >= kBlock64Size))
 8003dea:	b293      	uxth	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d16a      	bne.n	8003ec6 <main+0x8ee>
 8003df0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003df4:	d23a      	bcs.n	8003e6c <main+0x894>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8003df6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8003dfa:	d21b      	bcs.n	8003e34 <main+0x85c>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003dfc:	68a3      	ldr	r3, [r4, #8]
 8003dfe:	069b      	lsls	r3, r3, #26
 8003e00:	d4fc      	bmi.n	8003dfc <main+0x824>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003e02:	f8c4 e014 	str.w	lr, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e06:	68a3      	ldr	r3, [r4, #8]
 8003e08:	079b      	lsls	r3, r3, #30
 8003e0a:	d5fc      	bpl.n	8003e06 <main+0x82e>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e0c:	60e0      	str	r0, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	069b      	lsls	r3, r3, #26
 8003e12:	d4fc      	bmi.n	8003e0e <main+0x836>
        QUADSPI->CCR =
 8003e14:	f8c4 c014 	str.w	ip, [r4, #20]
        QUADSPI->AR = address;
 8003e18:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	079b      	lsls	r3, r3, #30
 8003e1e:	d5fc      	bpl.n	8003e1a <main+0x842>
            location += kEraseGranularity;
 8003e20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
            length -= kEraseGranularity;
 8003e24:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e28:	60e0      	str	r0, [r4, #12]
        state_.location = location;
 8003e2a:	e9c6 2100 	strd	r2, r1, [r6]
        while (!FinishErase());
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d1c6      	bne.n	8003dc0 <main+0x7e8>
 8003e32:	e5f1      	b.n	8003a18 <main+0x440>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e34:	68a3      	ldr	r3, [r4, #8]
 8003e36:	069b      	lsls	r3, r3, #26
 8003e38:	d4fc      	bmi.n	8003e34 <main+0x85c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003e3a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003e3e:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e40:	68a3      	ldr	r3, [r4, #8]
 8003e42:	079b      	lsls	r3, r3, #30
 8003e44:	d5fc      	bpl.n	8003e40 <main+0x868>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e46:	2302      	movs	r3, #2
 8003e48:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	069b      	lsls	r3, r3, #26
 8003e4e:	d4fc      	bmi.n	8003e4a <main+0x872>
        QUADSPI->CCR =
 8003e50:	f242 5352 	movw	r3, #9554	@ 0x2552
 8003e54:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 8003e56:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	079b      	lsls	r3, r3, #30
 8003e5c:	d5fc      	bpl.n	8003e58 <main+0x880>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e5e:	2302      	movs	r3, #2
            location += kBlock32Size;
 8003e60:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
            length -= kBlock32Size;
 8003e64:	f5a1 4100 	sub.w	r1, r1, #32768	@ 0x8000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e68:	60e3      	str	r3, [r4, #12]
            length -= kBlock32Size;
 8003e6a:	e7de      	b.n	8003e2a <main+0x852>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	d4fc      	bmi.n	8003e6c <main+0x894>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8003e72:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003e76:	6163      	str	r3, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	079b      	lsls	r3, r3, #30
 8003e7c:	d5fc      	bpl.n	8003e78 <main+0x8a0>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	60e3      	str	r3, [r4, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8003e82:	68a3      	ldr	r3, [r4, #8]
 8003e84:	069b      	lsls	r3, r3, #26
 8003e86:	d4fc      	bmi.n	8003e82 <main+0x8aa>
        QUADSPI->CCR =
 8003e88:	f242 53d8 	movw	r3, #9688	@ 0x25d8
 8003e8c:	6163      	str	r3, [r4, #20]
        QUADSPI->AR = address;
 8003e8e:	61a2      	str	r2, [r4, #24]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	079b      	lsls	r3, r3, #30
 8003e94:	d5fc      	bpl.n	8003e90 <main+0x8b8>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003e96:	2302      	movs	r3, #2
            location += kBlock64Size;
 8003e98:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
            length -= kBlock64Size;
 8003e9c:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8003ea0:	60e3      	str	r3, [r4, #12]
            length -= kBlock64Size;
 8003ea2:	e7c2      	b.n	8003e2a <main+0x852>
            length_ = 0;
 8003ea4:	46b1      	mov	r9, r6
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	e5bc      	b.n	8003a24 <main+0x44c>
                num_chars++;
 8003eaa:	277f      	movs	r7, #127	@ 0x7f
    while (data_size)
 8003eac:	f1be 0f00 	cmp.w	lr, #0
 8003eb0:	f47f af65 	bne.w	8003d7e <main+0x7a6>
        printf("\xff%s\n", line_);
 8003eb4:	490b      	ldr	r1, [pc, #44]	@ (8003ee4 <main+0x90c>)
    buf[num_chars] = '\0';
 8003eb6:	f805 e007 	strb.w	lr, [r5, r7]
 8003eba:	480b      	ldr	r0, [pc, #44]	@ (8003ee8 <main+0x910>)
 8003ebc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003ec0:	f005 fa9c 	bl	80093fc <iprintf>
    }
 8003ec4:	e5a8      	b.n	8003a18 <main+0x440>
        else if ((location % kBlock32Size == 0) && (length >= kBlock32Size))
 8003ec6:	f3c2 030e 	ubfx	r3, r2, #0, #15
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d196      	bne.n	8003dfc <main+0x824>
 8003ece:	e792      	b.n	8003df6 <main+0x81e>
 8003ed0:	20000550 	.word	0x20000550
 8003ed4:	2000052c 	.word	0x2000052c
 8003ed8:	c0c0c0c1 	.word	0xc0c0c0c1
 8003edc:	2001088c 	.word	0x2001088c
 8003ee0:	05000105 	.word	0x05000105
 8003ee4:	20000424 	.word	0x20000424
 8003ee8:	0800a600 	.word	0x0800a600
 8003eec:	2000052b 	.word	0x2000052b
                bytes[num_bytes] = word >> 24;
 8003ef0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8003ef4:	4e55      	ldr	r6, [pc, #340]	@ (800404c <main+0xa74>)
        for (size_t i = 0; i < 4 - padding; i++)
 8003ef6:	2f02      	cmp	r7, #2
                bytes[num_bytes] = word >> 24;
 8003ef8:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 8003efc:	f102 0e02 	add.w	lr, r2, #2
                word <<= 8;
 8003f00:	ea4f 4c03 	mov.w	ip, r3, lsl #16
        for (size_t i = 0; i < 4 - padding; i++)
 8003f04:	d040      	beq.n	8003f88 <main+0x9b0>
            if (num_bytes < size)
 8003f06:	f1be 0f83 	cmp.w	lr, #131	@ 0x83
 8003f0a:	f43f adfe 	beq.w	8003b0a <main+0x532>
                bytes[num_bytes] = word >> 24;
 8003f0e:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        for (size_t i = 0; i < 4 - padding; i++)
 8003f12:	2f04      	cmp	r7, #4
                bytes[num_bytes] = word >> 24;
 8003f14:	f806 c00e 	strb.w	ip, [r6, lr]
                num_bytes++;
 8003f18:	f102 0c03 	add.w	ip, r2, #3
        for (size_t i = 0; i < 4 - padding; i++)
 8003f1c:	d15c      	bne.n	8003fd8 <main+0xa00>
            if (num_bytes < size)
 8003f1e:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 8003f22:	f43f adf2 	beq.w	8003b0a <main+0x532>
                num_bytes++;
 8003f26:	3204      	adds	r2, #4
                bytes[num_bytes] = word >> 24;
 8003f28:	f806 300c 	strb.w	r3, [r6, ip]
    while (length)
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	f47f ada6 	bne.w	8003a7e <main+0x4a6>
 8003f32:	e5ed      	b.n	8003b10 <main+0x538>
            group[i] = length ? *str - 33 : 84;
 8003f34:	2801      	cmp	r0, #1
                str++;
 8003f36:	f101 0701 	add.w	r7, r1, #1
            group[i] = length ? *str - 33 : 84;
 8003f3a:	d12a      	bne.n	8003f92 <main+0x9ba>
 8003f3c:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 8003f40:	4639      	mov	r1, r7
 8003f42:	2000      	movs	r0, #0
 8003f44:	2704      	movs	r7, #4
 8003f46:	46f0      	mov	r8, lr
 8003f48:	46f1      	mov	r9, lr
 8003f4a:	46f4      	mov	ip, lr
 8003f4c:	e5b9      	b.n	8003ac2 <main+0x4ea>
                num_chars++;
 8003f4e:	4617      	mov	r7, r2
 8003f50:	e711      	b.n	8003d76 <main+0x79e>
                word |= *bytes++;
 8003f52:	4663      	mov	r3, ip
            if (data_size)
 8003f54:	f1be 0f02 	cmp.w	lr, #2
 8003f58:	f833 0b02 	ldrh.w	r0, [r3], #2
 8003f5c:	ba40      	rev16	r0, r0
 8003f5e:	b280      	uxth	r0, r0
            word <<= 8;
 8003f60:	ea4f 2000 	mov.w	r0, r0, lsl #8
            if (data_size)
 8003f64:	d103      	bne.n	8003f6e <main+0x996>
 8003f66:	469c      	mov	ip, r3
 8003f68:	f04f 0803 	mov.w	r8, #3
 8003f6c:	e716      	b.n	8003d9c <main+0x7c4>
                word |= *bytes++;
 8003f6e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8003f72:	f04f 0804 	mov.w	r8, #4
 8003f76:	f10c 0c03 	add.w	ip, ip, #3
 8003f7a:	f04f 0e00 	mov.w	lr, #0
 8003f7e:	4303      	orrs	r3, r0
            word <<= 8;
 8003f80:	0218      	lsls	r0, r3, #8
            if (data_size)
 8003f82:	e69d      	b.n	8003cc0 <main+0x6e8>
                num_chars++;
 8003f84:	460f      	mov	r7, r1
 8003f86:	e6f6      	b.n	8003d76 <main+0x79e>
        for (size_t i = 0; i < 4 - padding; i++)
 8003f88:	4672      	mov	r2, lr
    while (length)
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	f47f ad77 	bne.w	8003a7e <main+0x4a6>
 8003f90:	e5be      	b.n	8003b10 <main+0x538>
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003f92:	4247      	negs	r7, r0
 8003f94:	4e2e      	ldr	r6, [pc, #184]	@ (8004050 <main+0xa78>)
            group[i] = length ? *str - 33 : 84;
 8003f96:	f891 c001 	ldrb.w	ip, [r1, #1]
 8003f9a:	3802      	subs	r0, #2
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003f9c:	fba6 8e07 	umull	r8, lr, r6, r7
                str++;
 8003fa0:	f101 0902 	add.w	r9, r1, #2
            group[i] = length ? *str - 33 : 84;
 8003fa4:	f1ac 0c21 	sub.w	ip, ip, #33	@ 0x21
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003fa8:	f02e 0803 	bic.w	r8, lr, #3
            word += group[i];
 8003fac:	fa5f fc8c 	uxtb.w	ip, ip
        size_t padding = (length >= 5) ? 0 : (-length % 5) * 4 / 5;
 8003fb0:	eb08 089e 	add.w	r8, r8, lr, lsr #2
 8003fb4:	eba7 0708 	sub.w	r7, r7, r8
 8003fb8:	ea4f 0787 	mov.w	r7, r7, lsl #2
 8003fbc:	fba6 e707 	umull	lr, r7, r6, r7
 8003fc0:	ea4f 0797 	mov.w	r7, r7, lsr #2
        for (size_t i = 0; i < 4 - padding; i++)
 8003fc4:	f1c7 0704 	rsb	r7, r7, #4
            group[i] = length ? *str - 33 : 84;
 8003fc8:	d124      	bne.n	8004014 <main+0xa3c>
 8003fca:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 8003fce:	4649      	mov	r1, r9
 8003fd0:	2701      	movs	r7, #1
 8003fd2:	46f0      	mov	r8, lr
 8003fd4:	46f1      	mov	r9, lr
 8003fd6:	e574      	b.n	8003ac2 <main+0x4ea>
        for (size_t i = 0; i < 4 - padding; i++)
 8003fd8:	4662      	mov	r2, ip
    while (length)
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f47f ad4f 	bne.w	8003a7e <main+0x4a6>
 8003fe0:	e596      	b.n	8003b10 <main+0x538>
            else if (state_ == STATE_RUNNING && enable_amplifier)
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	f47f ac95 	bne.w	8003912 <main+0x33a>
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <main+0xa7c>)
 8003fea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fee:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <main+0xa80>)
 8003ff0:	6191      	str	r1, [r2, #24]
 8003ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ff6:	619a      	str	r2, [r3, #24]
    }
 8003ff8:	e48b      	b.n	8003912 <main+0x33a>
 8003ffa:	2a02      	cmp	r2, #2
 8003ffc:	f47f ab23 	bne.w	8003646 <main+0x6e>
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004000:	4914      	ldr	r1, [pc, #80]	@ (8004054 <main+0xa7c>)
 8004002:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004006:	4b14      	ldr	r3, [pc, #80]	@ (8004058 <main+0xa80>)
 8004008:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800400c:	6188      	str	r0, [r1, #24]
 800400e:	619a      	str	r2, [r3, #24]
    }
 8004010:	f7ff bb19 	b.w	8003646 <main+0x6e>
            group[i] = length ? *str - 33 : 84;
 8004014:	f891 e002 	ldrb.w	lr, [r1, #2]
 8004018:	2801      	cmp	r0, #1
 800401a:	f1ae 0e21 	sub.w	lr, lr, #33	@ 0x21
 800401e:	fa5f fe8e 	uxtb.w	lr, lr
 8004022:	d106      	bne.n	8004032 <main+0xa5a>
            word += group[i];
 8004024:	46f1      	mov	r9, lr
 8004026:	f04f 0e54 	mov.w	lr, #84	@ 0x54
                str++;
 800402a:	3103      	adds	r1, #3
            word += group[i];
 800402c:	2000      	movs	r0, #0
 800402e:	46f0      	mov	r8, lr
 8004030:	e547      	b.n	8003ac2 <main+0x4ea>
            group[i] = length ? *str - 33 : 84;
 8004032:	f899 8001 	ldrb.w	r8, [r9, #1]
                str++;
 8004036:	3104      	adds	r1, #4
            word += group[i];
 8004038:	46f1      	mov	r9, lr
 800403a:	2000      	movs	r0, #0
            group[i] = length ? *str - 33 : 84;
 800403c:	f1a8 0821 	sub.w	r8, r8, #33	@ 0x21
            word += group[i];
 8004040:	f04f 0e54 	mov.w	lr, #84	@ 0x54
 8004044:	fa5f f888 	uxtb.w	r8, r8
 8004048:	e53b      	b.n	8003ac2 <main+0x4ea>
 800404a:	bf00      	nop
 800404c:	200004a8 	.word	0x200004a8
 8004050:	cccccccd 	.word	0xcccccccd
 8004054:	58021800 	.word	0x58021800
 8004058:	58020400 	.word	0x58020400
 800405c:	00000000 	.word	0x00000000

08004060 <_GLOBAL__sub_I__ZN8recorder7analog_E>:
    SynthEngine() = default;
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe0>)
 8004062:	2200      	movs	r2, #0
 8004064:	2100      	movs	r1, #0
 8004066:	4837      	ldr	r0, [pc, #220]	@ (8004144 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe4>)
    }
 8004068:	b4f0      	push	{r4, r5, r6, r7}
 800406a:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	605c      	str	r4, [r3, #4]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	6118      	str	r0, [r3, #16]
      : phase_(0.0f),
 8004078:	61da      	str	r2, [r3, #28]
 800407a:	4833      	ldr	r0, [pc, #204]	@ (8004148 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xe8>)
        phase_inc_(0.0f),
 800407c:	621a      	str	r2, [r3, #32]
      : phase_(0.0f),
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 8004080:	62da      	str	r2, [r3, #44]	@ 0x2c
      : phase_(0.0f),
 8004082:	635a      	str	r2, [r3, #52]	@ 0x34
        phase_inc_(0.0f),
 8004084:	639a      	str	r2, [r3, #56]	@ 0x38
      : phase_(0.0f),
 8004086:	641a      	str	r2, [r3, #64]	@ 0x40
        phase_inc_(0.0f),
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
      : phase_(0.0f),
 800408a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        phase_inc_(0.0f),
 800408e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      : phase_(0.0f),
 8004092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        phase_inc_(0.0f),
 8004096:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      : phase_(0.0f),
 800409a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        phase_inc_(0.0f),
 800409e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      : phase_(0.0f),
 80040a2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        phase_inc_(0.0f),
 80040a6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80040aa:	7519      	strb	r1, [r3, #20]
 80040ac:	6199      	str	r1, [r3, #24]
        waveform_(Waveform::SINE)
 80040ae:	6259      	str	r1, [r3, #36]	@ 0x24
 80040b0:	6319      	str	r1, [r3, #48]	@ 0x30
 80040b2:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80040b4:	6499      	str	r1, [r3, #72]	@ 0x48
 80040b6:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
 80040ba:	f8c3 1098 	str.w	r1, [r3, #152]	@ 0x98
 80040be:	f8c3 10a4 	str.w	r1, [r3, #164]	@ 0xa4
 80040c2:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
      : phase_(0.0f),
 80040c6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        phase_inc_(0.0f),
 80040ca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      : phase_(0.0f),
 80040ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        phase_inc_(0.0f),
 80040d2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        waveform_(Waveform::SINE)
 80040d6:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
 80040da:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
        PlaybackEngine(T &memory) : memory_{memory} {}
 80040de:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <_GLOBAL__sub_I__ZN8recorder7analog_E+0xec>)
      : phase_(0.0f),
 80040e0:	6002      	str	r2, [r0, #0]
    SamplePlayer(T& memory) : memory_{memory} {}
 80040e2:	629a      	str	r2, [r3, #40]	@ 0x28
        phase_inc_(0.0f),
 80040e4:	6042      	str	r2, [r0, #4]
 80040e6:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80040ea:	61dc      	str	r4, [r3, #28]
 80040ec:	f882 11c4 	strb.w	r1, [r2, #452]	@ 0x1c4
    EdgeDetector buttons[numButtons] = {button_1_, button_2_, button_3_, button_4_};
 80040f0:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf0>)
 80040f2:	621c      	str	r4, [r3, #32]
 80040f4:	6817      	ldr	r7, [r2, #0]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf4>)
 80040f8:	4c17      	ldr	r4, [pc, #92]	@ (8004158 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xf8>)
 80040fa:	6816      	ldr	r6, [r2, #0]
 80040fc:	4a17      	ldr	r2, [pc, #92]	@ (800415c <_GLOBAL__sub_I__ZN8recorder7analog_E+0xfc>)
 80040fe:	f8d4 c000 	ldr.w	ip, [r4]
 8004102:	6815      	ldr	r5, [r2, #0]
 8004104:	4c16      	ldr	r4, [pc, #88]	@ (8004160 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x100>)
    SaveData(NVMem& nvmem) : nvmem_{nvmem} {}
 8004106:	4a17      	ldr	r2, [pc, #92]	@ (8004164 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x104>)
        waveform_(Waveform::SINE)
 8004108:	6081      	str	r1, [r0, #8]
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	611a      	str	r2, [r3, #16]
 800410e:	6392      	str	r2, [r2, #56]	@ 0x38
        iter() {}
 8004110:	6511      	str	r1, [r2, #80]	@ 0x50
	typedef _Clock						clock;
	typedef _Dur						duration;
	typedef typename duration::rep				rep;
	typedef typename duration::period			period;

	constexpr time_point() : __d(duration::zero())
 8004112:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8004138 <_GLOBAL__sub_I__ZN8recorder7analog_E+0xd8>
 8004116:	e9c4 c700 	strd	ip, r7, [r4]
 800411a:	e9c4 6502 	strd	r6, r5, [r4, #8]
 800411e:	ed83 7b02 	vstr	d7, [r3, #8]
    RecordingEngine(T& memory) : memory_{memory} {}
 8004122:	4c11      	ldr	r4, [pc, #68]	@ (8004168 <_GLOBAL__sub_I__ZN8recorder7analog_E+0x108>)
        JingleEngine() = default;
 8004124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004128:	e9c0 1104 	strd	r1, r1, [r0, #16]
      __atomic_base() noexcept = default;
 800412c:	e9c4 2100 	strd	r2, r1, [r4]
 8004130:	60a1      	str	r1, [r4, #8]
 8004132:	8183      	strh	r3, [r0, #12]
 8004134:	bcf0      	pop	{r4, r5, r6, r7}
 8004136:	4770      	bx	lr
	...
 8004140:	20010924 	.word	0x20010924
 8004144:	4382d0a4 	.word	0x4382d0a4
 8004148:	2001090c 	.word	0x2001090c
 800414c:	20000580 	.word	0x20000580
 8004150:	20010904 	.word	0x20010904
 8004154:	20010900 	.word	0x20010900
 8004158:	20010908 	.word	0x20010908
 800415c:	200108fc 	.word	0x200108fc
 8004160:	200108ec 	.word	0x200108ec
 8004164:	2001088c 	.word	0x2001088c
 8004168:	20010748 	.word	0x20010748

0800416c <recorder::Adc::DMAService()>:
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
}


void Adc::DMAService(void)
{
 800416c:	b570      	push	{r4, r5, r6, lr}
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 800416e:	49c7      	ldr	r1, [pc, #796]	@ (800448c <recorder::Adc::DMAService()+0x320>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8004170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8004174:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004178:	4ac5      	ldr	r2, [pc, #788]	@ (8004490 <recorder::Adc::DMAService()+0x324>)
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	608c      	str	r4, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 800417e:	608b      	str	r3, [r1, #8]
 8004180:	4603      	mov	r3, r0
 8004182:	6891      	ldr	r1, [r2, #8]
 8004184:	0749      	lsls	r1, r1, #29
 8004186:	f100 809a 	bmi.w	80042be <recorder::Adc::DMAService()+0x152>
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800418a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
        }

        void Sample(float sample)
        {
            // Expand range a little bit to compensate for resistive losses
            sample = hyst_.Process(0.5 + 1.0025f * (sample - 0.5f));
 800418c:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
  MODIFY_REG(ADCx->CR,
 8004190:	6894      	ldr	r4, [r2, #8]
 8004192:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
    LL_DMA_ClearFlag_TC1(DMA1);
    LL_DMA_ClearFlag_HT1(DMA1);

    if (!LL_ADC_REG_IsConversionOngoing(ADC1))
    {
        float pot = LL_ADC_REG_ReadConversionData16(ADC1);
 8004196:	b280      	uxth	r0, r0
 8004198:	49be      	ldr	r1, [pc, #760]	@ (8004494 <recorder::Adc::DMAService()+0x328>)
 800419a:	eddf 5abf 	vldr	s11, [pc, #764]	@ 8004498 <recorder::Adc::DMAService()+0x32c>
 800419e:	ee07 0a90 	vmov	s15, r0
 80041a2:	4021      	ands	r1, r4
 80041a4:	ed9f 6abd 	vldr	s12, [pc, #756]	@ 800449c <recorder::Adc::DMAService()+0x330>
 80041a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ac:	f041 0104 	orr.w	r1, r1, #4
 80041b0:	6091      	str	r1, [r2, #8]
 80041b2:	eee7 6aa5 	vfma.f32	s13, s15, s11
        if (kEnableReverse && current_pot_ == POT_7)
        {
            pot = 0;
        }

        pot_filter_[current_pot_].Sample(pot / 0xFFFF);
 80041b6:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 80041ba:	eef0 7a47 	vmov.f32	s15, s14
 80041be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80041c2:	0090      	lsls	r0, r2, #2
 80041c4:	00c9      	lsls	r1, r1, #3
 80041c6:	eee6 7a86 	vfma.f32	s15, s13, s12
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
    }

    float Process(float input)
    {
        float delta = input - position_;
 80041ca:	185d      	adds	r5, r3, r1
 80041cc:	f101 0408 	add.w	r4, r1, #8
 80041d0:	3114      	adds	r1, #20
 80041d2:	ed95 7a08 	vldr	s14, [r5, #32]

        if (delta >= threshold_)
 80041d6:	edd5 6a07 	vldr	s13, [r5, #28]
 80041da:	441c      	add	r4, r3
 80041dc:	4419      	add	r1, r3
        float delta = input - position_;
 80041de:	ee37 6ac7 	vsub.f32	s12, s15, s14
        if (delta >= threshold_)
 80041e2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80041e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ea:	f2c0 8142 	blt.w	8004472 <recorder::Adc::DMAService()+0x306>
        {
            position_ = input - threshold_;
 80041ee:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80041f2:	ed85 7a08 	vstr	s14, [r5, #32]
 80041f6:	ed91 6a01 	vldr	s12, [r1, #4]
            position_ = input + threshold_;
        }

        // Rescale to full range
        float x = position_;
        x = out_min_ + out_range_ * (x - in_min_) * in_range_inv_;
 80041fa:	1881      	adds	r1, r0, r2
 80041fc:	3201      	adds	r2, #1
        increment_ = 0;
    }

    void Sample(float sample)
    {
        increment_ = (sample - history_) * step_;
 80041fe:	edd4 4a01 	vldr	s9, [r4, #4]
 8004202:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 8004206:	ed9f 5aa6 	vldr	s10, [pc, #664]	@ 80044a0 <recorder::Adc::DMAService()+0x334>
 800420a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800420e:	edd1 5a0a 	vldr	s11, [r1, #40]	@ 0x28
 8004212:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004216:	edd1 7a05 	vldr	s15, [r1, #20]
 800421a:	ee37 7a65 	vsub.f32	s14, s14, s11
 800421e:	edd1 6a09 	vldr	s13, [r1, #36]	@ 0x24
 8004222:	edd0 5a01 	vldr	s11, [r0, #4]
        {
            // Correct for error caused by ADC input impedance
            sample = std::clamp(sample * 64, 0.f, 64.f);
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
            float frac = sample - index;
            float a = kPotCorrection[index];
 8004226:	489f      	ldr	r0, [pc, #636]	@ (80044a4 <recorder::Adc::DMAService()+0x338>)
 8004228:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800422c:	eef0 5a67 	vmov.f32	s11, s15
 8004230:	eee7 5a26 	vfma.f32	s11, s14, s13
        increment_ = (sample - history_) * step_;
 8004234:	edd4 6a00 	vldr	s13, [r4]
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8004238:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
      if (__a < __b)
 800423c:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
      if (__b < __a)
 8004240:	eef4 7ac6 	vcmpe.f32	s15, s12
            sample = std::clamp(sample * 64, 0.f, 64.f);
 8004244:	ed9f 6a98 	vldr	s12, [pc, #608]	@ 80044a8 <recorder::Adc::DMAService()+0x33c>
 8004248:	eddf 5a98 	vldr	s11, [pc, #608]	@ 80044ac <recorder::Adc::DMAService()+0x340>
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return std::clamp(x, out_min_, out_max_);
 8004250:	bfc8      	it	gt
 8004252:	edd1 7a06 	vldrgt	s15, [r1, #24]
 8004256:	ee67 7a86 	vmul.f32	s15, s15, s12
 800425a:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 800425e:	fec7 7aa5 	vmaxnm.f32	s15, s15, s11
            uint32_t index = std::clamp<int32_t>(sample + 0.5f, 0, 63);
 8004262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004266:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800426a:	ee17 1a10 	vmov	r1, s14
 800426e:	293f      	cmp	r1, #63	@ 0x3f
 8004270:	bfa8      	it	ge
 8004272:	213f      	movge	r1, #63	@ 0x3f
            float frac = sample - index;
 8004274:	ee07 1a10 	vmov	s14, r1
            float a = kPotCorrection[index];
 8004278:	eb00 0581 	add.w	r5, r0, r1, lsl #2
            float frac = sample - index;
 800427c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = kPotCorrection[index + 1];
            return a + (b - a) * frac;
 8004280:	ed95 6a01 	vldr	s12, [r5, #4]
            float frac = sample - index;
 8004284:	ee77 7ac7 	vsub.f32	s15, s15, s14
            float a = kPotCorrection[index];
 8004288:	ed95 7a00 	vldr	s14, [r5]
            return a + (b - a) * frac;
 800428c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004290:	eea7 7a86 	vfma.f32	s14, s15, s12
 8004294:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004298:	ee67 7aa4 	vmul.f32	s15, s15, s9
  { return __builtin_fabsf(__x); }
 800429c:	eef0 6ae7 	vabs.f32	s13, s15
 80042a0:	edc4 7a02 	vstr	s15, [r4, #8]
        if (std::fabs(increment_) <= std::numeric_limits<float>::epsilon())
 80042a4:	eef4 6ac5 	vcmpe.f32	s13, s10
 80042a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ac:	d803      	bhi.n	80042b6 <recorder::Adc::DMAService()+0x14a>
        {
            history_ = sample;
 80042ae:	ed84 7a00 	vstr	s14, [r4]
            increment_ = 0.f;
 80042b2:	edc4 5a02 	vstr	s11, [r4, #8]
        current_pot_ = (current_pot_ + 1) % NUM_POTS;
 80042b6:	f002 0207 	and.w	r2, r2, #7
 80042ba:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        }
    }

    float Next(void)
    {
        history_ += increment_;
 80042be:	ed93 0a02 	vldr	s0, [r3, #8]
 80042c2:	edd3 0a0c 	vldr	s1, [r3, #48]	@ 0x30
 80042c6:	ed93 1a16 	vldr	s2, [r3, #88]	@ 0x58
 80042ca:	edd3 1a20 	vldr	s3, [r3, #128]	@ 0x80
 80042ce:	ed93 2a2a 	vldr	s4, [r3, #168]	@ 0xa8
 80042d2:	edd3 2a34 	vldr	s5, [r3, #208]	@ 0xd0
 80042d6:	ed93 3a3e 	vldr	s6, [r3, #248]	@ 0xf8
 80042da:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 80042de:	ed93 4a04 	vldr	s8, [r3, #16]
 80042e2:	edd3 4a0e 	vldr	s9, [r3, #56]	@ 0x38
 80042e6:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 80042ea:	ee34 4a00 	vadd.f32	s8, s8, s0
 80042ee:	edd3 5a22 	vldr	s11, [r3, #136]	@ 0x88
 80042f2:	ee74 4aa0 	vadd.f32	s9, s9, s1
 80042f6:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 80042fa:	ee35 5a01 	vadd.f32	s10, s10, s2
 80042fe:	edd3 6a36 	vldr	s13, [r3, #216]	@ 0xd8
 8004302:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8004306:	ed93 7a40 	vldr	s14, [r3, #256]	@ 0x100
 800430a:	ee36 6a02 	vadd.f32	s12, s12, s4
 800430e:	edd3 3a4a 	vldr	s7, [r3, #296]	@ 0x128
 8004312:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8004316:	ee37 7a03 	vadd.f32	s14, s14, s6

        for (uint32_t idx = 0; idx < kAudioOSFactor; idx++)
        {
            for (uint32_t ch = 0; ch < NUM_AUDIO_INS; ch++)
            {
                float sample = dma_buffer_[read_index_];
 800431a:	4e65      	ldr	r6, [pc, #404]	@ (80044b0 <recorder::Adc::DMAService()+0x344>)
 800431c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004320:	ed83 6a2a 	vstr	s12, [r3, #168]	@ 0xa8
 8004324:	edc3 6a34 	vstr	s13, [r3, #208]	@ 0xd0
 8004328:	ed83 7a3e 	vstr	s14, [r3, #248]	@ 0xf8
 800432c:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
 8004330:	ed83 4a02 	vstr	s8, [r3, #8]
            pot[i] = pot_filter_[i].Next();
 8004334:	ed8d 4a06 	vstr	s8, [sp, #24]
 8004338:	edc3 4a0c 	vstr	s9, [r3, #48]	@ 0x30
 800433c:	edcd 4a07 	vstr	s9, [sp, #28]
 8004340:	ed83 5a16 	vstr	s10, [r3, #88]	@ 0x58
 8004344:	ed8d 5a08 	vstr	s10, [sp, #32]
 8004348:	edc3 5a20 	vstr	s11, [r3, #128]	@ 0x80
 800434c:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8004350:	ed8d 6a0a 	vstr	s12, [sp, #40]	@ 0x28
 8004354:	edcd 6a0b 	vstr	s13, [sp, #44]	@ 0x2c
 8004358:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800435c:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
                read_index_ = (read_index_ + 1) % kDMABufferSize;
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8004360:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004364:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004368:	4c52      	ldr	r4, [pc, #328]	@ (80044b4 <recorder::Adc::DMAService()+0x348>)
 800436a:	1c51      	adds	r1, r2, #1
                float sample = dma_buffer_[read_index_];
 800436c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8004370:	eeb0 6a67 	vmov.f32	s12, s15
 8004374:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80044b8 <recorder::Adc::DMAService()+0x34c>
                float sample = dma_buffer_[read_index_];
 8004378:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800437c:	fba4 0201 	umull	r0, r2, r4, r1
            }
        }

        callback_(audio, pot);
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	4668      	mov	r0, sp
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004384:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8004386:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800438a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 800438e:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004392:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
        callback_(audio, pot);
 8004396:	a906      	add	r1, sp, #24
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004398:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 800439c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80043a0:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043a4:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80043a8:	ed8d 6a00 	vstr	s12, [sp]
 80043ac:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043b0:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 80043b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80043ba:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043be:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 80043c2:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 80043c6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80043ca:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043ce:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80043d2:	ed8d 6a03 	vstr	s12, [sp, #12]
 80043d6:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043da:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 80043dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80043e4:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043e8:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 80043ec:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 80043f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80043f4:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 80043f8:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 80043fc:	ed8d 6a01 	vstr	s12, [sp, #4]
 8004400:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004404:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8004406:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800440a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 800440e:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004412:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
 8004416:	f102 0c01 	add.w	ip, r2, #1
                float sample = dma_buffer_[read_index_];
 800441a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800441e:	edd2 6a00 	vldr	s13, [r2]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004422:	fba4 e20c 	umull	lr, r2, r4, ip
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8004426:	ed8d 6a04 	vstr	s12, [sp, #16]
 800442a:	eeb0 6a67 	vmov.f32	s12, s15
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800442e:	08d2      	lsrs	r2, r2, #3
                float sample = dma_buffer_[read_index_];
 8004430:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004434:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8004438:	eea6 6a87 	vfma.f32	s12, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800443c:	ebac 0282 	sub.w	r2, ip, r2, lsl #2
                float sample = dma_buffer_[read_index_];
 8004440:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004444:	3201      	adds	r2, #1
                float sample = dma_buffer_[read_index_];
 8004446:	edd6 6a00 	vldr	s13, [r6]
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 800444a:	fba4 6402 	umull	r6, r4, r4, r2
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 800444e:	ed8d 6a02 	vstr	s12, [sp, #8]
                float sample = dma_buffer_[read_index_];
 8004452:	eef8 6a66 	vcvt.f32.u32	s13, s13
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004456:	08e4      	lsrs	r4, r4, #3
 8004458:	eb04 0444 	add.w	r4, r4, r4, lsl #1
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 800445c:	eee6 7a87 	vfma.f32	s15, s13, s14
                read_index_ = (read_index_ + 1) % kDMABufferSize;
 8004460:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
 8004464:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
                audio[ch][idx] = (sample / 0xFFFF) * 2 - 1;
 8004468:	edcd 7a05 	vstr	s15, [sp, #20]
        callback_(audio, pot);
 800446c:	47a8      	blx	r5
    }

    PerformCallback();
}
 800446e:	b00e      	add	sp, #56	@ 0x38
 8004470:	bd70      	pop	{r4, r5, r6, pc}
        else if (delta <= -threshold_)
 8004472:	eef1 5a66 	vneg.f32	s11, s13
 8004476:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447e:	f63f aeba 	bhi.w	80041f6 <recorder::Adc::DMAService()+0x8a>
            position_ = input + threshold_;
 8004482:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004486:	ed85 7a08 	vstr	s14, [r5, #32]
 800448a:	e6b4      	b.n	80041f6 <recorder::Adc::DMAService()+0x8a>
 800448c:	40020000 	.word	0x40020000
 8004490:	40022000 	.word	0x40022000
 8004494:	7fffffc0 	.word	0x7fffffc0
 8004498:	37800080 	.word	0x37800080
 800449c:	3f8051ec 	.word	0x3f8051ec
 80044a0:	34000000 	.word	0x34000000
 80044a4:	0800a874 	.word	0x0800a874
 80044a8:	42800000 	.word	0x42800000
 80044ac:	00000000 	.word	0x00000000
 80044b0:	3800fc00 	.word	0x3800fc00
 80044b4:	aaaaaaab 	.word	0xaaaaaaab
 80044b8:	38000080 	.word	0x38000080

080044bc <recorder::Adc::DMAHandler()>:

void Adc::DMAHandler(void)
{
    instance_->DMAService();
 80044bc:	4b01      	ldr	r3, [pc, #4]	@ (80044c4 <recorder::Adc::DMAHandler()+0x8>)
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	f7ff be54 	b.w	800416c <recorder::Adc::DMAService()>
 80044c4:	20010da0 	.word	0x20010da0

080044c8 <recorder::Adc::InitADC(ADC_TypeDef*)>:
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <recorder::Adc::InitADC(ADC_TypeDef*)+0x78>)
void Adc::InitADC(ADC_TypeDef* adc)
{
    LL_ADC_SetBoostMode(adc, LL_ADC_BOOST_MODE_50MHZ);
    LL_ADC_DisableDeepPowerDown(adc);
    LL_ADC_EnableInternalRegulator(adc);
    system::Delay_ms(1);
 80044ca:	2001      	movs	r0, #1
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <recorder::Adc::InitADC(ADC_TypeDef*)+0x7c>)
  if((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
 80044d8:	688b      	ldr	r3, [r1, #8]
 80044da:	bf0c      	ite	eq
 80044dc:	f443 73e0 	orreq.w	r3, r3, #448	@ 0x1c0
    MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
 80044e0:	f443 7340 	orrne.w	r3, r3, #768	@ 0x300
{
 80044e4:	b510      	push	{r4, lr}
 80044e6:	460c      	mov	r4, r1
 80044e8:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044ea:	6889      	ldr	r1, [r1, #8]
 80044ec:	b084      	sub	sp, #16
  MODIFY_REG(ADCx->CR,
 80044ee:	4b16      	ldr	r3, [pc, #88]	@ (8004548 <recorder::Adc::InitADC(ADC_TypeDef*)+0x80>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044f0:	400a      	ands	r2, r1
 80044f2:	60a2      	str	r2, [r4, #8]
  MODIFY_REG(ADCx->CR,
 80044f4:	68a2      	ldr	r2, [r4, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	60a3      	str	r3, [r4, #8]
    system::Delay_ms(1);
 80044fe:	f001 fde5 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>

    LL_ADC_InitTypeDef adc_init =
 8004502:	2300      	movs	r3, #0
        .Resolution   = LL_ADC_RESOLUTION_16B,
        .LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE,
        .LowPowerMode = LL_ADC_LP_MODE_NONE,
    };

    LL_ADC_Init(adc, &adc_init);
 8004504:	4669      	mov	r1, sp
 8004506:	4620      	mov	r0, r4
    LL_ADC_InitTypeDef adc_init =
 8004508:	9302      	str	r3, [sp, #8]
 800450a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004538 <recorder::Adc::InitADC(ADC_TypeDef*)+0x70>
 800450e:	ed8d 7b00 	vstr	d7, [sp]
    LL_ADC_Init(adc, &adc_init);
 8004512:	f003 fb5f 	bl	8007bd4 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8004516:	68a1      	ldr	r1, [r4, #8]
 8004518:	4a0c      	ldr	r2, [pc, #48]	@ (800454c <recorder::Adc::InitADC(ADC_TypeDef*)+0x84>)
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <recorder::Adc::InitADC(ADC_TypeDef*)+0x88>)
 800451c:	400a      	ands	r2, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004522:	68a3      	ldr	r3, [r4, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	dbfc      	blt.n	8004522 <recorder::Adc::InitADC(ADC_TypeDef*)+0x5a>
    LL_ADC_StartCalibration(adc,
        LL_ADC_CALIB_OFFSET_LINEARITY, LL_ADC_SINGLE_ENDED);
    while (LL_ADC_IsCalibrationOnGoing(adc));
    system::Delay_ms(1);
 8004528:	2001      	movs	r0, #1
 800452a:	f001 fdcf 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
}
 800452e:	b004      	add	sp, #16
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	f3af 8000 	nop.w
	...
 8004540:	5c001000 	.word	0x5c001000
 8004544:	5fffffc0 	.word	0x5fffffc0
 8004548:	6fffffc0 	.word	0x6fffffc0
 800454c:	3ffeffc0 	.word	0x3ffeffc0
 8004550:	80010000 	.word	0x80010000
 8004554:	00000000 	.word	0x00000000

08004558 <recorder::Adc::InitAudioSequence()>:

void Adc::InitAudioSequence(void)
{
 8004558:	b510      	push	{r4, lr}
    auto adc = ADC2;
    auto trigger = LL_ADC_REG_TRIG_EXT_TIM15_TRGO;

    LL_ADC_REG_InitTypeDef reg_init =
 800455a:	2300      	movs	r3, #0
{
 800455c:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 800455e:	4c2e      	ldr	r4, [pc, #184]	@ (8004618 <recorder::Adc::InitAudioSequence()+0xc0>)
    };
 8004560:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
    LL_ADC_REG_Init(adc, &reg_init);
 8004564:	4669      	mov	r1, sp
 8004566:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 8004568:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8004610 <recorder::Adc::InitAudioSequence()+0xb8>
 800456c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    };
 8004570:	2301      	movs	r3, #1
    LL_ADC_REG_InitTypeDef reg_init =
 8004572:	ed8d 7b04 	vstr	d7, [sp, #16]
    };
 8004576:	e9cd 2300 	strd	r2, r3, [sp]
    LL_ADC_REG_Init(adc, &reg_init);
 800457a:	f003 fb45 	bl	8007c08 <LL_ADC_REG_Init>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	4b27      	ldr	r3, [pc, #156]	@ (800461c <recorder::Adc::InitAudioSequence()+0xc4>)
 8004580:	fa93 f3a3 	rbit	r3, r3

    for (uint32_t i = 0; i < NUM_AUDIO_INS; i++)
    {
        uint32_t channel = kAudioChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8004584:	2101      	movs	r1, #1
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	69e0      	ldr	r0, [r4, #28]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
  MODIFY_REG(*preg,
 8004590:	4a23      	ldr	r2, [pc, #140]	@ (8004620 <recorder::Adc::InitAudioSequence()+0xc8>)
 8004592:	4303      	orrs	r3, r0
 8004594:	61e3      	str	r3, [r4, #28]
 8004596:	f8d2 0130 	ldr.w	r0, [r2, #304]	@ 0x130
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <recorder::Adc::InitAudioSequence()+0xcc>)
 800459c:	f420 60f8 	bic.w	r0, r0, #1984	@ 0x7c0
 80045a0:	f440 7070 	orr.w	r0, r0, #960	@ 0x3c0
 80045a4:	f8c2 0130 	str.w	r0, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 80045a8:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80045ac:	f420 3060 	bic.w	r0, r0, #229376	@ 0x38000
 80045b0:	f440 3020 	orr.w	r0, r0, #163840	@ 0x28000
 80045b4:	f8c2 0118 	str.w	r0, [r2, #280]	@ 0x118
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	69e0      	ldr	r0, [r4, #28]
 80045c2:	4099      	lsls	r1, r3
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80045c4:	4b18      	ldr	r3, [pc, #96]	@ (8004628 <recorder::Adc::InitAudioSequence()+0xd0>)
 80045c6:	4301      	orrs	r1, r0
 80045c8:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 80045ca:	f8d2 1130 	ldr.w	r1, [r2, #304]	@ 0x130
 80045ce:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 80045d2:	f441 4130 	orr.w	r1, r1, #45056	@ 0xb000
 80045d6:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
  MODIFY_REG(*preg,
 80045da:	f8d2 1118 	ldr.w	r1, [r2, #280]	@ 0x118
 80045de:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80045e2:	f041 0128 	orr.w	r1, r1, #40	@ 0x28
 80045e6:	f8c2 1118 	str.w	r1, [r2, #280]	@ 0x118
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80045ea:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 80045ec:	490f      	ldr	r1, [pc, #60]	@ (800462c <recorder::Adc::InitAudioSequence()+0xd4>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80045ee:	4003      	ands	r3, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 80045f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004630 <recorder::Adc::InitAudioSequence()+0xd8>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80045f2:	f043 0303 	orr.w	r3, r3, #3
 80045f6:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045fe:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	4019      	ands	r1, r3
 8004604:	430a      	orrs	r2, r1
 8004606:	6122      	str	r2, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 2, LL_ADC_OVS_SHIFT_RIGHT_1);
}
 8004608:	b006      	add	sp, #24
 800460a:	bd10      	pop	{r4, pc}
 800460c:	f3af 8000 	nop.w
 8004610:	00000003 	.word	0x00000003
 8004614:	00001000 	.word	0x00001000
 8004618:	40022100 	.word	0x40022100
 800461c:	3ef08000 	.word	0x3ef08000
 8004620:	40022000 	.word	0x40022000
 8004624:	2e300800 	.word	0x2e300800
 8004628:	fffffbfc 	.word	0xfffffbfc
 800462c:	fc00fe1f 	.word	0xfc00fe1f
 8004630:	00010020 	.word	0x00010020

08004634 <recorder::Adc::InitPotSequence()>:

void Adc::InitPotSequence(void)
{
 8004634:	b510      	push	{r4, lr}
    auto adc = ADC1;
    auto trigger = LL_ADC_REG_TRIG_SOFTWARE;

    LL_ADC_REG_InitTypeDef reg_init =
 8004636:	2300      	movs	r3, #0
{
 8004638:	b086      	sub	sp, #24
        .ContinuousMode     = LL_ADC_REG_CONV_SINGLE,
        .DataTransferMode   = LL_ADC_REG_DR_TRANSFER,
        .Overrun            = LL_ADC_REG_OVR_DATA_OVERWRITTEN,
    };

    LL_ADC_REG_Init(adc, &reg_init);
 800463a:	4c69      	ldr	r4, [pc, #420]	@ (80047e0 <recorder::Adc::InitPotSequence()+0x1ac>)
    LL_ADC_REG_InitTypeDef reg_init =
 800463c:	2007      	movs	r0, #7
 800463e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	9001      	str	r0, [sp, #4]
    LL_ADC_REG_Init(adc, &reg_init);
 8004646:	4669      	mov	r1, sp
 8004648:	4620      	mov	r0, r4
    LL_ADC_REG_InitTypeDef reg_init =
 800464a:	9202      	str	r2, [sp, #8]
 800464c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004654:	9305      	str	r3, [sp, #20]
    LL_ADC_REG_Init(adc, &reg_init);
 8004656:	f003 fad7 	bl	8007c08 <LL_ADC_REG_Init>
 800465a:	4a62      	ldr	r2, [pc, #392]	@ (80047e4 <recorder::Adc::InitPotSequence()+0x1b0>)
 800465c:	fa92 f2a2 	rbit	r2, r2

    for (uint32_t i = 0; i < NUM_POTS; i++)
    {
        uint32_t channel = kPotChannels[i];
        uint32_t sampling_time = LL_ADC_SAMPLINGTIME_64CYCLES_5;
        adc->PCSEL |= (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(channel));
 8004660:	2301      	movs	r3, #1
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	69e0      	ldr	r0, [r4, #28]
 8004668:	fa03 f202 	lsl.w	r2, r3, r2
 800466c:	495e      	ldr	r1, [pc, #376]	@ (80047e8 <recorder::Adc::InitPotSequence()+0x1b4>)
 800466e:	4302      	orrs	r2, r0
 8004670:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8004672:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004674:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8004678:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800467c:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 800467e:	6962      	ldr	r2, [r4, #20]
 8004680:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8004684:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 8004688:	6162      	str	r2, [r4, #20]
 800468a:	fa91 f1a1 	rbit	r1, r1
 800468e:	fab1 f181 	clz	r1, r1
 8004692:	69e0      	ldr	r0, [r4, #28]
 8004694:	4a55      	ldr	r2, [pc, #340]	@ (80047ec <recorder::Adc::InitPotSequence()+0x1b8>)
 8004696:	fa03 f101 	lsl.w	r1, r3, r1
 800469a:	4301      	orrs	r1, r0
 800469c:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 800469e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046a0:	f421 31f8 	bic.w	r1, r1, #126976	@ 0x1f000
 80046a4:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 80046a8:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 80046aa:	69a1      	ldr	r1, [r4, #24]
 80046ac:	f021 0107 	bic.w	r1, r1, #7
 80046b0:	f041 0105 	orr.w	r1, r1, #5
 80046b4:	61a1      	str	r1, [r4, #24]
 80046b6:	fa92 f2a2 	rbit	r2, r2
 80046ba:	fab2 f282 	clz	r2, r2
 80046be:	69e0      	ldr	r0, [r4, #28]
 80046c0:	494b      	ldr	r1, [pc, #300]	@ (80047f0 <recorder::Adc::InitPotSequence()+0x1bc>)
 80046c2:	fa03 f202 	lsl.w	r2, r3, r2
 80046c6:	4302      	orrs	r2, r0
 80046c8:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 80046ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80046cc:	f422 02f8 	bic.w	r2, r2, #8126464	@ 0x7c0000
 80046d0:	f442 12e0 	orr.w	r2, r2, #1835008	@ 0x1c0000
 80046d4:	6322      	str	r2, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 80046d6:	6962      	ldr	r2, [r4, #20]
 80046d8:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 80046dc:	f442 0220 	orr.w	r2, r2, #10485760	@ 0xa00000
 80046e0:	6162      	str	r2, [r4, #20]
 80046e2:	fa91 f1a1 	rbit	r1, r1
 80046e6:	fab1 f181 	clz	r1, r1
 80046ea:	69e0      	ldr	r0, [r4, #28]
 80046ec:	4a41      	ldr	r2, [pc, #260]	@ (80047f4 <recorder::Adc::InitPotSequence()+0x1c0>)
 80046ee:	fa03 f101 	lsl.w	r1, r3, r1
 80046f2:	4301      	orrs	r1, r0
 80046f4:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 80046f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046f8:	f021 51f8 	bic.w	r1, r1, #520093696	@ 0x1f000000
 80046fc:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8004700:	6321      	str	r1, [r4, #48]	@ 0x30
  MODIFY_REG(*preg,
 8004702:	6961      	ldr	r1, [r4, #20]
 8004704:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004708:	f441 41a0 	orr.w	r1, r1, #20480	@ 0x5000
 800470c:	6161      	str	r1, [r4, #20]
 800470e:	fa92 f2a2 	rbit	r2, r2
 8004712:	fab2 f282 	clz	r2, r2
 8004716:	69e0      	ldr	r0, [r4, #28]
 8004718:	4937      	ldr	r1, [pc, #220]	@ (80047f8 <recorder::Adc::InitPotSequence()+0x1c4>)
 800471a:	fa03 f202 	lsl.w	r2, r3, r2
 800471e:	4302      	orrs	r2, r0
 8004720:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 8004722:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004724:	f022 021f 	bic.w	r2, r2, #31
 8004728:	f042 020c 	orr.w	r2, r2, #12
 800472c:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 800472e:	69a2      	ldr	r2, [r4, #24]
 8004730:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8004734:	f442 72a0 	orr.w	r2, r2, #320	@ 0x140
 8004738:	61a2      	str	r2, [r4, #24]
 800473a:	fa91 f1a1 	rbit	r1, r1
 800473e:	fab1 f181 	clz	r1, r1
 8004742:	69e0      	ldr	r0, [r4, #28]
 8004744:	4a2d      	ldr	r2, [pc, #180]	@ (80047fc <recorder::Adc::InitPotSequence()+0x1c8>)
 8004746:	fa03 f101 	lsl.w	r1, r3, r1
 800474a:	4301      	orrs	r1, r0
 800474c:	61e1      	str	r1, [r4, #28]
  MODIFY_REG(*preg,
 800474e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004750:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 8004754:	f441 7150 	orr.w	r1, r1, #832	@ 0x340
 8004758:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 800475a:	69a1      	ldr	r1, [r4, #24]
 800475c:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8004760:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
 8004764:	61a1      	str	r1, [r4, #24]
 8004766:	fa92 f2a2 	rbit	r2, r2
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	69e0      	ldr	r0, [r4, #28]
 8004770:	4923      	ldr	r1, [pc, #140]	@ (8004800 <recorder::Adc::InitPotSequence()+0x1cc>)
 8004772:	fa03 f202 	lsl.w	r2, r3, r2
 8004776:	4302      	orrs	r2, r0
 8004778:	61e2      	str	r2, [r4, #28]
  MODIFY_REG(*preg,
 800477a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800477c:	f422 32f8 	bic.w	r2, r2, #126976	@ 0x1f000
 8004780:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
 8004784:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 8004786:	69a2      	ldr	r2, [r4, #24]
 8004788:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800478c:	f042 62a0 	orr.w	r2, r2, #83886080	@ 0x5000000
 8004790:	61a2      	str	r2, [r4, #24]
 8004792:	fa91 f1a1 	rbit	r1, r1
 8004796:	fab1 f181 	clz	r1, r1
 800479a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <recorder::Adc::InitPotSequence()+0x1d0>)
 800479e:	408b      	lsls	r3, r1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 80047a0:	4919      	ldr	r1, [pc, #100]	@ (8004808 <recorder::Adc::InitPotSequence()+0x1d4>)
 80047a2:	4303      	orrs	r3, r0
 80047a4:	4819      	ldr	r0, [pc, #100]	@ (800480c <recorder::Adc::InitPotSequence()+0x1d8>)
 80047a6:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(*preg,
 80047a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047aa:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 80047ae:	f443 0388 	orr.w	r3, r3, #4456448	@ 0x440000
 80047b2:	6363      	str	r3, [r4, #52]	@ 0x34
  MODIFY_REG(*preg,
 80047b4:	69a3      	ldr	r3, [r4, #24]
 80047b6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80047ba:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80047be:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80047c0:	6923      	ldr	r3, [r4, #16]
 80047c2:	401a      	ands	r2, r3
 80047c4:	f042 0203 	orr.w	r2, r2, #3
 80047c8:	6122      	str	r2, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047d0:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_OVSR_Pos))));
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	4018      	ands	r0, r3
 80047d6:	4301      	orrs	r1, r0
 80047d8:	6121      	str	r1, [r4, #16]
    }

    LL_ADC_SetOverSamplingScope(adc, LL_ADC_OVS_GRP_INJ_REG_RESUMED);
    LL_ADC_SetOverSamplingDiscont(adc, LL_ADC_OVS_REG_CONT);
    LL_ADC_ConfigOverSamplingRatioShift(adc, 16, LL_ADC_OVS_SHIFT_RIGHT_4);
}
 80047da:	b006      	add	sp, #24
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	0c900008 	.word	0x0c900008
 80047e8:	2a000400 	.word	0x2a000400
 80047ec:	1d500080 	.word	0x1d500080
 80047f0:	10c00010 	.word	0x10c00010
 80047f4:	32601000 	.word	0x32601000
 80047f8:	36902000 	.word	0x36902000
 80047fc:	4b840000 	.word	0x4b840000
 8004800:	47520000 	.word	0x47520000
 8004804:	fffffbfc 	.word	0xfffffbfc
 8004808:	000f0080 	.word	0x000f0080
 800480c:	fc00fe1f 	.word	0xfc00fe1f

08004810 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:
// PUBLIC //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void Adc::Init(Callback callback)
{
    instance_ = this;
 8004810:	4aa4      	ldr	r2, [pc, #656]	@ (8004aa4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x294>)
        history_ = 0;
 8004812:	2300      	movs	r3, #0
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
        out_max_ = max;
 8004816:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
        step_ = 1.f / period;
 800481a:	f04f 5678 	mov.w	r6, #1040187392	@ 0x3e000000
    callback_ = callback;
    started_ = false;
 800481e:	2700      	movs	r7, #0
    instance_ = this;
 8004820:	6010      	str	r0, [r2, #0]
        threshold_ = threshold;
 8004822:	4aa1      	ldr	r2, [pc, #644]	@ (8004aa8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x298>)
{
 8004824:	b095      	sub	sp, #84	@ 0x54
    callback_ = callback;
 8004826:	6001      	str	r1, [r0, #0]
{
 8004828:	4604      	mov	r4, r0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800482a:	49a0      	ldr	r1, [pc, #640]	@ (8004aac <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x29c>)
        threshold_ = threshold;
 800482c:	61c2      	str	r2, [r0, #28]
        in_min_ = out_min_ + threshold_;
 800482e:	6282      	str	r2, [r0, #40]	@ 0x28
        threshold_ = threshold;
 8004830:	6442      	str	r2, [r0, #68]	@ 0x44
        in_min_ = out_min_ + threshold_;
 8004832:	6502      	str	r2, [r0, #80]	@ 0x50
        threshold_ = threshold;
 8004834:	66c2      	str	r2, [r0, #108]	@ 0x6c
        in_min_ = out_min_ + threshold_;
 8004836:	6782      	str	r2, [r0, #120]	@ 0x78
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8004838:	62c1      	str	r1, [r0, #44]	@ 0x2c
    started_ = false;
 800483a:	7107      	strb	r7, [r0, #4]
 800483c:	60c6      	str	r6, [r0, #12]
        history_ = 0;
 800483e:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8004840:	6103      	str	r3, [r0, #16]
        out_min_ = min;
 8004842:	6143      	str	r3, [r0, #20]
        out_max_ = max;
 8004844:	6185      	str	r5, [r0, #24]
        position_ = initial_value;
 8004846:	6203      	str	r3, [r0, #32]
        out_range_ = out_max_ - out_min_;
 8004848:	6245      	str	r5, [r0, #36]	@ 0x24
        step_ = 1.f / period;
 800484a:	6346      	str	r6, [r0, #52]	@ 0x34
        history_ = 0;
 800484c:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 800484e:	6383      	str	r3, [r0, #56]	@ 0x38
        out_min_ = min;
 8004850:	63c3      	str	r3, [r0, #60]	@ 0x3c
        out_max_ = max;
 8004852:	6405      	str	r5, [r0, #64]	@ 0x40
        position_ = initial_value;
 8004854:	6483      	str	r3, [r0, #72]	@ 0x48
        out_range_ = out_max_ - out_min_;
 8004856:	64c5      	str	r5, [r0, #76]	@ 0x4c
        step_ = 1.f / period;
 8004858:	65c6      	str	r6, [r0, #92]	@ 0x5c
        history_ = 0;
 800485a:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 800485c:	6603      	str	r3, [r0, #96]	@ 0x60
        out_min_ = min;
 800485e:	6643      	str	r3, [r0, #100]	@ 0x64
        out_max_ = max;
 8004860:	6685      	str	r5, [r0, #104]	@ 0x68
        position_ = initial_value;
 8004862:	6703      	str	r3, [r0, #112]	@ 0x70
        out_range_ = out_max_ - out_min_;
 8004864:	6745      	str	r5, [r0, #116]	@ 0x74
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8004866:	6541      	str	r1, [r0, #84]	@ 0x54
 8004868:	67c1      	str	r1, [r0, #124]	@ 0x7c
        threshold_ = threshold;
 800486a:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
        in_min_ = out_min_ + threshold_;
 800486e:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 8004872:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
        threshold_ = threshold;
 8004876:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc
        in_min_ = out_min_ + threshold_;
 800487a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800487e:	f8c0 10cc 	str.w	r1, [r0, #204]	@ 0xcc
        threshold_ = threshold;
 8004882:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
        in_min_ = out_min_ + threshold_;
 8004886:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800488a:	f8c0 10f4 	str.w	r1, [r0, #244]	@ 0xf4
        step_ = 1.f / period;
 800488e:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
        history_ = 0;
 8004892:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 8004896:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        out_min_ = min;
 800489a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        out_max_ = max;
 800489e:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
        position_ = initial_value;
 80048a2:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        out_range_ = out_max_ - out_min_;
 80048a6:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
        step_ = 1.f / period;
 80048aa:	f8c0 60ac 	str.w	r6, [r0, #172]	@ 0xac
        history_ = 0;
 80048ae:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 80048b2:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        out_min_ = min;
 80048b6:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
        out_max_ = max;
 80048ba:	f8c0 50b8 	str.w	r5, [r0, #184]	@ 0xb8
        position_ = initial_value;
 80048be:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
        out_range_ = out_max_ - out_min_;
 80048c2:	f8c0 50c4 	str.w	r5, [r0, #196]	@ 0xc4
        step_ = 1.f / period;
 80048c6:	f8c0 60d4 	str.w	r6, [r0, #212]	@ 0xd4
        history_ = 0;
 80048ca:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 80048ce:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        out_min_ = min;
 80048d2:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
        out_max_ = max;
 80048d6:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
        position_ = initial_value;
 80048da:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
        out_range_ = out_max_ - out_min_;
 80048de:	f8c0 50ec 	str.w	r5, [r0, #236]	@ 0xec
        step_ = 1.f / period;
 80048e2:	f8c0 60fc 	str.w	r6, [r0, #252]	@ 0xfc
        history_ = 0;
 80048e6:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        step_ = 1.f / period;
 80048ea:	f8c0 6124 	str.w	r6, [r0, #292]	@ 0x124
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ee:	4e70      	ldr	r6, [pc, #448]	@ (8004ab0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
        increment_ = 0;
 80048f0:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        out_min_ = min;
 80048f4:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
        position_ = initial_value;
 80048f8:	f8c0 3110 	str.w	r3, [r0, #272]	@ 0x110
        history_ = 0;
 80048fc:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 8004900:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        out_min_ = min;
 8004904:	f8c0 312c 	str.w	r3, [r0, #300]	@ 0x12c
        position_ = initial_value;
 8004908:	f8c0 3138 	str.w	r3, [r0, #312]	@ 0x138
        out_max_ = max;
 800490c:	f8c0 5108 	str.w	r5, [r0, #264]	@ 0x108
        threshold_ = threshold;
 8004910:	f8c0 210c 	str.w	r2, [r0, #268]	@ 0x10c
        out_range_ = out_max_ - out_min_;
 8004914:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
        in_min_ = out_min_ + threshold_;
 8004918:	f8c0 2118 	str.w	r2, [r0, #280]	@ 0x118
        in_range_inv_ = 1 / (out_range_ - 2 * threshold_);
 800491c:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
 8004920:	f8c0 1144 	str.w	r1, [r0, #324]	@ 0x144
        out_max_ = max;
 8004924:	f8c0 5130 	str.w	r5, [r0, #304]	@ 0x130
        threshold_ = threshold;
 8004928:	f8c0 2134 	str.w	r2, [r0, #308]	@ 0x134
        out_range_ = out_max_ - out_min_;
 800492c:	f8c0 513c 	str.w	r5, [r0, #316]	@ 0x13c
        in_min_ = out_min_ + threshold_;
 8004930:	f8c0 2140 	str.w	r2, [r0, #320]	@ 0x140
  MODIFY_REG(ADCx->CR,
 8004934:	4d5f      	ldr	r5, [pc, #380]	@ (8004ab4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a4>)
}

void Adc::Reset(void)
{
    read_index_ = 0;
    current_pot_ = 0; 
 8004936:	e9c0 7752 	strd	r7, r7, [r0, #328]	@ 0x148
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
    LL_GPIO_StructInit(&gpio_init);
 800493e:	a804      	add	r0, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8004948:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004954:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8004960:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	9b02      	ldr	r3, [sp, #8]
    LL_GPIO_StructInit(&gpio_init);
 800496c:	f003 fac2 	bl	8007ef4 <LL_GPIO_StructInit>
        gpio_init.Pin |= LL_GPIO_PIN_4;
 8004970:	22da      	movs	r2, #218	@ 0xda
 8004972:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 8004974:	a904      	add	r1, sp, #16
 8004976:	4850      	ldr	r0, [pc, #320]	@ (8004ab8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a8>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 8004978:	9708      	str	r7, [sp, #32]
 800497a:	4f50      	ldr	r7, [pc, #320]	@ (8004abc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2ac>)
        gpio_init.Pin |= LL_GPIO_PIN_4;
 800497c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    LL_GPIO_Init(GPIOA, &gpio_init);
 8004980:	f003 fa04 	bl	8007d8c <LL_GPIO_Init>
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 8004984:	231f      	movs	r3, #31
    LL_GPIO_Init(GPIOC, &gpio_init);
 8004986:	a904      	add	r1, sp, #16
 8004988:	484d      	ldr	r0, [pc, #308]	@ (8004ac0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b0>)
    gpio_init.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 |
 800498a:	9304      	str	r3, [sp, #16]
    LL_GPIO_Init(GPIOC, &gpio_init);
 800498c:	f003 f9fe 	bl	8007d8c <LL_GPIO_Init>
  *         performance is the same on the full voltage range
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableAnalogBooster(void)
{
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
 8004990:	4a4c      	ldr	r2, [pc, #304]	@ (8004ac4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b4>)
    InitADC(ADC1);
 8004992:	4629      	mov	r1, r5
 8004994:	4620      	mov	r0, r4
 8004996:	6853      	ldr	r3, [r2, #4]
 8004998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800499c:	6053      	str	r3, [r2, #4]
    __HAL_RCC_ADC12_CLK_ENABLE();
 800499e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049a2:	4a49      	ldr	r2, [pc, #292]	@ (8004ac8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2b8>)
 80049a4:	f043 0320 	orr.w	r3, r3, #32
 80049a8:	f8c6 30d8 	str.w	r3, [r6, #216]	@ 0xd8
 80049ac:	f8d6 30d8 	ldr.w	r3, [r6, #216]	@ 0xd8
  MODIFY_REG(ADCx->CR,
 80049b0:	f106 4668 	add.w	r6, r6, #3892314112	@ 0xe8000000
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	f5a6 560c 	sub.w	r6, r6, #8960	@ 0x2300
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049c0:	6893      	ldr	r3, [r2, #8]
 80049c2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ca:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR,
 80049cc:	68ab      	ldr	r3, [r5, #8]
 80049ce:	403b      	ands	r3, r7
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	60ab      	str	r3, [r5, #8]
 80049d6:	68b3      	ldr	r3, [r6, #8]
 80049d8:	403b      	ands	r3, r7
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	60b3      	str	r3, [r6, #8]
    InitADC(ADC1);
 80049e0:	f7ff fd72 	bl	80044c8 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitADC(ADC2);
 80049e4:	4631      	mov	r1, r6
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7ff fd6e 	bl	80044c8 <recorder::Adc::InitADC(ADC_TypeDef*)>
    InitAudioSequence();
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff fdb3 	bl	8004558 <recorder::Adc::InitAudioSequence()>
    InitPotSequence();
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7ff fe1e 	bl	8004634 <recorder::Adc::InitPotSequence()>
  MODIFY_REG(ADCx->CR,
 80049f8:	68ab      	ldr	r3, [r5, #8]
 80049fa:	403b      	ands	r3, r7
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	60ab      	str	r3, [r5, #8]
 8004a02:	68b3      	ldr	r3, [r6, #8]
 8004a04:	403b      	ands	r3, r7
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	60b3      	str	r3, [r6, #8]
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	07da      	lsls	r2, r3, #31
 8004a10:	d5fc      	bpl.n	8004a0c <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x1fc>
 8004a12:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2bc>)
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	07db      	lsls	r3, r3, #31
 8004a18:	d5fc      	bpl.n	8004a14 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x204>
    LL_DMA_InitTypeDef dma_init =
 8004a1a:	2234      	movs	r2, #52	@ 0x34
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	a806      	add	r0, sp, #24
 8004a20:	250c      	movs	r5, #12
 8004a22:	f004 fd86 	bl	8009532 <memset>
 8004a26:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8004a2a:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 8004a2e:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004a32:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2a0>)
    LL_DMA_InitTypeDef dma_init =
 8004a34:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
 8004a38:	240a      	movs	r4, #10
 8004a3a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
    };
 8004a3e:	4924      	ldr	r1, [pc, #144]	@ (8004ad0 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c0>)
 8004a40:	4a24      	ldr	r2, [pc, #144]	@ (8004ad4 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c4>)
    LL_DMA_InitTypeDef dma_init =
 8004a42:	f8cd e01c 	str.w	lr, [sp, #28]
 8004a46:	e9cd c709 	strd	ip, r7, [sp, #36]	@ 0x24
 8004a4a:	e9cd 400d 	strd	r4, r0, [sp, #52]	@ 0x34
    };
 8004a4e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    LL_DMA_InitTypeDef dma_init =
 8004a52:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8004a56:	2101      	movs	r1, #1
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004a58:	f8d3 60d8 	ldr.w	r6, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8004a5c:	4c1e      	ldr	r4, [pc, #120]	@ (8004ad8 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2c8>)
 8004a5e:	aa04      	add	r2, sp, #16
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004a60:	430e      	orrs	r6, r1
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8004a62:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 8004a64:	f8c3 60d8 	str.w	r6, [r3, #216]	@ 0xd8
 8004a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a6c:	400b      	ands	r3, r1
 8004a6e:	9303      	str	r3, [sp, #12]
 8004a70:	9b03      	ldr	r3, [sp, #12]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_1, &dma_init);
 8004a72:	f003 f929 	bl	8007cc8 <LL_DMA_Init>
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  register uint32_t dma_base_addr = (uint32_t)DMAx;

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8004a76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    irq::RegisterHandler(DMA1_Stream1_IRQn, DMAHandler);
 8004a78:	4628      	mov	r0, r5
 8004a7a:	4918      	ldr	r1, [pc, #96]	@ (8004adc <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x2cc>)
 8004a7c:	f023 0310 	bic.w	r3, r3, #16
 8004a80:	62a3      	str	r3, [r4, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8004a82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a84:	f023 0308 	bic.w	r3, r3, #8
 8004a88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a8a:	f000 fecd 	bl	8005828 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream1_IRQn, kADCIRQPriority);
 8004a8e:	4628      	mov	r0, r5
 8004a90:	2101      	movs	r1, #1
 8004a92:	f000 ff05 	bl	80058a0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream1_IRQn);
 8004a96:	4628      	mov	r0, r5
}
 8004a98:	b015      	add	sp, #84	@ 0x54
 8004a9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    irq::Enable(DMA1_Stream1_IRQn);
 8004a9e:	f000 bee5 	b.w	800586c <recorder::irq::Enable(IRQn_Type)>
 8004aa2:	bf00      	nop
 8004aa4:	20010da0 	.word	0x20010da0
 8004aa8:	3a83126f 	.word	0x3a83126f
 8004aac:	3f8041ab 	.word	0x3f8041ab
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	58020000 	.word	0x58020000
 8004abc:	7fffffc0 	.word	0x7fffffc0
 8004ac0:	58020800 	.word	0x58020800
 8004ac4:	58000400 	.word	0x58000400
 8004ac8:	40022300 	.word	0x40022300
 8004acc:	40022100 	.word	0x40022100
 8004ad0:	40022140 	.word	0x40022140
 8004ad4:	3800fc00 	.word	0x3800fc00
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	080044bd 	.word	0x080044bd

08004ae0 <recorder::Adc::Start()>:
    }
}

void Adc::Start(void)
{
    if (!started_)
 8004ae0:	7903      	ldrb	r3, [r0, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d12d      	bne.n	8004b42 <recorder::Adc::Start()+0x62>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8004ae6:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <recorder::Adc::Start()+0x64>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8004ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aec:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <recorder::Adc::Start()+0x68>)
{
 8004aee:	b470      	push	{r4, r5, r6}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8004af0:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8004af4:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8004af6:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8004af8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004afa:	f041 0110 	orr.w	r1, r1, #16
 8004afe:	6299      	str	r1, [r3, #40]	@ 0x28
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8004b00:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004b02:	f041 0108 	orr.w	r1, r1, #8
 8004b06:	6299      	str	r1, [r3, #40]	@ 0x28
 8004b08:	6893      	ldr	r3, [r2, #8]
 8004b0a:	075b      	lsls	r3, r3, #29
 8004b0c:	d4fc      	bmi.n	8004b08 <recorder::Adc::Start()+0x28>
  MODIFY_REG(ADCx->CR,
 8004b0e:	6893      	ldr	r3, [r2, #8]
        while (LL_ADC_REG_IsConversionOngoing(ADC1));
        ProfilingPin<PROFILE_POT_SAMPLING>::Set();
        LL_ADC_REG_StartConversion(ADC1);
        LL_ADC_REG_StartConversion(ADC2);

        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 8004b10:	f44f 46fa 	mov.w	r6, #32000	@ 0x7d00
 8004b14:	4d0d      	ldr	r5, [pc, #52]	@ (8004b4c <recorder::Adc::Start()+0x6c>)
        LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);

        started_ = true;
 8004b16:	f04f 0c01 	mov.w	ip, #1
 8004b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b50 <recorder::Adc::Start()+0x70>)
 8004b1c:	402b      	ands	r3, r5
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_1);
 8004b1e:	4909      	ldr	r1, [pc, #36]	@ (8004b44 <recorder::Adc::Start()+0x64>)
 8004b20:	f043 0304 	orr.w	r3, r3, #4
 8004b24:	6093      	str	r3, [r2, #8]
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	402b      	ands	r3, r5
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	60a3      	str	r3, [r4, #8]
 8004b30:	608e      	str	r6, [r1, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8004b32:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004b34:	ea43 030c 	orr.w	r3, r3, ip
    }
}
 8004b38:	bc70      	pop	{r4, r5, r6}
 8004b3a:	628b      	str	r3, [r1, #40]	@ 0x28
        started_ = true;
 8004b3c:	f880 c004 	strb.w	ip, [r0, #4]
}
 8004b40:	4770      	bx	lr
 8004b42:	4770      	bx	lr
 8004b44:	40020000 	.word	0x40020000
 8004b48:	40022000 	.word	0x40022000
 8004b4c:	7fffffc0 	.word	0x7fffffc0
 8004b50:	40022100 	.word	0x40022100

08004b54 <recorder::Adc::Stop()>:

void Adc::Stop(void)
{
    if (started_)
 8004b54:	7903      	ldrb	r3, [r0, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04c      	beq.n	8004bf4 <recorder::Adc::Stop()+0xa0>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8004b5a:	4a27      	ldr	r2, [pc, #156]	@ (8004bf8 <recorder::Adc::Stop()+0xa4>)
 8004b5c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
{
 8004b62:	b470      	push	{r4, r5, r6}
 8004b64:	6293      	str	r3, [r2, #40]	@ 0x28
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 8004b66:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004b68:	07d9      	lsls	r1, r3, #31
 8004b6a:	d4fc      	bmi.n	8004b66 <recorder::Adc::Stop()+0x12>
  MODIFY_REG(ADCx->CR,
 8004b6c:	4a23      	ldr	r2, [pc, #140]	@ (8004bfc <recorder::Adc::Stop()+0xa8>)
 8004b6e:	4c24      	ldr	r4, [pc, #144]	@ (8004c00 <recorder::Adc::Stop()+0xac>)
 8004b70:	6893      	ldr	r3, [r2, #8]
 8004b72:	4924      	ldr	r1, [pc, #144]	@ (8004c04 <recorder::Adc::Stop()+0xb0>)
 8004b74:	4023      	ands	r3, r4
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	6093      	str	r3, [r2, #8]
 8004b7c:	688b      	ldr	r3, [r1, #8]
 8004b7e:	4023      	ands	r3, r4
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b86:	6893      	ldr	r3, [r2, #8]
 8004b88:	075b      	lsls	r3, r3, #29
 8004b8a:	d4fc      	bmi.n	8004b86 <recorder::Adc::Stop()+0x32>
 8004b8c:	491d      	ldr	r1, [pc, #116]	@ (8004c04 <recorder::Adc::Stop()+0xb0>)
 8004b8e:	688a      	ldr	r2, [r1, #8]
 8004b90:	f012 0204 	ands.w	r2, r2, #4
 8004b94:	d1fb      	bne.n	8004b8e <recorder::Adc::Stop()+0x3a>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8004b96:	4918      	ldr	r1, [pc, #96]	@ (8004bf8 <recorder::Adc::Stop()+0xa4>)
        history_ = 0;
 8004b98:	2300      	movs	r3, #0
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8004b9a:	f44f 6600 	mov.w	r6, #2048	@ 0x800
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8004b9e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8004ba2:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8004ba4:	f024 0410 	bic.w	r4, r4, #16
 8004ba8:	628c      	str	r4, [r1, #40]	@ 0x28
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8004baa:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8004bac:	f024 0408 	bic.w	r4, r4, #8
 8004bb0:	628c      	str	r4, [r1, #40]	@ 0x28
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8004bb2:	608e      	str	r6, [r1, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8004bb4:	608d      	str	r5, [r1, #8]
 8004bb6:	6083      	str	r3, [r0, #8]
        increment_ = 0;
 8004bb8:	6103      	str	r3, [r0, #16]
        history_ = 0;
 8004bba:	6303      	str	r3, [r0, #48]	@ 0x30
        increment_ = 0;
 8004bbc:	6383      	str	r3, [r0, #56]	@ 0x38
        history_ = 0;
 8004bbe:	6583      	str	r3, [r0, #88]	@ 0x58
        increment_ = 0;
 8004bc0:	6603      	str	r3, [r0, #96]	@ 0x60
        history_ = 0;
 8004bc2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        increment_ = 0;
 8004bc6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
        history_ = 0;
 8004bca:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        increment_ = 0;
 8004bce:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
        history_ = 0;
 8004bd2:	f8c0 30d0 	str.w	r3, [r0, #208]	@ 0xd0
        increment_ = 0;
 8004bd6:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
        history_ = 0;
 8004bda:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
        increment_ = 0;
 8004bde:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
        history_ = 0;
 8004be2:	f8c0 3120 	str.w	r3, [r0, #288]	@ 0x120
        increment_ = 0;
 8004be6:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
        LL_DMA_DisableIT_HT(DMA1, LL_DMA_STREAM_1);
        LL_DMA_ClearFlag_TC1(DMA1);
        LL_DMA_ClearFlag_HT1(DMA1);

        Reset();
        started_ = false;
 8004bea:	7102      	strb	r2, [r0, #4]
    }
}
 8004bec:	bc70      	pop	{r4, r5, r6}
    current_pot_ = 0; 
 8004bee:	e9c0 2252 	strd	r2, r2, [r0, #328]	@ 0x148
}
 8004bf2:	4770      	bx	lr
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40020000 	.word	0x40020000
 8004bfc:	40022000 	.word	0x40022000
 8004c00:	7fffffc0 	.word	0x7fffffc0
 8004c04:	40022100 	.word	0x40022100

08004c08 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)>:
        void StopTimer(void);
        static void TimerHandler(void);

        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
        {
            instance_->Service(in, pot);
 8004c08:	4bc8      	ldr	r3, [pc, #800]	@ (8004f2c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x324>)
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 8004c0a:	b510      	push	{r4, lr}
            instance_->Service(in, pot);
 8004c0c:	681c      	ldr	r4, [r3, #0]

        void Service(const AudioInput &in, const PotInput &pot)
        {
            AudioOutput out;

            if (state_ == STATE_STARTING)
 8004c0e:	f894 3160 	ldrb.w	r3, [r4, #352]	@ 0x160
 8004c12:	2b01      	cmp	r3, #1
        static inline void AdcCallback(const AudioInput &in, const PotInput &pot)
 8004c14:	ed2d 8b04 	vpush	{d8-d9}
 8004c18:	b084      	sub	sp, #16
            if (state_ == STATE_STARTING)
 8004c1a:	f000 8082 	beq.w	8004d22 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x11a>
                if (fade_position_ >= 1)
                {
                    state_ = STATE_RUNNING;
                }
            }
            else if (state_ == STATE_RUNNING)
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d066      	beq.n	8004cf0 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0xe8>
                    // Disable the amplifier at the start of the soft-off curve
                    // instead of the end, otherwise the speaker will pop.
                    amp_enable_.Clear();
                }
            }
            else if (state_ == STATE_STOPPING)
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	f000 80dd 	beq.w	8004de2 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x1da>
    void Process(const AudioOutput& audio)
    {
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
        {
            float sample = audio[AUDIO_OUT_LINE][i];
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c28:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004c2c:	ed9d 6a01 	vldr	s12, [sp, #4]
 8004c30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
            uint32_t code = 0.5 + 0xFFF * sample;
 8004c34:	ed9f 4abe 	vldr	s8, [pc, #760]	@ 8004f30 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x328>
 8004c38:	eddf 4abe 	vldr	s9, [pc, #760]	@ 8004f34 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x32c>
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c3c:	ee36 6a25 	vadd.f32	s12, s12, s11
 8004c40:	eddd 6a02 	vldr	s13, [sp, #8]
            uint32_t code = 0.5 + 0xFFF * sample;
 8004c44:	eeb0 5a67 	vmov.f32	s10, s15
 8004c48:	f8d4 2154 	ldr.w	r2, [r4, #340]	@ 0x154
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c4c:	ee76 6aa5 	vadd.f32	s13, s13, s11
            dma_buffer_[write_index_] = code;
 8004c50:	48b9      	ldr	r0, [pc, #740]	@ (8004f38 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x330>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c52:	ee26 6a27 	vmul.f32	s12, s12, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8004c56:	49b9      	ldr	r1, [pc, #740]	@ (8004f3c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x334>)
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c58:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004c5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004c60:	fe86 6a65 	vminnm.f32	s12, s12, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 8004c64:	fe86 6a04 	vmaxnm.f32	s12, s12, s8
 8004c68:	eea6 5a24 	vfma.f32	s10, s12, s9
 8004c6c:	eeb0 6a67 	vmov.f32	s12, s15
 8004c70:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 8004c74:	fec6 6a84 	vmaxnm.f32	s13, s13, s8
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c78:	ee37 7a25 	vadd.f32	s14, s14, s11
            uint32_t code = 0.5 + 0xFFF * sample;
 8004c7c:	eea6 6aa4 	vfma.f32	s12, s13, s9
            sample = std::clamp<float>(0.5 * (sample + 1), 0, 1);
 8004c80:	ee27 7a27 	vmul.f32	s14, s14, s15
            uint32_t code = 0.5 + 0xFFF * sample;
 8004c84:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8004c88:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8004c8c:	fe87 7a04 	vmaxnm.f32	s14, s14, s8
 8004c90:	ee15 3a10 	vmov	r3, s10
 8004c94:	eee7 7a24 	vfma.f32	s15, s14, s9
 8004c98:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8004c9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8004ca0:	3201      	adds	r2, #1
 8004ca2:	fba1 c302 	umull	ip, r3, r1, r2
 8004ca6:	089b      	lsrs	r3, r3, #2
            uint32_t code = 0.5 + 0xFFF * sample;
 8004ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8004cac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cb0:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 8004cb4:	ee16 2a10 	vmov	r2, s12
 8004cb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	fba1 c302 	umull	ip, r3, r1, r2
 8004cc2:	089b      	lsrs	r3, r3, #2
 8004cc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004cc8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
            uint32_t code = 0.5 + 0xFFF * sample;
 8004ccc:	ee17 2a90 	vmov	r2, s15
 8004cd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            write_index_ = (write_index_ + 1) % kDMABufferSize;
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	fba1 2103 	umull	r2, r1, r1, r3
 8004cda:	0889      	lsrs	r1, r1, #2
 8004cdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004ce0:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8004ce4:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        }
 8004ce8:	b004      	add	sp, #16
 8004cea:	ecbd 8b04 	vpop	{d8-d9}
 8004cee:	bd10      	pop	{r4, pc}
                out = callback_(in, pot);
 8004cf0:	4b93      	ldr	r3, [pc, #588]	@ (8004f40 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x338>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4798      	blx	r3
                if (cue_stop_)
 8004cf6:	f894 3161 	ldrb.w	r3, [r4, #353]	@ 0x161
                out = callback_(in, pot);
 8004cfa:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004cfe:	edcd 0a02 	vstr	s1, [sp, #8]
 8004d02:	ed8d 1a03 	vstr	s2, [sp, #12]
                if (cue_stop_)
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d08e      	beq.n	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    fade_position_ = 1;
 8004d0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
                    state_ = STATE_STOPPING;
 8004d0e:	2003      	movs	r0, #3
        gpio_struct(gpio_base)->BSRR = kPinMask << 16;
 8004d10:	4b8c      	ldr	r3, [pc, #560]	@ (8004f44 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d16:	f884 0160 	strb.w	r0, [r4, #352]	@ 0x160
                    fade_position_ = 1;
 8004d1a:	f8c4 115c 	str.w	r1, [r4, #348]	@ 0x15c
 8004d1e:	619a      	str	r2, [r3, #24]
        for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8004d20:	e782      	b.n	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8004d22:	edd4 8a57 	vldr	s17, [r4, #348]	@ 0x15c
      if (__a < __b)
 8004d26:	eddf 7a88 	vldr	s15, [pc, #544]	@ 8004f48 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x340>
 8004d2a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8004d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d32:	f100 80b9 	bmi.w	8004ea8 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2a0>
                    fade_position_ += 1 / kFadeDuration;
 8004d36:	eddf 7a85 	vldr	s15, [pc, #532]	@ 8004f4c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
      if (__b < __a)
 8004d3a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d3e:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 8004d42:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8004d46:	fec7 7ac8 	vminnm.f32	s15, s15, s16
  { return __builtin_cosf(__x); }
 8004d4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004d4e:	f003 fee3 	bl	8008b18 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d56:	ee38 0a40 	vsub.f32	s0, s16, s0
                    fade_position_ += 1 / kFadeDuration;
 8004d5a:	ed9f 8a7e 	vldr	s16, [pc, #504]	@ 8004f54 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d5e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                    fade_position_ += 1 / kFadeDuration;
 8004d62:	ee38 8a88 	vadd.f32	s16, s17, s16
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d66:	eee0 7a07 	vfma.f32	s15, s0, s14
                        out[ch][i] = FadeCurve(fade_position_);
 8004d6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8004d6e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d72:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ += 1 / kFadeDuration;
 8004d76:	ed9f 9a75 	vldr	s18, [pc, #468]	@ 8004f4c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 8004d7a:	fe88 0a68 	vminnm.f32	s0, s16, s17
 8004d7e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d82:	f003 fec9 	bl	8008b18 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d8a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004d8e:	ee78 8ac0 	vsub.f32	s17, s17, s0
                    fade_position_ += 1 / kFadeDuration;
 8004d92:	ee38 9a09 	vadd.f32	s18, s16, s18
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004d96:	eee8 7a87 	vfma.f32	s15, s17, s14
                        out[ch][i] = FadeCurve(fade_position_);
 8004d9a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004d9e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004da2:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 8004da6:	fe89 0a68 	vminnm.f32	s0, s18, s17
 8004daa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004dae:	f003 feb3 	bl	8008b18 <cosf>
 8004db2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004db6:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
                if (fade_position_ >= 1)
 8004dba:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8004f58 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x350>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004dbe:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8004dc2:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 8004dc6:	eeb4 8ac7 	vcmpe.f32	s16, s14
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004dca:	eee8 7aa6 	vfma.f32	s15, s17, s13
                if (fade_position_ >= 1)
 8004dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 8004dd2:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ >= 1)
 8004dd6:	f6ff af27 	blt.w	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                    state_ = STATE_RUNNING;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f884 3160 	strb.w	r3, [r4, #352]	@ 0x160
 8004de0:	e722      	b.n	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8004de2:	ed94 8a57 	vldr	s16, [r4, #348]	@ 0x15c
      if (__a < __b)
 8004de6:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8004f4c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x344>
 8004dea:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	f100 8097 	bmi.w	8004f24 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x31c>
      if (__b < __a)
 8004df6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004dfa:	eddf 7a55 	vldr	s15, [pc, #340]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
            {
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
                {
                    fade_position_ -= 1 / kFadeDuration;
 8004dfe:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004e02:	fe80 0a68 	vminnm.f32	s0, s0, s17
 8004e06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e0a:	f003 fe85 	bl	8008b18 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004e0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e12:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004e16:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8004e1a:	eee8 7a87 	vfma.f32	s15, s17, s14
      if (__a < __b)
 8004e1e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8004f54 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>

                    for (uint32_t ch = 0; ch < NUM_AUDIO_OUTS; ch++)
                    {
                        out[ch][i] = FadeCurve(fade_position_);
 8004e22:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e26:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	d476      	bmi.n	8004f1e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x316>
      if (__b < __a)
 8004e30:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004e34:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
                    fade_position_ -= 1 / kFadeDuration;
 8004e38:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004e3c:	fe80 0a68 	vminnm.f32	s0, s0, s17
 8004e40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e44:	f003 fe68 	bl	8008b18 <cosf>
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004e48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e4c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004e50:	ee78 8ac0 	vsub.f32	s17, s17, s0
 8004e54:	eee8 7a87 	vfma.f32	s15, s17, s14
                    fade_position_ -= 1 / kFadeDuration;
 8004e58:	eddf 8a40 	vldr	s17, [pc, #256]	@ 8004f5c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
                        out[ch][i] = FadeCurve(fade_position_);
 8004e5c:	edcd 7a02 	vstr	s15, [sp, #8]
      if (__a < __b)
 8004e60:	eeb4 8ae8 	vcmpe.f32	s16, s17
                    fade_position_ -= 1 / kFadeDuration;
 8004e64:	ee78 9a68 	vsub.f32	s19, s16, s17
 8004e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6c:	d43b      	bmi.n	8004ee6 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2de>
      if (__b < __a)
 8004e6e:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004e72:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004f50 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x348>
 8004e76:	fe89 0ac9 	vminnm.f32	s0, s19, s18
 8004e7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e7e:	f003 fe4b 	bl	8008b18 <cosf>
 8004e82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004e86:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004e8a:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 8004e8e:	ee39 9a40 	vsub.f32	s18, s18, s0
                    }
                }

                if (fade_position_ <= 0)
 8004e92:	eeb4 8a68 	vcmp.f32	s16, s17
            return 0.5 * (1 - std::cos(kPi * tau)) - 1;
 8004e96:	eee9 7a07 	vfma.f32	s15, s18, s14
                if (fade_position_ <= 0)
 8004e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        out[ch][i] = FadeCurve(fade_position_);
 8004e9e:	edcd 7a03 	vstr	s15, [sp, #12]
                if (fade_position_ <= 0)
 8004ea2:	f47f aec1 	bne.w	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8004ea6:	e022      	b.n	8004eee <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x2e6>
      if (__a < __b)
 8004ea8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8004f60 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x358>
                        out[ch][i] = FadeCurve(fade_position_);
 8004eac:	4b2d      	ldr	r3, [pc, #180]	@ (8004f64 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 8004eae:	eef4 8ae7 	vcmpe.f32	s17, s15
                    fade_position_ += 1 / kFadeDuration;
 8004eb2:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 8004f54 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x34c>
                        out[ch][i] = FadeCurve(fade_position_);
 8004eb6:	9301      	str	r3, [sp, #4]
                    fade_position_ += 1 / kFadeDuration;
 8004eb8:	ee38 8a88 	vadd.f32	s16, s17, s16
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	f57f af55 	bpl.w	8004d6e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x166>
 8004ec4:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8004f68 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x360>
 8004ec8:	ed9f 9a24 	vldr	s18, [pc, #144]	@ 8004f5c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x354>
 8004ecc:	eef4 8ae7 	vcmpe.f32	s17, s15
                        out[ch][i] = FadeCurve(fade_position_);
 8004ed0:	9302      	str	r3, [sp, #8]
                    fade_position_ += 1 / kFadeDuration;
 8004ed2:	ee38 9a89 	vadd.f32	s18, s17, s18
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	f57f af60 	bpl.w	8004d9e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x196>
                        out[ch][i] = FadeCurve(fade_position_);
 8004ede:	9303      	str	r3, [sp, #12]
                for (uint32_t i = 0; i < kAudioOSFactor; i++)
 8004ee0:	ed84 9a57 	vstr	s18, [r4, #348]	@ 0x15c
                if (fade_position_ >= 1)
 8004ee4:	e6a0      	b.n	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
                        out[ch][i] = FadeCurve(fade_position_);
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x35c>)
 8004ee8:	edc4 9a57 	vstr	s19, [r4, #348]	@ 0x15c
 8004eec:	9303      	str	r3, [sp, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004eee:	4a1f      	ldr	r2, [pc, #124]	@ (8004f6c <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x364>)
                {
                    state_ = STATE_STOPPED;
 8004ef0:	2100      	movs	r1, #0
                    StopTimer();
                    adc_.Stop();
 8004ef2:	1d20      	adds	r0, r4, #4
 8004ef4:	6813      	ldr	r3, [r2, #0]
                    state_ = STATE_STOPPED;
 8004ef6:	f884 1160 	strb.w	r1, [r4, #352]	@ 0x160
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	6013      	str	r3, [r2, #0]
                    adc_.Stop();
 8004f00:	f7ff fe28 	bl	8004b54 <recorder::Adc::Stop()>
                    dac_.Stop();
 8004f04:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 8004f08:	f000 f926 	bl	8005158 <recorder::Dac::Stop()>
 8004f0c:	490d      	ldr	r1, [pc, #52]	@ (8004f44 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x33c>)
 8004f0e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004f12:	4b17      	ldr	r3, [pc, #92]	@ (8004f70 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x368>)
 8004f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f18:	6188      	str	r0, [r1, #24]
 8004f1a:	619a      	str	r2, [r3, #24]
 8004f1c:	e684      	b.n	8004c28 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x20>
 8004f1e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004f22:	e799      	b.n	8004e58 <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x250>
 8004f24:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004f28:	e779      	b.n	8004e1e <recorder::Analog::AdcCallback(std::array<float [3], 2u> const&, std::array<float, 8u> const&)+0x216>
 8004f2a:	bf00      	nop
 8004f2c:	20010da8 	.word	0x20010da8
 8004f30:	00000000 	.word	0x00000000
 8004f34:	457ff000 	.word	0x457ff000
 8004f38:	3800fc30 	.word	0x3800fc30
 8004f3c:	aaaaaaab 	.word	0xaaaaaaab
 8004f40:	20010da4 	.word	0x20010da4
 8004f44:	58020400 	.word	0x58020400
 8004f48:	b9da740e 	.word	0xb9da740e
 8004f4c:	39da740e 	.word	0x39da740e
 8004f50:	40490fdb 	.word	0x40490fdb
 8004f54:	3a5a740e 	.word	0x3a5a740e
 8004f58:	3f7fe4b1 	.word	0x3f7fe4b1
 8004f5c:	3aa3d70a 	.word	0x3aa3d70a
 8004f60:	ba5a740e 	.word	0xba5a740e
 8004f64:	bf800000 	.word	0xbf800000
 8004f68:	baa3d70a 	.word	0xbaa3d70a
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	58021800 	.word	0x58021800

08004f74 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>:

namespace recorder
{

void Analog::Init(Callback callback)
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
    instance_ = this;
 8004f76:	4a49      	ldr	r2, [pc, #292]	@ (800509c <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x128>)
{
 8004f78:	b08a      	sub	sp, #40	@ 0x28
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8004f7a:	4c49      	ldr	r4, [pc, #292]	@ (80050a0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x12c>)
 8004f7c:	4605      	mov	r5, r0
    instance_ = this;
 8004f7e:	6010      	str	r0, [r2, #0]
    adc_enable_.Init();
    adc_enable_.Set();
    boost_enable_.Init();
    amp_enable_.Init();

    adc_.Init(AdcCallback);
 8004f80:	3004      	adds	r0, #4
 8004f82:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0

void Analog::InitTimer(void)
{
    float period = system::kSystemClock / kAudioOSRate;

    LL_TIM_InitTypeDef timer_init =
 8004f86:	2600      	movs	r6, #0
    callback_ = callback;
 8004f88:	4b46      	ldr	r3, [pc, #280]	@ (80050a4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x130>)
 8004f8a:	f042 0202 	orr.w	r2, r2, #2
 8004f8e:	6019      	str	r1, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004f90:	2102      	movs	r1, #2
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8004f92:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8004f96:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004f9a:	4b43      	ldr	r3, [pc, #268]	@ (80050a8 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x134>)
 8004f9c:	f002 0202 	and.w	r2, r2, #2
 8004fa0:	9204      	str	r2, [sp, #16]
 8004fa2:	9a04      	ldr	r2, [sp, #16]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	f022 020c 	bic.w	r2, r2, #12
 8004faa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	f022 020c 	bic.w	r2, r2, #12
 8004fb2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	f022 0202 	bic.w	r2, r2, #2
 8004fba:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f022 020c 	bic.w	r2, r2, #12
 8004fc2:	f042 0204 	orr.w	r2, r2, #4
 8004fc6:	601a      	str	r2, [r3, #0]
        gpio_struct(gpio_base)->BSRR = kPinMask;
 8004fc8:	6199      	str	r1, [r3, #24]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 8004fca:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004fce:	4a37      	ldr	r2, [pc, #220]	@ (80050ac <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x138>)
 8004fd0:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8004fd4:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8004fd8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8004fdc:	f001 0140 	and.w	r1, r1, #64	@ 0x40
 8004fe0:	9103      	str	r1, [sp, #12]
 8004fe2:	9903      	ldr	r1, [sp, #12]
 8004fe4:	6891      	ldr	r1, [r2, #8]
 8004fe6:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8004fea:	6091      	str	r1, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004fec:	68d1      	ldr	r1, [r2, #12]
 8004fee:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8004ff2:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004ff4:	6851      	ldr	r1, [r2, #4]
 8004ff6:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8004ffa:	6051      	str	r1, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004ffc:	6811      	ldr	r1, [r2, #0]
 8004ffe:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005002:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8005006:	6011      	str	r1, [r2, #0]
            case GPIOB_BASE: __HAL_RCC_GPIOB_CLK_ENABLE(); return;
 8005008:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
    adc_.Init(AdcCallback);
 800500c:	4928      	ldr	r1, [pc, #160]	@ (80050b0 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x13c>)
 800500e:	f042 0202 	orr.w	r2, r2, #2
 8005012:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8005016:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 800501a:	f002 0202 	and.w	r2, r2, #2
 800501e:	9202      	str	r2, [sp, #8]
 8005020:	9a02      	ldr	r2, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005028:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005030:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005038:	605a      	str	r2, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005040:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f7ff fbe3 	bl	8004810 <recorder::Adc::Init(void (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))>
    dac_.Init();
 800504a:	f505 70aa 	add.w	r0, r5, #340	@ 0x154
 800504e:	f000 f905 	bl	800525c <recorder::Dac::Init()>
        .Prescaler         = 0,
        .CounterMode       = LL_TIM_COUNTERMODE_UP,
        .Autoreload        = static_cast<uint32_t>(period + 0.5) - 1,
        .ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1,
        .RepetitionCounter = 0,
    };
 8005052:	f240 5334 	movw	r3, #1332	@ 0x534
    LL_TIM_InitTypeDef timer_init =
 8005056:	9609      	str	r6, [sp, #36]	@ 0x24

    __HAL_RCC_TIM15_CLK_ENABLE();
    LL_TIM_Init(TIM15, &timer_init);
 8005058:	a905      	add	r1, sp, #20
    LL_TIM_InitTypeDef timer_init =
 800505a:	e9cd 6605 	strd	r6, r6, [sp, #20]
 800505e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005062:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
 8005066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506a:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 800506e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
    LL_TIM_Init(TIM15, &timer_init);
 8005072:	4c10      	ldr	r4, [pc, #64]	@ (80050b4 <recorder::Analog::Init(std::array<float [3], 1u> const (*)(std::array<float [3], 2u> const&, std::array<float, 8u> const&))+0x140>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
    LL_TIM_Init(TIM15, &timer_init);
 8005078:	4620      	mov	r0, r4
    __HAL_RCC_TIM15_CLK_ENABLE();
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	9b01      	ldr	r3, [sp, #4]
    LL_TIM_Init(TIM15, &timer_init);
 800507e:	f003 fb05 	bl	800868c <LL_TIM_Init>
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005082:	6863      	ldr	r3, [r4, #4]
    fade_position_ = 0;
 8005084:	2200      	movs	r2, #0
 8005086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508a:	f043 0320 	orr.w	r3, r3, #32
 800508e:	6063      	str	r3, [r4, #4]
 8005090:	f8c5 215c 	str.w	r2, [r5, #348]	@ 0x15c
    state_ = STATE_STOPPED;
 8005094:	f8a5 6160 	strh.w	r6, [r5, #352]	@ 0x160
}
 8005098:	b00a      	add	sp, #40	@ 0x28
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	20010da8 	.word	0x20010da8
 80050a0:	58024400 	.word	0x58024400
 80050a4:	20010da4 	.word	0x20010da4
 80050a8:	58020400 	.word	0x58020400
 80050ac:	58021800 	.word	0x58021800
 80050b0:	08004c09 	.word	0x08004c09
 80050b4:	40014000 	.word	0x40014000

080050b8 <recorder::Analog::StartTimer()>:
  WRITE_REG(TIMx->CNT, Counter);
 80050b8:	4b03      	ldr	r3, [pc, #12]	@ (80050c8 <recorder::Analog::StartTimer()+0x10>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
        LL_TIM_EnableIT_UPDATE(TIM15);
    }

    LL_TIM_SetCounter(TIM15, 0);
    LL_TIM_EnableCounter(TIM15);
}
 80050c6:	4770      	bx	lr
 80050c8:	40014000 	.word	0x40014000

080050cc <recorder::Dac::DMAHandler()>:
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <recorder::Dac::DMAHandler()+0x10>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80050ce:	2210      	movs	r2, #16
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80050d0:	2120      	movs	r1, #32
 80050d2:	6099      	str	r1, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80050d4:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 80050d6:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 80050d8:	681b      	ldr	r3, [r3, #0]
    ScopedProfilingPin<PROFILE_DAC_DMA_SERVICE> profile;
    LL_DMA_ClearFlag_TC0(DMA1);
    LL_DMA_ClearFlag_HT0(DMA1);
    LL_DMA_IsActiveFlag_TC0(DMA1);
    LL_DMA_IsActiveFlag_HT0(DMA1);
}
 80050da:	4770      	bx	lr
 80050dc:	40020000 	.word	0x40020000

080050e0 <recorder::Dac::Start()>:
    if (!started_)
 80050e0:	7903      	ldrb	r3, [r0, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d131      	bne.n	800514a <recorder::Dac::Start()+0x6a>
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80050e6:	4b19      	ldr	r3, [pc, #100]	@ (800514c <recorder::Dac::Start()+0x6c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80050e8:	2110      	movs	r1, #16
  *         @arg @ref LL_DAC_CHANNEL_2
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 80050ea:	4a19      	ldr	r2, [pc, #100]	@ (8005150 <recorder::Dac::Start()+0x70>)
{
 80050ec:	b410      	push	{r4}
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 80050ee:	2420      	movs	r4, #32
 80050f0:	609c      	str	r4, [r3, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 80050f2:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80050f4:	6919      	ldr	r1, [r3, #16]
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg,
 80050f6:	4c17      	ldr	r4, [pc, #92]	@ (8005154 <recorder::Dac::Start()+0x74>)
 80050f8:	f041 0110 	orr.w	r1, r1, #16
 80050fc:	6119      	str	r1, [r3, #16]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80050fe:	6919      	ldr	r1, [r3, #16]
 8005100:	f041 0108 	orr.w	r1, r1, #8
 8005104:	6119      	str	r1, [r3, #16]
  SET_BIT(DACx->CR,
 8005106:	6811      	ldr	r1, [r2, #0]
 8005108:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800510c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(DACx->CR,
 800510e:	6811      	ldr	r1, [r2, #0]
 8005110:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 8005114:	6011      	str	r1, [r2, #0]
  MODIFY_REG(*preg,
 8005116:	f8d4 1414 	ldr.w	r1, [r4, #1044]	@ 0x414
 800511a:	f36f 010b 	bfc	r1, #0, #12
 800511e:	f8c4 1414 	str.w	r1, [r4, #1044]	@ 0x414
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 8005122:	247d      	movs	r4, #125	@ 0x7d
  SET_BIT(DACx->SWTRIGR,
 8005124:	6851      	ldr	r1, [r2, #4]
 8005126:	f041 0102 	orr.w	r1, r1, #2
 800512a:	6051      	str	r1, [r2, #4]
  MODIFY_REG(DACx->CR,
 800512c:	6811      	ldr	r1, [r2, #0]
 800512e:	f421 1170 	bic.w	r1, r1, #3932160	@ 0x3c0000
 8005132:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8005136:	6011      	str	r1, [r2, #0]
        started_ = true;
 8005138:	2101      	movs	r1, #1
        DMA1->LIFCR = 0x7D << (8 * LL_DMA_STREAM_0);
 800513a:	609c      	str	r4, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800513c:	691a      	ldr	r2, [r3, #16]
}
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	430a      	orrs	r2, r1
 8005144:	611a      	str	r2, [r3, #16]
        started_ = true;
 8005146:	7101      	strb	r1, [r0, #4]
}
 8005148:	4770      	bx	lr
 800514a:	4770      	bx	lr
 800514c:	40020000 	.word	0x40020000
 8005150:	40007400 	.word	0x40007400
 8005154:	40007000 	.word	0x40007000

08005158 <recorder::Dac::Stop()>:
    if (started_)
 8005158:	7903      	ldrb	r3, [r0, #4]
 800515a:	b32b      	cbz	r3, 80051a8 <recorder::Dac::Stop()+0x50>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <recorder::Dac::Stop()+0x54>)
 800515e:	6913      	ldr	r3, [r2, #16]
 8005160:	f023 0301 	bic.w	r3, r3, #1
{
 8005164:	b4f0      	push	{r4, r5, r6, r7}
 8005166:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN)) ? 1UL : 0UL);
 8005168:	6913      	ldr	r3, [r2, #16]
 800516a:	f013 0301 	ands.w	r3, r3, #1
 800516e:	d1fb      	bne.n	8005168 <recorder::Dac::Stop()+0x10>
  CLEAR_BIT(DACx->CR,
 8005170:	4d0f      	ldr	r5, [pc, #60]	@ (80051b0 <recorder::Dac::Stop()+0x58>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8005172:	2720      	movs	r7, #32
        dma_buffer_[i] = 0;
 8005174:	490f      	ldr	r1, [pc, #60]	@ (80051b4 <recorder::Dac::Stop()+0x5c>)
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8005176:	2610      	movs	r6, #16
 8005178:	682c      	ldr	r4, [r5, #0]
 800517a:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
 800517e:	602c      	str	r4, [r5, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8005180:	6914      	ldr	r4, [r2, #16]
 8005182:	f024 0410 	bic.w	r4, r4, #16
 8005186:	6114      	str	r4, [r2, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8005188:	6914      	ldr	r4, [r2, #16]
 800518a:	f024 0408 	bic.w	r4, r4, #8
 800518e:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8005190:	6097      	str	r7, [r2, #8]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8005192:	6096      	str	r6, [r2, #8]
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8005194:	6003      	str	r3, [r0, #0]
        dma_buffer_[i] = 0;
 8005196:	614b      	str	r3, [r1, #20]
 8005198:	600b      	str	r3, [r1, #0]
 800519a:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800519e:	e9c1 3303 	strd	r3, r3, [r1, #12]
}
 80051a2:	bcf0      	pop	{r4, r5, r6, r7}
        started_ = false;
 80051a4:	7103      	strb	r3, [r0, #4]
}
 80051a6:	4770      	bx	lr
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40020000 	.word	0x40020000
 80051b0:	40007400 	.word	0x40007400
 80051b4:	3800fc30 	.word	0x3800fc30

080051b8 <recorder::Dac::InitDMA()>:
{
 80051b8:	b510      	push	{r4, lr}
 80051ba:	b092      	sub	sp, #72	@ 0x48
    LL_DMA_InitTypeDef dma_init =
 80051bc:	222c      	movs	r2, #44	@ 0x2c
 80051be:	2100      	movs	r1, #0
 80051c0:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80051c4:	a806      	add	r0, sp, #24
 80051c6:	f004 f9b4 	bl	8009532 <memset>
 80051ca:	491f      	ldr	r1, [pc, #124]	@ (8005248 <recorder::Dac::InitDMA()+0x90>)
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80051d2:	9405      	str	r4, [sp, #20]
 80051d4:	2406      	movs	r4, #6
 80051d6:	9007      	str	r0, [sp, #28]
 80051d8:	2044      	movs	r0, #68	@ 0x44
    __HAL_RCC_DMA1_CLK_ENABLE();
 80051da:	4b1c      	ldr	r3, [pc, #112]	@ (800524c <recorder::Dac::InitDMA()+0x94>)
    LL_DMA_InitTypeDef dma_init =
 80051dc:	e9cd 1203 	strd	r1, r2, [sp, #12]
 80051e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051e8:	e9cd 1208 	strd	r1, r2, [sp, #32]
 80051ec:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
    };
 80051f0:	4a17      	ldr	r2, [pc, #92]	@ (8005250 <recorder::Dac::InitDMA()+0x98>)
    LL_DMA_InitTypeDef dma_init =
 80051f2:	e9cd 400a 	strd	r4, r0, [sp, #40]	@ 0x28
 80051f6:	910c      	str	r1, [sp, #48]	@ 0x30
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80051f8:	2100      	movs	r1, #0
    };
 80051fa:	9202      	str	r2, [sp, #8]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 80051fc:	aa02      	add	r2, sp, #8
    __HAL_RCC_DMA1_CLK_ENABLE();
 80051fe:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 8005202:	4c14      	ldr	r4, [pc, #80]	@ (8005254 <recorder::Dac::InitDMA()+0x9c>)
    __HAL_RCC_DMA1_CLK_ENABLE();
 8005204:	f040 0001 	orr.w	r0, r0, #1
 8005208:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800520c:	4620      	mov	r0, r4
    __HAL_RCC_DMA1_CLK_ENABLE();
 800520e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	9b01      	ldr	r3, [sp, #4]
    LL_DMA_Init(DMA1, LL_DMA_STREAM_0, &dma_init);
 800521a:	f002 fd55 	bl	8007cc8 <LL_DMA_Init>
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800521e:	6923      	ldr	r3, [r4, #16]
    irq::RegisterHandler(DMA1_Stream0_IRQn, DMAHandler);
 8005220:	200b      	movs	r0, #11
 8005222:	490d      	ldr	r1, [pc, #52]	@ (8005258 <recorder::Dac::InitDMA()+0xa0>)
 8005224:	f023 0310 	bic.w	r3, r3, #16
 8005228:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	f023 0308 	bic.w	r3, r3, #8
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	f000 faf9 	bl	8005828 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(DMA1_Stream0_IRQn, kProfileIRQPriority);
 8005236:	2100      	movs	r1, #0
 8005238:	200b      	movs	r0, #11
 800523a:	f000 fb31 	bl	80058a0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(DMA1_Stream0_IRQn);
 800523e:	200b      	movs	r0, #11
 8005240:	f000 fb14 	bl	800586c <recorder::irq::Enable(IRQn_Type)>
}
 8005244:	b012      	add	sp, #72	@ 0x48
 8005246:	bd10      	pop	{r4, pc}
 8005248:	3800fc30 	.word	0x3800fc30
 800524c:	58024400 	.word	0x58024400
 8005250:	40007414 	.word	0x40007414
 8005254:	40020000 	.word	0x40020000
 8005258:	080050cd 	.word	0x080050cd

0800525c <recorder::Dac::Init()>:
{
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        dma_buffer_[i] = 0;
 8005260:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <recorder::Dac::Init()+0xa0>)
    started_ = false;
 8005262:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005264:	4e26      	ldr	r6, [pc, #152]	@ (8005300 <recorder::Dac::Init()+0xa4>)
{
 8005266:	b088      	sub	sp, #32
    write_index_ = (kAudioOSFactor * 2) % kDMABufferSize;
 8005268:	6004      	str	r4, [r0, #0]
{
 800526a:	4680      	mov	r8, r0
        dma_buffer_[i] = 0;
 800526c:	601c      	str	r4, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526e:	f8d6 20e0 	ldr.w	r2, [r6, #224]	@ 0xe0
    started_ = false;
 8005272:	7104      	strb	r4, [r0, #4]
    LL_GPIO_StructInit(&gpio_init);
 8005274:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005276:	f042 0201 	orr.w	r2, r2, #1
        dma_buffer_[i] = 0;
 800527a:	615c      	str	r4, [r3, #20]
    LL_DAC_InitTypeDef dac_init =
 800527c:	4d21      	ldr	r5, [pc, #132]	@ (8005304 <recorder::Dac::Init()+0xa8>)
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 800527e:	4f22      	ldr	r7, [pc, #136]	@ (8005308 <recorder::Dac::Init()+0xac>)
        dma_buffer_[i] = 0;
 8005280:	e9c3 4401 	strd	r4, r4, [r3, #4]
 8005284:	e9c3 4403 	strd	r4, r4, [r3, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005288:	f8c6 20e0 	str.w	r2, [r6, #224]	@ 0xe0
 800528c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	9b01      	ldr	r3, [sp, #4]
    LL_GPIO_StructInit(&gpio_init);
 8005298:	f002 fe2c 	bl	8007ef4 <LL_GPIO_StructInit>
    gpio_init.Pin = LL_GPIO_PIN_5;
 800529c:	2220      	movs	r2, #32
 800529e:	2303      	movs	r3, #3
    LL_GPIO_Init(GPIOA, &gpio_init);
 80052a0:	a902      	add	r1, sp, #8
 80052a2:	481a      	ldr	r0, [pc, #104]	@ (800530c <recorder::Dac::Init()+0xb0>)
    gpio_init.Pull = LL_GPIO_PULL_NO;
 80052a4:	9406      	str	r4, [sp, #24]
    LL_DAC_InitTypeDef dac_init =
 80052a6:	ac02      	add	r4, sp, #8
    gpio_init.Pin = LL_GPIO_PIN_5;
 80052a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    LL_GPIO_Init(GPIOA, &gpio_init);
 80052ac:	f002 fd6e 	bl	8007d8c <LL_GPIO_Init>
    LL_DAC_InitTypeDef dac_init =
 80052b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b4:	e895 0003 	ldmia.w	r5, {r0, r1}
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 80052b8:	aa02      	add	r2, sp, #8
    LL_DAC_InitTypeDef dac_init =
 80052ba:	e884 0003 	stmia.w	r4, {r0, r1}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80052be:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 80052c2:	4638      	mov	r0, r7
 80052c4:	4912      	ldr	r1, [pc, #72]	@ (8005310 <recorder::Dac::Init()+0xb4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80052c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052ca:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 80052ce:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80052d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	9b00      	ldr	r3, [sp, #0]
    LL_DAC_Init(DAC1, LL_DAC_CHANNEL_2, &dac_init);
 80052da:	f002 fcbd 	bl	8007c58 <LL_DAC_Init>
  SET_BIT(DACx->CR,
 80052de:	683b      	ldr	r3, [r7, #0]
    InitDMA();
 80052e0:	4640      	mov	r0, r8
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	603b      	str	r3, [r7, #0]
  SET_BIT(DACx->CR,
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	b008      	add	sp, #32
 80052f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    InitDMA();
 80052f6:	f7ff bf5f 	b.w	80051b8 <recorder::Dac::InitDMA()>
 80052fa:	bf00      	nop
 80052fc:	3800fc30 	.word	0x3800fc30
 8005300:	58024400 	.word	0x58024400
 8005304:	0800a41c 	.word	0x0800a41c
 8005308:	40007400 	.word	0x40007400
 800530c:	58020000 	.word	0x58020000
 8005310:	35400072 	.word	0x35400072

08005314 <recorder::Flash::Init()>:
namespace recorder
{

void Flash::Init(void)
{
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005314:	4bb1      	ldr	r3, [pc, #708]	@ (80055dc <recorder::Flash::Init()+0x2c8>)
 8005316:	2240      	movs	r2, #64	@ 0x40
 8005318:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800531c:	f041 0120 	orr.w	r1, r1, #32
{
 8005320:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005322:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
{
 8005326:	b0a5      	sub	sp, #148	@ 0x94
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005328:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
{
 800532c:	4605      	mov	r5, r0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800532e:	f001 0120 	and.w	r1, r1, #32
 8005332:	9101      	str	r1, [sp, #4]
 8005334:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005336:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800533a:	4311      	orrs	r1, r2
 800533c:	f8c3 10e0 	str.w	r1, [r3, #224]	@ 0xe0
 8005340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005344:	4013      	ands	r3, r2
 8005346:	9302      	str	r3, [sp, #8]
 8005348:	9b02      	ldr	r3, [sp, #8]
 800534a:	fa92 f2a2 	rbit	r2, r2
    };
}

void Flash::InitPin(GPIO_TypeDef* base, uint32_t pin, uint32_t alternate)
{
    if (POSITION_VAL(pin) < 8)
 800534e:	fab2 f282 	clz	r2, r2
 8005352:	2a07      	cmp	r2, #7
 8005354:	f300 8158 	bgt.w	8005608 <recorder::Flash::Init()+0x2f4>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005358:	4aa1      	ldr	r2, [pc, #644]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 800535a:	6a13      	ldr	r3, [r2, #32]
 800535c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8005360:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8005364:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005366:	4b9e      	ldr	r3, [pc, #632]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 8005368:	2280      	movs	r2, #128	@ 0x80
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005370:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8005374:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800537c:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8005380:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005382:	68d9      	ldr	r1, [r3, #12]
 8005384:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005388:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005390:	6059      	str	r1, [r3, #4]
 8005392:	fa92 f2a2 	rbit	r2, r2
 8005396:	fab2 f282 	clz	r2, r2
 800539a:	2a07      	cmp	r2, #7
 800539c:	f300 8138 	bgt.w	8005610 <recorder::Flash::Init()+0x2fc>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80053a6:	f042 4210 	orr.w	r2, r2, #2415919104	@ 0x90000000
 80053aa:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80053ac:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 80053ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80053b8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80053bc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80053c4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80053c8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80053ca:	68d9      	ldr	r1, [r3, #12]
 80053cc:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80053d0:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80053d8:	6059      	str	r1, [r3, #4]
 80053da:	fa92 f2a2 	rbit	r2, r2
 80053de:	fab2 f282 	clz	r2, r2
 80053e2:	2a07      	cmp	r2, #7
 80053e4:	f300 8117 	bgt.w	8005616 <recorder::Flash::Init()+0x302>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80053ec:	4b7c      	ldr	r3, [pc, #496]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 80053ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80053f8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80053fc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80053fe:	6899      	ldr	r1, [r3, #8]
 8005400:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005404:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005408:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800540a:	68d9      	ldr	r1, [r3, #12]
 800540c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005410:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005418:	6059      	str	r1, [r3, #4]
 800541a:	fa92 f2a2 	rbit	r2, r2
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	2a07      	cmp	r2, #7
 8005424:	f300 80fe 	bgt.w	8005624 <recorder::Flash::Init()+0x310>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800542c:	4b6c      	ldr	r3, [pc, #432]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 800542e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005438:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800543c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800543e:	6899      	ldr	r1, [r3, #8]
 8005440:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005444:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8005448:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800544a:	68d9      	ldr	r1, [r3, #12]
 800544c:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005450:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8005458:	6059      	str	r1, [r3, #4]
 800545a:	fa92 f2a2 	rbit	r2, r2
 800545e:	fab2 f282 	clz	r2, r2
 8005462:	2a07      	cmp	r2, #7
 8005464:	f300 80e5 	bgt.w	8005632 <recorder::Flash::Init()+0x31e>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800546c:	4b5c      	ldr	r3, [pc, #368]	@ (80055e0 <recorder::Flash::Init()+0x2cc>)
 800546e:	2240      	movs	r2, #64	@ 0x40
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005476:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 800547a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800547c:	6899      	ldr	r1, [r3, #8]
 800547e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005482:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8005486:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800548e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005496:	6059      	str	r1, [r3, #4]
 8005498:	fa92 f3a2 	rbit	r3, r2
 800549c:	fab3 f383 	clz	r3, r3
 80054a0:	2b07      	cmp	r3, #7
 80054a2:	f300 80ad 	bgt.w	8005600 <recorder::Flash::Init()+0x2ec>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80054a6:	4a4f      	ldr	r2, [pc, #316]	@ (80055e4 <recorder::Flash::Init()+0x2d0>)
 80054a8:	6a13      	ldr	r3, [r2, #32]
 80054aa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80054ae:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 80054b2:	6213      	str	r3, [r2, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80054b4:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <recorder::Flash::Init()+0x2d0>)
  */
__STATIC_INLINE void LL_MDMA_DisableChannel(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 80054b6:	f04f 46a4 	mov.w	r6, #1375731712	@ 0x52000000
    LL_GPIO_SetPinOutputType(base, pin, LL_GPIO_OUTPUT_PUSHPULL);
}

void Flash::InitDMA(void)
{
    __HAL_RCC_MDMA_CLK_ENABLE();
 80054ba:	4c48      	ldr	r4, [pc, #288]	@ (80055dc <recorder::Flash::Init()+0x2c8>)

    LL_MDMA_DisableChannel(MDMA, LL_MDMA_CHANNEL_0);

    LL_MDMA_InitTypeDef mdma_init =
 80054bc:	a804      	add	r0, sp, #16
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4949      	ldr	r1, [pc, #292]	@ (80055e8 <recorder::Flash::Init()+0x2d4>)
 80054c2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80054c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80054d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054d6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80054de:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_MDMA_CLK_ENABLE();
 80054ea:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80054f6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	64f3      	str	r3, [r6, #76]	@ 0x4c
    LL_MDMA_InitTypeDef mdma_init =
 800550a:	f004 f848 	bl	800959e <memcpy>
        .SrcBus                        = LL_MDMA_SRC_BUS_SYSTEM_AXI,
        .MaskAddress                   = 0,
        .MaskData                      = 0,
    };

    LL_MDMA_Init(MDMA, LL_MDMA_CHANNEL_0, &mdma_init);
 800550e:	aa04      	add	r2, sp, #16
 8005510:	2100      	movs	r1, #0
 8005512:	4630      	mov	r0, r6
 8005514:	f002 fcfa 	bl	8007f0c <LL_MDMA_Init>
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005518:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800551c:	4a33      	ldr	r2, [pc, #204]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800551e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005522:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8005526:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800552a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	9b04      	ldr	r3, [sp, #16]
    while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005532:	6893      	ldr	r3, [r2, #8]
 8005534:	f013 0320 	ands.w	r3, r3, #32
 8005538:	d1fb      	bne.n	8005532 <recorder::Flash::Init()+0x21e>
    QUADSPI->CR =
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005540:	fa93 f3a3 	rbit	r3, r3
        ((POSITION_VAL(kSize) - 1) << QUADSPI_DCR_FSIZE_Pos) |
 8005544:	fab3 f383 	clz	r3, r3
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005548:	4828      	ldr	r0, [pc, #160]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
    QUADSPI->DCR =
 8005552:	6053      	str	r3, [r2, #4]
    QUADSPI->CR |= QUADSPI_CR_EN;
 8005554:	6813      	ldr	r3, [r2, #0]
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	6883      	ldr	r3, [r0, #8]
 800555e:	069f      	lsls	r7, r3, #26
 8005560:	d4fc      	bmi.n	800555c <recorder::Flash::Init()+0x248>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005562:	f240 13ab 	movw	r3, #427	@ 0x1ab
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005566:	4921      	ldr	r1, [pc, #132]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005568:	6143      	str	r3, [r0, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800556a:	688b      	ldr	r3, [r1, #8]
 800556c:	079e      	lsls	r6, r3, #30
 800556e:	d5fc      	bpl.n	800556a <recorder::Flash::Init()+0x256>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005570:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005572:	4a1e      	ldr	r2, [pc, #120]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005574:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005576:	6893      	ldr	r3, [r2, #8]
 8005578:	069c      	lsls	r4, r3, #26
 800557a:	d4fc      	bmi.n	8005576 <recorder::Flash::Init()+0x262>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800557c:	f44f 73b3 	mov.w	r3, #358	@ 0x166
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005580:	491a      	ldr	r1, [pc, #104]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005582:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005584:	688b      	ldr	r3, [r1, #8]
 8005586:	0798      	lsls	r0, r3, #30
 8005588:	d5fc      	bpl.n	8005584 <recorder::Flash::Init()+0x270>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800558a:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800558c:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800558e:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005590:	6893      	ldr	r3, [r2, #8]
 8005592:	0699      	lsls	r1, r3, #26
 8005594:	d4fc      	bmi.n	8005590 <recorder::Flash::Init()+0x27c>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005596:	f240 1399 	movw	r3, #409	@ 0x199
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800559a:	4914      	ldr	r1, [pc, #80]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800559c:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800559e:	688b      	ldr	r3, [r1, #8]
 80055a0:	079a      	lsls	r2, r3, #30
 80055a2:	d5fc      	bpl.n	800559e <recorder::Flash::Init()+0x28a>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055a4:	2302      	movs	r3, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055a6:	4a11      	ldr	r2, [pc, #68]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055a8:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80055aa:	6893      	ldr	r3, [r2, #8]
 80055ac:	f013 0320 	ands.w	r3, r3, #32
 80055b0:	d1fb      	bne.n	80055aa <recorder::Flash::Init()+0x296>
        QUADSPI->CCR =
 80055b2:	480f      	ldr	r0, [pc, #60]	@ (80055f0 <recorder::Flash::Init()+0x2dc>)
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80055b4:	490d      	ldr	r1, [pc, #52]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        QUADSPI->DLR = 0;
 80055b6:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 80055b8:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 80055ba:	688b      	ldr	r3, [r1, #8]
 80055bc:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 80055c0:	d0fb      	beq.n	80055ba <recorder::Flash::Init()+0x2a6>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80055c2:	f891 1020 	ldrb.w	r1, [r1, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80055c6:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <recorder::Flash::Init()+0x2d8>)
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 80055c8:	b2c9      	uxtb	r1, r1
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80055ca:	6893      	ldr	r3, [r2, #8]
 80055cc:	079b      	lsls	r3, r3, #30
 80055ce:	d5fc      	bpl.n	80055ca <recorder::Flash::Init()+0x2b6>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80055d0:	2302      	movs	r3, #2
    if (ReadStatus() != STATUS_QUAD_ENABLE)
 80055d2:	2940      	cmp	r1, #64	@ 0x40
 80055d4:	60d3      	str	r3, [r2, #12]
 80055d6:	d133      	bne.n	8005640 <recorder::Flash::Init()+0x32c>
 80055d8:	e00c      	b.n	80055f4 <recorder::Flash::Init()+0x2e0>
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
 80055e0:	58021400 	.word	0x58021400
 80055e4:	58021800 	.word	0x58021800
 80055e8:	0800a434 	.word	0x0800a434
 80055ec:	52005000 	.word	0x52005000
 80055f0:	05000105 	.word	0x05000105
    state_ =
 80055f4:	2300      	movs	r3, #0
 80055f6:	e9c5 3300 	strd	r3, r3, [r5]
 80055fa:	60ab      	str	r3, [r5, #8]
}
 80055fc:	b025      	add	sp, #148	@ 0x94
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005600:	4b2d      	ldr	r3, [pc, #180]	@ (80056b8 <recorder::Flash::Init()+0x3a4>)
 8005602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8005606:	e755      	b.n	80054b4 <recorder::Flash::Init()+0x1a0>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005608:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <recorder::Flash::Init()+0x3a8>)
 800560a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800560c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800560e:	e6aa      	b.n	8005366 <recorder::Flash::Init()+0x52>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005612:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005614:	e6ca      	b.n	80053ac <recorder::Flash::Init()+0x98>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005618:	f022 020f 	bic.w	r2, r2, #15
 800561c:	f042 020a 	orr.w	r2, r2, #10
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005622:	e6e3      	b.n	80053ec <recorder::Flash::Init()+0xd8>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005626:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800562a:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800562e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005630:	e6fc      	b.n	800542c <recorder::Flash::Init()+0x118>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005634:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8005638:	f442 6210 	orr.w	r2, r2, #2304	@ 0x900
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800563e:	e715      	b.n	800546c <recorder::Flash::Init()+0x158>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005640:	4a1f      	ldr	r2, [pc, #124]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
 8005642:	6893      	ldr	r3, [r2, #8]
 8005644:	069f      	lsls	r7, r3, #26
 8005646:	d4fc      	bmi.n	8005642 <recorder::Flash::Init()+0x32e>
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 8005648:	f44f 7383 	mov.w	r3, #262	@ 0x106
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800564c:	491c      	ldr	r1, [pc, #112]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR = QSPI_INSTRUCTION_1_LINE | kIndirectWrite | cmd;
 800564e:	6153      	str	r3, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005650:	688b      	ldr	r3, [r1, #8]
 8005652:	079e      	lsls	r6, r3, #30
 8005654:	d5fc      	bpl.n	8005650 <recorder::Flash::Init()+0x33c>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005656:	2302      	movs	r3, #2

    void WriteStatus(uint8_t status)
    {
        WriteEnable();

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005658:	4a19      	ldr	r2, [pc, #100]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 800565a:	60cb      	str	r3, [r1, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 800565c:	6893      	ldr	r3, [r2, #8]
 800565e:	f013 0320 	ands.w	r3, r3, #32
 8005662:	d1fb      	bne.n	800565c <recorder::Flash::Init()+0x348>
        QUADSPI->DLR = 0;
        QUADSPI->CCR =
 8005664:	4817      	ldr	r0, [pc, #92]	@ (80056c4 <recorder::Flash::Init()+0x3b0>)
            kIndirectWrite |
            QSPI_DATA_1_LINE |
            QSPI_INSTRUCTION_1_LINE |
            CMD_WRITE_STATUS_REG;
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 8005666:	4916      	ldr	r1, [pc, #88]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->DLR = 0;
 8005668:	6113      	str	r3, [r2, #16]
        QUADSPI->CCR =
 800566a:	6150      	str	r0, [r2, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FTF));
 800566c:	688b      	ldr	r3, [r1, #8]
 800566e:	075c      	lsls	r4, r3, #29
 8005670:	d5fc      	bpl.n	800566c <recorder::Flash::Init()+0x358>
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8005672:	2340      	movs	r3, #64	@ 0x40
        DataWrite8(status);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005674:	4a12      	ldr	r2, [pc, #72]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
        *reinterpret_cast<volatile uint8_t*>(&(QUADSPI->DR)) = byte;
 8005676:	f881 3020 	strb.w	r3, [r1, #32]
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 800567a:	6893      	ldr	r3, [r2, #8]
 800567c:	0798      	lsls	r0, r3, #30
 800567e:	d5fc      	bpl.n	800567a <recorder::Flash::Init()+0x366>
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005680:	2602      	movs	r6, #2
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005682:	4c0f      	ldr	r4, [pc, #60]	@ (80056c0 <recorder::Flash::Init()+0x3ac>)
        QUADSPI->CCR =
 8005684:	4f10      	ldr	r7, [pc, #64]	@ (80056c8 <recorder::Flash::Init()+0x3b4>)
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005686:	60d6      	str	r6, [r2, #12]
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	f013 0320 	ands.w	r3, r3, #32
 800568e:	d1fb      	bne.n	8005688 <recorder::Flash::Init()+0x374>
        QUADSPI->DLR = 0;
 8005690:	6123      	str	r3, [r4, #16]
        QUADSPI->CCR =
 8005692:	6167      	str	r7, [r4, #20]
        while (!(QUADSPI->SR & QUADSPI_SR_FLEVEL));
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	f413 5f7c 	tst.w	r3, #16128	@ 0x3f00
 800569a:	d0fb      	beq.n	8005694 <recorder::Flash::Init()+0x380>
        return *reinterpret_cast<volatile uint8_t*>(&QUADSPI->DR);
 800569c:	f894 2020 	ldrb.w	r2, [r4, #32]
 80056a0:	b2d2      	uxtb	r2, r2
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	0799      	lsls	r1, r3, #30
 80056a6:	d5fc      	bpl.n	80056a2 <recorder::Flash::Init()+0x38e>
        while (write_in_progress())
 80056a8:	07d3      	lsls	r3, r2, #31
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056aa:	60e6      	str	r6, [r4, #12]
        while (write_in_progress())
 80056ac:	d5a2      	bpl.n	80055f4 <recorder::Flash::Init()+0x2e0>
            system::Delay_ms(1);
 80056ae:	2001      	movs	r0, #1
 80056b0:	f000 fd0c 	bl	80060cc <recorder::system::Delay_ms(unsigned long)>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80056b4:	e7e8      	b.n	8005688 <recorder::Flash::Init()+0x374>
 80056b6:	bf00      	nop
 80056b8:	58021800 	.word	0x58021800
 80056bc:	58021400 	.word	0x58021400
 80056c0:	52005000 	.word	0x52005000
 80056c4:	01000101 	.word	0x01000101
 80056c8:	05000105 	.word	0x05000105

080056cc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)>:
void Flash::ReadData(uint8_t* buffer, uint32_t address, uint32_t count)
{
    ScopedProfilingPin<PROFILE_FLASH_READ> profile1;
    ScopedProfilingPin<PROFILE_FLASH_ACCESS> profile2;

    while (count)
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d07c      	beq.n	80057ca <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xfe>
 80056d0:	f04f 40a4 	mov.w	r0, #1375731712	@ 0x52000000
        LL_MDMA_EnableChannel(MDMA, LL_MDMA_CHANNEL_0);

        while (QUADSPI->SR & QUADSPI_SR_BUSY);
        constexpr uint32_t dummy_cycles = 8;
        QUADSPI->DLR = block_length - 1;
        QUADSPI->CCR =
 80056d4:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80057d0 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x104>
{
 80056d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056dc:	460d      	mov	r5, r1
 80056de:	4616      	mov	r6, r2
 80056e0:	4619      	mov	r1, r3
  */
__STATIC_INLINE void LL_MDMA_SetBlkDataLength(MDMA_TypeDef *MDMAx, uint32_t Channel, uint32_t BlkDataLength)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 80056e2:	f8df e0f0 	ldr.w	lr, [pc, #240]	@ 80057d4 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x108>
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 80056e6:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x100>)
  */
__STATIC_INLINE void LL_MDMA_ClearFlag_BT(MDMA_TypeDef *MDMAx, uint32_t Channel)
{
  register uint32_t mdma_base_addr = (uint32_t)MDMAx;

  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 80056e8:	2408      	movs	r4, #8
        QUADSPI->AR = address;

        while (!LL_MDMA_IsActiveFlag_BT(MDMA, LL_MDMA_CHANNEL_0));
        LL_MDMA_ClearFlag_BT(MDMA, LL_MDMA_CHANNEL_0);
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 80056ea:	2702      	movs	r7, #2
  CLEAR_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 80056ec:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
        uint32_t bus = (dest_addr & 0xDF000000) ?
 80056ee:	f015 4f5f 	tst.w	r5, #3741319168	@ 0xdf000000
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	bf0c      	ite	eq
 80056f8:	f04f 0801 	moveq.w	r8, #1
 80056fc:	f04f 0800 	movne.w	r8, #0
      if (__b < __a)
 8005700:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005704:	64c2      	str	r2, [r0, #76]	@ 0x4c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8005706:	65c5      	str	r5, [r0, #92]	@ 0x5c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_DBUS, DestBus);
 8005708:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 800570a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800570e:	ea42 4248 	orr.w	r2, r2, r8, lsl #17
 8005712:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 8005714:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005716:	d839      	bhi.n	800578c <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xc0>
 8005718:	2980      	cmp	r1, #128	@ 0x80
 800571a:	4688      	mov	r8, r1
 800571c:	f022 72fe 	bic.w	r2, r2, #33292288	@ 0x1fc0000
        QUADSPI->DLR = block_length - 1;
 8005720:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8005724:	bf28      	it	cs
 8005726:	f04f 0880 	movcs.w	r8, #128	@ 0x80
        if (block_length < 128)
 800572a:	297f      	cmp	r1, #127	@ 0x7f
        LL_MDMA_SetBufferTransferLength(MDMA, LL_MDMA_CHANNEL_0,
 800572c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005730:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
 8005734:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8005736:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8005738:	ea02 020e 	and.w	r2, r2, lr
 800573c:	ea42 0201 	orr.w	r2, r2, r1
 8005740:	6542      	str	r2, [r0, #84]	@ 0x54
        if (block_length < 128)
 8005742:	d83f      	bhi.n	80057c4 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xf8>
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 8005744:	6d02      	ldr	r2, [r0, #80]	@ 0x50
}
 8005746:	4688      	mov	r8, r1
 8005748:	2100      	movs	r1, #0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 800574a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800574e:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 8005750:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005752:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 8005756:	6502      	str	r2, [r0, #80]	@ 0x50
  SET_BIT(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_EN);
 8005758:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	64c2      	str	r2, [r0, #76]	@ 0x4c
        while (QUADSPI->SR & QUADSPI_SR_BUSY);
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	0692      	lsls	r2, r2, #26
 8005764:	d4fc      	bmi.n	8005760 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x94>
        QUADSPI->DLR = block_length - 1;
 8005766:	f8c3 9010 	str.w	r9, [r3, #16]
        QUADSPI->CCR =
 800576a:	f8c3 c014 	str.w	ip, [r3, #20]
        QUADSPI->AR = address;
 800576e:	619e      	str	r6, [r3, #24]
  return ((READ_BIT(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CISR, MDMA_CISR_BTIF) == (MDMA_CISR_BTIF)) ? 1UL : 0UL);
 8005770:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005772:	0712      	lsls	r2, r2, #28
 8005774:	d5fc      	bpl.n	8005770 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xa4>
  WRITE_REG(((MDMA_Channel_TypeDef*)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CIFCR ,MDMA_CIFCR_CBTIF);
 8005776:	6444      	str	r4, [r0, #68]	@ 0x44
        while (!(QUADSPI->SR & QUADSPI_SR_TCF));
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	0792      	lsls	r2, r2, #30
 800577c:	d5fc      	bpl.n	8005778 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xac>

        count -= block_length;
        buffer += block_length;
 800577e:	4445      	add	r5, r8
        address += block_length;
 8005780:	4446      	add	r6, r8
        QUADSPI->FCR = QUADSPI_FCR_CTCF;
 8005782:	60df      	str	r7, [r3, #12]
    while (count)
 8005784:	2900      	cmp	r1, #0
 8005786:	d1b1      	bne.n	80056ec <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x20>
    }
}
 8005788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 800578c:	f042 72fe 	orr.w	r2, r2, #33292288	@ 0x1fc0000
 8005790:	f5a1 3180 	sub.w	r1, r1, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 8005794:	f64f 79ff 	movw	r9, #65535	@ 0xffff
	return __b;
 8005798:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_TLEN,
 800579c:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR, MDMA_CBNDTR_BNDT, (BlkDataLength & MDMA_CBNDTR_BNDT_Msk));
 800579e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80057a0:	ea02 020e 	and.w	r2, r2, lr
 80057a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80057a8:	6542      	str	r2, [r0, #84]	@ 0x54
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_SBURST, Sburst);
 80057aa:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80057ac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80057b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057b4:	6502      	str	r2, [r0, #80]	@ 0x50
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR, MDMA_CTCR_DBURST, Dburst);
 80057b6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80057b8:	f422 3260 	bic.w	r2, r2, #229376	@ 0x38000
 80057bc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80057c0:	6502      	str	r2, [r0, #80]	@ 0x50
}
 80057c2:	e7c9      	b.n	8005758 <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0x8c>
 80057c4:	4688      	mov	r8, r1
 80057c6:	2100      	movs	r1, #0
 80057c8:	e7ef      	b.n	80057aa <recorder::Flash::ReadData(unsigned char*, unsigned long, unsigned long)+0xde>
 80057ca:	4770      	bx	lr
 80057cc:	52005000 	.word	0x52005000
 80057d0:	0720256b 	.word	0x0720256b
 80057d4:	fffe0000 	.word	0xfffe0000

080057d8 <recorder::irq::Init()>:
static Vector RAMVectorTable[kNumVectors]
    __attribute__ ((aligned(kAlignment)));

void Init(void)
{
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 80057d8:	4b11      	ldr	r3, [pc, #68]	@ (8005820 <recorder::irq::Init()+0x48>)
 80057da:	689a      	ldr	r2, [r3, #8]
{
 80057dc:	b410      	push	{r4}
 80057de:	1d13      	adds	r3, r2, #4
 80057e0:	4c10      	ldr	r4, [pc, #64]	@ (8005824 <recorder::irq::Init()+0x4c>)
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	d010      	beq.n	8005808 <recorder::irq::Init()+0x30>
    auto src = reinterpret_cast<const irq::Vector*>(SCB->VTOR);
 80057e6:	4623      	mov	r3, r4
 80057e8:	f504 7c26 	add.w	ip, r4, #664	@ 0x298

    for (uint32_t i = 0; i < kNumVectors; i++)
    {
        RAMVectorTable[i] = src[i];
 80057ec:	1b12      	subs	r2, r2, r4
 80057ee:	1899      	adds	r1, r3, r2
 80057f0:	5898      	ldr	r0, [r3, r2]
    for (uint32_t i = 0; i < kNumVectors; i++)
 80057f2:	3308      	adds	r3, #8
        RAMVectorTable[i] = src[i];
 80057f4:	6849      	ldr	r1, [r1, #4]
 80057f6:	4563      	cmp	r3, ip
 80057f8:	e943 0102 	strd	r0, r1, [r3, #-8]
    for (uint32_t i = 0; i < kNumVectors; i++)
 80057fc:	d1f7      	bne.n	80057ee <recorder::irq::Init()+0x16>
    }

    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 80057fe:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <recorder::irq::Init()+0x48>)
 8005800:	609c      	str	r4, [r3, #8]
}
 8005802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	f502 7126 	add.w	r1, r2, #664	@ 0x298
        RAMVectorTable[i] = src[i];
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < kNumVectors; i++)
 8005812:	428a      	cmp	r2, r1
 8005814:	d1fa      	bne.n	800580c <recorder::irq::Init()+0x34>
    SCB->VTOR = reinterpret_cast<uint32_t>(RAMVectorTable);
 8005816:	4b02      	ldr	r3, [pc, #8]	@ (8005820 <recorder::irq::Init()+0x48>)
 8005818:	609c      	str	r4, [r3, #8]
}
 800581a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000ed00 	.word	0xe000ed00
 8005824:	20011000 	.word	0x20011000

08005828 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>:

void RegisterHandler(IRQn_Type irqn, Vector handler)
{
    assert(irqn >= NonMaskableInt_IRQn);
 8005828:	f110 0f0e 	cmn.w	r0, #14
{
 800582c:	b508      	push	{r3, lr}
    assert(irqn >= NonMaskableInt_IRQn);
 800582e:	db06      	blt.n	800583e <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x16>

    uint32_t exception_num = irqn + 16;
 8005830:	3010      	adds	r0, #16
    assert(exception_num < kNumVectors);
 8005832:	28a5      	cmp	r0, #165	@ 0xa5
 8005834:	dc09      	bgt.n	800584a <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x22>

    RAMVectorTable[exception_num] = handler;
 8005836:	4b08      	ldr	r3, [pc, #32]	@ (8005858 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x30>)
 8005838:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 800583c:	bd08      	pop	{r3, pc}
    assert(irqn >= NonMaskableInt_IRQn);
 800583e:	4b07      	ldr	r3, [pc, #28]	@ (800585c <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x34>)
 8005840:	211c      	movs	r1, #28
 8005842:	4a07      	ldr	r2, [pc, #28]	@ (8005860 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8005844:	4807      	ldr	r0, [pc, #28]	@ (8005864 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8005846:	f003 fc4b 	bl	80090e0 <__assert_func>
    assert(exception_num < kNumVectors);
 800584a:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x40>)
 800584c:	211f      	movs	r1, #31
 800584e:	4a04      	ldr	r2, [pc, #16]	@ (8005860 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x38>)
 8005850:	4804      	ldr	r0, [pc, #16]	@ (8005864 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())+0x3c>)
 8005852:	f003 fc45 	bl	80090e0 <__assert_func>
 8005856:	bf00      	nop
 8005858:	20011000 	.word	0x20011000
 800585c:	0800a608 	.word	0x0800a608
 8005860:	0800a624 	.word	0x0800a624
 8005864:	0800a65c 	.word	0x0800a65c
 8005868:	0800a66c 	.word	0x0800a66c

0800586c <recorder::irq::Enable(IRQn_Type)>:

void Enable(IRQn_Type irqn)
{
    assert(irqn >= 0);
 800586c:	2800      	cmp	r0, #0
{
 800586e:	b508      	push	{r3, lr}
    assert(irqn >= 0);
 8005870:	db08      	blt.n	8005884 <recorder::irq::Enable(IRQn_Type)+0x18>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005872:	f000 011f 	and.w	r1, r0, #31
 8005876:	2301      	movs	r3, #1
 8005878:	0940      	lsrs	r0, r0, #5
 800587a:	4a05      	ldr	r2, [pc, #20]	@ (8005890 <recorder::irq::Enable(IRQn_Type)+0x24>)
 800587c:	408b      	lsls	r3, r1
 800587e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC_EnableIRQ(irqn);
}
 8005882:	bd08      	pop	{r3, pc}
    assert(irqn >= 0);
 8005884:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <recorder::irq::Enable(IRQn_Type)+0x28>)
 8005886:	2126      	movs	r1, #38	@ 0x26
 8005888:	4a03      	ldr	r2, [pc, #12]	@ (8005898 <recorder::irq::Enable(IRQn_Type)+0x2c>)
 800588a:	4804      	ldr	r0, [pc, #16]	@ (800589c <recorder::irq::Enable(IRQn_Type)+0x30>)
 800588c:	f003 fc28 	bl	80090e0 <__assert_func>
 8005890:	e000e100 	.word	0xe000e100
 8005894:	0800a688 	.word	0x0800a688
 8005898:	0800a694 	.word	0x0800a694
 800589c:	0800a65c 	.word	0x0800a65c

080058a0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x4c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a8:	f1c3 0c07 	rsb	ip, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ac:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058ae:	f1bc 0f04 	cmp.w	ip, #4
 80058b2:	bf28      	it	cs
 80058b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058b8:	2a06      	cmp	r2, #6
 80058ba:	bf88      	it	hi
 80058bc:	1eda      	subhi	r2, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c2:	bf98      	it	ls
 80058c4:	2200      	movls	r2, #0
  if ((int32_t)(IRQn) >= 0)
 80058c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c8:	fa03 f30c 	lsl.w	r3, r3, ip
 80058cc:	ea21 0303 	bic.w	r3, r1, r3
 80058d0:	fa03 f302 	lsl.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80058d8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80058da:	db02      	blt.n	80058e2 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058dc:	4a04      	ldr	r2, [pc, #16]	@ (80058f0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x50>)
 80058de:	5413      	strb	r3, [r2, r0]
 80058e0:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	f000 000f 	and.w	r0, r0, #15
 80058e6:	4a03      	ldr	r2, [pc, #12]	@ (80058f4 <recorder::irq::SetPriority(IRQn_Type, unsigned long)+0x54>)
 80058e8:	5413      	strb	r3, [r2, r0]
void SetPriority(IRQn_Type irqn, uint32_t priority)
{
    uint32_t group = NVIC_GetPriorityGrouping();
    priority = NVIC_EncodePriority(group, priority, 0);
    NVIC_SetPriority(irqn, priority);
}
 80058ea:	4770      	bx	lr
 80058ec:	e000ed00 	.word	0xe000ed00
 80058f0:	e000e400 	.word	0xe000e400
 80058f4:	e000ed14 	.word	0xe000ed14

080058f8 <recorder::Serial::Init(unsigned long)>:

void Serial::Init(uint32_t baud)
{
    instance_ = this;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005a34 <recorder::Serial::Init(unsigned long)+0x13c>)
    instance_ = this;
 80058fa:	4a4f      	ldr	r2, [pc, #316]	@ (8005a38 <recorder::Serial::Init(unsigned long)+0x140>)
{
 80058fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    instance_ = this;
 8005900:	6010      	str	r0, [r2, #0]
{
 8005902:	b08b      	sub	sp, #44	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005904:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
{
 8005908:	460d      	mov	r5, r1

    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;

    while (pins != 0)
    {
        uint32_t pin = 1 << POSITION_VAL(pins);
 800590a:	2701      	movs	r7, #1
    uint32_t pins = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 800590c:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800590e:	f042 0202 	orr.w	r2, r2, #2
 8005912:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005916:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800591a:	f002 0202 	and.w	r2, r2, #2
 800591e:	9200      	str	r2, [sp, #0]
 8005920:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_USART1_CLK_ENABLE();
 8005922:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005926:	f042 0210 	orr.w	r2, r2, #16
 800592a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800592e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800593a:	4b40      	ldr	r3, [pc, #256]	@ (8005a3c <recorder::Serial::Init(unsigned long)+0x144>)
 800593c:	e01f      	b.n	800597e <recorder::Serial::Init(unsigned long)+0x86>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
 8005944:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8005948:	ea22 0204 	bic.w	r2, r2, r4
 800594c:	ea42 0208 	orr.w	r2, r2, r8
 8005950:	621a      	str	r2, [r3, #32]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8005958:	ea22 0204 	bic.w	r2, r2, r4
 800595c:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8005960:	601a      	str	r2, [r3, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	ea22 0204 	bic.w	r2, r2, r4
 8005968:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	ea22 0204 	bic.w	r2, r2, r4
 8005970:	ea42 020e 	orr.w	r2, r2, lr
 8005974:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	4016      	ands	r6, r2
 800597a:	605e      	str	r6, [r3, #4]
    while (pins != 0)
 800597c:	b339      	cbz	r1, 80059ce <recorder::Serial::Init(unsigned long)+0xd6>
 800597e:	fa91 fca1 	rbit	ip, r1
        uint32_t pin = 1 << POSITION_VAL(pins);
 8005982:	fabc fc8c 	clz	ip, ip
 8005986:	fa07 f40c 	lsl.w	r4, r7, ip
        CLEAR_BIT(pins, pin);
 800598a:	43e6      	mvns	r6, r4
 800598c:	ea21 0104 	bic.w	r1, r1, r4
 8005990:	fa94 f9a4 	rbit	r9, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005994:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005998:	0a22      	lsrs	r2, r4, #8

        // Set alternate function first to avoid spurious events
        if (POSITION_VAL(pin) < 8)
 800599a:	fab9 f989 	clz	r9, r9
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800599e:	fa0e f80c 	lsl.w	r8, lr, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80059a2:	fb02 f202 	mul.w	r2, r2, r2
 80059a6:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80059aa:	fa08 f80c 	lsl.w	r8, r8, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80059ae:	fb02 f202 	mul.w	r2, r2, r2
 80059b2:	ddc4      	ble.n	800593e <recorder::Serial::Init(unsigned long)+0x46>
 80059b4:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80059b8:	ebc2 1902 	rsb	r9, r2, r2, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80059bc:	fa04 fe0c 	lsl.w	lr, r4, ip
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80059c0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80059c4:	ea28 0409 	bic.w	r4, r8, r9
 80059c8:	4322      	orrs	r2, r4
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80059cc:	e7c1      	b.n	8005952 <recorder::Serial::Init(unsigned long)+0x5a>
        .TransferDirection   = LL_USART_DIRECTION_TX_RX,
        .HardwareFlowControl = LL_USART_HWCONTROL_NONE,
        .OverSampling        = LL_USART_OVERSAMPLING_16,
    };

    LL_USART_Init(USART1, &uart_init);
 80059ce:	4c1c      	ldr	r4, [pc, #112]	@ (8005a40 <recorder::Serial::Init(unsigned long)+0x148>)
    LL_USART_InitTypeDef uart_init =
 80059d0:	2220      	movs	r2, #32
	__atomic_store_n(&_M_i, __i, int(__m));
 80059d2:	6001      	str	r1, [r0, #0]
 80059d4:	6041      	str	r1, [r0, #4]
 80059d6:	6481      	str	r1, [r0, #72]	@ 0x48
 80059d8:	64c1      	str	r1, [r0, #76]	@ 0x4c
 80059da:	a802      	add	r0, sp, #8
 80059dc:	f003 fda9 	bl	8009532 <memset>
 80059e0:	230c      	movs	r3, #12
    LL_USART_Init(USART1, &uart_init);
 80059e2:	a902      	add	r1, sp, #8
 80059e4:	4620      	mov	r0, r4
    LL_USART_InitTypeDef uart_init =
 80059e6:	9307      	str	r3, [sp, #28]
    };
 80059e8:	9503      	str	r5, [sp, #12]
    LL_USART_Init(USART1, &uart_init);
 80059ea:	f002 feb5 	bl	8008758 <LL_USART_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80059ee:	68a3      	ldr	r3, [r4, #8]

    LL_USART_RequestRxDataFlush(USART1);
    LL_USART_EnableIT_RXNE(USART1);
    LL_USART_DisableIT_TXE(USART1);

    irq::RegisterHandler(USART1_IRQn, InterruptHandler);
 80059f0:	2025      	movs	r0, #37	@ 0x25
 80059f2:	4914      	ldr	r1, [pc, #80]	@ (8005a44 <recorder::Serial::Init(unsigned long)+0x14c>)
 80059f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059f8:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->RQR, (uint16_t)USART_RQR_RXFRQ);
 8005a02:	69a3      	ldr	r3, [r4, #24]
 8005a04:	f043 0308 	orr.w	r3, r3, #8
 8005a08:	61a3      	str	r3, [r4, #24]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f043 0320 	orr.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	f7ff ff05 	bl	8005828 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(USART1_IRQn, kSerialIRQPriority);
 8005a1e:	210b      	movs	r1, #11
 8005a20:	2025      	movs	r0, #37	@ 0x25
 8005a22:	f7ff ff3d 	bl	80058a0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(USART1_IRQn);
 8005a26:	2025      	movs	r0, #37	@ 0x25
 8005a28:	f7ff ff20 	bl	800586c <recorder::irq::Enable(IRQn_Type)>
}
 8005a2c:	b00b      	add	sp, #44	@ 0x2c
 8005a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
 8005a38:	20011298 	.word	0x20011298
 8005a3c:	58020400 	.word	0x58020400
 8005a40:	40011000 	.word	0x40011000
 8005a44:	08005b99 	.word	0x08005b99

08005a48 <recorder::Serial::BytesAvailable()>:
	return __atomic_load_n(&_M_i, int(__m));
 8005a48:	6803      	ldr	r3, [r0, #0]
 8005a4a:	6840      	ldr	r0, [r0, #4]
 8005a4c:	f3bf 8f5b 	dmb	ish

uint32_t Serial::BytesAvailable(void)
{
    return rx_fifo_.available();
}
 8005a50:	1ac0      	subs	r0, r0, r3
 8005a52:	4770      	bx	lr

08005a54 <recorder::Serial::GetByteBlocking()>:

uint8_t Serial::GetByteBlocking(void)
{
 8005a54:	4602      	mov	r2, r0
 8005a56:	6813      	ldr	r3, [r2, #0]
 8005a58:	6851      	ldr	r1, [r2, #4]
 8005a5a:	f3bf 8f5b 	dmb	ish
    bool Pop(T& item)
    {
        uint32_t head = head_.load(std::memory_order_relaxed);
        uint32_t tail = tail_.load(std::memory_order_acquire);

        if (tail - head < 1)
 8005a5e:	428b      	cmp	r3, r1
 8005a60:	d0f9      	beq.n	8005a56 <recorder::Serial::GetByteBlocking()+0x2>
        {
            return false;
        }

        item = data_[head % size];
 8005a62:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
        head_.store(head + 1, std::memory_order_release);
 8005a66:	3301      	adds	r3, #1
        item = data_[head % size];
 8005a68:	4411      	add	r1, r2
 8005a6a:	7a08      	ldrb	r0, [r1, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8005a6c:	f3bf 8f5b 	dmb	ish
 8005a70:	6013      	str	r3, [r2, #0]
    uint8_t byte = 0;
    while (!rx_fifo_.Pop(byte));
    return byte;
}
 8005a72:	4770      	bx	lr

08005a74 <recorder::Serial::Write(unsigned char, bool)>:

uint32_t Serial::Write(uint8_t byte, bool blocking)
{
 8005a74:	b500      	push	{lr}
 8005a76:	4684      	mov	ip, r0
 8005a78:	468e      	mov	lr, r1
 8005a7a:	4613      	mov	r3, r2
	return __atomic_load_n(&_M_i, int(__m));
 8005a7c:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8005a80:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005a82:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8005a84:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8005a88:	1a12      	subs	r2, r2, r0
 8005a8a:	f10c 0048 	add.w	r0, ip, #72	@ 0x48

uint32_t Serial::Write(const uint8_t* buffer, uint32_t length, bool blocking)
{
    uint32_t i = 0;

    while (i < length && (!tx_fifo_.full() || blocking))
 8005a8e:	2aff      	cmp	r2, #255	@ 0xff
 8005a90:	d900      	bls.n	8005a94 <recorder::Serial::Write(unsigned char, bool)+0x20>
 8005a92:	b1bb      	cbz	r3, 8005ac4 <recorder::Serial::Write(unsigned char, bool)+0x50>
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	6802      	ldr	r2, [r0, #0]
 8005a98:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8005a9c:	1a9a      	subs	r2, r3, r2
 8005a9e:	2aff      	cmp	r2, #255	@ 0xff
 8005aa0:	d8f8      	bhi.n	8005a94 <recorder::Serial::Write(unsigned char, bool)+0x20>
            data_[(tail + i) % size] = buffer[i];
 8005aa2:	fa5c f283 	uxtab	r2, ip, r3
 8005aa6:	2001      	movs	r0, #1
        tail_.store(tail + length, std::memory_order_release);
 8005aa8:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8005aaa:	f882 e050 	strb.w	lr, [r2, #80]	@ 0x50
	__atomic_store_n(&_M_i, __i, int(__m));
 8005aae:	f3bf 8f5b 	dmb	ish
 8005ab2:	f8cc 304c 	str.w	r3, [ip, #76]	@ 0x4c
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005ab6:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <recorder::Serial::Write(unsigned char, bool)+0x54>)
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005abe:	6013      	str	r3, [r2, #0]
}
 8005ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	e7f6      	b.n	8005ab6 <recorder::Serial::Write(unsigned char, bool)+0x42>
 8005ac8:	40011000 	.word	0x40011000

08005acc <recorder::Serial::FlushTx(bool)>:
    return i;
}

void Serial::FlushTx(bool discard)
{
    if (discard)
 8005acc:	b971      	cbnz	r1, 8005aec <recorder::Serial::FlushTx(bool)+0x20>
	return __atomic_load_n(&_M_i, int(__m));
 8005ace:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8005ad0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8005ad2:	f3bf 8f5b 	dmb	ish
        LL_USART_DisableIT_TXE(USART1);
        tx_fifo_.Init();
    }
    else
    {
        while (tx_fifo_.available());
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d1f9      	bne.n	8005ace <recorder::Serial::FlushTx(bool)+0x2>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005ada:	4a09      	ldr	r2, [pc, #36]	@ (8005b00 <recorder::Serial::FlushTx(bool)+0x34>)
 8005adc:	69d3      	ldr	r3, [r2, #28]
 8005ade:	0619      	lsls	r1, r3, #24
 8005ae0:	d5fc      	bpl.n	8005adc <recorder::Serial::FlushTx(bool)+0x10>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8005ae2:	4a07      	ldr	r2, [pc, #28]	@ (8005b00 <recorder::Serial::FlushTx(bool)+0x34>)
 8005ae4:	69d3      	ldr	r3, [r2, #28]
 8005ae6:	065b      	lsls	r3, r3, #25
 8005ae8:	d5fc      	bpl.n	8005ae4 <recorder::Serial::FlushTx(bool)+0x18>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
}
 8005aea:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005aec:	4904      	ldr	r1, [pc, #16]	@ (8005b00 <recorder::Serial::FlushTx(bool)+0x34>)
	__atomic_store_n(&_M_i, __i, int(__m));
 8005aee:	2200      	movs	r2, #0
 8005af0:	680b      	ldr	r3, [r1, #0]
 8005af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005af6:	600b      	str	r3, [r1, #0]
 8005af8:	6482      	str	r2, [r0, #72]	@ 0x48
 8005afa:	64c2      	str	r2, [r0, #76]	@ 0x4c
    }
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40011000 	.word	0x40011000

08005b04 <recorder::Serial::InterruptService()>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005b04:	4b23      	ldr	r3, [pc, #140]	@ (8005b94 <recorder::Serial::InterruptService()+0x90>)
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d516      	bpl.n	8005b3a <recorder::Serial::InterruptService()+0x36>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8005b0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
	return __atomic_load_n(&_M_i, int(__m));
 8005b0e:	6843      	ldr	r3, [r0, #4]
 8005b10:	6802      	ldr	r2, [r0, #0]
 8005b12:	f3bf 8f5b 	dmb	ish
        return tail - head >= size;
 8005b16:	1a9b      	subs	r3, r3, r2
    if (LL_USART_IsActiveFlag_RXNE(USART1))
    {
        ScopedProfilingPin<PROFILE_SERIAL_RX> profile;
        uint8_t byte = LL_USART_ReceiveData8(USART1);

        if (rx_fifo_.full())
 8005b18:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b1a:	d82b      	bhi.n	8005b74 <recorder::Serial::InterruptService()+0x70>
 8005b1c:	6843      	ldr	r3, [r0, #4]
 8005b1e:	6802      	ldr	r2, [r0, #0]
 8005b20:	f3bf 8f5b 	dmb	ish
        if (tail - head > size - length)
 8005b24:	1a9a      	subs	r2, r3, r2
 8005b26:	2a3f      	cmp	r2, #63	@ 0x3f
 8005b28:	d807      	bhi.n	8005b3a <recorder::Serial::InterruptService()+0x36>
            data_[(tail + i) % size] = buffer[i];
 8005b2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
        tail_.store(tail + length, std::memory_order_release);
 8005b2e:	3301      	adds	r3, #1
            data_[(tail + i) % size] = buffer[i];
 8005b30:	4402      	add	r2, r0
 8005b32:	7211      	strb	r1, [r2, #8]
	__atomic_store_n(&_M_i, __i, int(__m));
 8005b34:	f3bf 8f5b 	dmb	ish
 8005b38:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8005b3a:	4b16      	ldr	r3, [pc, #88]	@ (8005b94 <recorder::Serial::InterruptService()+0x90>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	0611      	lsls	r1, r2, #24
 8005b40:	d517      	bpl.n	8005b72 <recorder::Serial::InterruptService()+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	0612      	lsls	r2, r2, #24
 8005b46:	d514      	bpl.n	8005b72 <recorder::Serial::InterruptService()+0x6e>
	return __atomic_load_n(&_M_i, int(__m));
 8005b48:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8005b4a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005b4c:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8005b50:	428a      	cmp	r2, r1
 8005b52:	d01a      	beq.n	8005b8a <recorder::Serial::InterruptService()+0x86>
        item = data_[head % size];
 8005b54:	fa50 f282 	uxtab	r2, r0, r2
  USARTx->TDR = Value;
 8005b58:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8005b5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b5e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005b60:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8005b62:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <recorder::Serial::InterruptService()+0x6e>
        head_.store(head + 1, std::memory_order_release);
 8005b6a:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8005b6c:	f3bf 8f5b 	dmb	ish
 8005b70:	6483      	str	r3, [r0, #72]	@ 0x48
        else
        {
            LL_USART_DisableIT_TXE(USART1);
        }
    }
}
 8005b72:	4770      	bx	lr
	return __atomic_load_n(&_M_i, int(__m));
 8005b74:	6803      	ldr	r3, [r0, #0]
 8005b76:	6842      	ldr	r2, [r0, #4]
 8005b78:	f3bf 8f5b 	dmb	ish
        if (tail - head < 1)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d0cd      	beq.n	8005b1c <recorder::Serial::InterruptService()+0x18>
        head_.store(head + 1, std::memory_order_release);
 8005b80:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8005b82:	f3bf 8f5b 	dmb	ish
 8005b86:	6003      	str	r3, [r0, #0]
        return true;
 8005b88:	e7c8      	b.n	8005b1c <recorder::Serial::InterruptService()+0x18>
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	4770      	bx	lr
 8005b94:	40011000 	.word	0x40011000

08005b98 <recorder::Serial::InterruptHandler()>:

void Serial::InterruptHandler(void)
{
    ScopedProfilingPin<PROFILE_SERIAL_IRQ> profile;
    instance_->InterruptService();
 8005b98:	4b01      	ldr	r3, [pc, #4]	@ (8005ba0 <recorder::Serial::InterruptHandler()+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	f7ff bfb2 	b.w	8005b04 <recorder::Serial::InterruptService()>
 8005ba0:	20011298 	.word	0x20011298

08005ba4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005ba4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005ba8:	4905      	ldr	r1, [pc, #20]	@ (8005bc0 <NVIC_SystemReset+0x1c>)
 8005baa:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <NVIC_SystemReset+0x20>)
 8005bac:	68ca      	ldr	r2, [r1, #12]
 8005bae:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005bb2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005bb4:	60cb      	str	r3, [r1, #12]
 8005bb6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005bba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005bbc:	e7fd      	b.n	8005bba <NVIC_SystemReset+0x16>
 8005bbe:	bf00      	nop
 8005bc0:	e000ed00 	.word	0xe000ed00
 8005bc4:	05fa0004 	.word	0x05fa0004

08005bc8 <TickHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <TickHandler+0x14>)
 8005bca:	f06f 0101 	mvn.w	r1, #1
	return __atomic_load_n(&_M_i, int(__m));
 8005bce:	4a04      	ldr	r2, [pc, #16]	@ (8005be0 <TickHandler+0x18>)
 8005bd0:	6119      	str	r1, [r3, #16]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	6813      	ldr	r3, [r2, #0]
{
    ScopedProfilingPin<PROFILE_TICK> profile;
    LL_TIM_ClearFlag_UPDATE(TIM7);
    LL_TIM_IsActiveFlag_UPDATE(TIM7);
    uint32_t ticks = ticks_.load(std::memory_order_relaxed);
    ticks_.store(ticks + 1, std::memory_order_relaxed);
 8005bd6:	3301      	adds	r3, #1
	__atomic_store_n(&_M_i, __i, int(__m));
 8005bd8:	6013      	str	r3, [r2, #0]
}
 8005bda:	4770      	bx	lr
 8005bdc:	40001400 	.word	0x40001400
 8005be0:	200112a4 	.word	0x200112a4

08005be4 <recorder::system::ConfigureClocks()>:
{
 8005be4:	b510      	push	{r4, lr}
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005be6:	2002      	movs	r0, #2
{
 8005be8:	b0cc      	sub	sp, #304	@ 0x130
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005bea:	f000 fc55 	bl	8006498 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(power_scaling);
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <recorder::system::ConfigureClocks()+0xcc>)
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4a30      	ldr	r2, [pc, #192]	@ (8005cb4 <recorder::system::ConfigureClocks()+0xd0>)
 8005bf4:	9101      	str	r1, [sp, #4]
 8005bf6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005bf8:	f021 0101 	bic.w	r1, r1, #1
 8005bfc:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	6993      	ldr	r3, [r2, #24]
 8005c08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c10:	6193      	str	r3, [r2, #24]
 8005c12:	6993      	ldr	r3, [r2, #24]
 8005c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	9b01      	ldr	r3, [sp, #4]
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY));
 8005c1c:	6993      	ldr	r3, [r2, #24]
 8005c1e:	049b      	lsls	r3, r3, #18
 8005c20:	d5fc      	bpl.n	8005c1c <recorder::system::ConfigureClocks()+0x38>
    RCC_OscInitTypeDef osc_init = {};
 8005c22:	2248      	movs	r2, #72	@ 0x48
 8005c24:	2100      	movs	r1, #0
 8005c26:	a80b      	add	r0, sp, #44	@ 0x2c
 8005c28:	f003 fc83 	bl	8009532 <memset>
    osc_init.HSIState = RCC_HSI_DIV1;
 8005c2c:	2301      	movs	r3, #1
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c2e:	2202      	movs	r2, #2
    osc_init.HSIState = RCC_HSI_DIV1;
 8005c30:	930d      	str	r3, [sp, #52]	@ 0x34
    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c32:	920a      	str	r2, [sp, #40]	@ 0x28
    if (HAL_GetREVID() <= REV_ID_Y)
 8005c34:	f000 fc04 	bl	8006440 <HAL_GetREVID>
 8005c38:	f241 0303 	movw	r3, #4099	@ 0x1003
 8005c3c:	4298      	cmp	r0, r3
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <recorder::system::ConfigureClocks()+0xd4>)
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8005c40:	a80a      	add	r0, sp, #40	@ 0x28
            READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk)
 8005c42:	685b      	ldr	r3, [r3, #4]
                >> HAL_RCC_REV_Y_HSITRIM_Pos;
 8005c44:	bf94      	ite	ls
 8005c46:	f3c3 3305 	ubfxls	r3, r3, #12, #6
                >> RCC_HSICFGR_HSITRIM_Pos;
 8005c4a:	f3c3 6306 	ubfxhi	r3, r3, #24, #7
 8005c4e:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8005c50:	f000 fc48 	bl	80064e4 <HAL_RCC_OscConfig>
 8005c54:	b100      	cbz	r0, 8005c58 <recorder::system::ConfigureClocks()+0x74>
        while (1);
 8005c56:	e7fe      	b.n	8005c56 <recorder::system::ConfigureClocks()+0x72>
    clk_init.ClockType =
 8005c58:	233f      	movs	r3, #63	@ 0x3f
    RCC_ClkInitTypeDef clk_init = {};
 8005c5a:	9009      	str	r0, [sp, #36]	@ 0x24
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8005c5c:	2101      	movs	r1, #1
    clk_init.ClockType =
 8005c5e:	9302      	str	r3, [sp, #8]
    RCC_ClkInitTypeDef clk_init = {};
 8005c60:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8005c64:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8005c68:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
 8005c6c:	a802      	add	r0, sp, #8
 8005c6e:	f000 ff53 	bl	8006b18 <HAL_RCC_ClockConfig>
 8005c72:	b100      	cbz	r0, 8005c76 <recorder::system::ConfigureClocks()+0x92>
        while (1);
 8005c74:	e7fe      	b.n	8005c74 <recorder::system::ConfigureClocks()+0x90>
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8005c76:	4601      	mov	r1, r0
 8005c78:	22b8      	movs	r2, #184	@ 0xb8
 8005c7a:	a81e      	add	r0, sp, #120	@ 0x78
    periph_clk_init.PLL3 =
 8005c7c:	4c0f      	ldr	r4, [pc, #60]	@ (8005cbc <recorder::system::ConfigureClocks()+0xd8>)
    RCC_PeriphCLKInitTypeDef periph_clk_init = {};
 8005c7e:	f003 fc58 	bl	8009532 <memset>
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8005c82:	490f      	ldr	r1, [pc, #60]	@ (8005cc0 <recorder::system::ConfigureClocks()+0xdc>)
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8005c84:	2210      	movs	r2, #16
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8005c86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    periph_clk_init.PLL3 =
 8005c8a:	f10d 0c98 	add.w	ip, sp, #152	@ 0x98
        = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_QSPI;
 8005c8e:	911d      	str	r1, [sp, #116]	@ 0x74
    periph_clk_init.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8005c90:	923b      	str	r2, [sp, #236]	@ 0xec
    periph_clk_init.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8005c92:	9345      	str	r3, [sp, #276]	@ 0x114
    periph_clk_init.PLL3 =
 8005c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005c9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005c9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (HAL_RCCEx_PeriphCLKConfig(&periph_clk_init) != HAL_OK)
 8005ca2:	a81d      	add	r0, sp, #116	@ 0x74
 8005ca4:	f001 f934 	bl	8006f10 <HAL_RCCEx_PeriphCLKConfig>
 8005ca8:	b908      	cbnz	r0, 8005cae <recorder::system::ConfigureClocks()+0xca>
}
 8005caa:	b04c      	add	sp, #304	@ 0x130
 8005cac:	bd10      	pop	{r4, pc}
        while (1);
 8005cae:	e7fe      	b.n	8005cae <recorder::system::ConfigureClocks()+0xca>
 8005cb0:	58000400 	.word	0x58000400
 8005cb4:	58024800 	.word	0x58024800
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	0800a4b4 	.word	0x0800a4b4
 8005cc0:	02080001 	.word	0x02080001

08005cc4 <HAL_InitTick>:
HAL_StatusTypeDef HAL_InitTick(uint32_t)
{
    // This is called from HAL_RCC_ClockConfig() but we don't want to use
    // SysTick, so override it and do nothing.
    return HAL_OK;
}
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	4770      	bx	lr

08005cc8 <recorder::system::ReloadWatchdog()>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8005cc8:	4b02      	ldr	r3, [pc, #8]	@ (8005cd4 <recorder::system::ReloadWatchdog()+0xc>)
 8005cca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005cce:	601a      	str	r2, [r3, #0]

void ReloadWatchdog(void)
{
    ScopedProfilingPin<PROFILE_WATCHDOG> profile;
    LL_IWDG_ReloadCounter(IWDG1);
}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	58004800 	.word	0x58004800

08005cd8 <recorder::system::Init()>:

void Init(void)
{
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	b08d      	sub	sp, #52	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8005cdc:	b672      	cpsid	i
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8005cde:	4cb1      	ldr	r4, [pc, #708]	@ (8005fa4 <recorder::system::Init()+0x2cc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ce0:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8005ce4:	4bb0      	ldr	r3, [pc, #704]	@ (8005fa8 <recorder::system::Init()+0x2d0>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8005ce6:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
  reg_value  =  (reg_value                                   |
 8005cea:	4ab0      	ldr	r2, [pc, #704]	@ (8005fac <recorder::system::Init()+0x2d4>)
 8005cec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
    __disable_irq();

    InitFPU();

    NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    SystemCoreClock = kSystemClock;
 8005cf0:	4daf      	ldr	r5, [pc, #700]	@ (8005fb0 <recorder::system::Init()+0x2d8>)
    SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));
 8005cf2:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
    FPU->FPCCR |= FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8005cf6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005cf8:	f041 4140 	orr.w	r1, r1, #3221225472	@ 0xc0000000
 8005cfc:	6359      	str	r1, [r3, #52]	@ 0x34
    FPU->FPDSCR |= FPU_FPDSCR_FZ_Msk;
 8005cfe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005d00:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8005d04:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= FPU_FPDSCR_AHP_Msk;
 8005d06:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005d08:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8005d0c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR &= ~FPU_FPDSCR_RMode_Msk;
 8005d0e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005d10:	f421 0140 	bic.w	r1, r1, #12582912	@ 0xc00000
 8005d14:	63d9      	str	r1, [r3, #60]	@ 0x3c
    FPU->FPDSCR |= (2 << FPU_FPDSCR_RMode_Pos);
 8005d16:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005d18:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8005d1c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d1e:	68e3      	ldr	r3, [r4, #12]
    SystemCoreClock = kSystemClock;
 8005d20:	49a4      	ldr	r1, [pc, #656]	@ (8005fb4 <recorder::system::Init()+0x2dc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d22:	4003      	ands	r3, r0
  reg_value  =  (reg_value                                   |
 8005d24:	431a      	orrs	r2, r3
    SystemD2Clock = kSystemClock;
 8005d26:	4ba4      	ldr	r3, [pc, #656]	@ (8005fb8 <recorder::system::Init()+0x2e0>)
  SCB->AIRCR =  reg_value;
 8005d28:	60e2      	str	r2, [r4, #12]
    SystemCoreClock = kSystemClock;
 8005d2a:	6029      	str	r1, [r5, #0]
    SystemD2Clock = kSystemClock;
 8005d2c:	6019      	str	r1, [r3, #0]

    ConfigureClocks();
 8005d2e:	f7ff ff59 	bl	8005be4 <recorder::system::ConfigureClocks()>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d36:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005d3a:	2500      	movs	r5, #0
 8005d3c:	f8c4 5250 	str.w	r5, [r4, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d44:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005d48:	6963      	ldr	r3, [r4, #20]
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4c98      	ldr	r4, [pc, #608]	@ (8005fbc <recorder::system::Init()+0x2e4>)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005d5a:	4b99      	ldr	r3, [pc, #612]	@ (8005fc0 <recorder::system::Init()+0x2e8>)
 8005d5c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005d60:	4a98      	ldr	r2, [pc, #608]	@ (8005fc4 <recorder::system::Init()+0x2ec>)
 8005d62:	f041 0102 	orr.w	r1, r1, #2
 8005d66:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8005d6a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005d6e:	f001 0102 	and.w	r1, r1, #2
 8005d72:	9105      	str	r1, [sp, #20]
 8005d74:	9905      	ldr	r1, [sp, #20]
 8005d76:	6899      	ldr	r1, [r3, #8]
 8005d78:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005d7c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005d80:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005d82:	68d9      	ldr	r1, [r3, #12]
 8005d84:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005d88:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005d90:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005d98:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005d9c:	6019      	str	r1, [r3, #0]
 8005d9e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005da2:	f041 0102 	orr.w	r1, r1, #2
 8005da6:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8005daa:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005dae:	f001 0102 	and.w	r1, r1, #2
 8005db2:	9104      	str	r1, [sp, #16]
 8005db4:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005db6:	6899      	ldr	r1, [r3, #8]
 8005db8:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8005dbc:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005dc0:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005dc2:	68d9      	ldr	r1, [r3, #12]
 8005dc4:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8005dc8:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8005dd0:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	f021 4140 	bic.w	r1, r1, #3221225472	@ 0xc0000000
 8005dd8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005de2:	f041 0102 	orr.w	r1, r1, #2
 8005de6:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8005dea:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005dee:	f001 0102 	and.w	r1, r1, #2
 8005df2:	9103      	str	r1, [sp, #12]
 8005df4:	9903      	ldr	r1, [sp, #12]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005dfc:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8005e00:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005e02:	68d9      	ldr	r1, [r3, #12]
 8005e04:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005e08:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8005e10:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	f421 2140 	bic.w	r1, r1, #786432	@ 0xc0000
 8005e18:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8005e1c:	6019      	str	r1, [r3, #0]
 8005e1e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005e22:	f041 0102 	orr.w	r1, r1, #2
 8005e26:	f8c4 10e0 	str.w	r1, [r4, #224]	@ 0xe0
 8005e2a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	@ 0xe0
 8005e2e:	f001 0102 	and.w	r1, r1, #2
 8005e32:	9102      	str	r1, [sp, #8]
 8005e34:	9902      	ldr	r1, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005e36:	6899      	ldr	r1, [r3, #8]
 8005e38:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005e3c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005e40:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005e42:	68d9      	ldr	r1, [r3, #12]
 8005e44:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005e48:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005e50:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005e58:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005e5c:	6019      	str	r1, [r3, #0]
            case GPIOG_BASE: __HAL_RCC_GPIOG_CLK_ENABLE(); return;
 8005e5e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e66:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8005e6a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005e76:	6893      	ldr	r3, [r2, #8]
 8005e78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e80:	6093      	str	r3, [r2, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005e82:	68d3      	ldr	r3, [r2, #12]
 8005e84:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e88:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e8a:	6853      	ldr	r3, [r2, #4]
 8005e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e90:	6053      	str	r3, [r2, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005e92:	6813      	ldr	r3, [r2, #0]
 8005e94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e9c:	6013      	str	r3, [r2, #0]
    // Leave DCache disabled or else DMA won't work
    SCB_EnableICache();

    profiling::Init();
    ScopedProfilingPin<PROFILE_SYSTEM_INIT> profile;
    irq::Init();
 8005e9e:	f7ff fc9b 	bl	80057d8 <recorder::irq::Init()>
    serial_.Init(115200);
 8005ea2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8005ea6:	4848      	ldr	r0, [pc, #288]	@ (8005fc8 <recorder::system::Init()+0x2f0>)
 8005ea8:	f7ff fd26 	bl	80058f8 <recorder::Serial::Init(unsigned long)>
 8005eac:	4b47      	ldr	r3, [pc, #284]	@ (8005fcc <recorder::system::Init()+0x2f4>)
    LL_TIM_InitTypeDef timer_init =
 8005eae:	2210      	movs	r2, #16
    LL_TIM_Init(TIM7, &timer_init);
 8005eb0:	a906      	add	r1, sp, #24
 8005eb2:	601d      	str	r5, [r3, #0]
    LL_TIM_InitTypeDef timer_init =
 8005eb4:	f641 03ff 	movw	r3, #6399	@ 0x18ff
 8005eb8:	9207      	str	r2, [sp, #28]
 8005eba:	9506      	str	r5, [sp, #24]
 8005ebc:	9308      	str	r3, [sp, #32]
 8005ebe:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005ec2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
    LL_TIM_Init(TIM7, &timer_init);
 8005ec6:	4d42      	ldr	r5, [pc, #264]	@ (8005fd0 <recorder::system::Init()+0x2f8>)
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005ec8:	f043 0320 	orr.w	r3, r3, #32
    LL_TIM_Init(TIM7, &timer_init);
 8005ecc:	4628      	mov	r0, r5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005ece:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8005ed2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	9b00      	ldr	r3, [sp, #0]
    LL_TIM_Init(TIM7, &timer_init);
 8005ede:	f002 fbd5 	bl	800868c <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005ee2:	68eb      	ldr	r3, [r5, #12]
    irq::RegisterHandler(TIM7_IRQn, TickHandler);
 8005ee4:	2037      	movs	r0, #55	@ 0x37
 8005ee6:	493b      	ldr	r1, [pc, #236]	@ (8005fd4 <recorder::system::Init()+0x2fc>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	f7ff fc97 	bl	8005828 <recorder::irq::RegisterHandler(IRQn_Type, void (*)())>
    irq::SetPriority(TIM7_IRQn, kTickIRQPriority);
 8005efa:	210a      	movs	r1, #10
 8005efc:	2037      	movs	r0, #55	@ 0x37
 8005efe:	f7ff fccf 	bl	80058a0 <recorder::irq::SetPriority(IRQn_Type, unsigned long)>
    irq::Enable(TIM7_IRQn);
 8005f02:	2037      	movs	r0, #55	@ 0x37
 8005f04:	f7ff fcb2 	bl	800586c <recorder::irq::Enable(IRQn_Type)>
    if ((FLASH->OPTSR_CUR & mask) != value)
 8005f08:	4a33      	ldr	r2, [pc, #204]	@ (8005fd8 <recorder::system::Init()+0x300>)
 8005f0a:	4b34      	ldr	r3, [pc, #208]	@ (8005fdc <recorder::system::Init()+0x304>)
 8005f0c:	69d1      	ldr	r1, [r2, #28]
 8005f0e:	400b      	ands	r3, r1
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d010      	beq.n	8005f36 <recorder::system::Init()+0x25e>
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005f14:	4932      	ldr	r1, [pc, #200]	@ (8005fe0 <recorder::system::Init()+0x308>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005f16:	4833      	ldr	r0, [pc, #204]	@ (8005fe4 <recorder::system::Init()+0x30c>)
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8005f18:	4b33      	ldr	r3, [pc, #204]	@ (8005fe8 <recorder::system::Init()+0x310>)
        FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8005f1a:	6090      	str	r0, [r2, #8]
        FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8005f1c:	6091      	str	r1, [r2, #8]
        MODIFY_REG(FLASH->OPTSR_PRG, mask, value);
 8005f1e:	6a11      	ldr	r1, [r2, #32]
 8005f20:	400b      	ands	r3, r1
 8005f22:	f043 0310 	orr.w	r3, r3, #16
 8005f26:	6213      	str	r3, [r2, #32]
        FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8005f28:	6993      	ldr	r3, [r2, #24]
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	6193      	str	r3, [r2, #24]
        while (FLASH->OPTSR_CUR & FLASH_OPTSR_OPT_BUSY);
 8005f30:	69d3      	ldr	r3, [r2, #28]
 8005f32:	07d8      	lsls	r0, r3, #31
 8005f34:	d4fc      	bmi.n	8005f30 <recorder::system::Init()+0x258>
    __HAL_DBGMCU_FREEZE_IWDG1();
 8005f36:	492d      	ldr	r1, [pc, #180]	@ (8005fec <recorder::system::Init()+0x314>)
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8005f38:	f64c 44cc 	movw	r4, #52428	@ 0xcccc
 8005f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff0 <recorder::system::Init()+0x318>)
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8005f3e:	f245 5055 	movw	r0, #21845	@ 0x5555
 8005f42:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f48:	654b      	str	r3, [r1, #84]	@ 0x54
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8005f4a:	2103      	movs	r1, #3
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8005f4c:	2364      	movs	r3, #100	@ 0x64
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8005f4e:	6014      	str	r4, [r2, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8005f50:	6010      	str	r0, [r2, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8005f52:	6051      	str	r1, [r2, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8005f54:	6093      	str	r3, [r2, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8005f56:	68d3      	ldr	r3, [r2, #12]
 8005f58:	0759      	lsls	r1, r3, #29
 8005f5a:	d1fc      	bne.n	8005f56 <recorder::system::Init()+0x27e>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8005f5c:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 8005f60:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f62:	b662      	cpsie	i
    InitTimer(kSystemClock / 10000);

    InitWatchdog(100);
    __enable_irq();

    uint32_t reset_flags = RCC->RSR;
 8005f64:	4b15      	ldr	r3, [pc, #84]	@ (8005fbc <recorder::system::Init()+0x2e4>)
    LL_RCC_ClearResetFlags();
    printf("Reset source was ");
 8005f66:	4823      	ldr	r0, [pc, #140]	@ (8005ff4 <recorder::system::Init()+0x31c>)
    uint32_t reset_flags = RCC->RSR;
 8005f68:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
  * @rmtoll RSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8005f6c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005f70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f74:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    printf("Reset source was ");
 8005f78:	f003 fa40 	bl	80093fc <iprintf>

    switch (reset_flags >> 16)
 8005f7c:	0c23      	lsrs	r3, r4, #16
 8005f7e:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f80:	d07e      	beq.n	8006080 <recorder::system::Init()+0x3a8>
 8005f82:	d93b      	bls.n	8005ffc <recorder::system::Init()+0x324>
 8005f84:	f241 0246 	movw	r2, #4166	@ 0x1046
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d075      	beq.n	8006078 <recorder::system::Init()+0x3a0>
 8005f8c:	d868      	bhi.n	8006060 <recorder::system::Init()+0x388>
 8005f8e:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8005f92:	d052      	beq.n	800603a <recorder::system::Init()+0x362>
 8005f94:	f240 4246 	movw	r2, #1094	@ 0x446
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d175      	bne.n	8006088 <recorder::system::Init()+0x3b0>
        case 0x0046: printf("NRST\n");  break;
        case 0x0066: printf("BOR\n");   break;
        case 0x0146: printf("SFT\n");   break;
        case 0x0006: printf("CPU\n");   break;
        case 0x1046: printf("WWDG1\n"); break;
        case 0x0446: printf("IWDG1\n"); break;
 8005f9c:	4816      	ldr	r0, [pc, #88]	@ (8005ff8 <recorder::system::Init()+0x320>)
 8005f9e:	f003 fa95 	bl	80094cc <puts>
 8005fa2:	e035      	b.n	8006010 <recorder::system::Init()+0x338>
 8005fa4:	e000ed00 	.word	0xe000ed00
 8005fa8:	e000ef00 	.word	0xe000ef00
 8005fac:	05fa0300 	.word	0x05fa0300
 8005fb0:	2000002c 	.word	0x2000002c
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	20000028 	.word	0x20000028
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	58020400 	.word	0x58020400
 8005fc4:	58021800 	.word	0x58021800
 8005fc8:	200112a8 	.word	0x200112a8
 8005fcc:	200112a4 	.word	0x200112a4
 8005fd0:	40001400 	.word	0x40001400
 8005fd4:	08005bc9 	.word	0x08005bc9
 8005fd8:	52002000 	.word	0x52002000
 8005fdc:	00060010 	.word	0x00060010
 8005fe0:	4c5d6e7f 	.word	0x4c5d6e7f
 8005fe4:	08192a3b 	.word	0x08192a3b
 8005fe8:	fff9ffef 	.word	0xfff9ffef
 8005fec:	5c001000 	.word	0x5c001000
 8005ff0:	58004800 	.word	0x58004800
 8005ff4:	0800a6bc 	.word	0x0800a6bc
 8005ff8:	0800a6f0 	.word	0x0800a6f0
    switch (reset_flags >> 16)
 8005ffc:	2b46      	cmp	r3, #70	@ 0x46
 8005ffe:	d037      	beq.n	8006070 <recorder::system::Init()+0x398>
 8006000:	d828      	bhi.n	8006054 <recorder::system::Init()+0x37c>
 8006002:	2b06      	cmp	r3, #6
 8006004:	d015      	beq.n	8006032 <recorder::system::Init()+0x35a>
 8006006:	2b1e      	cmp	r3, #30
 8006008:	d13e      	bne.n	8006088 <recorder::system::Init()+0x3b0>
        case 0x001E: printf("WAKE\n");  break;
 800600a:	4822      	ldr	r0, [pc, #136]	@ (8006094 <recorder::system::Init()+0x3bc>)
 800600c:	f003 fa5e 	bl	80094cc <puts>
        case 0x4046: printf("LPWR\n");  break;
        default: printf("unknown: 0x%08lX\n", reset_flags);
    }

    wakeup_flags_ = PWR->WKUPFR;
 8006010:	4b21      	ldr	r3, [pc, #132]	@ (8006098 <recorder::system::Init()+0x3c0>)
 8006012:	4c22      	ldr	r4, [pc, #136]	@ (800609c <recorder::system::Init()+0x3c4>)
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 8006016:	07da      	lsls	r2, r3, #31
    wakeup_flags_ = PWR->WKUPFR;
 8006018:	6023      	str	r3, [r4, #0]
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF1)
 800601a:	d416      	bmi.n	800604a <recorder::system::Init()+0x372>
    {
        printf("Wakeup event was record button\n");
    }

    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 800601c:	079b      	lsls	r3, r3, #30
 800601e:	d410      	bmi.n	8006042 <recorder::system::Init()+0x36a>
 8006020:	4a1f      	ldr	r2, [pc, #124]	@ (80060a0 <recorder::system::Init()+0x3c8>)
 8006022:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
 8006026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800602a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
    {
        printf("Wakeup event was play button\n");
    }

    LL_RCC_ClearResetFlags();
}
 800602e:	b00d      	add	sp, #52	@ 0x34
 8006030:	bd30      	pop	{r4, r5, pc}
        case 0x0006: printf("CPU\n");   break;
 8006032:	481c      	ldr	r0, [pc, #112]	@ (80060a4 <recorder::system::Init()+0x3cc>)
 8006034:	f003 fa4a 	bl	80094cc <puts>
 8006038:	e7ea      	b.n	8006010 <recorder::system::Init()+0x338>
        case 0x0146: printf("SFT\n");   break;
 800603a:	481b      	ldr	r0, [pc, #108]	@ (80060a8 <recorder::system::Init()+0x3d0>)
 800603c:	f003 fa46 	bl	80094cc <puts>
 8006040:	e7e6      	b.n	8006010 <recorder::system::Init()+0x338>
        printf("Wakeup event was play button\n");
 8006042:	481a      	ldr	r0, [pc, #104]	@ (80060ac <recorder::system::Init()+0x3d4>)
 8006044:	f003 fa42 	bl	80094cc <puts>
 8006048:	e7ea      	b.n	8006020 <recorder::system::Init()+0x348>
        printf("Wakeup event was record button\n");
 800604a:	4819      	ldr	r0, [pc, #100]	@ (80060b0 <recorder::system::Init()+0x3d8>)
 800604c:	f003 fa3e 	bl	80094cc <puts>
    if (wakeup_flags_ & PWR_WKUPFR_WKUPF2)
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	e7e3      	b.n	800601c <recorder::system::Init()+0x344>
    switch (reset_flags >> 16)
 8006054:	2b66      	cmp	r3, #102	@ 0x66
 8006056:	d117      	bne.n	8006088 <recorder::system::Init()+0x3b0>
        case 0x0066: printf("BOR\n");   break;
 8006058:	4816      	ldr	r0, [pc, #88]	@ (80060b4 <recorder::system::Init()+0x3dc>)
 800605a:	f003 fa37 	bl	80094cc <puts>
 800605e:	e7d7      	b.n	8006010 <recorder::system::Init()+0x338>
    switch (reset_flags >> 16)
 8006060:	f244 0246 	movw	r2, #16454	@ 0x4046
 8006064:	4293      	cmp	r3, r2
 8006066:	d10f      	bne.n	8006088 <recorder::system::Init()+0x3b0>
        case 0x4046: printf("LPWR\n");  break;
 8006068:	4813      	ldr	r0, [pc, #76]	@ (80060b8 <recorder::system::Init()+0x3e0>)
 800606a:	f003 fa2f 	bl	80094cc <puts>
 800606e:	e7cf      	b.n	8006010 <recorder::system::Init()+0x338>
        case 0x0046: printf("NRST\n");  break;
 8006070:	4812      	ldr	r0, [pc, #72]	@ (80060bc <recorder::system::Init()+0x3e4>)
 8006072:	f003 fa2b 	bl	80094cc <puts>
 8006076:	e7cb      	b.n	8006010 <recorder::system::Init()+0x338>
        case 0x1046: printf("WWDG1\n"); break;
 8006078:	4811      	ldr	r0, [pc, #68]	@ (80060c0 <recorder::system::Init()+0x3e8>)
 800607a:	f003 fa27 	bl	80094cc <puts>
 800607e:	e7c7      	b.n	8006010 <recorder::system::Init()+0x338>
        case 0x00FE: printf("POR\n");   break;
 8006080:	4810      	ldr	r0, [pc, #64]	@ (80060c4 <recorder::system::Init()+0x3ec>)
 8006082:	f003 fa23 	bl	80094cc <puts>
 8006086:	e7c3      	b.n	8006010 <recorder::system::Init()+0x338>
        default: printf("unknown: 0x%08lX\n", reset_flags);
 8006088:	4621      	mov	r1, r4
 800608a:	480f      	ldr	r0, [pc, #60]	@ (80060c8 <recorder::system::Init()+0x3f0>)
 800608c:	f003 f9b6 	bl	80093fc <iprintf>
 8006090:	e7be      	b.n	8006010 <recorder::system::Init()+0x338>
 8006092:	bf00      	nop
 8006094:	0800a6f8 	.word	0x0800a6f8
 8006098:	58024800 	.word	0x58024800
 800609c:	200112a0 	.word	0x200112a0
 80060a0:	58024400 	.word	0x58024400
 80060a4:	0800a6e4 	.word	0x0800a6e4
 80060a8:	0800a6e0 	.word	0x0800a6e0
 80060ac:	0800a73c 	.word	0x0800a73c
 80060b0:	0800a71c 	.word	0x0800a71c
 80060b4:	0800a6dc 	.word	0x0800a6dc
 80060b8:	0800a700 	.word	0x0800a700
 80060bc:	0800a6d4 	.word	0x0800a6d4
 80060c0:	0800a6e8 	.word	0x0800a6e8
 80060c4:	0800a6d0 	.word	0x0800a6d0
 80060c8:	0800a708 	.word	0x0800a708

080060cc <recorder::system::Delay_ms(unsigned long)>:
{
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
}

void Delay_ms(uint32_t ms)
{
 80060cc:	b570      	push	{r4, r5, r6, lr}
    uint32_t start = ticks_.load(std::memory_order_acquire);

    while (TickDelta(start) < ms * 10)
 80060ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	return __atomic_load_n(&_M_i, int(__m));
 80060d2:	4d08      	ldr	r5, [pc, #32]	@ (80060f4 <recorder::system::Delay_ms(unsigned long)+0x28>)
 80060d4:	0044      	lsls	r4, r0, #1
 80060d6:	682e      	ldr	r6, [r5, #0]
 80060d8:	f3bf 8f5b 	dmb	ish
 80060dc:	e001      	b.n	80060e2 <recorder::system::Delay_ms(unsigned long)+0x16>
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
}

void Sleep(void)
{
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80060de:	f000 f9cd 	bl	800647c <HAL_PWR_EnterSLEEPMode>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	2101      	movs	r1, #1
 80060e6:	2000      	movs	r0, #0
 80060e8:	f3bf 8f5b 	dmb	ish
    return (ticks_.load(std::memory_order_acquire) - start) & 0xFFFFFFFF;
 80060ec:	1b9b      	subs	r3, r3, r6
    while (TickDelta(start) < ms * 10)
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d8f5      	bhi.n	80060de <recorder::system::Delay_ms(unsigned long)+0x12>
}
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	200112a4 	.word	0x200112a4

080060f8 <recorder::system::SerialFlushTx(bool)>:
{
 80060f8:	4601      	mov	r1, r0
    serial_.FlushTx(discard);
 80060fa:	4801      	ldr	r0, [pc, #4]	@ (8006100 <recorder::system::SerialFlushTx(bool)+0x8>)
 80060fc:	f7ff bce6 	b.w	8005acc <recorder::Serial::FlushTx(bool)>
 8006100:	200112a8 	.word	0x200112a8

08006104 <recorder::system::Standby()>:
{
 8006104:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("cpsid f" : : : "memory");
 8006106:	b671      	cpsid	f
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006108:	4b33      	ldr	r3, [pc, #204]	@ (80061d8 <recorder::system::Standby()+0xd4>)
 800610a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
  * @rmtoll CPUCR     RUN_D3       LL_PWR_CPU_DisableD3RunInLowPowerMode\n
  * @retval None
  */
__STATIC_INLINE void LL_PWR_CPU_DisableD3RunInLowPowerMode(void)
{
  CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_RUN_D3);
 800610e:	4d33      	ldr	r5, [pc, #204]	@ (80061dc <recorder::system::Standby()+0xd8>)
 8006110:	f8c3 4080 	str.w	r4, [r3, #128]	@ 0x80
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8006114:	f8c3 4180 	str.w	r4, [r3, #384]	@ 0x180
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006118:	f8c3 4084 	str.w	r4, [r3, #132]	@ 0x84
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800611c:	f8c3 4184 	str.w	r4, [r3, #388]	@ 0x184
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006120:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8006124:	f8c3 4188 	str.w	r4, [r3, #392]	@ 0x188
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006128:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800612c:	f8c3 418c 	str.w	r4, [r3, #396]	@ 0x18c
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006130:	f8c3 4090 	str.w	r4, [r3, #144]	@ 0x90
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8006134:	f8c3 4190 	str.w	r4, [r3, #400]	@ 0x190
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006138:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800613c:	f8c3 4194 	str.w	r4, [r3, #404]	@ 0x194
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006140:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
        NVIC->ICPR[i] = 0xFFFFFFFF;
 8006144:	f8c3 4198 	str.w	r4, [r3, #408]	@ 0x198
        NVIC->ICER[i] = 0xFFFFFFFF;
 8006148:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
        NVIC->ICPR[i] = 0xFFFFFFFF;
 800614c:	f8c3 419c 	str.w	r4, [r3, #412]	@ 0x19c
 8006150:	692b      	ldr	r3, [r5, #16]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006156:	612b      	str	r3, [r5, #16]
    HAL_DisableDBGSleepMode();
 8006158:	f000 f978 	bl	800644c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DisableDBGStopMode();
 800615c:	f000 f97e 	bl	800645c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DisableDBGStandbyMode();
 8006160:	f000 f984 	bl	800646c <HAL_DBGMCU_DisableDBGStandbyMode>
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  SET_BIT(PWR->WKUPEPR, (WakeUpPin << PWR_WKUPEPR_WKUPP1_Pos));
 8006164:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	2302      	movs	r3, #2
 8006168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616c:	62aa      	str	r2, [r5, #40]	@ 0x28
  *         @arg @ref LL_PWR_WAKEUP_PIN6
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetWakeUpPinPullUp(uint32_t WakeUpPin)
{
  MODIFY_REG(PWR->WKUPEPR, \
 800616e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8006170:	fa93 f2a3 	rbit	r2, r3
 8006174:	fab2 f282 	clz	r2, r2
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	fab3 f383 	clz	r3, r3
 8006180:	0052      	lsls	r2, r2, #1
 8006182:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8006186:	3308      	adds	r3, #8
 8006188:	f002 021e 	and.w	r2, r2, #30
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	fa00 f202 	lsl.w	r2, r0, r2
 8006192:	f003 031e 	and.w	r3, r3, #30
 8006196:	ea21 0202 	bic.w	r2, r1, r2
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80061a0:	490f      	ldr	r1, [pc, #60]	@ (80061e0 <recorder::system::Standby()+0xdc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	62ab      	str	r3, [r5, #40]	@ 0x28
  SET_BIT(PWR->WKUPEPR, WakeUpPin);
 80061a6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	62ab      	str	r3, [r5, #40]	@ 0x28
    PWR->WKUPCR = 0xFFFFFFFF;
 80061ae:	622c      	str	r4, [r5, #32]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D1, PDMode);
 80061b0:	692b      	ldr	r3, [r5, #16]
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D2, PDMode);
 80061b8:	692b      	ldr	r3, [r5, #16]
 80061ba:	f043 0302 	orr.w	r3, r3, #2
 80061be:	612b      	str	r3, [r5, #16]
  MODIFY_REG(PWR->CPUCR, PWR_CPUCR_PDDS_D3 , PDMode);
 80061c0:	692b      	ldr	r3, [r5, #16]
 80061c2:	f043 0304 	orr.w	r3, r3, #4
 80061c6:	612b      	str	r3, [r5, #16]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80061c8:	690b      	ldr	r3, [r1, #16]
 80061ca:	f043 0304 	orr.w	r3, r3, #4
 80061ce:	610b      	str	r3, [r1, #16]
    __WFI();
 80061d0:	bf30      	wfi
}

void Reset(void)
{
    NVIC_SystemReset();
 80061d2:	f7ff fce7 	bl	8005ba4 <NVIC_SystemReset>
 80061d6:	bf00      	nop
 80061d8:	e000e100 	.word	0xe000e100
 80061dc:	58024800 	.word	0x58024800
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <recorder::system::WakeupWasPlayButton()>:
    return wakeup_flags_ & PWR_WKUPFR_WKUPF2;
 80061e4:	4b02      	ldr	r3, [pc, #8]	@ (80061f0 <recorder::system::WakeupWasPlayButton()+0xc>)
 80061e6:	6818      	ldr	r0, [r3, #0]
}
 80061e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	200112a0 	.word	0x200112a0

080061f4 <recorder::system::Reset()>:
{
 80061f4:	b508      	push	{r3, lr}
    NVIC_SystemReset();
 80061f6:	f7ff fcd5 	bl	8005ba4 <NVIC_SystemReset>
 80061fa:	bf00      	nop

080061fc <fgets>:
}

extern "C"
char* fgets(char* str, int count, std::FILE* stream)
{
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (count < 2)
 8006200:	2901      	cmp	r1, #1
{
 8006202:	b083      	sub	sp, #12
 8006204:	9001      	str	r0, [sp, #4]
    if (count < 2)
 8006206:	dd34      	ble.n	8006272 <fgets+0x76>
 8006208:	4616      	mov	r6, r2
 800620a:	4607      	mov	r7, r0
        return nullptr;
    }

    int i;

    for (i = 0; i < count - 1; i++)
 800620c:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8006210:	f04f 0900 	mov.w	r9, #0
    {
        char byte = std::getc(stream);
 8006214:	4630      	mov	r0, r6
 8006216:	f003 f8c1 	bl	800939c <getc>
 800621a:	4605      	mov	r5, r0
        bool error = std::ferror(stream);
 800621c:	4630      	mov	r0, r6
 800621e:	f002 ffc5 	bl	80091ac <ferror>
 8006222:	4682      	mov	sl, r0
        bool eof = std::feof(stream);
 8006224:	4630      	mov	r0, r6
        char byte = std::getc(stream);
 8006226:	b2ed      	uxtb	r5, r5
        bool eof = std::feof(stream);
 8006228:	f002 ff9c 	bl	8009164 <feof>
 800622c:	4604      	mov	r4, r0
        std::clearerr(stream);
 800622e:	4630      	mov	r0, r6
        bool eof = std::feof(stream);
 8006230:	f1b4 0b00 	subs.w	fp, r4, #0
 8006234:	bf18      	it	ne
 8006236:	f04f 0b01 	movne.w	fp, #1
        std::clearerr(stream);
 800623a:	f002 ff6f 	bl	800911c <clearerr>

        if (error || (eof && i == 0))
 800623e:	f1ba 0f00 	cmp.w	sl, #0
 8006242:	d116      	bne.n	8006272 <fgets+0x76>
 8006244:	f1b9 0f00 	cmp.w	r9, #0
 8006248:	d102      	bne.n	8006250 <fgets+0x54>
 800624a:	f1bb 0f00 	cmp.w	fp, #0
 800624e:	d110      	bne.n	8006272 <fgets+0x76>
        {
            return nullptr;
        }
        else if (eof)
 8006250:	b99c      	cbnz	r4, 800627a <fgets+0x7e>
        }
        else
        {
            str[i] = byte;

            if (byte == '\n')
 8006252:	2d0a      	cmp	r5, #10
            str[i] = byte;
 8006254:	f807 5b01 	strb.w	r5, [r7], #1
            if (byte == '\n')
 8006258:	d003      	beq.n	8006262 <fgets+0x66>
    for (i = 0; i < count - 1; i++)
 800625a:	f109 0901 	add.w	r9, r9, #1
 800625e:	45c1      	cmp	r9, r8
 8006260:	d1d8      	bne.n	8006214 <fgets+0x18>
                break;
            }
        }
    }

    str[i + 1] = '\0';
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	444b      	add	r3, r9
 8006268:	705a      	strb	r2, [r3, #1]
            return str;
 800626a:	9801      	ldr	r0, [sp, #4]
    return str;
}
 800626c:	b003      	add	sp, #12
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return nullptr;
 8006272:	2000      	movs	r0, #0
}
 8006274:	b003      	add	sp, #12
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            str[i] = '\0';
 800627a:	2300      	movs	r3, #0
 800627c:	703b      	strb	r3, [r7, #0]
            return str;
 800627e:	e7f4      	b.n	800626a <fgets+0x6e>

08006280 <_read>:

extern "C"
int _read(int file, char* ptr, int len)
{
 8006280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static bool prev_was_cr = false;

    if (file == STDIN_FILENO)
 8006284:	bb38      	cbnz	r0, 80062d6 <_read+0x56>
    {
        int i = 0;

        while (i < len && serial_.BytesAvailable())
 8006286:	2a00      	cmp	r2, #0
 8006288:	4604      	mov	r4, r0
 800628a:	4616      	mov	r6, r2
 800628c:	dd20      	ble.n	80062d0 <_read+0x50>
 800628e:	4688      	mov	r8, r1
 8006290:	4d15      	ldr	r5, [pc, #84]	@ (80062e8 <_read+0x68>)
 8006292:	4f16      	ldr	r7, [pc, #88]	@ (80062ec <_read+0x6c>)
 8006294:	e007      	b.n	80062a6 <_read+0x26>
            if (is_cr)
            {
                ch = '\n';
            }

            if (!(is_lf && prev_was_cr))
 8006296:	280a      	cmp	r0, #10
 8006298:	d014      	beq.n	80062c4 <_read+0x44>
            {
                ptr[i++] = ch;
 800629a:	f808 0004 	strb.w	r0, [r8, r4]
 800629e:	3401      	adds	r4, #1
            }

            prev_was_cr = is_cr;
 80062a0:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 80062a2:	42b4      	cmp	r4, r6
 80062a4:	da14      	bge.n	80062d0 <_read+0x50>
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7ff fbce 	bl	8005a48 <recorder::Serial::BytesAvailable()>
 80062ac:	4603      	mov	r3, r0
            char ch = serial_.GetByteBlocking();
 80062ae:	4628      	mov	r0, r5
        while (i < len && serial_.BytesAvailable())
 80062b0:	b173      	cbz	r3, 80062d0 <_read+0x50>
            char ch = serial_.GetByteBlocking();
 80062b2:	f7ff fbcf 	bl	8005a54 <recorder::Serial::GetByteBlocking()>
            bool is_cr = (ch == '\r');
 80062b6:	280d      	cmp	r0, #13
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
            if (is_cr)
 80062be:	d1ea      	bne.n	8006296 <_read+0x16>
 80062c0:	200a      	movs	r0, #10
 80062c2:	e7ea      	b.n	800629a <_read+0x1a>
            if (!(is_lf && prev_was_cr))
 80062c4:	783a      	ldrb	r2, [r7, #0]
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d0e7      	beq.n	800629a <_read+0x1a>
        while (i < len && serial_.BytesAvailable())
 80062ca:	42b4      	cmp	r4, r6
            prev_was_cr = is_cr;
 80062cc:	703b      	strb	r3, [r7, #0]
        while (i < len && serial_.BytesAvailable())
 80062ce:	dbea      	blt.n	80062a6 <_read+0x26>
        }

        return i;
 80062d0:	4620      	mov	r0, r4
    }

    errno = ENOENT;
    return -1;
}
 80062d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 80062d6:	f003 f935 	bl	8009544 <__errno>
 80062da:	2202      	movs	r2, #2
 80062dc:	4603      	mov	r3, r0
    return -1;
 80062de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 80062e2:	601a      	str	r2, [r3, #0]
    return -1;
 80062e4:	e7f5      	b.n	80062d2 <_read+0x52>
 80062e6:	bf00      	nop
 80062e8:	200112a8 	.word	0x200112a8
 80062ec:	2001129d 	.word	0x2001129d

080062f0 <_write>:
extern "C"
int _write(int file, char* ptr, int len)
{
    static char prev = '\0';

    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80062f0:	1e43      	subs	r3, r0, #1
 80062f2:	2b01      	cmp	r3, #1
{
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (file == STDOUT_FILENO || file == STDERR_FILENO)
 80062f8:	d822      	bhi.n	8006340 <_write+0x50>
    {
        for (int i = 0; i < len; i++)
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	4690      	mov	r8, r2
 80062fe:	dd1c      	ble.n	800633a <_write+0x4a>
 8006300:	1e4c      	subs	r4, r1, #1
 8006302:	4e13      	ldr	r6, [pc, #76]	@ (8006350 <_write+0x60>)
        {
            if (ptr[i] == '\n' && prev != '\r')
            {
                serial_.Write('\r', true);
 8006304:	4d13      	ldr	r5, [pc, #76]	@ (8006354 <_write+0x64>)
 8006306:	18a7      	adds	r7, r4, r2
 8006308:	e008      	b.n	800631c <_write+0x2c>
            }

            serial_.Write(ptr[i], true);
 800630a:	4619      	mov	r1, r3
 800630c:	2201      	movs	r2, #1
 800630e:	4628      	mov	r0, r5
 8006310:	f7ff fbb0 	bl	8005a74 <recorder::Serial::Write(unsigned char, bool)>
            prev = ptr[i];
 8006314:	7823      	ldrb	r3, [r4, #0]
        for (int i = 0; i < len; i++)
 8006316:	42bc      	cmp	r4, r7
            prev = ptr[i];
 8006318:	7033      	strb	r3, [r6, #0]
        for (int i = 0; i < len; i++)
 800631a:	d00e      	beq.n	800633a <_write+0x4a>
            if (ptr[i] == '\n' && prev != '\r')
 800631c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006320:	2b0a      	cmp	r3, #10
 8006322:	d1f2      	bne.n	800630a <_write+0x1a>
 8006324:	f896 c000 	ldrb.w	ip, [r6]
                serial_.Write('\r', true);
 8006328:	210d      	movs	r1, #13
 800632a:	2201      	movs	r2, #1
 800632c:	4628      	mov	r0, r5
            if (ptr[i] == '\n' && prev != '\r')
 800632e:	458c      	cmp	ip, r1
 8006330:	d0eb      	beq.n	800630a <_write+0x1a>
                serial_.Write('\r', true);
 8006332:	f7ff fb9f 	bl	8005a74 <recorder::Serial::Write(unsigned char, bool)>
            serial_.Write(ptr[i], true);
 8006336:	7823      	ldrb	r3, [r4, #0]
 8006338:	e7e7      	b.n	800630a <_write+0x1a>
        }

        return len;
 800633a:	4640      	mov	r0, r8
    }

    errno = ENOENT;
    return -1;
}
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errno = ENOENT;
 8006340:	f003 f900 	bl	8009544 <__errno>
 8006344:	2202      	movs	r2, #2
 8006346:	4603      	mov	r3, r0
    return -1;
 8006348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOENT;
 800634c:	601a      	str	r2, [r3, #0]
    return -1;
 800634e:	e7f5      	b.n	800633c <_write+0x4c>
 8006350:	2001129c 	.word	0x2001129c
 8006354:	200112a8 	.word	0x200112a8

08006358 <_GLOBAL__sub_I_TickHandler>:
      __atomic_base() noexcept = default;
 8006358:	4b03      	ldr	r3, [pc, #12]	@ (8006368 <_GLOBAL__sub_I_TickHandler+0x10>)
 800635a:	2000      	movs	r0, #0
 800635c:	2100      	movs	r1, #0
 800635e:	e9c3 0100 	strd	r0, r1, [r3]
 8006362:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48

}
 8006366:	4770      	bx	lr
 8006368:	200112a8 	.word	0x200112a8

0800636c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 800636c:	e7fe      	b.n	800636c <Default_Handler>
 800636e:	bf00      	nop

08006370 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8006370:	480b      	ldr	r0, [pc, #44]	@ (80063a0 <Reset_Handler+0x30>)
 8006372:	4a0c      	ldr	r2, [pc, #48]	@ (80063a4 <Reset_Handler+0x34>)
 8006374:	4290      	cmp	r0, r2
 8006376:	d003      	beq.n	8006380 <Reset_Handler+0x10>
		*pDest = *pSource;
 8006378:	1a12      	subs	r2, r2, r0
 800637a:	490b      	ldr	r1, [pc, #44]	@ (80063a8 <Reset_Handler+0x38>)
 800637c:	f003 f90f 	bl	800959e <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8006380:	480a      	ldr	r0, [pc, #40]	@ (80063ac <Reset_Handler+0x3c>)
 8006382:	4a0b      	ldr	r2, [pc, #44]	@ (80063b0 <Reset_Handler+0x40>)
 8006384:	4290      	cmp	r0, r2
 8006386:	d003      	beq.n	8006390 <Reset_Handler+0x20>
		*pDest = 0;
 8006388:	1a12      	subs	r2, r2, r0
 800638a:	2100      	movs	r1, #0
 800638c:	f003 f8d1 	bl	8009532 <memset>
	SystemInit();
 8006390:	f000 f810 	bl	80063b4 <SystemInit>
	__libc_init_array();
 8006394:	f003 f8dc 	bl	8009550 <__libc_init_array>
	(void)main();
 8006398:	f7fd f91e 	bl	80035d8 <main>
	for (;;) ;
 800639c:	e7fe      	b.n	800639c <Reset_Handler+0x2c>
 800639e:	bf00      	nop
 80063a0:	20000000 	.word	0x20000000
 80063a4:	2000008c 	.word	0x2000008c
 80063a8:	0800ad2c 	.word	0x0800ad2c
 80063ac:	20000400 	.word	0x20000400
 80063b0:	2001154c 	.word	0x2001154c

080063b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80063b4:	b410      	push	{r4}
    __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

/* FPU settings ------------------------------------------------------------*/
#if(__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10 * 2))
 80063b6:	4c1a      	ldr	r4, [pc, #104]	@ (8006420 <SystemInit+0x6c>)
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= RCC_CR_HSION;

    /* Reset CFGR register */
    RCC->CFGR = 0x00000000;
 80063b8:	2200      	movs	r2, #0
    RCC->CR |= RCC_CR_HSION;
 80063ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006424 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10 * 2))
 80063bc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88

    /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
    RCC->CR &= 0xEAF6ED7FU;
 80063c0:	4919      	ldr	r1, [pc, #100]	@ (8006428 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10 * 2))
 80063c2:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
 80063c6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
    RCC->CR |= RCC_CR_HSION;
 80063ca:	6818      	ldr	r0, [r3, #0]
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
    /* dual core CM7 or single core line */
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80063cc:	4c17      	ldr	r4, [pc, #92]	@ (800642c <SystemInit+0x78>)
    RCC->CR |= RCC_CR_HSION;
 80063ce:	f040 0001 	orr.w	r0, r0, #1
 80063d2:	6018      	str	r0, [r3, #0]
    RCC->CFGR = 0x00000000;
 80063d4:	611a      	str	r2, [r3, #16]
    RCC->CR &= 0xEAF6ED7FU;
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	4001      	ands	r1, r0
 80063da:	6019      	str	r1, [r3, #0]
    RCC->D1CFGR = 0x00000000;
 80063dc:	619a      	str	r2, [r3, #24]
    RCC->D2CFGR = 0x00000000;
 80063de:	61da      	str	r2, [r3, #28]
    RCC->D3CFGR = 0x00000000;
 80063e0:	621a      	str	r2, [r3, #32]
    RCC->PLLCKSELR = 0x00000000;
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28
    RCC->PLLCFGR = 0x00000000;
 80063e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->PLL1DIVR = 0x00000000;
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
    RCC->PLL1FRACR = 0x00000000;
 80063e8:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->PLL2DIVR = 0x00000000;
 80063ea:	639a      	str	r2, [r3, #56]	@ 0x38
    RCC->PLL2FRACR = 0x00000000;
 80063ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    RCC->PLL3DIVR = 0x00000000;
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40
    RCC->PLL3FRACR = 0x00000000;
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    RCC->CR &= 0xFFFBFFFFU;
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80063f8:	6019      	str	r1, [r3, #0]
    RCC->CIER = 0x00000000;
 80063fa:	661a      	str	r2, [r3, #96]	@ 0x60
    if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f36f 030f 	bfc	r3, #0, #16
 8006402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006406:	d203      	bcs.n	8006410 <SystemInit+0x5c>
    {
        /* if stm32h7 revY*/
        /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
        *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <SystemInit+0x7c>)
 800640a:	2201      	movs	r2, #1
 800640c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    SCB->VTOR
        = D1_AXISRAM_BASE
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
    SCB->VTOR
        = FLASH_BANK1_BASE
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <SystemInit+0x6c>)
 8006412:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
          | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006416:	f85d 4b04 	ldr.w	r4, [sp], #4
        = FLASH_BANK1_BASE
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	58024400 	.word	0x58024400
 8006428:	eaf6ed7f 	.word	0xeaf6ed7f
 800642c:	5c001000 	.word	0x5c001000
 8006430:	51008000 	.word	0x51008000

08006434 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006434:	4b01      	ldr	r3, [pc, #4]	@ (800643c <HAL_GetTick+0x8>)
 8006436:	6818      	ldr	r0, [r3, #0]
}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	200113f8 	.word	0x200113f8

08006440 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006440:	4b01      	ldr	r3, [pc, #4]	@ (8006448 <HAL_GetREVID+0x8>)
 8006442:	6818      	ldr	r0, [r3, #0]
}
 8006444:	0c00      	lsrs	r0, r0, #16
 8006446:	4770      	bx	lr
 8006448:	5c001000 	.word	0x5c001000

0800644c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during Domain1 SLEEP mode
  * @retval None
  */
void HAL_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
 800644c:	4a02      	ldr	r2, [pc, #8]	@ (8006458 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 800644e:	6853      	ldr	r3, [r2, #4]
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	6053      	str	r3, [r2, #4]
}
 8006456:	4770      	bx	lr
 8006458:	5c001000 	.word	0x5c001000

0800645c <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during Domain1 STOP mode
  * @retval None
  */
void HAL_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
 800645c:	4a02      	ldr	r2, [pc, #8]	@ (8006468 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800645e:	6853      	ldr	r3, [r2, #4]
 8006460:	f023 0302 	bic.w	r3, r3, #2
 8006464:	6053      	str	r3, [r2, #4]
}
 8006466:	4770      	bx	lr
 8006468:	5c001000 	.word	0x5c001000

0800646c <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during Domain1 STANDBY mode
  * @retval None
  */
void HAL_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
 800646c:	4a02      	ldr	r2, [pc, #8]	@ (8006478 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800646e:	6853      	ldr	r3, [r2, #4]
 8006470:	f023 0304 	bic.w	r3, r3, #4
 8006474:	6053      	str	r3, [r2, #4]
}
 8006476:	4770      	bx	lr
 8006478:	5c001000 	.word	0x5c001000

0800647c <HAL_PWR_EnterSLEEPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800647c:	4a05      	ldr	r2, [pc, #20]	@ (8006494 <HAL_PWR_EnterSLEEPMode+0x18>)

  /* Select SLEEP mode entry */
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800647e:	2901      	cmp	r1, #1
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006480:	6913      	ldr	r3, [r2, #16]
 8006482:	f023 0304 	bic.w	r3, r3, #4
 8006486:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006488:	d001      	beq.n	800648e <HAL_PWR_EnterSLEEPMode+0x12>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 800648a:	bf20      	wfe
  }
}
 800648c:	4770      	bx	lr
    __WFI();
 800648e:	bf30      	wfi
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006498:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 800649a:	4b11      	ldr	r3, [pc, #68]	@ (80064e0 <HAL_PWREx_ConfigSupply+0x48>)
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	0752      	lsls	r2, r2, #29
 80064a0:	d404      	bmi.n	80064ac <HAL_PWREx_ConfigSupply+0x14>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	4283      	cmp	r3, r0
 80064aa:	d114      	bne.n	80064d6 <HAL_PWREx_ConfigSupply+0x3e>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064ac:	4c0c      	ldr	r4, [pc, #48]	@ (80064e0 <HAL_PWREx_ConfigSupply+0x48>)
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	4303      	orrs	r3, r0
 80064b6:	60e3      	str	r3, [r4, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064b8:	f7ff ffbc 	bl	8006434 <HAL_GetTick>
 80064bc:	4605      	mov	r5, r0

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80064be:	e005      	b.n	80064cc <HAL_PWREx_ConfigSupply+0x34>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80064c0:	f7ff ffb8 	bl	8006434 <HAL_GetTick>
 80064c4:	1b40      	subs	r0, r0, r5
 80064c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80064ca:	d806      	bhi.n	80064da <HAL_PWREx_ConfigSupply+0x42>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	049b      	lsls	r3, r3, #18
 80064d0:	d5f6      	bpl.n	80064c0 <HAL_PWREx_ConfigSupply+0x28>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80064d2:	2000      	movs	r0, #0
}
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80064d6:	2001      	movs	r0, #1
}
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80064da:	2003      	movs	r0, #3
}
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	58024800 	.word	0x58024800

080064e4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f000 8283 	beq.w	80069f0 <HAL_RCC_OscConfig+0x50c>
{
 80064ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ec:	6803      	ldr	r3, [r0, #0]
 80064ee:	4604      	mov	r4, r0
 80064f0:	07d8      	lsls	r0, r3, #31
 80064f2:	d530      	bpl.n	8006556 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f4:	499f      	ldr	r1, [pc, #636]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 80064f6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064fa:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064fe:	2a10      	cmp	r2, #16
 8006500:	f000 8100 	beq.w	8006704 <HAL_RCC_OscConfig+0x220>
 8006504:	2a18      	cmp	r2, #24
 8006506:	f000 80f8 	beq.w	80066fa <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	f000 8120 	beq.w	8006754 <HAL_RCC_OscConfig+0x270>
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 815e 	beq.w	80067d6 <HAL_RCC_OscConfig+0x2f2>
 800651a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800651e:	4b95      	ldr	r3, [pc, #596]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	f000 822d 	beq.w	8006980 <HAL_RCC_OscConfig+0x49c>
 8006526:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006532:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7ff ff7e 	bl	8006434 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006538:	4e8e      	ldr	r6, [pc, #568]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800653a:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800653e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006540:	e005      	b.n	800654e <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006542:	f7ff ff77 	bl	8006434 <HAL_GetTick>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	42b8      	cmp	r0, r7
 800654a:	f200 8142 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800654e:	6833      	ldr	r3, [r6, #0]
 8006550:	039a      	lsls	r2, r3, #14
 8006552:	d5f6      	bpl.n	8006542 <HAL_RCC_OscConfig+0x5e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	079d      	lsls	r5, r3, #30
 8006558:	f100 8085 	bmi.w	8006666 <HAL_RCC_OscConfig+0x182>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800655c:	06d9      	lsls	r1, r3, #27
 800655e:	d52f      	bpl.n	80065c0 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006560:	4a84      	ldr	r2, [pc, #528]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006562:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006564:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800656a:	2b08      	cmp	r3, #8
 800656c:	f000 80da 	beq.w	8006724 <HAL_RCC_OscConfig+0x240>
 8006570:	2b18      	cmp	r3, #24
 8006572:	f000 80d2 	beq.w	800671a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006576:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006578:	4d7e      	ldr	r5, [pc, #504]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8165 	beq.w	800684a <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_CSI_ENABLE();
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006586:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7ff ff54 	bl	8006434 <HAL_GetTick>
 800658c:	4606      	mov	r6, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800658e:	e005      	b.n	800659c <HAL_RCC_OscConfig+0xb8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006590:	f7ff ff50 	bl	8006434 <HAL_GetTick>
 8006594:	1b80      	subs	r0, r0, r6
 8006596:	2802      	cmp	r0, #2
 8006598:	f200 811b 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	05db      	lsls	r3, r3, #23
 80065a0:	d5f6      	bpl.n	8006590 <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065a2:	f7ff ff4d 	bl	8006440 <HAL_GetREVID>
 80065a6:	f241 0303 	movw	r3, #4099	@ 0x1003
 80065aa:	4298      	cmp	r0, r3
 80065ac:	f200 8209 	bhi.w	80069c2 <HAL_RCC_OscConfig+0x4de>
 80065b0:	686b      	ldr	r3, [r5, #4]
 80065b2:	6a22      	ldr	r2, [r4, #32]
 80065b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80065b8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80065bc:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	071d      	lsls	r5, r3, #28
 80065c2:	d516      	bpl.n	80065f2 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c4:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c6:	4d6b      	ldr	r5, [pc, #428]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 811c 	beq.w	8006806 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 80065ce:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	676b      	str	r3, [r5, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d6:	f7ff ff2d 	bl	8006434 <HAL_GetTick>
 80065da:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065dc:	e005      	b.n	80065ea <HAL_RCC_OscConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065de:	f7ff ff29 	bl	8006434 <HAL_GetTick>
 80065e2:	1b80      	subs	r0, r0, r6
 80065e4:	2802      	cmp	r0, #2
 80065e6:	f200 80f4 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ea:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80065ec:	0798      	lsls	r0, r3, #30
 80065ee:	d5f6      	bpl.n	80065de <HAL_RCC_OscConfig+0xfa>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	069a      	lsls	r2, r3, #26
 80065f4:	d516      	bpl.n	8006624 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065f6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065f8:	4d5e      	ldr	r5, [pc, #376]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8114 	beq.w	8006828 <HAL_RCC_OscConfig+0x344>
      __HAL_RCC_HSI48_ENABLE();
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006606:	602b      	str	r3, [r5, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006608:	f7ff ff14 	bl	8006434 <HAL_GetTick>
 800660c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800660e:	e005      	b.n	800661c <HAL_RCC_OscConfig+0x138>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006610:	f7ff ff10 	bl	8006434 <HAL_GetTick>
 8006614:	1b80      	subs	r0, r0, r6
 8006616:	2802      	cmp	r0, #2
 8006618:	f200 80db 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	049f      	lsls	r7, r3, #18
 8006620:	d5f6      	bpl.n	8006610 <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	0759      	lsls	r1, r3, #29
 8006626:	f100 809b 	bmi.w	8006760 <HAL_RCC_OscConfig+0x27c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800662a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800662c:	b1cb      	cbz	r3, 8006662 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800662e:	4d51      	ldr	r5, [pc, #324]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006630:	692a      	ldr	r2, [r5, #16]
 8006632:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8006636:	2a18      	cmp	r2, #24
 8006638:	d06d      	beq.n	8006716 <HAL_RCC_OscConfig+0x232>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800663a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006642:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006644:	f000 8137 	beq.w	80068b6 <HAL_RCC_OscConfig+0x3d2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7ff fef4 	bl	8006434 <HAL_GetTick>
 800664c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800664e:	e005      	b.n	800665c <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006650:	f7ff fef0 	bl	8006434 <HAL_GetTick>
 8006654:	1b00      	subs	r0, r0, r4
 8006656:	2802      	cmp	r0, #2
 8006658:	f200 80bb 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	019b      	lsls	r3, r3, #6
 8006660:	d4f6      	bmi.n	8006650 <HAL_RCC_OscConfig+0x16c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006662:	2000      	movs	r0, #0
}
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006666:	4a43      	ldr	r2, [pc, #268]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006668:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800666a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800666c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8006670:	d129      	bne.n	80066c6 <HAL_RCC_OscConfig+0x1e2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006672:	4b40      	ldr	r3, [pc, #256]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006674:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	0759      	lsls	r1, r3, #29
 800667a:	d501      	bpl.n	8006680 <HAL_RCC_OscConfig+0x19c>
 800667c:	2a00      	cmp	r2, #0
 800667e:	d04a      	beq.n	8006716 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006680:	4d3c      	ldr	r5, [pc, #240]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	f023 0319 	bic.w	r3, r3, #25
 8006688:	4313      	orrs	r3, r2
 800668a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800668c:	f7ff fed2 	bl	8006434 <HAL_GetTick>
 8006690:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006692:	e005      	b.n	80066a0 <HAL_RCC_OscConfig+0x1bc>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006694:	f7ff fece 	bl	8006434 <HAL_GetTick>
 8006698:	1b80      	subs	r0, r0, r6
 800669a:	2802      	cmp	r0, #2
 800669c:	f200 8099 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	075b      	lsls	r3, r3, #29
 80066a4:	d5f6      	bpl.n	8006694 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a6:	f7ff fecb 	bl	8006440 <HAL_GetREVID>
 80066aa:	f241 0303 	movw	r3, #4099	@ 0x1003
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	4298      	cmp	r0, r3
 80066b2:	686b      	ldr	r3, [r5, #4]
 80066b4:	f200 80f0 	bhi.w	8006898 <HAL_RCC_OscConfig+0x3b4>
 80066b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80066bc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80066c0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	e74a      	b.n	800655c <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066c6:	2b18      	cmp	r3, #24
 80066c8:	f000 80e2 	beq.w	8006890 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066cc:	4d29      	ldr	r5, [pc, #164]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ce:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066d0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	f000 80cb 	beq.w	800686e <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066d8:	f023 0319 	bic.w	r3, r3, #25
 80066dc:	4313      	orrs	r3, r2
 80066de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80066e0:	f7ff fea8 	bl	8006434 <HAL_GetTick>
 80066e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066e6:	e004      	b.n	80066f2 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e8:	f7ff fea4 	bl	8006434 <HAL_GetTick>
 80066ec:	1b80      	subs	r0, r0, r6
 80066ee:	2802      	cmp	r0, #2
 80066f0:	d86f      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	075f      	lsls	r7, r3, #29
 80066f6:	d5f7      	bpl.n	80066e8 <HAL_RCC_OscConfig+0x204>
 80066f8:	e7d5      	b.n	80066a6 <HAL_RCC_OscConfig+0x1c2>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066fa:	f001 0103 	and.w	r1, r1, #3
 80066fe:	2902      	cmp	r1, #2
 8006700:	f47f af03 	bne.w	800650a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	4a1b      	ldr	r2, [pc, #108]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	0391      	lsls	r1, r2, #14
 800670a:	f57f af24 	bpl.w	8006556 <HAL_RCC_OscConfig+0x72>
 800670e:	6862      	ldr	r2, [r4, #4]
 8006710:	2a00      	cmp	r2, #0
 8006712:	f47f af20 	bne.w	8006556 <HAL_RCC_OscConfig+0x72>
    return HAL_ERROR;
 8006716:	2001      	movs	r0, #1
}
 8006718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800671a:	f002 0203 	and.w	r2, r2, #3
 800671e:	2a01      	cmp	r2, #1
 8006720:	f47f af29 	bne.w	8006576 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006724:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	05da      	lsls	r2, r3, #23
 800672a:	d502      	bpl.n	8006732 <HAL_RCC_OscConfig+0x24e>
 800672c:	69e3      	ldr	r3, [r4, #28]
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	d1f1      	bne.n	8006716 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006732:	f7ff fe85 	bl	8006440 <HAL_GetREVID>
 8006736:	f241 0303 	movw	r3, #4099	@ 0x1003
 800673a:	4a0e      	ldr	r2, [pc, #56]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 800673c:	4298      	cmp	r0, r3
 800673e:	6a21      	ldr	r1, [r4, #32]
 8006740:	f200 80b1 	bhi.w	80068a6 <HAL_RCC_OscConfig+0x3c2>
 8006744:	6853      	ldr	r3, [r2, #4]
 8006746:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800674a:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800674e:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	e735      	b.n	80065c0 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006754:	4a07      	ldr	r2, [pc, #28]	@ (8006774 <HAL_RCC_OscConfig+0x290>)
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800675e:	e6e9      	b.n	8006534 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8006760:	4d05      	ldr	r5, [pc, #20]	@ (8006778 <HAL_RCC_OscConfig+0x294>)
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006768:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800676a:	f7ff fe63 	bl	8006434 <HAL_GetTick>
 800676e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006770:	e009      	b.n	8006786 <HAL_RCC_OscConfig+0x2a2>
 8006772:	bf00      	nop
 8006774:	58024400 	.word	0x58024400
 8006778:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800677c:	f7ff fe5a 	bl	8006434 <HAL_GetTick>
 8006780:	1b80      	subs	r0, r0, r6
 8006782:	2864      	cmp	r0, #100	@ 0x64
 8006784:	d825      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	05da      	lsls	r2, r3, #23
 800678a:	d5f7      	bpl.n	800677c <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800678c:	68a3      	ldr	r3, [r4, #8]
 800678e:	2b01      	cmp	r3, #1
 8006790:	f000 8120 	beq.w	80069d4 <HAL_RCC_OscConfig+0x4f0>
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80fb 	beq.w	8006990 <HAL_RCC_OscConfig+0x4ac>
 800679a:	2b05      	cmp	r3, #5
 800679c:	4b95      	ldr	r3, [pc, #596]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
 800679e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067a0:	f000 811e 	beq.w	80069e0 <HAL_RCC_OscConfig+0x4fc>
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80067aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067ac:	f022 0204 	bic.w	r2, r2, #4
 80067b0:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80067b2:	f7ff fe3f 	bl	8006434 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067b6:	4e8f      	ldr	r6, [pc, #572]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067b8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80067bc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067be:	e004      	b.n	80067ca <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c0:	f7ff fe38 	bl	8006434 <HAL_GetTick>
 80067c4:	1b40      	subs	r0, r0, r5
 80067c6:	42b8      	cmp	r0, r7
 80067c8:	d803      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067ca:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80067cc:	079b      	lsls	r3, r3, #30
 80067ce:	d5f7      	bpl.n	80067c0 <HAL_RCC_OscConfig+0x2dc>
 80067d0:	e72b      	b.n	800662a <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 80067d2:	2003      	movs	r0, #3
}
 80067d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d6:	4d87      	ldr	r5, [pc, #540]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d8:	f241 3788 	movw	r7, #5000	@ 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80067ec:	f7ff fe22 	bl	8006434 <HAL_GetTick>
 80067f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067f2:	e004      	b.n	80067fe <HAL_RCC_OscConfig+0x31a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f4:	f7ff fe1e 	bl	8006434 <HAL_GetTick>
 80067f8:	1b80      	subs	r0, r0, r6
 80067fa:	42b8      	cmp	r0, r7
 80067fc:	d8e9      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	039b      	lsls	r3, r3, #14
 8006802:	d4f7      	bmi.n	80067f4 <HAL_RCC_OscConfig+0x310>
 8006804:	e6a6      	b.n	8006554 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_LSI_DISABLE();
 8006806:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800680e:	f7ff fe11 	bl	8006434 <HAL_GetTick>
 8006812:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006814:	e004      	b.n	8006820 <HAL_RCC_OscConfig+0x33c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006816:	f7ff fe0d 	bl	8006434 <HAL_GetTick>
 800681a:	1b80      	subs	r0, r0, r6
 800681c:	2802      	cmp	r0, #2
 800681e:	d8d8      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006820:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006822:	0799      	lsls	r1, r3, #30
 8006824:	d4f7      	bmi.n	8006816 <HAL_RCC_OscConfig+0x332>
 8006826:	e6e3      	b.n	80065f0 <HAL_RCC_OscConfig+0x10c>
      __HAL_RCC_HSI48_DISABLE();
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800682e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006830:	f7ff fe00 	bl	8006434 <HAL_GetTick>
 8006834:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006836:	e004      	b.n	8006842 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006838:	f7ff fdfc 	bl	8006434 <HAL_GetTick>
 800683c:	1b80      	subs	r0, r0, r6
 800683e:	2802      	cmp	r0, #2
 8006840:	d8c7      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	0498      	lsls	r0, r3, #18
 8006846:	d4f7      	bmi.n	8006838 <HAL_RCC_OscConfig+0x354>
 8006848:	e6eb      	b.n	8006622 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_CSI_DISABLE();
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006850:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006852:	f7ff fdef 	bl	8006434 <HAL_GetTick>
 8006856:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006858:	e004      	b.n	8006864 <HAL_RCC_OscConfig+0x380>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800685a:	f7ff fdeb 	bl	8006434 <HAL_GetTick>
 800685e:	1b80      	subs	r0, r0, r6
 8006860:	2802      	cmp	r0, #2
 8006862:	d8b6      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	05df      	lsls	r7, r3, #23
 8006868:	d4f7      	bmi.n	800685a <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	e6a8      	b.n	80065c0 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006874:	f7ff fdde 	bl	8006434 <HAL_GetTick>
 8006878:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800687a:	e004      	b.n	8006886 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800687c:	f7ff fdda 	bl	8006434 <HAL_GetTick>
 8006880:	1b80      	subs	r0, r0, r6
 8006882:	2802      	cmp	r0, #2
 8006884:	d8a5      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	0758      	lsls	r0, r3, #29
 800688a:	d4f7      	bmi.n	800687c <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	e665      	b.n	800655c <HAL_RCC_OscConfig+0x78>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006890:	0790      	lsls	r0, r2, #30
 8006892:	f47f af1b 	bne.w	80066cc <HAL_RCC_OscConfig+0x1e8>
 8006896:	e6ec      	b.n	8006672 <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006898:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800689c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80068a0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	e65a      	b.n	800655c <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068a6:	68d3      	ldr	r3, [r2, #12]
 80068a8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80068ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80068b0:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	e684      	b.n	80065c0 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 80068b6:	f7ff fdbd 	bl	8006434 <HAL_GetTick>
 80068ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068bc:	e004      	b.n	80068c8 <HAL_RCC_OscConfig+0x3e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068be:	f7ff fdb9 	bl	8006434 <HAL_GetTick>
 80068c2:	1b80      	subs	r0, r0, r6
 80068c4:	2802      	cmp	r0, #2
 80068c6:	d884      	bhi.n	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	0199      	lsls	r1, r3, #6
 80068cc:	d4f7      	bmi.n	80068be <HAL_RCC_OscConfig+0x3da>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ce:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80068d0:	4b49      	ldr	r3, [pc, #292]	@ (80069f8 <HAL_RCC_OscConfig+0x514>)
 80068d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80068d4:	400b      	ands	r3, r1
 80068d6:	4313      	orrs	r3, r2
 80068d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80068de:	62ab      	str	r3, [r5, #40]	@ 0x28
 80068e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80068e2:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80068e6:	3901      	subs	r1, #1
 80068e8:	3b01      	subs	r3, #1
 80068ea:	3a01      	subs	r2, #1
 80068ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80068f0:	025b      	lsls	r3, r3, #9
 80068f2:	0412      	lsls	r2, r2, #16
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80068fa:	4313      	orrs	r3, r2
 80068fc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80068fe:	3a01      	subs	r2, #1
 8006900:	430b      	orrs	r3, r1
 8006902:	0612      	lsls	r2, r2, #24
 8006904:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006908:	4313      	orrs	r3, r2
 800690a:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800690c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800690e:	f023 0301 	bic.w	r3, r3, #1
 8006912:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006914:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006916:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8006918:	f36f 03cf 	bfc	r3, #3, #13
 800691c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006920:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006922:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006924:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006926:	f023 030c 	bic.w	r3, r3, #12
 800692a:	4313      	orrs	r3, r2
 800692c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800692e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006930:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006932:	f023 0302 	bic.w	r3, r3, #2
 8006936:	4313      	orrs	r3, r2
 8006938:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800693a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800693c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006940:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006942:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006948:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800694a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800694c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006950:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006952:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006960:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006962:	f7ff fd67 	bl	8006434 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006966:	4d23      	ldr	r5, [pc, #140]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
        tickstart = HAL_GetTick();
 8006968:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800696a:	e005      	b.n	8006978 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800696c:	f7ff fd62 	bl	8006434 <HAL_GetTick>
 8006970:	1b00      	subs	r0, r0, r4
 8006972:	2802      	cmp	r0, #2
 8006974:	f63f af2d 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	019a      	lsls	r2, r3, #6
 800697c:	d5f6      	bpl.n	800696c <HAL_RCC_OscConfig+0x488>
 800697e:	e670      	b.n	8006662 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006980:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800698c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698e:	e5d1      	b.n	8006534 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006990:	4d18      	ldr	r5, [pc, #96]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006992:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006996:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	672b      	str	r3, [r5, #112]	@ 0x70
 800699e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80069a0:	f023 0304 	bic.w	r3, r3, #4
 80069a4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80069a6:	f7ff fd45 	bl	8006434 <HAL_GetTick>
 80069aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ac:	e005      	b.n	80069ba <HAL_RCC_OscConfig+0x4d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7ff fd41 	bl	8006434 <HAL_GetTick>
 80069b2:	1b80      	subs	r0, r0, r6
 80069b4:	42b8      	cmp	r0, r7
 80069b6:	f63f af0c 	bhi.w	80067d2 <HAL_RCC_OscConfig+0x2ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80069bc:	0798      	lsls	r0, r3, #30
 80069be:	d4f6      	bmi.n	80069ae <HAL_RCC_OscConfig+0x4ca>
 80069c0:	e633      	b.n	800662a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069c2:	68eb      	ldr	r3, [r5, #12]
 80069c4:	6a22      	ldr	r2, [r4, #32]
 80069c6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80069ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80069ce:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	e5f5      	b.n	80065c0 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d4:	4a07      	ldr	r2, [pc, #28]	@ (80069f4 <HAL_RCC_OscConfig+0x510>)
 80069d6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069de:	e6e8      	b.n	80067b2 <HAL_RCC_OscConfig+0x2ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e0:	f042 0204 	orr.w	r2, r2, #4
 80069e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80069e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ee:	e6e0      	b.n	80067b2 <HAL_RCC_OscConfig+0x2ce>
    return HAL_ERROR;
 80069f0:	2001      	movs	r0, #1
}
 80069f2:	4770      	bx	lr
 80069f4:	58024400 	.word	0x58024400
 80069f8:	fffffc0c 	.word	0xfffffc0c

080069fc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069fc:	4a3f      	ldr	r2, [pc, #252]	@ (8006afc <HAL_RCC_GetSysClockFreq+0x100>)
 80069fe:	6913      	ldr	r3, [r2, #16]
 8006a00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d04f      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8006a08:	2b18      	cmp	r3, #24
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCC_GetSysClockFreq+0x26>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d14d      	bne.n	8006aac <HAL_RCC_GetSysClockFreq+0xb0>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	0699      	lsls	r1, r3, #26
 8006a14:	d54c      	bpl.n	8006ab0 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	4839      	ldr	r0, [pc, #228]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a1a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a1e:	40d8      	lsrs	r0, r3
 8006a20:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a22:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8006a24:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a26:	6a94      	ldr	r4, [r2, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a28:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8006a2a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a2e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a30:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8006a34:	d036      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xa8>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a36:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a3a:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a3e:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a42:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a46:	fb05 f303 	mul.w	r3, r5, r3
 8006a4a:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a50:	ee06 3a90 	vmov	s13, r3
 8006a54:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8006a58:	d002      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x64>
 8006a5a:	2902      	cmp	r1, #2
 8006a5c:	d048      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0xf4>
 8006a5e:	b349      	cbz	r1, 8006ab4 <HAL_RCC_GetSysClockFreq+0xb8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a60:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006b04 <HAL_RCC_GetSysClockFreq+0x108>
 8006a64:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006a68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a10 	vmov	s14, r3
 8006a72:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006a76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a7a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006a7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006a82:	ee27 7a06 	vmul.f32	s14, s14, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a86:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_RCC_GetSysClockFreq+0x100>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006a8e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006aa4:	bc30      	pop	{r4, r5}
 8006aa6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aa8:	4817      	ldr	r0, [pc, #92]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006aaa:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8006aac:	4817      	ldr	r0, [pc, #92]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8006aae:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ab0:	4813      	ldr	r0, [pc, #76]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8006ab2:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	069b      	lsls	r3, r3, #26
 8006ab8:	d51d      	bpl.n	8006af6 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aba:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ac0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac2:	490f      	ldr	r1, [pc, #60]	@ (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ac4:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006acc:	40d1      	lsrs	r1, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ace:	ee06 3a10 	vmov	s12, r3
 8006ad2:	ee05 1a90 	vmov	s11, r1
 8006ad6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006ada:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006ade:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006ae2:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006ae6:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aee:	e7ca      	b.n	8006a86 <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006b10 <HAL_RCC_GetSysClockFreq+0x114>
 8006af4:	e7b6      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x68>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006b14 <HAL_RCC_GetSysClockFreq+0x118>
 8006afa:	e7b3      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x68>
 8006afc:	58024400 	.word	0x58024400
 8006b00:	03d09000 	.word	0x03d09000
 8006b04:	4a742400 	.word	0x4a742400
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	003d0900 	.word	0x003d0900
 8006b10:	4b742400 	.word	0x4b742400
 8006b14:	4c742400 	.word	0x4c742400

08006b18 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	f000 8104 	beq.w	8006d26 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1e:	4a88      	ldr	r2, [pc, #544]	@ (8006d40 <HAL_RCC_ClockConfig+0x228>)
 8006b20:	6813      	ldr	r3, [r2, #0]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	428b      	cmp	r3, r1
{
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b30:	d20c      	bcs.n	8006b4c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	f023 030f 	bic.w	r3, r3, #15
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3c:	6813      	ldr	r3, [r2, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	428b      	cmp	r3, r1
 8006b44:	d002      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006b46:	2001      	movs	r0, #1
}
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	0758      	lsls	r0, r3, #29
 8006b50:	d50b      	bpl.n	8006b6a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b52:	497c      	ldr	r1, [pc, #496]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006b54:	6920      	ldr	r0, [r4, #16]
 8006b56:	698a      	ldr	r2, [r1, #24]
 8006b58:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006b5c:	4290      	cmp	r0, r2
 8006b5e:	d904      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b60:	698a      	ldr	r2, [r1, #24]
 8006b62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b66:	4302      	orrs	r2, r0
 8006b68:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6a:	0719      	lsls	r1, r3, #28
 8006b6c:	d50b      	bpl.n	8006b86 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b6e:	4975      	ldr	r1, [pc, #468]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006b70:	6960      	ldr	r0, [r4, #20]
 8006b72:	69ca      	ldr	r2, [r1, #28]
 8006b74:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006b78:	4290      	cmp	r0, r2
 8006b7a:	d904      	bls.n	8006b86 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b7c:	69ca      	ldr	r2, [r1, #28]
 8006b7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b82:	4302      	orrs	r2, r0
 8006b84:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b86:	06da      	lsls	r2, r3, #27
 8006b88:	d50b      	bpl.n	8006ba2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b8a:	496e      	ldr	r1, [pc, #440]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006b8c:	69a0      	ldr	r0, [r4, #24]
 8006b8e:	69ca      	ldr	r2, [r1, #28]
 8006b90:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006b94:	4290      	cmp	r0, r2
 8006b96:	d904      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b98:	69ca      	ldr	r2, [r1, #28]
 8006b9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b9e:	4302      	orrs	r2, r0
 8006ba0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ba2:	069f      	lsls	r7, r3, #26
 8006ba4:	d50b      	bpl.n	8006bbe <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ba6:	4967      	ldr	r1, [pc, #412]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006ba8:	69e0      	ldr	r0, [r4, #28]
 8006baa:	6a0a      	ldr	r2, [r1, #32]
 8006bac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006bb0:	4290      	cmp	r0, r2
 8006bb2:	d904      	bls.n	8006bbe <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bb4:	6a0a      	ldr	r2, [r1, #32]
 8006bb6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006bba:	4302      	orrs	r2, r0
 8006bbc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bbe:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bc0:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc4:	f140 80a1 	bpl.w	8006d0a <HAL_RCC_ClockConfig+0x1f2>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bc8:	4e5e      	ldr	r6, [pc, #376]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006bca:	68e0      	ldr	r0, [r4, #12]
 8006bcc:	69b1      	ldr	r1, [r6, #24]
 8006bce:	f001 010f 	and.w	r1, r1, #15
 8006bd2:	4288      	cmp	r0, r1
 8006bd4:	d904      	bls.n	8006be0 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd6:	69b1      	ldr	r1, [r6, #24]
 8006bd8:	f021 010f 	bic.w	r1, r1, #15
 8006bdc:	4301      	orrs	r1, r0
 8006bde:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	d030      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006be4:	4a57      	ldr	r2, [pc, #348]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006be6:	68a1      	ldr	r1, [r4, #8]
 8006be8:	6993      	ldr	r3, [r2, #24]
 8006bea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bf4:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf6:	2902      	cmp	r1, #2
 8006bf8:	f000 8097 	beq.w	8006d2a <HAL_RCC_ClockConfig+0x212>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bfc:	2903      	cmp	r1, #3
 8006bfe:	f000 808e 	beq.w	8006d1e <HAL_RCC_ClockConfig+0x206>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c02:	2901      	cmp	r1, #1
 8006c04:	f000 8097 	beq.w	8006d36 <HAL_RCC_ClockConfig+0x21e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c08:	075f      	lsls	r7, r3, #29
 8006c0a:	d59c      	bpl.n	8006b46 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c0c:	4e4d      	ldr	r6, [pc, #308]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0e:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c12:	6933      	ldr	r3, [r6, #16]
 8006c14:	f023 0307 	bic.w	r3, r3, #7
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8006c1c:	f7ff fc0a 	bl	8006434 <HAL_GetTick>
 8006c20:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	e005      	b.n	8006c30 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c24:	f7ff fc06 	bl	8006434 <HAL_GetTick>
 8006c28:	1bc0      	subs	r0, r0, r7
 8006c2a:	4540      	cmp	r0, r8
 8006c2c:	f200 8081 	bhi.w	8006d32 <HAL_RCC_ClockConfig+0x21a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c30:	6933      	ldr	r3, [r6, #16]
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c38:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006c3c:	d1f2      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	079e      	lsls	r6, r3, #30
 8006c42:	d506      	bpl.n	8006c52 <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c44:	68e0      	ldr	r0, [r4, #12]
 8006c46:	493f      	ldr	r1, [pc, #252]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006c48:	698a      	ldr	r2, [r1, #24]
 8006c4a:	f002 020f 	and.w	r2, r2, #15
 8006c4e:	4290      	cmp	r0, r2
 8006c50:	d35f      	bcc.n	8006d12 <HAL_RCC_ClockConfig+0x1fa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c52:	493b      	ldr	r1, [pc, #236]	@ (8006d40 <HAL_RCC_ClockConfig+0x228>)
 8006c54:	680a      	ldr	r2, [r1, #0]
 8006c56:	f002 020f 	and.w	r2, r2, #15
 8006c5a:	42aa      	cmp	r2, r5
 8006c5c:	d90a      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5e:	680a      	ldr	r2, [r1, #0]
 8006c60:	f022 020f 	bic.w	r2, r2, #15
 8006c64:	432a      	orrs	r2, r5
 8006c66:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c68:	680a      	ldr	r2, [r1, #0]
 8006c6a:	f002 020f 	and.w	r2, r2, #15
 8006c6e:	42aa      	cmp	r2, r5
 8006c70:	f47f af69 	bne.w	8006b46 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c74:	0758      	lsls	r0, r3, #29
 8006c76:	d50b      	bpl.n	8006c90 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c78:	4932      	ldr	r1, [pc, #200]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006c7a:	6920      	ldr	r0, [r4, #16]
 8006c7c:	698a      	ldr	r2, [r1, #24]
 8006c7e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006c82:	4290      	cmp	r0, r2
 8006c84:	d204      	bcs.n	8006c90 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c86:	698a      	ldr	r2, [r1, #24]
 8006c88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c8c:	4302      	orrs	r2, r0
 8006c8e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c90:	0719      	lsls	r1, r3, #28
 8006c92:	d50b      	bpl.n	8006cac <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c94:	492b      	ldr	r1, [pc, #172]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006c96:	6960      	ldr	r0, [r4, #20]
 8006c98:	69ca      	ldr	r2, [r1, #28]
 8006c9a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006c9e:	4290      	cmp	r0, r2
 8006ca0:	d204      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ca2:	69ca      	ldr	r2, [r1, #28]
 8006ca4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006ca8:	4302      	orrs	r2, r0
 8006caa:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cac:	06da      	lsls	r2, r3, #27
 8006cae:	d50b      	bpl.n	8006cc8 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cb0:	4924      	ldr	r1, [pc, #144]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006cb2:	69a0      	ldr	r0, [r4, #24]
 8006cb4:	69ca      	ldr	r2, [r1, #28]
 8006cb6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006cba:	4290      	cmp	r0, r2
 8006cbc:	d204      	bcs.n	8006cc8 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cbe:	69ca      	ldr	r2, [r1, #28]
 8006cc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cc4:	4302      	orrs	r2, r0
 8006cc6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cc8:	069b      	lsls	r3, r3, #26
 8006cca:	d50b      	bpl.n	8006ce4 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006cce:	69e1      	ldr	r1, [r4, #28]
 8006cd0:	6a13      	ldr	r3, [r2, #32]
 8006cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d204      	bcs.n	8006ce4 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cda:	6a13      	ldr	r3, [r2, #32]
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ce4:	f7ff fe8a 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 8006ce8:	4a16      	ldr	r2, [pc, #88]	@ (8006d44 <HAL_RCC_ClockConfig+0x22c>)
 8006cea:	4603      	mov	r3, r0
 8006cec:	4816      	ldr	r0, [pc, #88]	@ (8006d48 <HAL_RCC_ClockConfig+0x230>)
 8006cee:	6992      	ldr	r2, [r2, #24]
 8006cf0:	4916      	ldr	r1, [pc, #88]	@ (8006d4c <HAL_RCC_ClockConfig+0x234>)
 8006cf2:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8006cf6:	5c82      	ldrb	r2, [r0, r2]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8006cf8:	200e      	movs	r0, #14
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cfa:	f002 021f 	and.w	r2, r2, #31
 8006cfe:	40d3      	lsrs	r3, r2
}
 8006d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d04:	600b      	str	r3, [r1, #0]
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 8006d06:	f7fe bfdd 	b.w	8005cc4 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	f47f af6a 	bne.w	8006be4 <HAL_RCC_ClockConfig+0xcc>
 8006d10:	e79f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d12:	698a      	ldr	r2, [r1, #24]
 8006d14:	f022 020f 	bic.w	r2, r2, #15
 8006d18:	4302      	orrs	r2, r0
 8006d1a:	618a      	str	r2, [r1, #24]
 8006d1c:	e799      	b.n	8006c52 <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d1e:	019a      	lsls	r2, r3, #6
 8006d20:	f53f af74 	bmi.w	8006c0c <HAL_RCC_ClockConfig+0xf4>
 8006d24:	e70f      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006d26:	2001      	movs	r0, #1
}
 8006d28:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d2a:	0398      	lsls	r0, r3, #14
 8006d2c:	f53f af6e 	bmi.w	8006c0c <HAL_RCC_ClockConfig+0xf4>
 8006d30:	e709      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8006d32:	2003      	movs	r0, #3
 8006d34:	e708      	b.n	8006b48 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d36:	05db      	lsls	r3, r3, #23
 8006d38:	f53f af68 	bmi.w	8006c0c <HAL_RCC_ClockConfig+0xf4>
 8006d3c:	e703      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2e>
 8006d3e:	bf00      	nop
 8006d40:	52002000 	.word	0x52002000
 8006d44:	58024400 	.word	0x58024400
 8006d48:	0800a978 	.word	0x0800a978
 8006d4c:	2000002c 	.word	0x2000002c

08006d50 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d52:	4c36      	ldr	r4, [pc, #216]	@ (8006e2c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d5e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d60:	f7ff fb68 	bl	8006434 <HAL_GetTick>
 8006d64:	4605      	mov	r5, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d66:	e004      	b.n	8006d72 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d68:	f7ff fb64 	bl	8006434 <HAL_GetTick>
 8006d6c:	1b40      	subs	r0, r0, r5
 8006d6e:	2802      	cmp	r0, #2
 8006d70:	d856      	bhi.n	8006e20 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	011a      	lsls	r2, r3, #4
 8006d76:	d4f7      	bmi.n	8006d68 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d7a:	6832      	ldr	r2, [r6, #0]
 8006d7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d80:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006d84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d86:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	3a01      	subs	r2, #1
 8006d8e:	025b      	lsls	r3, r3, #9
 8006d90:	0412      	lsls	r2, r2, #16
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	6872      	ldr	r2, [r6, #4]
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da2:	4313      	orrs	r3, r2
 8006da4:	6932      	ldr	r2, [r6, #16]
 8006da6:	3a01      	subs	r2, #1
 8006da8:	0612      	lsls	r2, r2, #24
 8006daa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006dae:	4313      	orrs	r3, r2
 8006db0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006db2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006db4:	6972      	ldr	r2, [r6, #20]
 8006db6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006dbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006dc0:	69b2      	ldr	r2, [r6, #24]
 8006dc2:	f023 0320 	bic.w	r3, r3, #32
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
 8006dd0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dd2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006dd4:	69f2      	ldr	r2, [r6, #28]
 8006dd6:	f36f 03cf 	bfc	r3, #3, #13
 8006dda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006dde:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006de0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006de2:	f043 0310 	orr.w	r3, r3, #16
 8006de6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006de8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006dea:	b1df      	cbz	r7, 8006e24 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dec:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dee:	bf0c      	ite	eq
 8006df0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006df4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8006df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8006e2c <RCCEx_PLL2_Config.part.0+0xdc>)
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e02:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e04:	f7ff fb16 	bl	8006434 <HAL_GetTick>
 8006e08:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e0a:	e004      	b.n	8006e16 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e0c:	f7ff fb12 	bl	8006434 <HAL_GetTick>
 8006e10:	1b40      	subs	r0, r0, r5
 8006e12:	2802      	cmp	r0, #2
 8006e14:	d804      	bhi.n	8006e20 <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	d5f7      	bpl.n	8006e0c <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8006e1c:	2000      	movs	r0, #0
}
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006e20:	2003      	movs	r0, #3
}
 8006e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e2a:	e7e6      	b.n	8006dfa <RCCEx_PLL2_Config.part.0+0xaa>
 8006e2c:	58024400 	.word	0x58024400

08006e30 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e32:	4c36      	ldr	r4, [pc, #216]	@ (8006f0c <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e40:	f7ff faf8 	bl	8006434 <HAL_GetTick>
 8006e44:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e46:	e004      	b.n	8006e52 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e48:	f7ff faf4 	bl	8006434 <HAL_GetTick>
 8006e4c:	1b40      	subs	r0, r0, r5
 8006e4e:	2802      	cmp	r0, #2
 8006e50:	d856      	bhi.n	8006f00 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	009a      	lsls	r2, r3, #2
 8006e56:	d4f7      	bmi.n	8006e48 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e58:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006e5a:	6832      	ldr	r2, [r6, #0]
 8006e5c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006e60:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006e64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e66:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	3a01      	subs	r2, #1
 8006e6e:	025b      	lsls	r3, r3, #9
 8006e70:	0412      	lsls	r2, r2, #16
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	6872      	ldr	r2, [r6, #4]
 8006e7c:	3a01      	subs	r2, #1
 8006e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e82:	4313      	orrs	r3, r2
 8006e84:	6932      	ldr	r2, [r6, #16]
 8006e86:	3a01      	subs	r2, #1
 8006e88:	0612      	lsls	r2, r2, #24
 8006e8a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006e94:	6972      	ldr	r2, [r6, #20]
 8006e96:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006ea0:	69b2      	ldr	r2, [r6, #24]
 8006ea2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006eaa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eb2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006eb4:	69f2      	ldr	r2, [r6, #28]
 8006eb6:	f36f 03cf 	bfc	r3, #3, #13
 8006eba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006ebe:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ec0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ec6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ec8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006eca:	b1df      	cbz	r7, 8006f04 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ecc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ece:	bf0c      	ite	eq
 8006ed0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ed4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8006ed8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006eda:	4c0c      	ldr	r4, [pc, #48]	@ (8006f0c <RCCEx_PLL3_Config.part.0+0xdc>)
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee4:	f7ff faa6 	bl	8006434 <HAL_GetTick>
 8006ee8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006eea:	e004      	b.n	8006ef6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006eec:	f7ff faa2 	bl	8006434 <HAL_GetTick>
 8006ef0:	1b40      	subs	r0, r0, r5
 8006ef2:	2802      	cmp	r0, #2
 8006ef4:	d804      	bhi.n	8006f00 <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	d5f7      	bpl.n	8006eec <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8006efc:	2000      	movs	r0, #0
}
 8006efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006f00:	2003      	movs	r0, #3
}
 8006f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f0a:	e7e6      	b.n	8006eda <RCCEx_PLL3_Config.part.0+0xaa>
 8006f0c:	58024400 	.word	0x58024400

08006f10 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f14:	6803      	ldr	r3, [r0, #0]
{
 8006f16:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f18:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 8006f1c:	d023      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f1e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006f20:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8006f24:	f000 8516 	beq.w	8007954 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8006f28:	f200 85fd 	bhi.w	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f000 852a 	beq.w	8007986 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006f32:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8006f36:	f040 85fa 	bne.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f3a:	4aa2      	ldr	r2, [pc, #648]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006f3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006f3e:	f002 0203 	and.w	r2, r2, #3
 8006f42:	2a03      	cmp	r2, #3
 8006f44:	f000 85f3 	beq.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f48:	2102      	movs	r1, #2
 8006f4a:	3004      	adds	r0, #4
 8006f4c:	f7ff ff00 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
 8006f50:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f52:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f54:	b93e      	cbnz	r6, 8006f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f58:	489a      	ldr	r0, [pc, #616]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f5a:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f5c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8006f5e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006f62:	430a      	orrs	r2, r1
 8006f64:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f66:	05dd      	lsls	r5, r3, #23
 8006f68:	d50a      	bpl.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f6c:	2a04      	cmp	r2, #4
 8006f6e:	d806      	bhi.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006f70:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006f74:	04b3036b 	.word	0x04b3036b
 8006f78:	0370049f 	.word	0x0370049f
 8006f7c:	0370      	.short	0x0370
      status = ret;
 8006f7e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8006f80:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f82:	0598      	lsls	r0, r3, #22
 8006f84:	d522      	bpl.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f86:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8006f88:	2a80      	cmp	r2, #128	@ 0x80
 8006f8a:	f000 847e 	beq.w	800788a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006f8e:	f200 85bf 	bhi.w	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	f000 84af 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8006f98:	2a40      	cmp	r2, #64	@ 0x40
 8006f9a:	f040 85c0 	bne.w	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f9e:	4a89      	ldr	r2, [pc, #548]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006fa0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006fa2:	f002 0203 	and.w	r2, r2, #3
 8006fa6:	2a03      	cmp	r2, #3
 8006fa8:	f000 85b9 	beq.w	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8006fac:	2100      	movs	r1, #0
 8006fae:	1d20      	adds	r0, r4, #4
 8006fb0:	f7ff fece 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	f040 8477 	bne.w	80078ac <HAL_RCCEx_PeriphCLKConfig+0x99c>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fbe:	4981      	ldr	r1, [pc, #516]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fc2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8006fc4:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8006fc8:	4302      	orrs	r2, r0
 8006fca:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fcc:	0559      	lsls	r1, r3, #21
 8006fce:	d526      	bpl.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006fd0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8006fd4:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8006fd8:	f000 84e3 	beq.w	80079a2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006fdc:	f200 8589 	bhi.w	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	f000 84c5 	beq.w	8007970 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8006fe6:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8006fea:	f040 858a 	bne.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fee:	4a75      	ldr	r2, [pc, #468]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006ff0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ff2:	f002 0203 	and.w	r2, r2, #3
 8006ff6:	2a03      	cmp	r2, #3
 8006ff8:	f000 8583 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	1d20      	adds	r0, r4, #4
 8007000:	f7ff fea6 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007008:	2d00      	cmp	r5, #0
 800700a:	f040 84b9 	bne.w	8007980 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800700e:	496d      	ldr	r1, [pc, #436]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007010:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8007014:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007016:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 800701a:	4302      	orrs	r2, r0
 800701c:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800701e:	051a      	lsls	r2, r3, #20
 8007020:	d526      	bpl.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007022:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 8007026:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 800702a:	f000 847f 	beq.w	800792c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800702e:	f200 8548 	bhi.w	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 8007032:	2a00      	cmp	r2, #0
 8007034:	f000 84ae 	beq.w	8007994 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8007038:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800703c:	f040 8549 	bne.w	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007040:	4a60      	ldr	r2, [pc, #384]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007042:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007044:	f002 0203 	and.w	r2, r2, #3
 8007048:	2a03      	cmp	r2, #3
 800704a:	f000 8542 	beq.w	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800704e:	2100      	movs	r1, #0
 8007050:	1d20      	adds	r0, r4, #4
 8007052:	f7ff fe7d 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800705a:	2d00      	cmp	r5, #0
 800705c:	f040 8477 	bne.w	800794e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007060:	4958      	ldr	r1, [pc, #352]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007062:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8007066:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007068:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 800706c:	4302      	orrs	r2, r0
 800706e:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007070:	019f      	lsls	r7, r3, #6
 8007072:	d518      	bpl.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    switch(PeriphClkInit->QspiClockSelection)
 8007074:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8007076:	2a20      	cmp	r2, #32
 8007078:	f000 83c0 	beq.w	80077fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800707c:	f200 855a 	bhi.w	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007080:	b13a      	cbz	r2, 8007092 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8007082:	2a10      	cmp	r2, #16
 8007084:	f040 8559 	bne.w	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007088:	494e      	ldr	r1, [pc, #312]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800708a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800708c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007090:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007092:	2d00      	cmp	r5, #0
 8007094:	f040 832c 	bne.w	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007098:	494a      	ldr	r1, [pc, #296]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800709a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800709c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800709e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80070a2:	4302      	orrs	r2, r0
 80070a4:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070a6:	04d8      	lsls	r0, r3, #19
 80070a8:	d524      	bpl.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi123ClockSelection)
 80070aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80070ac:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80070b0:	f000 8428 	beq.w	8007904 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 80070b4:	f200 8511 	bhi.w	8007ada <HAL_RCCEx_PeriphCLKConfig+0xbca>
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	f000 8482 	beq.w	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80070be:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80070c2:	f040 8512 	bne.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0xbda>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070c6:	4a3f      	ldr	r2, [pc, #252]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80070c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80070ca:	f002 0203 	and.w	r2, r2, #3
 80070ce:	2a03      	cmp	r2, #3
 80070d0:	f000 850b 	beq.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80070d4:	2100      	movs	r1, #0
 80070d6:	1d20      	adds	r0, r4, #4
 80070d8:	f7ff fe3a 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	f040 8420 	bne.w	8007926 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070e6:	4937      	ldr	r1, [pc, #220]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80070e8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80070ea:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80070ec:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80070f0:	4302      	orrs	r2, r0
 80070f2:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070f4:	0499      	lsls	r1, r3, #18
 80070f6:	d522      	bpl.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80070f8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80070fa:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 80070fe:	f000 83b2 	beq.w	8007866 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8007102:	f200 84b5 	bhi.w	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xb60>
 8007106:	b182      	cbz	r2, 800712a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007108:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800710c:	f040 84ba 	bne.w	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007110:	4a2c      	ldr	r2, [pc, #176]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007112:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007114:	f002 0203 	and.w	r2, r2, #3
 8007118:	2a03      	cmp	r2, #3
 800711a:	f000 84b3 	beq.w	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800711e:	2101      	movs	r1, #1
 8007120:	1d20      	adds	r0, r4, #4
 8007122:	f7ff fe15 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800712a:	2d00      	cmp	r5, #0
 800712c:	f040 82fd 	bne.w	800772a <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007130:	4924      	ldr	r1, [pc, #144]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007132:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8007134:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8007136:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800713a:	4302      	orrs	r2, r0
 800713c:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800713e:	045a      	lsls	r2, r3, #17
 8007140:	d524      	bpl.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007142:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8007146:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800714a:	f000 82fe 	beq.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800714e:	f200 849d 	bhi.w	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007152:	b182      	cbz	r2, 8007176 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007154:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8007158:	f040 84a2 	bne.w	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800715e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007160:	f002 0203 	and.w	r2, r2, #3
 8007164:	2a03      	cmp	r2, #3
 8007166:	f000 849b 	beq.w	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 800716a:	2101      	movs	r1, #1
 800716c:	1d20      	adds	r0, r4, #4
 800716e:	f7ff fdef 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007176:	2d00      	cmp	r5, #0
 8007178:	f040 82d9 	bne.w	800772e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800717c:	4911      	ldr	r1, [pc, #68]	@ (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800717e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8007182:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007184:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8007188:	4302      	orrs	r2, r0
 800718a:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800718c:	041f      	lsls	r7, r3, #16
 800718e:	d50d      	bpl.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
    switch(PeriphClkInit->FdcanClockSelection)
 8007190:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007192:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8007196:	f000 81db 	beq.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800719a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800719e:	f000 84d5 	beq.w	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	f000 81d9 	beq.w	800755a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = ret;
 80071a8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80071aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071ac:	01d8      	lsls	r0, r3, #7
 80071ae:	d514      	bpl.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->FmcClockSelection)
 80071b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80071b2:	2a03      	cmp	r2, #3
 80071b4:	f200 84e3 	bhi.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 80071b8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80071bc:	0006000b 	.word	0x0006000b
 80071c0:	000b030b 	.word	0x000b030b
 80071c4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c8:	4935      	ldr	r1, [pc, #212]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80071ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80071cc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80071d0:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	f000 828e 	beq.w	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
      status = ret;
 80071d8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071da:	0259      	lsls	r1, r3, #9
 80071dc:	f100 81f4 	bmi.w	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071e0:	07df      	lsls	r7, r3, #31
 80071e2:	d52f      	bpl.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x334>
    switch(PeriphClkInit->Usart16ClockSelection)
 80071e4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80071e6:	2a28      	cmp	r2, #40	@ 0x28
 80071e8:	d82a      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80071ea:	e8df f012 	tbh	[pc, r2, lsl #1]
 80071ee:	01d1      	.short	0x01d1
 80071f0:	00290029 	.word	0x00290029
 80071f4:	00290029 	.word	0x00290029
 80071f8:	00290029 	.word	0x00290029
 80071fc:	01c40029 	.word	0x01c40029
 8007200:	00290029 	.word	0x00290029
 8007204:	00290029 	.word	0x00290029
 8007208:	00290029 	.word	0x00290029
 800720c:	04150029 	.word	0x04150029
 8007210:	00290029 	.word	0x00290029
 8007214:	00290029 	.word	0x00290029
 8007218:	00290029 	.word	0x00290029
 800721c:	01d10029 	.word	0x01d10029
 8007220:	00290029 	.word	0x00290029
 8007224:	00290029 	.word	0x00290029
 8007228:	00290029 	.word	0x00290029
 800722c:	01d10029 	.word	0x01d10029
 8007230:	00290029 	.word	0x00290029
 8007234:	00290029 	.word	0x00290029
 8007238:	00290029 	.word	0x00290029
 800723c:	01d10029 	.word	0x01d10029
      status = ret;
 8007240:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007242:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007244:	0798      	lsls	r0, r3, #30
 8007246:	d51c      	bpl.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x372>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007248:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800724a:	2a05      	cmp	r2, #5
 800724c:	f200 848f 	bhi.w	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8007250:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007254:	00060013 	.word	0x00060013
 8007258:	001303d0 	.word	0x001303d0
 800725c:	00130013 	.word	0x00130013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007260:	4a0f      	ldr	r2, [pc, #60]	@ (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8007262:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007264:	f002 0203 	and.w	r2, r2, #3
 8007268:	2a03      	cmp	r2, #3
 800726a:	f000 8480 	beq.w	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 800726e:	2101      	movs	r1, #1
 8007270:	1d20      	adds	r0, r4, #4
 8007272:	f7ff fd6d 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800727a:	2d00      	cmp	r5, #0
 800727c:	f000 824d 	beq.w	800771a <HAL_RCCEx_PeriphCLKConfig+0x80a>
      status = ret;
 8007280:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007282:	0759      	lsls	r1, r3, #29
 8007284:	d51f      	bpl.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007286:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800728a:	2a05      	cmp	r2, #5
 800728c:	f200 8473 	bhi.w	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8007290:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007294:	00080015 	.word	0x00080015
 8007298:	0015039e 	.word	0x0015039e
 800729c:	00150015 	.word	0x00150015
 80072a0:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a4:	4aa9      	ldr	r2, [pc, #676]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80072a6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072a8:	f002 0203 	and.w	r2, r2, #3
 80072ac:	2a03      	cmp	r2, #3
 80072ae:	f000 8462 	beq.w	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80072b2:	2101      	movs	r1, #1
 80072b4:	1d20      	adds	r0, r4, #4
 80072b6:	f7ff fd4b 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80072be:	2d00      	cmp	r5, #0
 80072c0:	f000 8222 	beq.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      status = ret;
 80072c4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072c6:	069a      	lsls	r2, r3, #26
 80072c8:	d524      	bpl.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072ca:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80072ce:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80072d2:	f000 825c 	beq.w	800778e <HAL_RCCEx_PeriphCLKConfig+0x87e>
 80072d6:	f200 83be 	bhi.w	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 80072da:	b182      	cbz	r2, 80072fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80072dc:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80072e0:	f040 83c3 	bne.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072e4:	4a99      	ldr	r2, [pc, #612]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80072e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80072e8:	f002 0203 	and.w	r2, r2, #3
 80072ec:	2a03      	cmp	r2, #3
 80072ee:	f000 83bc 	beq.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80072f2:	2100      	movs	r1, #0
 80072f4:	1d20      	adds	r0, r4, #4
 80072f6:	f7ff fd2b 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80072fe:	2d00      	cmp	r5, #0
 8007300:	f040 8219 	bne.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007304:	4991      	ldr	r1, [pc, #580]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007306:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800730a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800730c:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8007310:	4302      	orrs	r2, r0
 8007312:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007314:	065f      	lsls	r7, r3, #25
 8007316:	d524      	bpl.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007318:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800731c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8007320:	f000 8246 	beq.w	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8007324:	f200 83c0 	bhi.w	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007328:	b182      	cbz	r2, 800734c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800732a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800732e:	f040 83c5 	bne.w	8007abc <HAL_RCCEx_PeriphCLKConfig+0xbac>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007332:	4a86      	ldr	r2, [pc, #536]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007334:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007336:	f002 0203 	and.w	r2, r2, #3
 800733a:	2a03      	cmp	r2, #3
 800733c:	f000 83be 	beq.w	8007abc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007340:	2100      	movs	r1, #0
 8007342:	1d20      	adds	r0, r4, #4
 8007344:	f7ff fd04 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800734c:	2d00      	cmp	r5, #0
 800734e:	f040 81f0 	bne.w	8007732 <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007352:	497e      	ldr	r1, [pc, #504]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007354:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8007358:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800735a:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800735e:	4302      	orrs	r2, r0
 8007360:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007362:	0618      	lsls	r0, r3, #24
 8007364:	d524      	bpl.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007366:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800736a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800736e:	f000 81fd 	beq.w	800776c <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8007372:	f200 8363 	bhi.w	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
 8007376:	b182      	cbz	r2, 800739a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007378:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800737c:	f040 8368 	bne.w	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xb40>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007380:	4a72      	ldr	r2, [pc, #456]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007382:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007384:	f002 0203 	and.w	r2, r2, #3
 8007388:	2a03      	cmp	r2, #3
 800738a:	f000 8361 	beq.w	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800738e:	2100      	movs	r1, #0
 8007390:	1d20      	adds	r0, r4, #4
 8007392:	f7ff fcdd 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800739a:	2d00      	cmp	r5, #0
 800739c:	f040 81cd 	bne.w	800773a <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073a0:	496a      	ldr	r1, [pc, #424]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80073a2:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80073a6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80073a8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80073ac:	4302      	orrs	r2, r0
 80073ae:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073b0:	0719      	lsls	r1, r3, #28
 80073b2:	d50b      	bpl.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80073b4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80073b8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80073bc:	f000 8167 	beq.w	800768e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073c0:	4862      	ldr	r0, [pc, #392]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80073c2:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80073c4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80073c8:	430a      	orrs	r2, r1
 80073ca:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073cc:	06da      	lsls	r2, r3, #27
 80073ce:	d50b      	bpl.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073d0:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80073d4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80073d8:	f000 8148 	beq.w	800766c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073dc:	485b      	ldr	r0, [pc, #364]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80073de:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80073e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80073e4:	430a      	orrs	r2, r1
 80073e6:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073e8:	031f      	lsls	r7, r3, #12
 80073ea:	d522      	bpl.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->AdcClockSelection)
 80073ec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80073f0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80073f4:	f000 8225 	beq.w	8007842 <HAL_RCCEx_PeriphCLKConfig+0x932>
 80073f8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80073fc:	d00e      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80073fe:	2900      	cmp	r1, #0
 8007400:	f040 80b6 	bne.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x660>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007404:	4a51      	ldr	r2, [pc, #324]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007406:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007408:	f002 0203 	and.w	r2, r2, #3
 800740c:	2a03      	cmp	r2, #3
 800740e:	f000 80af 	beq.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8007412:	1d20      	adds	r0, r4, #4
 8007414:	f7ff fc9c 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800741c:	2d00      	cmp	r5, #0
 800741e:	f040 818e 	bne.w	800773e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007422:	494a      	ldr	r1, [pc, #296]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007424:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8007428:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800742a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800742e:	4302      	orrs	r2, r0
 8007430:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007432:	0358      	lsls	r0, r3, #13
 8007434:	d50f      	bpl.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->UsbClockSelection)
 8007436:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800743a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800743e:	f000 81ee 	beq.w	800781e <HAL_RCCEx_PeriphCLKConfig+0x90e>
 8007442:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8007446:	f000 80b3 	beq.w	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800744a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800744e:	f000 80aa 	beq.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x696>
      status = ret;
 8007452:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007454:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007456:	03d9      	lsls	r1, r3, #15
 8007458:	d51c      	bpl.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->SdmmcClockSelection)
 800745a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800745c:	2a00      	cmp	r2, #0
 800745e:	f000 8139 	beq.w	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8007462:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007466:	d16e      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007468:	4a38      	ldr	r2, [pc, #224]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 800746a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800746c:	f002 0203 	and.w	r2, r2, #3
 8007470:	2a03      	cmp	r2, #3
 8007472:	d068      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x636>
 8007474:	2102      	movs	r1, #2
 8007476:	1d20      	adds	r0, r4, #4
 8007478:	f7ff fc6a 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
 800747c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800747e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007480:	2d00      	cmp	r5, #0
 8007482:	f040 812f 	bne.w	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007486:	4931      	ldr	r1, [pc, #196]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007488:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800748a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800748c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007490:	4302      	orrs	r2, r0
 8007492:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007494:	009a      	lsls	r2, r3, #2
 8007496:	d50d      	bpl.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007498:	4a2c      	ldr	r2, [pc, #176]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 800749a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800749c:	f002 0203 	and.w	r2, r2, #3
 80074a0:	2a03      	cmp	r2, #3
 80074a2:	d04e      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80074a4:	2102      	movs	r1, #2
 80074a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80074aa:	f7ff fcc1 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074ae:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d146      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074b4:	039f      	lsls	r7, r3, #14
 80074b6:	d435      	bmi.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x614>
  if (status == HAL_OK)
 80074b8:	1e30      	subs	r0, r6, #0
 80074ba:	bf18      	it	ne
 80074bc:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074be:	02de      	lsls	r6, r3, #11
 80074c0:	d506      	bpl.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074c2:	4922      	ldr	r1, [pc, #136]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80074c4:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80074c6:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80074c8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80074cc:	432a      	orrs	r2, r5
 80074ce:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80074d0:	00dd      	lsls	r5, r3, #3
 80074d2:	d507      	bpl.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074d4:	491d      	ldr	r1, [pc, #116]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80074d6:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80074da:	690a      	ldr	r2, [r1, #16]
 80074dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074e0:	432a      	orrs	r2, r5
 80074e2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074e4:	0299      	lsls	r1, r3, #10
 80074e6:	d506      	bpl.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074e8:	4918      	ldr	r1, [pc, #96]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80074ea:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80074ec:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80074ee:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80074f2:	432a      	orrs	r2, r5
 80074f4:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074f6:	005a      	lsls	r2, r3, #1
 80074f8:	d509      	bpl.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074fa:	4a14      	ldr	r2, [pc, #80]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 80074fc:	6911      	ldr	r1, [r2, #16]
 80074fe:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8007502:	6111      	str	r1, [r2, #16]
 8007504:	6911      	ldr	r1, [r2, #16]
 8007506:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 800750a:	4329      	orrs	r1, r5
 800750c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800750e:	2b00      	cmp	r3, #0
 8007510:	da06      	bge.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x610>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007512:	4a0e      	ldr	r2, [pc, #56]	@ (800754c <HAL_RCCEx_PeriphCLKConfig+0x63c>)
 8007514:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007516:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007518:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800751c:	430b      	orrs	r3, r1
 800751e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8007520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007524:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8007526:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800752a:	f000 80c1 	beq.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
 800752e:	f240 8108 	bls.w	8007742 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007532:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8007536:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800753a:	f000 80be 	beq.w	80076ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status=HAL_ERROR;
 800753e:	2001      	movs	r0, #1
 8007540:	e7bd      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8007542:	2601      	movs	r6, #1
 8007544:	e7b6      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      status = ret;
 8007546:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007548:	4635      	mov	r5, r6
 800754a:	e7a3      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800754c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007550:	49a8      	ldr	r1, [pc, #672]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007552:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007554:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007558:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800755a:	2d00      	cmp	r5, #0
 800755c:	f040 80c4 	bne.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007560:	49a4      	ldr	r1, [pc, #656]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007562:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007564:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8007566:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800756a:	4302      	orrs	r2, r0
 800756c:	650a      	str	r2, [r1, #80]	@ 0x50
 800756e:	e61d      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8007570:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007572:	4635      	mov	r5, r6
 8007574:	e75d      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x522>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007576:	4a9f      	ldr	r2, [pc, #636]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007578:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800757a:	f002 0203 	and.w	r2, r2, #3
 800757e:	2a03      	cmp	r2, #3
 8007580:	f43f ae5e 	beq.w	8007240 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007584:	2101      	movs	r1, #1
 8007586:	1d20      	adds	r0, r4, #4
 8007588:	f7ff fbe2 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007590:	2d00      	cmp	r5, #0
 8007592:	f040 80b7 	bne.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007596:	4997      	ldr	r1, [pc, #604]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007598:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800759a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800759c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80075a0:	4302      	orrs	r2, r0
 80075a2:	654a      	str	r2, [r1, #84]	@ 0x54
 80075a4:	e64e      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a6:	4993      	ldr	r1, [pc, #588]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80075a8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80075aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80075ae:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	f040 809b 	bne.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075b6:	498f      	ldr	r1, [pc, #572]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80075b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80075bc:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80075be:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80075c2:	4302      	orrs	r2, r0
 80075c4:	654a      	str	r2, [r1, #84]	@ 0x54
 80075c6:	e746      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x546>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c8:	4f8b      	ldr	r7, [pc, #556]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80075d2:	f7fe ff2f 	bl	8006434 <HAL_GetTick>
 80075d6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075da:	f7fe ff2b 	bl	8006434 <HAL_GetTick>
 80075de:	eba0 0008 	sub.w	r0, r0, r8
 80075e2:	2864      	cmp	r0, #100	@ 0x64
 80075e4:	f200 82ad 	bhi.w	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xc32>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	05da      	lsls	r2, r3, #23
 80075ec:	d5f5      	bpl.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x6ca>
    if(ret == HAL_OK)
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	f040 82a8 	bne.w	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075f4:	4a7f      	ldr	r2, [pc, #508]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80075f6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80075fa:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80075fc:	4059      	eors	r1, r3
 80075fe:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8007602:	d00b      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007604:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007606:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007608:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800760c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8007610:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007612:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8007614:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8007618:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800761a:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800761c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007620:	f000 82b1 	beq.w	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xc76>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007624:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007628:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800762c:	f000 82bf 	beq.w	8007bae <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8007630:	4970      	ldr	r1, [pc, #448]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007632:	690a      	ldr	r2, [r1, #16]
 8007634:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007638:	610a      	str	r2, [r1, #16]
 800763a:	4a6e      	ldr	r2, [pc, #440]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800763c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007640:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007642:	430b      	orrs	r3, r1
 8007644:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	e5ca      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764a:	496a      	ldr	r1, [pc, #424]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800764c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800764e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007652:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8007654:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007656:	2d00      	cmp	r5, #0
 8007658:	f040 813c 	bne.w	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800765c:	4965      	ldr	r1, [pc, #404]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800765e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8007660:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8007662:	f022 0207 	bic.w	r2, r2, #7
 8007666:	4302      	orrs	r2, r0
 8007668:	650a      	str	r2, [r1, #80]	@ 0x50
 800766a:	e48a      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800766c:	4a61      	ldr	r2, [pc, #388]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800766e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007670:	f002 0203 	and.w	r2, r2, #3
 8007674:	2a03      	cmp	r2, #3
 8007676:	d008      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x77a>
 8007678:	2102      	movs	r1, #2
 800767a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800767e:	f7ff fbd7 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007682:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007684:	2800      	cmp	r0, #0
 8007686:	f43f aeaf 	beq.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        status = HAL_ERROR;
 800768a:	2601      	movs	r6, #1
 800768c:	e6ac      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800768e:	4a59      	ldr	r2, [pc, #356]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007690:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007692:	f002 0203 	and.w	r2, r2, #3
 8007696:	2a03      	cmp	r2, #3
 8007698:	d008      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x79c>
 800769a:	2102      	movs	r1, #2
 800769c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80076a0:	f7ff fbc6 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076a4:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f43f ae90 	beq.w	80073cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
          status = HAL_ERROR;
 80076ac:	2601      	movs	r6, #1
 80076ae:	e68d      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b0:	4850      	ldr	r0, [pc, #320]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076b2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80076b4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80076b8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 80076ba:	2d00      	cmp	r5, #0
 80076bc:	f47f af3f 	bne.w	800753e <HAL_RCCEx_PeriphCLKConfig+0x62e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076c0:	4d4c      	ldr	r5, [pc, #304]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
  if (status == HAL_OK)
 80076c2:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076c4:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 80076c6:	bf18      	it	ne
 80076c8:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ca:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80076ce:	430a      	orrs	r2, r1
 80076d0:	656a      	str	r2, [r5, #84]	@ 0x54
 80076d2:	e6f4      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d4:	4947      	ldr	r1, [pc, #284]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076d6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80076d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80076dc:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80076de:	2d00      	cmp	r5, #0
 80076e0:	f43f aed1 	beq.w	8007486 <HAL_RCCEx_PeriphCLKConfig+0x576>
      status = ret;
 80076e4:	462e      	mov	r6, r5
 80076e6:	e6d5      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x584>
      status = ret;
 80076e8:	462e      	mov	r6, r5
 80076ea:	e55f      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 80076ec:	462e      	mov	r6, r5
 80076ee:	e6b2      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x546>
      status = ret;
 80076f0:	462e      	mov	r6, r5
 80076f2:	e4d8      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076f4:	493f      	ldr	r1, [pc, #252]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80076f6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80076f8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80076fa:	f022 0203 	bic.w	r2, r2, #3
 80076fe:	4302      	orrs	r2, r0
 8007700:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8007702:	e56a      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      status = ret;
 8007704:	462e      	mov	r6, r5
 8007706:	e59d      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007708:	493a      	ldr	r1, [pc, #232]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800770a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800770e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007710:	f022 0207 	bic.w	r2, r2, #7
 8007714:	4302      	orrs	r2, r0
 8007716:	658a      	str	r2, [r1, #88]	@ 0x58
 8007718:	e5d5      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800771a:	4936      	ldr	r1, [pc, #216]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800771c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800771e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8007720:	f022 0207 	bic.w	r2, r2, #7
 8007724:	4302      	orrs	r2, r0
 8007726:	654a      	str	r2, [r1, #84]	@ 0x54
 8007728:	e5ab      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 800772a:	462e      	mov	r6, r5
 800772c:	e507      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      status = ret;
 800772e:	462e      	mov	r6, r5
 8007730:	e52c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      status = ret;
 8007732:	462e      	mov	r6, r5
 8007734:	e615      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x452>
      status = ret;
 8007736:	462e      	mov	r6, r5
 8007738:	e5ec      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 800773a:	462e      	mov	r6, r5
 800773c:	e638      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      status = ret;
 800773e:	462e      	mov	r6, r5
 8007740:	e677      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->RngClockSelection)
 8007742:	2a00      	cmp	r2, #0
 8007744:	f47f aefb 	bne.w	800753e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007748:	e7b7      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800774a:	4a2a      	ldr	r2, [pc, #168]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800774c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800774e:	f002 0203 	and.w	r2, r2, #3
 8007752:	2a03      	cmp	r2, #3
 8007754:	f000 81a4 	beq.w	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
 8007758:	2101      	movs	r1, #1
 800775a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800775e:	f7ff fb67 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007762:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007764:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007766:	2d00      	cmp	r5, #0
 8007768:	d1e1      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800776a:	e507      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800776c:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800776e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007770:	f002 0203 	and.w	r2, r2, #3
 8007774:	2a03      	cmp	r2, #3
 8007776:	f000 816b 	beq.w	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800777a:	2102      	movs	r1, #2
 800777c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007780:	f7ff fb56 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007784:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007786:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007788:	2d00      	cmp	r5, #0
 800778a:	d1d6      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800778c:	e608      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778e:	4a19      	ldr	r2, [pc, #100]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007790:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007792:	f002 0203 	and.w	r2, r2, #3
 8007796:	2a03      	cmp	r2, #3
 8007798:	f000 8167 	beq.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800779c:	2102      	movs	r1, #2
 800779e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80077a2:	f7ff fb45 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 80077a6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077a8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	d1c3      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x826>
 80077ae:	e5a9      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b0:	4a10      	ldr	r2, [pc, #64]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80077b4:	f002 0203 	and.w	r2, r2, #3
 80077b8:	2a03      	cmp	r2, #3
 80077ba:	f000 817f 	beq.w	8007abc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80077be:	2102      	movs	r1, #2
 80077c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80077c4:	f7ff fb34 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 80077c8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	d1b0      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x822>
 80077d0:	e5bf      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x442>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077d2:	4a08      	ldr	r2, [pc, #32]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80077d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80077d6:	f002 0203 	and.w	r2, r2, #3
 80077da:	2a03      	cmp	r2, #3
 80077dc:	f000 81cf 	beq.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 80077e0:	2102      	movs	r1, #2
 80077e2:	1d20      	adds	r0, r4, #4
 80077e4:	f7ff fab4 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
 80077e8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077ea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80077ec:	2d00      	cmp	r5, #0
 80077ee:	f47f acf3 	bne.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80077f2:	e77f      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80077f4:	58024400 	.word	0x58024400
 80077f8:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077fc:	4ac3      	ldr	r2, [pc, #780]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80077fe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007800:	f002 0203 	and.w	r2, r2, #3
 8007804:	2a03      	cmp	r2, #3
 8007806:	f000 8198 	beq.w	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
 800780a:	2102      	movs	r1, #2
 800780c:	1d20      	adds	r0, r4, #4
 800780e:	f7ff fa9f 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
 8007812:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007814:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007816:	2d00      	cmp	r5, #0
 8007818:	f47f af6a 	bne.w	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 800781c:	e43c      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x188>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800781e:	4abb      	ldr	r2, [pc, #748]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007820:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007822:	f002 0203 	and.w	r2, r2, #3
 8007826:	2a03      	cmp	r2, #3
 8007828:	f43f ae13 	beq.w	8007452 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800782c:	2101      	movs	r1, #1
 800782e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007832:	f7ff fafd 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007836:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007838:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800783a:	2d00      	cmp	r5, #0
 800783c:	f47f af56 	bne.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8007840:	e6b9      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007842:	4ab2      	ldr	r2, [pc, #712]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007844:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007846:	f002 0203 	and.w	r2, r2, #3
 800784a:	2a03      	cmp	r2, #3
 800784c:	f43f ae90 	beq.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8007850:	2102      	movs	r1, #2
 8007852:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007856:	f7ff faeb 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 800785a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800785c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800785e:	2d00      	cmp	r5, #0
 8007860:	f47f af6d 	bne.w	800773e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007864:	e5dd      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x512>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007866:	4aa9      	ldr	r2, [pc, #676]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007868:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800786a:	f002 0203 	and.w	r2, r2, #3
 800786e:	2a03      	cmp	r2, #3
 8007870:	f000 8108 	beq.w	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007874:	2101      	movs	r1, #1
 8007876:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800787a:	f7ff fad9 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 800787e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007880:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007882:	2d00      	cmp	r5, #0
 8007884:	f47f af51 	bne.w	800772a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007888:	e452      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x220>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800788a:	4aa0      	ldr	r2, [pc, #640]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800788c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800788e:	f002 0203 	and.w	r2, r2, #3
 8007892:	2a03      	cmp	r2, #3
 8007894:	f000 8143 	beq.w	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8007898:	2100      	movs	r1, #0
 800789a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800789e:	f7ff fac7 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 80078a2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078a4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	f43f ab89 	beq.w	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xae>
      status = ret;
 80078ac:	462e      	mov	r6, r5
 80078ae:	f7ff bb8d 	b.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078b2:	4a96      	ldr	r2, [pc, #600]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80078b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80078b6:	f002 0203 	and.w	r2, r2, #3
 80078ba:	2a03      	cmp	r2, #3
 80078bc:	f43f ab5f 	beq.w	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80078c0:	2100      	movs	r1, #0
 80078c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078c6:	f7ff fab3 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 80078ca:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078cc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80078ce:	2d00      	cmp	r5, #0
 80078d0:	f43f aec4 	beq.w	800765c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      status = ret;
 80078d4:	462e      	mov	r6, r5
 80078d6:	f7ff bb54 	b.w	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078da:	4a8c      	ldr	r2, [pc, #560]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80078dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80078de:	f002 0203 	and.w	r2, r2, #3
 80078e2:	2a03      	cmp	r2, #3
 80078e4:	f43f ab4b 	beq.w	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80078e8:	2100      	movs	r1, #0
 80078ea:	1d20      	adds	r0, r4, #4
 80078ec:	f7ff fa30 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	4605      	mov	r5, r0
      break;
 80078f4:	e6af      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x746>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f6:	4985      	ldr	r1, [pc, #532]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80078f8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80078fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80078fe:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 8007900:	f7ff bb5a 	b.w	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007904:	4a81      	ldr	r2, [pc, #516]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007906:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007908:	f002 0203 	and.w	r2, r2, #3
 800790c:	2a03      	cmp	r2, #3
 800790e:	f000 80ec 	beq.w	8007aea <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8007912:	2100      	movs	r1, #0
 8007914:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007918:	f7ff fa8a 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 800791c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800791e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007920:	2d00      	cmp	r5, #0
 8007922:	f43f abe0 	beq.w	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      status = ret;
 8007926:	462e      	mov	r6, r5
 8007928:	f7ff bbe4 	b.w	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800792c:	4a77      	ldr	r2, [pc, #476]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 800792e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007930:	f002 0203 	and.w	r2, r2, #3
 8007934:	2a03      	cmp	r2, #3
 8007936:	f000 80cc 	beq.w	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800793a:	2100      	movs	r1, #0
 800793c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007940:	f7ff fa76 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007944:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007946:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007948:	2d00      	cmp	r5, #0
 800794a:	f43f ab89 	beq.w	8007060 <HAL_RCCEx_PeriphCLKConfig+0x150>
      status = ret;
 800794e:	462e      	mov	r6, r5
 8007950:	f7ff bb8e 	b.w	8007070 <HAL_RCCEx_PeriphCLKConfig+0x160>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007954:	4a6d      	ldr	r2, [pc, #436]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007956:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007958:	f002 0203 	and.w	r2, r2, #3
 800795c:	2a03      	cmp	r2, #3
 800795e:	f000 80e6 	beq.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007962:	2102      	movs	r1, #2
 8007964:	3024      	adds	r0, #36	@ 0x24
 8007966:	f7ff fa63 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 800796a:	4606      	mov	r6, r0
      break;
 800796c:	f7ff baf1 	b.w	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x42>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007970:	4966      	ldr	r1, [pc, #408]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007972:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007974:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007978:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800797a:	2d00      	cmp	r5, #0
 800797c:	f43f ab47 	beq.w	800700e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      status = ret;
 8007980:	462e      	mov	r6, r5
 8007982:	f7ff bb4c 	b.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007986:	4861      	ldr	r0, [pc, #388]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007988:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800798a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800798e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007990:	f7ff bae2 	b.w	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007994:	495d      	ldr	r1, [pc, #372]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007996:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007998:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800799c:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 800799e:	f7ff bb5c 	b.w	800705a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079a2:	4a5a      	ldr	r2, [pc, #360]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80079a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80079a6:	f002 0203 	and.w	r2, r2, #3
 80079aa:	2a03      	cmp	r2, #3
 80079ac:	f000 80a9 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80079b0:	2100      	movs	r1, #0
 80079b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80079b6:	f7ff fa3b 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	4605      	mov	r5, r0
      break;
 80079be:	f7ff bb23 	b.w	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c2:	4952      	ldr	r1, [pc, #328]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80079c4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80079c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80079ca:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 80079cc:	f7ff bb88 	b.w	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079d0:	4a4e      	ldr	r2, [pc, #312]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80079d2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80079d4:	f002 0203 	and.w	r2, r2, #3
 80079d8:	2a03      	cmp	r2, #3
 80079da:	f000 80cc 	beq.w	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80079de:	2101      	movs	r1, #1
 80079e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80079e4:	f7ff fa24 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 80079e8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079ea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	f47f ac69 	bne.w	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80079f2:	e689      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079f4:	4a45      	ldr	r2, [pc, #276]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 80079f6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80079f8:	f002 0203 	and.w	r2, r2, #3
 80079fc:	2a03      	cmp	r2, #3
 80079fe:	f000 80b6 	beq.w	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8007a02:	2101      	movs	r1, #1
 8007a04:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a08:	f7ff fa12 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007a0c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a0e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	f47f ac35 	bne.w	8007280 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8007a16:	e680      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a18:	4a3c      	ldr	r2, [pc, #240]	@ (8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8007a1a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007a1c:	f002 0203 	and.w	r2, r2, #3
 8007a20:	2a03      	cmp	r2, #3
 8007a22:	f43f ac0d 	beq.w	8007240 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007a26:	2101      	movs	r1, #1
 8007a28:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a2c:	f7ff fa00 	bl	8006e30 <RCCEx_PLL3_Config.part.0>
 8007a30:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a32:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f47f ae65 	bne.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8007a3a:	e5ac      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a3c:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 8007a40:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8007a44:	f43f aca9 	beq.w	800739a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007a48:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8007a4c:	f43f aca5 	beq.w	800739a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      status = ret;
 8007a50:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007a52:	4635      	mov	r5, r6
 8007a54:	e4ac      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a56:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8007a5a:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8007a5e:	f43f ac4e 	beq.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8007a62:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8007a66:	f43f ac4a 	beq.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      status = ret;
 8007a6a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007a6c:	4635      	mov	r5, r6
 8007a6e:	e451      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a70:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 8007a74:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8007a78:	f43f ab57 	beq.w	800712a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007a7c:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8007a80:	f43f ab53 	beq.w	800712a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      status = ret;
 8007a84:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007a86:	4635      	mov	r5, r6
 8007a88:	f7ff bb59 	b.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007a8c:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8007a90:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8007a94:	f43f ab6f 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007a98:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8007a9c:	f43f ab6b 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x266>
      status = ret;
 8007aa0:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007aa2:	4635      	mov	r5, r6
 8007aa4:	f7ff bb72 	b.w	800718c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007aa8:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 8007aac:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007ab0:	f43f ac4c 	beq.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8007ab4:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8007ab8:	f43f ac48 	beq.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x43c>
      status = ret;
 8007abc:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007abe:	4635      	mov	r5, r6
 8007ac0:	e44f      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ac2:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8007ac6:	f43f aac8 	beq.w	800705a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8007aca:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8007ace:	f43f aac4 	beq.w	800705a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      status = ret;
 8007ad2:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007ad4:	4635      	mov	r5, r6
 8007ad6:	f7ff bacb 	b.w	8007070 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007ada:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8007ade:	f43f aaff 	beq.w	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8007ae2:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8007ae6:	f43f aafb 	beq.w	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8007aea:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007aec:	4635      	mov	r5, r6
 8007aee:	f7ff bb01 	b.w	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007af2:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8007af6:	f43f aa87 	beq.w	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8007afa:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8007afe:	f43f aa83 	beq.w	8007008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      status = ret;
 8007b02:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b04:	4635      	mov	r5, r6
 8007b06:	f7ff ba8a 	b.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007b0a:	bf00      	nop
 8007b0c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai23ClockSelection)
 8007b10:	2ac0      	cmp	r2, #192	@ 0xc0
 8007b12:	f43f aa51 	beq.w	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8007b16:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8007b1a:	f43f aa4d 	beq.w	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      status = ret;
 8007b1e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b20:	4635      	mov	r5, r6
 8007b22:	f7ff ba53 	b.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b26:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8007b2a:	f43f aa15 	beq.w	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 8007b2e:	2601      	movs	r6, #1
 8007b30:	f7ff ba19 	b.w	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->QspiClockSelection)
 8007b34:	2a30      	cmp	r2, #48	@ 0x30
 8007b36:	f43f aaac 	beq.w	8007092 <HAL_RCCEx_PeriphCLKConfig+0x182>
      status = ret;
 8007b3a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b3c:	4635      	mov	r5, r6
 8007b3e:	f7ff bab2 	b.w	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_TIMEOUT;
 8007b42:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b44:	6823      	ldr	r3, [r4, #0]
      status = ret;
 8007b46:	462e      	mov	r6, r5
 8007b48:	f7ff bb4a 	b.w	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8007b4e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007b50:	f002 0203 	and.w	r2, r2, #3
 8007b54:	2a03      	cmp	r2, #3
 8007b56:	f43f ab27 	beq.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	1d20      	adds	r0, r4, #4
 8007b5e:	f7ff f8f7 	bl	8006d50 <RCCEx_PLL2_Config.part.0>
 8007b62:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b64:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	f47f adbe 	bne.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8007b6c:	e4f8      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x650>
      status = ret;
 8007b6e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b70:	4635      	mov	r5, r6
 8007b72:	f7ff bb86 	b.w	8007282 <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 8007b76:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b78:	4635      	mov	r5, r6
 8007b7a:	f7ff bba4 	b.w	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 8007b7e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8007b80:	4635      	mov	r5, r6
 8007b82:	f7ff bb2a 	b.w	80071da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        tickstart = HAL_GetTick();
 8007b86:	f7fe fc55 	bl	8006434 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b8a:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8007bcc <HAL_RCCEx_PeriphCLKConfig+0xcbc>
        tickstart = HAL_GetTick();
 8007b8e:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b90:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b94:	e004      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xc90>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b96:	f7fe fc4d 	bl	8006434 <HAL_GetTick>
 8007b9a:	1bc0      	subs	r0, r0, r7
 8007b9c:	4548      	cmp	r0, r9
 8007b9e:	d810      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba0:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8007ba4:	079b      	lsls	r3, r3, #30
 8007ba6:	d5f6      	bpl.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8007bac:	e53a      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8007bae:	4807      	ldr	r0, [pc, #28]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8007bb0:	4a07      	ldr	r2, [pc, #28]	@ (8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>)
 8007bb2:	6901      	ldr	r1, [r0, #16]
 8007bb4:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007bb8:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	6102      	str	r2, [r0, #16]
 8007bc0:	e53b      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        status = ret;
 8007bc2:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	4635      	mov	r5, r6
 8007bc8:	f7ff bb0a 	b.w	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	00ffffcf 	.word	0x00ffffcf

08007bd4 <LL_ADC_Init>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bd4:	6882      	ldr	r2, [r0, #8]
 8007bd6:	07d3      	lsls	r3, r2, #31
 8007bd8:	d411      	bmi.n	8007bfe <LL_ADC_Init+0x2a>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8007bda:	4603      	mov	r3, r0
 8007bdc:	68c0      	ldr	r0, [r0, #12]
{
 8007bde:	b430      	push	{r4, r5}
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8007be0:	e891 0034 	ldmia.w	r1, {r2, r4, r5}
    MODIFY_REG(ADCx->CFGR,
 8007be4:	4907      	ldr	r1, [pc, #28]	@ (8007c04 <LL_ADC_Init+0x30>)
 8007be6:	432a      	orrs	r2, r5
 8007be8:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8007bea:	2001      	movs	r0, #1
    MODIFY_REG(ADCx->CFGR,
 8007bec:	430a      	orrs	r2, r1
 8007bee:	60da      	str	r2, [r3, #12]
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007bf6:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8007bf8:	bc30      	pop	{r4, r5}
    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8007bfa:	611a      	str	r2, [r3, #16]
}
 8007bfc:	4770      	bx	lr
    status = ERROR;
 8007bfe:	2000      	movs	r0, #0
}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	ffffbfe3 	.word	0xffffbfe3

08007c08 <LL_ADC_REG_Init>:
 8007c08:	6882      	ldr	r2, [r0, #8]
 8007c0a:	07d3      	lsls	r3, r2, #31
 8007c0c:	d417      	bmi.n	8007c3e <LL_ADC_REG_Init+0x36>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007c0e:	4603      	mov	r3, r0
    {
      MODIFY_REG(ADCx->CFGR,
 8007c10:	6948      	ldr	r0, [r1, #20]
{
 8007c12:	b470      	push	{r4, r5, r6}
      MODIFY_REG(ADCx->CFGR,
 8007c14:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
 8007c18:	e9d1 2400 	ldrd	r2, r4, [r1]
 8007c1c:	4332      	orrs	r2, r6
 8007c1e:	432a      	orrs	r2, r5
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007c20:	b97c      	cbnz	r4, 8007c42 <LL_ADC_REG_Init+0x3a>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8007c22:	4302      	orrs	r2, r0
 8007c24:	490b      	ldr	r1, [pc, #44]	@ (8007c54 <LL_ADC_REG_Init+0x4c>)
 8007c26:	68d8      	ldr	r0, [r3, #12]
 8007c28:	4001      	ands	r1, r0
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  ErrorStatus status = SUCCESS;
 8007c30:	2001      	movs	r0, #1
 8007c32:	f022 020f 	bic.w	r2, r2, #15
 8007c36:	4322      	orrs	r2, r4
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8007c38:	bc70      	pop	{r4, r5, r6}
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c3c:	4770      	bx	lr
    status = ERROR;
 8007c3e:	2000      	movs	r0, #0
}
 8007c40:	4770      	bx	lr
      MODIFY_REG(ADCx->CFGR,
 8007c42:	688d      	ldr	r5, [r1, #8]
 8007c44:	4302      	orrs	r2, r0
 8007c46:	4903      	ldr	r1, [pc, #12]	@ (8007c54 <LL_ADC_REG_Init+0x4c>)
 8007c48:	68d8      	ldr	r0, [r3, #12]
 8007c4a:	4001      	ands	r1, r0
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	432a      	orrs	r2, r5
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	e7ec      	b.n	8007c2e <LL_ADC_REG_Init+0x26>
 8007c54:	fff0c01c 	.word	0xfff0c01c

08007c58 <LL_DAC_Init>:
  return ((READ_BIT(DACx->CR,
 8007c58:	f04f 0c01 	mov.w	ip, #1
 8007c5c:	f001 0110 	and.w	r1, r1, #16
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8007c60:	4603      	mov	r3, r0
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	fa0c fc01 	lsl.w	ip, ip, r1
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007c68:	ea3c 0c00 	bics.w	ip, ip, r0
 8007c6c:	d029      	beq.n	8007cc2 <LL_DAC_Init+0x6a>
 8007c6e:	b470      	push	{r4, r5, r6}
    /*  - OutputBuffer                                                        */
    /*  - OutputConnection                                                    */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    {
      MODIFY_REG(DACx->CR,
 8007c70:	e9d2 4000 	ldrd	r4, r0, [r2]
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8007c74:	b9c0      	cbnz	r0, 8007ca8 <LL_DAC_Init+0x50>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8007c76:	25fc      	movs	r5, #252	@ 0xfc
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	408c      	lsls	r4, r1
 8007c7c:	408d      	lsls	r5, r1
 8007c7e:	ea20 0005 	bic.w	r0, r0, r5
 8007c82:	4320      	orrs	r0, r4
 8007c84:	6018      	str	r0, [r3, #0]
                  | LL_DAC_WAVE_AUTO_GENERATION_NONE
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    
    MODIFY_REG(DACx->MCR,
 8007c86:	6955      	ldr	r5, [r2, #20]
 8007c88:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8007c8a:	e9d2 0603 	ldrd	r0, r6, [r2, #12]
 8007c8e:	ea40 0206 	orr.w	r2, r0, r6
 8007c92:	2007      	movs	r0, #7
 8007c94:	432a      	orrs	r2, r5
 8007c96:	4088      	lsls	r0, r1
 8007c98:	408a      	lsls	r2, r1
 8007c9a:	ea24 0100 	bic.w	r1, r4, r0
  ErrorStatus status = SUCCESS;
 8007c9e:	2001      	movs	r0, #1
    MODIFY_REG(DACx->MCR,
 8007ca0:	430a      	orrs	r2, r1
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 8007ca2:	bc70      	pop	{r4, r5, r6}
    MODIFY_REG(DACx->MCR,
 8007ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007ca6:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 8007ca8:	4320      	orrs	r0, r4
 8007caa:	f640 75fc 	movw	r5, #4092	@ 0xffc
 8007cae:	6894      	ldr	r4, [r2, #8]
 8007cb0:	408d      	lsls	r5, r1
 8007cb2:	4320      	orrs	r0, r4
 8007cb4:	681c      	ldr	r4, [r3, #0]
 8007cb6:	4088      	lsls	r0, r1
 8007cb8:	ea24 0405 	bic.w	r4, r4, r5
 8007cbc:	4320      	orrs	r0, r4
 8007cbe:	6018      	str	r0, [r3, #0]
 8007cc0:	e7e1      	b.n	8007c86 <LL_DAC_Init+0x2e>
    status = ERROR;
 8007cc2:	2000      	movs	r0, #0
}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop

08007cc8 <LL_DMA_Init>:
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR,
 8007cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8007d78 <LL_DMA_Init+0xb0>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8007cca:	b530      	push	{r4, r5, lr}
 8007ccc:	f813 e001 	ldrb.w	lr, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8007cd0:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8007cd4:	f850 500e 	ldr.w	r5, [r0, lr]
 8007cd8:	eb00 0c0e 	add.w	ip, r0, lr
 8007cdc:	4323      	orrs	r3, r4
                        DMA_InitStruct->Mode                    | \
 8007cde:	6914      	ldr	r4, [r2, #16]
 8007ce0:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 8007ce2:	6954      	ldr	r4, [r2, #20]
 8007ce4:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8007ce6:	6994      	ldr	r4, [r2, #24]
 8007ce8:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8007cea:	69d4      	ldr	r4, [r2, #28]
 8007cec:	4323      	orrs	r3, r4
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8007cee:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8007cf0:	4323      	orrs	r3, r4
 8007cf2:	4c22      	ldr	r4, [pc, #136]	@ (8007d7c <LL_DMA_Init+0xb4>)
 8007cf4:	402c      	ands	r4, r5
 8007cf6:	4323      	orrs	r3, r4
 8007cf8:	f840 300e 	str.w	r3, [r0, lr]
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
                        DMA_InitStruct->Priority
                       );

  if (DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 8007cfc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007cfe:	b1c3      	cbz	r3, 8007d32 <LL_DMA_Init+0x6a>
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8007d00:	f8dc 4014 	ldr.w	r4, [ip, #20]
 8007d04:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007d06:	f024 0407 	bic.w	r4, r4, #7
 8007d0a:	432b      	orrs	r3, r5
 8007d0c:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8007d0e:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_FTH | DMA_SxFCR_DMDIS, FifoMode | FifoThreshold);
 8007d10:	f8cc 3014 	str.w	r3, [ip, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8007d14:	f850 300e 	ldr.w	r3, [r0, lr]
 8007d18:	f023 73c0 	bic.w	r3, r3, #25165824	@ 0x1800000
 8007d1c:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 8007d1e:	6b94      	ldr	r4, [r2, #56]	@ 0x38
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MBURST, Mburst);
 8007d20:	f840 300e 	str.w	r3, [r0, lr]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PBURST, Pburst);
 8007d24:	f850 300e 	ldr.w	r3, [r0, lr]
 8007d28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007d2c:	4323      	orrs	r3, r4
 8007d2e:	f840 300e 	str.w	r3, [r0, lr]

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 8007d32:	6853      	ldr	r3, [r2, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8007d34:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8007d88 <LL_DMA_Init+0xc0>
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8007d38:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8007d3c:	6813      	ldr	r3, [r2, #0]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007d3e:	4c10      	ldr	r4, [pc, #64]	@ (8007d80 <LL_DMA_Init+0xb8>)
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8007d40:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8007d44:	f8dc 3004 	ldr.w	r3, [ip, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007d48:	440c      	add	r4, r1
 8007d4a:	6a55      	ldr	r5, [r2, #36]	@ 0x24
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8007d4c:	ea03 0e0e 	and.w	lr, r3, lr
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007d50:	4b0c      	ldr	r3, [pc, #48]	@ (8007d84 <LL_DMA_Init+0xbc>)
 8007d52:	1ac0      	subs	r0, r0, r3
 8007d54:	bf18      	it	ne
 8007d56:	2001      	movne	r0, #1
 8007d58:	0143      	lsls	r3, r0, #5
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8007d5a:	6a10      	ldr	r0, [r2, #32]
 8007d5c:	ea4e 0000 	orr.w	r0, lr, r0
 8007d60:	f8cc 0004 	str.w	r0, [ip, #4]
   * - PeriphRequest:             DMA_SxCR_CHSEL[3:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Stream, DMA_InitStruct->PeriphRequest);

  return (uint32_t)SUCCESS;
}
 8007d64:	2001      	movs	r0, #1
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007d66:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8007d6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007d6e:	432a      	orrs	r2, r5
 8007d70:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007d74:	bd30      	pop	{r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	0800a988 	.word	0x0800a988
 8007d7c:	fffc801f 	.word	0xfffc801f
 8007d80:	10008200 	.word	0x10008200
 8007d84:	40020000 	.word	0x40020000
 8007d88:	ffff0000 	.word	0xffff0000

08007d8c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007d90:	680c      	ldr	r4, [r1, #0]
 8007d92:	fa94 f2a4 	rbit	r2, r4
 8007d96:	fab2 f282 	clz	r2, r2
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007d9a:	f8d1 8004 	ldr.w	r8, [r1, #4]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007d9e:	fa34 f502 	lsrs.w	r5, r4, r2
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007da2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007da6:	f000 80a0 	beq.w	8007eea <LL_GPIO_Init+0x15e>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d922      	bls.n	8007df4 <LL_GPIO_Init+0x68>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007dae:	f04f 0e01 	mov.w	lr, #1
 8007db2:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin != 0x00000000U)
 8007db6:	3201      	adds	r2, #1
 8007db8:	4023      	ands	r3, r4
 8007dba:	fb03 f303 	mul.w	r3, r3, r3
 8007dbe:	d013      	beq.n	8007de8 <LL_GPIO_Init+0x5c>
 8007dc0:	f8d0 c000 	ldr.w	ip, [r0]
 8007dc4:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8007dc8:	fb08 f503 	mul.w	r5, r8, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007dcc:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007dce:	ea2c 0c07 	bic.w	ip, ip, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007dd2:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007dd6:	ea45 050c 	orr.w	r5, r5, ip
 8007dda:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007ddc:	68c5      	ldr	r5, [r0, #12]
 8007dde:	ea25 0c07 	bic.w	ip, r5, r7
 8007de2:	ea43 030c 	orr.w	r3, r3, ip
 8007de6:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007de8:	fa34 f302 	lsrs.w	r3, r4, r2
 8007dec:	d1e1      	bne.n	8007db2 <LL_GPIO_Init+0x26>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007dee:	2001      	movs	r0, #1
 8007df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df4:	f1b8 0f02 	cmp.w	r8, #2
 8007df8:	d154      	bne.n	8007ea4 <LL_GPIO_Init+0x118>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007dfa:	2701      	movs	r7, #1
 8007dfc:	fa07 fc02 	lsl.w	ip, r7, r2
    if (currentpin != 0x00000000U)
 8007e00:	ea1c 0c04 	ands.w	ip, ip, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007e04:	fb0c f30c 	mul.w	r3, ip, ip
 8007e08:	d033      	beq.n	8007e72 <LL_GPIO_Init+0xe6>
 8007e0a:	6805      	ldr	r5, [r0, #0]
 8007e0c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007e10:	688e      	ldr	r6, [r1, #8]
        if (currentpin < LL_GPIO_PIN_8)
 8007e12:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007e16:	ea25 050e 	bic.w	r5, r5, lr
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e1a:	f8d1 8010 	ldr.w	r8, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007e1e:	fb03 f606 	mul.w	r6, r3, r6
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007e22:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e26:	fb08 f803 	mul.w	r8, r8, r3
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007e2a:	fb03 f303 	mul.w	r3, r3, r3
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007e2e:	6005      	str	r5, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007e30:	6885      	ldr	r5, [r0, #8]
 8007e32:	ea25 050e 	bic.w	r5, r5, lr
 8007e36:	ea46 0605 	orr.w	r6, r6, r5
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e3a:	ea4f 251c 	mov.w	r5, ip, lsr #8
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007e3e:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e40:	68c6      	ldr	r6, [r0, #12]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e42:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e46:	ea26 060e 	bic.w	r6, r6, lr
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e4a:	fb05 f505 	mul.w	r5, r5, r5
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e4e:	ea46 0608 	orr.w	r6, r6, r8
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e52:	ebc5 1e05 	rsb	lr, r5, r5, lsl #4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007e56:	ebc3 1803 	rsb	r8, r3, r3, lsl #4
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007e5a:	60c6      	str	r6, [r0, #12]
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007e5c:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007e5e:	fb06 f303 	mul.w	r3, r6, r3
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e62:	fb06 f505 	mul.w	r5, r6, r5
        if (currentpin < LL_GPIO_PIN_8)
 8007e66:	d813      	bhi.n	8007e90 <LL_GPIO_Init+0x104>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8007e68:	6a05      	ldr	r5, [r0, #32]
 8007e6a:	ea25 0508 	bic.w	r5, r5, r8
 8007e6e:	432b      	orrs	r3, r5
 8007e70:	6203      	str	r3, [r0, #32]
    pinpos++;
 8007e72:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007e74:	fa34 f302 	lsrs.w	r3, r4, r2
 8007e78:	d1c0      	bne.n	8007dfc <LL_GPIO_Init+0x70>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007e7a:	6843      	ldr	r3, [r0, #4]
 8007e7c:	68ca      	ldr	r2, [r1, #12]
 8007e7e:	ea23 0304 	bic.w	r3, r3, r4
 8007e82:	fb02 f404 	mul.w	r4, r2, r4
 8007e86:	4323      	orrs	r3, r4
 8007e88:	6043      	str	r3, [r0, #4]
}
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8007e90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    pinpos++;
 8007e92:	3201      	adds	r2, #1
 8007e94:	ea23 030e 	bic.w	r3, r3, lr
 8007e98:	432b      	orrs	r3, r5
 8007e9a:	6243      	str	r3, [r0, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007e9c:	fa34 f302 	lsrs.w	r3, r4, r2
 8007ea0:	d1ac      	bne.n	8007dfc <LL_GPIO_Init+0x70>
 8007ea2:	e7ea      	b.n	8007e7a <LL_GPIO_Init+0xee>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007ea4:	2601      	movs	r6, #1
 8007ea6:	fa06 f302 	lsl.w	r3, r6, r2
    if (currentpin != 0x00000000U)
 8007eaa:	3201      	adds	r2, #1
 8007eac:	4023      	ands	r3, r4
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007eae:	fb03 f303 	mul.w	r3, r3, r3
 8007eb2:	d016      	beq.n	8007ee2 <LL_GPIO_Init+0x156>
 8007eb4:	6807      	ldr	r7, [r0, #0]
 8007eb6:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007eba:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007ebc:	ea27 070c 	bic.w	r7, r7, ip
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007ec0:	fb03 f505 	mul.w	r5, r3, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8007ec4:	431f      	orrs	r7, r3
 8007ec6:	6007      	str	r7, [r0, #0]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007ec8:	6887      	ldr	r7, [r0, #8]
 8007eca:	ea27 070c 	bic.w	r7, r7, ip
 8007ece:	433d      	orrs	r5, r7
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007ed0:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007ed2:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8007ed4:	68c5      	ldr	r5, [r0, #12]
 8007ed6:	fb07 f303 	mul.w	r3, r7, r3
 8007eda:	ea25 050c 	bic.w	r5, r5, ip
 8007ede:	432b      	orrs	r3, r5
 8007ee0:	60c3      	str	r3, [r0, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007ee2:	fa34 f302 	lsrs.w	r3, r4, r2
 8007ee6:	d1de      	bne.n	8007ea6 <LL_GPIO_Init+0x11a>
 8007ee8:	e7c7      	b.n	8007e7a <LL_GPIO_Init+0xee>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	f63f af7f 	bhi.w	8007dee <LL_GPIO_Init+0x62>
 8007ef0:	e7c3      	b.n	8007e7a <LL_GPIO_Init+0xee>
 8007ef2:	bf00      	nop

08007ef4 <LL_GPIO_StructInit>:
void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8007ef4:	2300      	movs	r3, #0
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8007ef6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007efa:	2203      	movs	r2, #3
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007efc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8007f00:	e9c0 1200 	strd	r1, r2, [r0]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 8007f04:	e9c0 3304 	strd	r3, r3, [r0, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <LL_MDMA_Init>:
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8007f0c:	4b34      	ldr	r3, [pc, #208]	@ (8007fe0 <LL_MDMA_Init+0xd4>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: MDMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_MDMA_Init(MDMA_TypeDef *MDMAx, uint32_t Channel, LL_MDMA_InitTypeDef *MDMA_InitStruct)
{
 8007f0e:	b430      	push	{r4, r5}
 8007f10:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   * - DestDataSize:            MDMA_CTCR_DSIZE[7:6] bits
   * - SrcDataSize:             MDMA_CTCR_SSIZE[5:4] bits
   * - DestIncMode:             MDMA_CTCR_DINC[3:2] bits
   * - SrcIncMode:              MDMA_CTCR_SINC[1:0] bits
   */
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8007f14:	6895      	ldr	r5, [r2, #8]
 8007f16:	4401      	add	r1, r0
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 8007f18:	e9d2 430c 	ldrd	r4, r3, [r2, #48]	@ 0x30
 8007f1c:	ea44 0003 	orr.w	r0, r4, r3
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8007f20:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007f22:	68cc      	ldr	r4, [r1, #12]
 8007f24:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->RequestMode         | \
 8007f26:	68d5      	ldr	r5, [r2, #12]
 8007f28:	f424 44e0 	bic.w	r4, r4, #28672	@ 0x7000
 8007f2c:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->TriggerMode         | \
 8007f2e:	6c55      	ldr	r5, [r2, #68]	@ 0x44
 8007f30:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PaddingAlignment   | \
 8007f32:	6c95      	ldr	r5, [r2, #72]	@ 0x48
 8007f34:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->PackMode            | \
 8007f36:	6d15      	ldr	r5, [r2, #80]	@ 0x50
 8007f38:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestBurst           | \
 8007f3a:	6d55      	ldr	r5, [r2, #84]	@ 0x54
 8007f3c:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->SrctBurst           | \
 8007f3e:	6d95      	ldr	r5, [r2, #88]	@ 0x58
 8007f40:	432b      	orrs	r3, r5
                                         MDMA_InitStruct->DestIncSize         | \
 8007f42:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8007f44:	432b      	orrs	r3, r5
  LL_MDMA_ConfigXferEndianness(MDMAx, Channel, MDMA_InitStruct->WordEndianess     | \
 8007f46:	6b95      	ldr	r5, [r2, #56]	@ 0x38
 8007f48:	4328      	orrs	r0, r5
                                         MDMA_InitStruct->SrcIncSize          | \
                                         MDMA_InitStruct->DestDataSize        | \
                                         MDMA_InitStruct->SrcDataSize         | \
 8007f4a:	6e95      	ldr	r5, [r2, #104]	@ 0x68
 8007f4c:	4320      	orrs	r0, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 8007f4e:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8007f50:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CCR, MDMA_CCR_PL, Priority);
 8007f52:	68c8      	ldr	r0, [r1, #12]
 8007f54:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8007f58:	4320      	orrs	r0, r4
 8007f5a:	60c8      	str	r0, [r1, #12]
                                         MDMA_InitStruct->DestDataSize        | \
 8007f5c:	e9d2 4018 	ldrd	r4, r0, [r2, #96]	@ 0x60
                                         MDMA_InitStruct->SrcIncSize          | \
 8007f60:	4323      	orrs	r3, r4
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8007f62:	6ed4      	ldr	r4, [r2, #108]	@ 0x6c
                                         MDMA_InitStruct->DestDataSize        | \
 8007f64:	4303      	orrs	r3, r0
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 8007f66:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
                                         MDMA_InitStruct->SrcDataSize         | \
 8007f68:	432b      	orrs	r3, r5
 8007f6a:	0480      	lsls	r0, r0, #18
  LL_MDMA_ConfigTransfer(MDMAx, Channel, MDMA_InitStruct->BufferableWriteMode | \
 8007f6c:	4323      	orrs	r3, r4
 8007f6e:	f000 70fe 	and.w	r0, r0, #33292288	@ 0x1fc0000
 8007f72:	4303      	orrs	r3, r0
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 8007f74:	e9d2 0505 	ldrd	r0, r5, [r2, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTCR,
 8007f78:	610b      	str	r3, [r1, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 8007f7a:	f3c0 0310 	ubfx	r3, r0, #0, #17
 8007f7e:	694c      	ldr	r4, [r1, #20]
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRDUM[19] bit
   * - BlockRepeatDestAddrUpdateMode:   MDMA_CBNDTR_BRSUM[18] bit
   */
  LL_MDMA_ConfigBlkCounters(MDMAx, Channel, MDMA_InitStruct->BlockRepeatCount, MDMA_InitStruct->BlockDataLength);

  LL_MDMA_ConfigBlkRepeatAddrUpdate(MDMAx, Channel, MDMA_InitStruct->BlockRepeatDestAddrUpdateMode | \
 8007f80:	69d0      	ldr	r0, [r2, #28]
 8007f82:	f404 2c60 	and.w	ip, r4, #917504	@ 0xe0000
 8007f86:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8007f8a:	ea43 030c 	orr.w	r3, r3, ip
 8007f8e:	614b      	str	r3, [r1, #20]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBNDTR,
 8007f90:	694b      	ldr	r3, [r1, #20]
 8007f92:	f423 2c40 	bic.w	ip, r3, #786432	@ 0xc0000
 8007f96:	6a13      	ldr	r3, [r2, #32]
 8007f98:	4303      	orrs	r3, r0
 8007f9a:	ea43 030c 	orr.w	r3, r3, ip
 8007f9e:	614b      	str	r3, [r1, #20]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 8007fa0:	6a55      	ldr	r5, [r2, #36]	@ 0x24

  /*-------------------------- MDMAx CSAR Configuration --------------------------
   * Configure the Transfer source address with parameter :
   * - SrcAddress:     MDMA_CSAR_SAR[31:0] bits
   */
  LL_MDMA_SetSourceAddress(MDMAx, Channel, MDMA_InitStruct->SrcAddress);
 8007fa2:	6814      	ldr	r4, [r2, #0]
 8007fa4:	8d13      	ldrh	r3, [r2, #40]	@ 0x28

  /*-------------------------- MDMAx CDAR Configuration --------------------------
   * Configure the Transfer destination address with parameter :
   * - DstAddress:     MDMA_CDAR_DAR[31:0] bits
   */
  LL_MDMA_SetDestinationAddress(MDMAx, Channel, MDMA_InitStruct->DstAddress);
 8007fa6:	6850      	ldr	r0, [r2, #4]
 8007fa8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CSAR, SrcAddress);
 8007fac:	618c      	str	r4, [r1, #24]
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CDAR, DestAddress);
 8007fae:	61c8      	str	r0, [r1, #28]

  /*-------------------------- MDMAx CLAR Configuration --------------------------
   * Configure the Transfer linked list address with parameter :
   * - LinkAddress:     MDMA_CLAR_LAR[31:0] bits
   */
  LL_MDMA_SetLinkAddress(MDMAx, Channel, MDMA_InitStruct->LinkAddress);
 8007fb0:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CBRUR,
 8007fb2:	620b      	str	r3, [r1, #32]
   * Configure the Transfer HW trigger and bus selection with parameter :
   * - DestBus:     MDMA_TBR_DBUS[17] bit
   * - SrcBus:      MDMA_TBR_SBUS[16] bit
   * - HWTrigger:   MDMA_TBR_TSEL[5:0] bits
   */
  LL_MDMA_ConfigBusSelection(MDMAx, Channel, MDMA_InitStruct->DestBus | MDMA_InitStruct->SrcBus);
 8007fb4:	e9d2 341c 	ldrd	r3, r4, [r2, #112]	@ 0x70
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CLAR, LinkAddress);
 8007fb8:	6248      	str	r0, [r1, #36]	@ 0x24
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 8007fba:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8007fbc:	4323      	orrs	r3, r4
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 8007fbe:	6914      	ldr	r4, [r2, #16]
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR,
 8007fc0:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
 8007fc4:	4303      	orrs	r3, r0
   * - MaskData:     MDMA_CMDR_MDR[31:0] bits
   */
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);

  return (uint32_t)SUCCESS;
}
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	628b      	str	r3, [r1, #40]	@ 0x28
  MODIFY_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CTBR, MDMA_CTBR_TSEL, HWRequest);
 8007fca:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8007fcc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007fd0:	4323      	orrs	r3, r4
  LL_MDMA_SetMaskData(MDMAx, Channel, MDMA_InitStruct->MaskData);
 8007fd2:	e9d2 421e 	ldrd	r4, r2, [r2, #120]	@ 0x78
 8007fd6:	628b      	str	r3, [r1, #40]	@ 0x28
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMAR, MaskAddress);
 8007fd8:	630c      	str	r4, [r1, #48]	@ 0x30
  WRITE_REG(((MDMA_Channel_TypeDef *)(mdma_base_addr + LL_MDMA_CH_OFFSET_TAB[Channel]))->CMDR, MaskData);
 8007fda:	634a      	str	r2, [r1, #52]	@ 0x34
}
 8007fdc:	bc30      	pop	{r4, r5}
 8007fde:	4770      	bx	lr
 8007fe0:	0800a990 	.word	0x0800a990

08007fe4 <LL_RCC_GetPLL1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8007fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8008160 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8007fe6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8007fe8:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();

  switch (pllsource)
 8007fec:	2b01      	cmp	r3, #1
{
 8007fee:	b410      	push	{r4}
  switch (pllsource)
 8007ff0:	f000 80aa 	beq.w	8008148 <LL_RCC_GetPLL1ClockFreq+0x164>
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d00d      	beq.n	8008014 <LL_RCC_GetPLL1ClockFreq+0x30>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 80ae 	bne.w	800815a <LL_RCC_GetPLL1ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	f013 0c04 	ands.w	ip, r3, #4
 8008004:	d00e      	beq.n	8008024 <LL_RCC_GetPLL1ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8008006:	6812      	ldr	r2, [r2, #0]
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8008008:	4b56      	ldr	r3, [pc, #344]	@ (8008164 <LL_RCC_GetPLL1ClockFreq+0x180>)
 800800a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800800e:	fa23 fc02 	lsr.w	ip, r3, r2
 8008012:	e007      	b.n	8008024 <LL_RCC_GetPLL1ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8008014:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8008016:	4b54      	ldr	r3, [pc, #336]	@ (8008168 <LL_RCC_GetPLL1ClockFreq+0x184>)
 8008018:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800801c:	bf14      	ite	ne
 800801e:	469c      	movne	ip, r3
 8008020:	f04f 0c00 	moveq.w	ip, #0
    default:
      /* PLL clock disabled */
      break;
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8008024:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8008026:	4c4e      	ldr	r4, [pc, #312]	@ (8008160 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8008028:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
  PLL_Clocks->PLL_R_Frequency = 0U;
 800802c:	6083      	str	r3, [r0, #8]
 800802e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8008030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8008032:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8008034:	f3c2 1205 	ubfx	r2, r2, #4, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN)?1UL:0UL);
 8008038:	f013 0301 	ands.w	r3, r3, #1
 800803c:	d002      	beq.n	8008044 <LL_RCC_GetPLL1ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800803e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008040:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
  {
    fracn = LL_RCC_PLL1_GetFRACN();
  }

  if (m != 0U)
 8008044:	2a00      	cmp	r2, #0
 8008046:	d07c      	beq.n	8008142 <LL_RCC_GetPLL1ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8008048:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800804c:	3101      	adds	r1, #1
 800804e:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN)?1UL:0UL);
 8008052:	4943      	ldr	r1, [pc, #268]	@ (8008160 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 8008054:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008056:	03e4      	lsls	r4, r4, #15
 8008058:	d523      	bpl.n	80080a2 <LL_RCC_GetPLL1ClockFreq+0xbe>
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8008062:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8008064:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8008068:	ee07 ca90 	vmov	s15, ip
 800806c:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 800816c <LL_RCC_GetPLL1ClockFreq+0x188>
 8008070:	f3c1 2146 	ubfx	r1, r1, #9, #7
 8008074:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008078:	ee07 2a90 	vmov	s15, r2
 800807c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8008080:	3101      	adds	r1, #1
 8008082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008086:	ee85 6aa7 	vdiv.f32	s12, s11, s15

  freq = freq/(float_t)PQR;
 800808a:	ee07 1a90 	vmov	s15, r1
 800808e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008092:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8008096:	eec6 6a27 	vdiv.f32	s13, s12, s15

  return (uint32_t)freq;
 800809a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800809e:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN)?1UL:0UL);
 80080a2:	492f      	ldr	r1, [pc, #188]	@ (8008160 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80080a4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80080a6:	03a4      	lsls	r4, r4, #14
 80080a8:	d523      	bpl.n	80080f2 <LL_RCC_GetPLL1ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80080b2:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80080b4:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80080b8:	ee07 ca90 	vmov	s15, ip
 80080bc:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 800816c <LL_RCC_GetPLL1ClockFreq+0x188>
 80080c0:	f3c1 4106 	ubfx	r1, r1, #16, #7
 80080c4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80080c8:	ee07 2a90 	vmov	s15, r2
 80080cc:	eee4 6a85 	vfma.f32	s13, s9, s10
 80080d0:	3101      	adds	r1, #1
 80080d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080d6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 80080da:	ee07 1a90 	vmov	s15, r1
 80080de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80080e2:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 80080e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 80080ea:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80080ee:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN)?1UL:0UL);
 80080f2:	491b      	ldr	r1, [pc, #108]	@ (8008160 <LL_RCC_GetPLL1ClockFreq+0x17c>)
 80080f4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80080f6:	0364      	lsls	r4, r4, #13
 80080f8:	d523      	bpl.n	8008142 <LL_RCC_GetPLL1ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80080fa:	ee07 ca90 	vmov	s15, ip
 80080fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008102:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 800816c <LL_RCC_GetPLL1ClockFreq+0x188>
 8008106:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800810a:	ee07 2a90 	vmov	s15, r2
 800810e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008112:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8008116:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800811c:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8008120:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008124:	3301      	adds	r3, #1
 8008126:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008132:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 8008136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 800813a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800813e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008146:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8008148:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800814a:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <LL_RCC_GetPLL1ClockFreq+0x18c>)
 800814c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008150:	bf14      	ite	ne
 8008152:	469c      	movne	ip, r3
 8008154:	f04f 0c00 	moveq.w	ip, #0
 8008158:	e764      	b.n	8008024 <LL_RCC_GetPLL1ClockFreq+0x40>
 800815a:	f04f 0c00 	mov.w	ip, #0
 800815e:	e761      	b.n	8008024 <LL_RCC_GetPLL1ClockFreq+0x40>
 8008160:	58024400 	.word	0x58024400
 8008164:	03d09000 	.word	0x03d09000
 8008168:	00f42400 	.word	0x00f42400
 800816c:	39000000 	.word	0x39000000
 8008170:	003d0900 	.word	0x003d0900

08008174 <LL_RCC_GetPLL2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8008174:	4a5e      	ldr	r2, [pc, #376]	@ (80082f0 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8008176:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008178:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 800817c:	2b01      	cmp	r3, #1
{
 800817e:	b410      	push	{r4}
  switch (pllsource)
 8008180:	f000 80aa 	beq.w	80082d8 <LL_RCC_GetPLL2ClockFreq+0x164>
 8008184:	2b02      	cmp	r3, #2
 8008186:	d00d      	beq.n	80081a4 <LL_RCC_GetPLL2ClockFreq+0x30>
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 80ae 	bne.w	80082ea <LL_RCC_GetPLL2ClockFreq+0x176>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 800818e:	6813      	ldr	r3, [r2, #0]
 8008190:	f013 0c04 	ands.w	ip, r3, #4
 8008194:	d00e      	beq.n	80081b4 <LL_RCC_GetPLL2ClockFreq+0x40>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8008196:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8008198:	4b56      	ldr	r3, [pc, #344]	@ (80082f4 <LL_RCC_GetPLL2ClockFreq+0x180>)
 800819a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800819e:	fa23 fc02 	lsr.w	ip, r3, r2
 80081a2:	e007      	b.n	80081b4 <LL_RCC_GetPLL2ClockFreq+0x40>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 80081a4:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80081a6:	4b54      	ldr	r3, [pc, #336]	@ (80082f8 <LL_RCC_GetPLL2ClockFreq+0x184>)
 80081a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80081ac:	bf14      	ite	ne
 80081ae:	469c      	movne	ip, r3
 80081b0:	f04f 0c00 	moveq.w	ip, #0
  PLL_Clocks->PLL_P_Frequency = 0U;
 80081b4:	2300      	movs	r3, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80081b6:	4c4e      	ldr	r4, [pc, #312]	@ (80082f0 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80081b8:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80081bc:	6083      	str	r3, [r0, #8]
 80081be:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80081c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 80081c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80081c4:	f3c2 3205 	ubfx	r2, r2, #12, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN)?1UL:0UL);
 80081c8:	f013 0310 	ands.w	r3, r3, #16
 80081cc:	d002      	beq.n	80081d4 <LL_RCC_GetPLL2ClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 80081ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081d0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  if (m != 0U)
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	d07c      	beq.n	80082d2 <LL_RCC_GetPLL2ClockFreq+0x15e>
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80081d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80081dc:	3101      	adds	r1, #1
 80081de:	ee07 1a10 	vmov	s14, r1
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN)?1UL:0UL);
 80081e2:	4943      	ldr	r1, [pc, #268]	@ (80082f0 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 80081e4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80081e6:	0324      	lsls	r4, r4, #12
 80081e8:	d523      	bpl.n	8008232 <LL_RCC_GetPLL2ClockFreq+0xbe>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 80081f2:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 80081f4:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80081f8:	ee07 ca90 	vmov	s15, ip
 80081fc:	ed9f 5a3f 	vldr	s10, [pc, #252]	@ 80082fc <LL_RCC_GetPLL2ClockFreq+0x188>
 8008200:	f3c1 2146 	ubfx	r1, r1, #9, #7
 8008204:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008208:	ee07 2a90 	vmov	s15, r2
 800820c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8008210:	3101      	adds	r1, #1
 8008212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008216:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 800821a:	ee07 1a90 	vmov	s15, r1
 800821e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008222:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8008226:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 800822a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800822e:	edc0 6a00 	vstr	s13, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN)?1UL:0UL);
 8008232:	492f      	ldr	r1, [pc, #188]	@ (80082f0 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8008234:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008236:	02e4      	lsls	r4, r4, #11
 8008238:	d523      	bpl.n	8008282 <LL_RCC_GetPLL2ClockFreq+0x10e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8008242:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8008244:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8008248:	ee07 ca90 	vmov	s15, ip
 800824c:	ed9f 5a2b 	vldr	s10, [pc, #172]	@ 80082fc <LL_RCC_GetPLL2ClockFreq+0x188>
 8008250:	f3c1 4106 	ubfx	r1, r1, #16, #7
 8008254:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008258:	ee07 2a90 	vmov	s15, r2
 800825c:	eee4 6a85 	vfma.f32	s13, s9, s10
 8008260:	3101      	adds	r1, #1
 8008262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008266:	ee85 6aa7 	vdiv.f32	s12, s11, s15
  freq = freq/(float_t)PQR;
 800826a:	ee07 1a90 	vmov	s15, r1
 800826e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008272:	ee26 6a26 	vmul.f32	s12, s12, s13
  freq = freq/(float_t)PQR;
 8008276:	eec6 6a27 	vdiv.f32	s13, s12, s15
  return (uint32_t)freq;
 800827a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800827e:	edc0 6a01 	vstr	s13, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN)?1UL:0UL);
 8008282:	491b      	ldr	r1, [pc, #108]	@ (80082f0 <LL_RCC_GetPLL2ClockFreq+0x17c>)
 8008284:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008286:	02a4      	lsls	r4, r4, #10
 8008288:	d523      	bpl.n	80082d2 <LL_RCC_GetPLL2ClockFreq+0x15e>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 800828a:	ee07 ca90 	vmov	s15, ip
 800828e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008292:	ed9f 5a1a 	vldr	s10, [pc, #104]	@ 80082fc <LL_RCC_GetPLL2ClockFreq+0x188>
 8008296:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800829a:	ee07 2a90 	vmov	s15, r2
 800829e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80082a2:	ee07 3a90 	vmov	s15, r3
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 80082a6:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80082a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ac:	eec6 5a86 	vdiv.f32	s11, s13, s12
 80082b0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80082b4:	3301      	adds	r3, #1
 80082b6:	eea7 7a85 	vfma.f32	s14, s15, s10
  freq = freq/(float_t)PQR;
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80082c2:	ee65 6a87 	vmul.f32	s13, s11, s14
  freq = freq/(float_t)PQR;
 80082c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 80082ca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80082ce:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80082d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d6:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 80082d8:	6812      	ldr	r2, [r2, #0]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80082da:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <LL_RCC_GetPLL2ClockFreq+0x18c>)
 80082dc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80082e0:	bf14      	ite	ne
 80082e2:	469c      	movne	ip, r3
 80082e4:	f04f 0c00 	moveq.w	ip, #0
 80082e8:	e764      	b.n	80081b4 <LL_RCC_GetPLL2ClockFreq+0x40>
 80082ea:	f04f 0c00 	mov.w	ip, #0
 80082ee:	e761      	b.n	80081b4 <LL_RCC_GetPLL2ClockFreq+0x40>
 80082f0:	58024400 	.word	0x58024400
 80082f4:	03d09000 	.word	0x03d09000
 80082f8:	00f42400 	.word	0x00f42400
 80082fc:	39000000 	.word	0x39000000
 8008300:	003d0900 	.word	0x003d0900

08008304 <LL_RCC_GetPLL3ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8008304:	4a62      	ldr	r2, [pc, #392]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8008306:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008308:	f003 0303 	and.w	r3, r3, #3
  switch (pllsource)
 800830c:	2b01      	cmp	r3, #1
{
 800830e:	b410      	push	{r4}
  switch (pllsource)
 8008310:	f000 80a0 	beq.w	8008454 <LL_RCC_GetPLL3ClockFreq+0x150>
 8008314:	2b02      	cmp	r3, #2
 8008316:	f000 8096 	beq.w	8008446 <LL_RCC_GetPLL3ClockFreq+0x142>
 800831a:	b91b      	cbnz	r3, 8008324 <LL_RCC_GetPLL3ClockFreq+0x20>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	075c      	lsls	r4, r3, #29
 8008320:	f100 80ae 	bmi.w	8008480 <LL_RCC_GetPLL3ClockFreq+0x17c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8008324:	4c5a      	ldr	r4, [pc, #360]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8008326:	2200      	movs	r2, #0
 8008328:	e9c0 2200 	strd	r2, r2, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800832c:	6082      	str	r2, [r0, #8]
 800832e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8008330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8008332:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 8008334:	05e4      	lsls	r4, r4, #23
 8008336:	f140 8083 	bpl.w	8008440 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800833a:	f3c1 5105 	ubfx	r1, r1, #20, #6
 800833e:	ee07 2a90 	vmov	s15, r2
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8008342:	4c53      	ldr	r4, [pc, #332]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 8008344:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 8008346:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  if ((m != 0U) && (pllinputfreq != 0U))
 800834a:	2900      	cmp	r1, #0
 800834c:	d078      	beq.n	8008440 <LL_RCC_GetPLL3ClockFreq+0x13c>
 800834e:	2a00      	cmp	r2, #0
 8008350:	d076      	beq.n	8008440 <LL_RCC_GetPLL3ClockFreq+0x13c>
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 8008356:	4a4e      	ldr	r2, [pc, #312]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8008358:	3301      	adds	r3, #1
 800835a:	ee06 3a90 	vmov	s13, r3
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN)?1UL:0UL);
 800835e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008360:	025b      	lsls	r3, r3, #9
 8008362:	d521      	bpl.n	80083a8 <LL_RCC_GetPLL3ClockFreq+0xa4>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008364:	ee07 4a10 	vmov	s14, r4
 8008368:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800836c:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8008370:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008372:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 8008376:	ee07 1a10 	vmov	s14, r1
 800837a:	eddf 4a46 	vldr	s9, [pc, #280]	@ 8008494 <LL_RCC_GetPLL3ClockFreq+0x190>
 800837e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008382:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008386:	eea4 6a24 	vfma.f32	s12, s8, s9
 800838a:	3301      	adds	r3, #1
 800838c:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 8008390:	ee07 3a10 	vmov	s14, r3
 8008394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008398:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 800839c:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 80083a0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80083a4:	ed80 6a00 	vstr	s12, [r0]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN)?1UL:0UL);
 80083a8:	4b39      	ldr	r3, [pc, #228]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80083aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ac:	0212      	lsls	r2, r2, #8
 80083ae:	d521      	bpl.n	80083f4 <LL_RCC_GetPLL3ClockFreq+0xf0>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80083b0:	ee07 4a10 	vmov	s14, r4
 80083b4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80083b8:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80083bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083be:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
 80083c2:	ee07 1a10 	vmov	s14, r1
 80083c6:	eddf 4a33 	vldr	s9, [pc, #204]	@ 8008494 <LL_RCC_GetPLL3ClockFreq+0x190>
 80083ca:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80083ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083d2:	eea4 6a24 	vfma.f32	s12, s8, s9
 80083d6:	3301      	adds	r3, #1
 80083d8:	eec5 5a07 	vdiv.f32	s11, s10, s14
  freq = freq/(float_t)PQR;
 80083dc:	ee07 3a10 	vmov	s14, r3
 80083e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80083e4:	ee65 5a86 	vmul.f32	s11, s11, s12
  freq = freq/(float_t)PQR;
 80083e8:	ee85 6a87 	vdiv.f32	s12, s11, s14
  return (uint32_t)freq;
 80083ec:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80083f0:	ed80 6a01 	vstr	s12, [r0, #4]
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN)?1UL:0UL);
 80083f4:	4b26      	ldr	r3, [pc, #152]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
 80083f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f8:	01d2      	lsls	r2, r2, #7
 80083fa:	d521      	bpl.n	8008440 <LL_RCC_GetPLL3ClockFreq+0x13c>
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 80083fc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008400:	ee07 1a90 	vmov	s15, r1
 8008404:	ee07 4a10 	vmov	s14, r4
 8008408:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800840c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008416:	ed9f 5a1f 	vldr	s10, [pc, #124]	@ 8008494 <LL_RCC_GetPLL3ClockFreq+0x190>
 800841a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800841e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8008422:	3301      	adds	r3, #1
  freq = freq/(float_t)PQR;
 8008424:	ee07 3a90 	vmov	s15, r3
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008428:	eee7 6a05 	vfma.f32	s13, s14, s10
  freq = freq/(float_t)PQR;
 800842c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN/(float_t)0x2000));
 8008430:	ee65 6aa6 	vmul.f32	s13, s11, s13
  freq = freq/(float_t)PQR;
 8008434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  return (uint32_t)freq;
 8008438:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800843c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008444:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 8008446:	6813      	ldr	r3, [r2, #0]
 8008448:	039a      	lsls	r2, r3, #14
 800844a:	f57f af6b 	bpl.w	8008324 <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = HSE_VALUE;
 800844e:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008498 <LL_RCC_GetPLL3ClockFreq+0x194>
 8008452:	e005      	b.n	8008460 <LL_RCC_GetPLL3ClockFreq+0x15c>
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 8008454:	6813      	ldr	r3, [r2, #0]
 8008456:	05d9      	lsls	r1, r3, #23
 8008458:	f57f af64 	bpl.w	8008324 <LL_RCC_GetPLL3ClockFreq+0x20>
        pllinputfreq = CSI_VALUE;
 800845c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800849c <LL_RCC_GetPLL3ClockFreq+0x198>
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8008460:	4a0b      	ldr	r2, [pc, #44]	@ (8008490 <LL_RCC_GetPLL3ClockFreq+0x18c>)
  PLL_Clocks->PLL_P_Frequency = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	e9c0 3300 	strd	r3, r3, [r0]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8008468:	6083      	str	r3, [r0, #8]
 800846a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800846c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 800846e:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8008470:	f3c1 5105 	ubfx	r1, r1, #20, #6
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN)?1UL:0UL);
 8008474:	2201      	movs	r2, #1
 8008476:	f414 7480 	ands.w	r4, r4, #256	@ 0x100
 800847a:	f43f af66 	beq.w	800834a <LL_RCC_GetPLL3ClockFreq+0x46>
 800847e:	e760      	b.n	8008342 <LL_RCC_GetPLL3ClockFreq+0x3e>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8008480:	6812      	ldr	r2, [r2, #0]
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 8008482:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <LL_RCC_GetPLL3ClockFreq+0x19c>)
 8008484:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008488:	40d3      	lsrs	r3, r2
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	e7e7      	b.n	8008460 <LL_RCC_GetPLL3ClockFreq+0x15c>
 8008490:	58024400 	.word	0x58024400
 8008494:	39000000 	.word	0x39000000
 8008498:	00f42400 	.word	0x00f42400
 800849c:	003d0900 	.word	0x003d0900
 80084a0:	03d09000 	.word	0x03d09000

080084a4 <LL_RCC_GetUSARTClockFreq>:
  return (uint32_t) (Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << CONFIG_SHIFT) );
 80084a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008660 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80084a6:	f3c0 2104 	ubfx	r1, r0, #8, #5
 80084aa:	0e03      	lsrs	r3, r0, #24
 80084ac:	fa52 f280 	uxtab	r2, r2, r0
 80084b0:	408b      	lsls	r3, r1
 80084b2:	f8d2 244c 	ldr.w	r2, [r2, #1100]	@ 0x44c
 80084b6:	4013      	ands	r3, r2
 80084b8:	40cb      	lsrs	r3, r1
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80084ba:	b510      	push	{r4, lr}
 80084bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80084c0:	4c68      	ldr	r4, [pc, #416]	@ (8008664 <LL_RCC_GetUSARTClockFreq+0x1c0>)
{
 80084c2:	b084      	sub	sp, #16
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	f000 80a0 	beq.w	800860a <LL_RCC_GetUSARTClockFreq+0x166>
 80084ca:	d81a      	bhi.n	8008502 <LL_RCC_GetUSARTClockFreq+0x5e>
 80084cc:	4b66      	ldr	r3, [pc, #408]	@ (8008668 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80084ce:	4298      	cmp	r0, r3
 80084d0:	d077      	beq.n	80085c2 <LL_RCC_GetUSARTClockFreq+0x11e>
 80084d2:	d940      	bls.n	8008556 <LL_RCC_GetUSARTClockFreq+0xb2>
 80084d4:	4b65      	ldr	r3, [pc, #404]	@ (800866c <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80084d6:	4298      	cmp	r0, r3
 80084d8:	d009      	beq.n	80084ee <LL_RCC_GetUSARTClockFreq+0x4a>
 80084da:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 80084de:	4298      	cmp	r0, r3
 80084e0:	f000 8093 	beq.w	800860a <LL_RCC_GetUSARTClockFreq+0x166>
 80084e4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80084e8:	4298      	cmp	r0, r3
 80084ea:	f040 808b 	bne.w	8008604 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY))?1UL:0UL);
 80084ee:	4b60      	ldr	r3, [pc, #384]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80084f6:	d01e      	beq.n	8008536 <LL_RCC_GetUSARTClockFreq+0x92>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80084f8:	a801      	add	r0, sp, #4
 80084fa:	f7ff fe3b 	bl	8008174 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80084fe:	9802      	ldr	r0, [sp, #8]
 8008500:	e019      	b.n	8008536 <LL_RCC_GetUSARTClockFreq+0x92>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008502:	4b5c      	ldr	r3, [pc, #368]	@ (8008674 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8008504:	4298      	cmp	r0, r3
 8008506:	d053      	beq.n	80085b0 <LL_RCC_GetUSARTClockFreq+0x10c>
 8008508:	d817      	bhi.n	800853a <LL_RCC_GetUSARTClockFreq+0x96>
 800850a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800850e:	4298      	cmp	r0, r3
 8008510:	d007      	beq.n	8008522 <LL_RCC_GetUSARTClockFreq+0x7e>
 8008512:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8008516:	4298      	cmp	r0, r3
 8008518:	d04a      	beq.n	80085b0 <LL_RCC_GetUSARTClockFreq+0x10c>
 800851a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800851e:	4298      	cmp	r0, r3
 8008520:	d170      	bne.n	8008604 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY))?1UL:0UL);
 8008522:	4b53      	ldr	r3, [pc, #332]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f010 0004 	ands.w	r0, r0, #4
 800852a:	d004      	beq.n	8008536 <LL_RCC_GetUSARTClockFreq+0x92>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800852c:	681b      	ldr	r3, [r3, #0]

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800852e:	4852      	ldr	r0, [pc, #328]	@ (8008678 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8008530:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008534:	40d8      	lsrs	r0, r3
      /* Kernel clock disabled */
      break;
  }

  return usart_frequency;
}
 8008536:	b004      	add	sp, #16
 8008538:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800853a:	4b50      	ldr	r3, [pc, #320]	@ (800867c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800853c:	4298      	cmp	r0, r3
 800853e:	d003      	beq.n	8008548 <LL_RCC_GetUSARTClockFreq+0xa4>
 8008540:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008544:	4298      	cmp	r0, r3
 8008546:	d15d      	bne.n	8008604 <LL_RCC_GetUSARTClockFreq+0x160>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY))?1UL:0UL);
 8008548:	4b49      	ldr	r3, [pc, #292]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800854a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800854c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8008550:	03c0      	lsls	r0, r0, #15
}
 8008552:	b004      	add	sp, #16
 8008554:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008556:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800855a:	4298      	cmp	r0, r3
 800855c:	d152      	bne.n	8008604 <LL_RCC_GetUSARTClockFreq+0x160>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800855e:	4b44      	ldr	r3, [pc, #272]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
{
  uint32_t frequency = 0U;
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8008566:	2b18      	cmp	r3, #24
 8008568:	d80e      	bhi.n	8008588 <LL_RCC_GetUSARTClockFreq+0xe4>
 800856a:	e8df f003 	tbb	[pc, r3]
 800856e:	0d6d      	.short	0x0d6d
 8008570:	0d0d0d0d 	.word	0x0d0d0d0d
 8008574:	0d760d0d 	.word	0x0d760d0d
 8008578:	0d0d0d0d 	.word	0x0d0d0d0d
 800857c:	0d6b0d0d 	.word	0x0d6b0d0d
 8008580:	0d0d0d0d 	.word	0x0d0d0d0d
 8008584:	0d0d      	.short	0x0d0d
 8008586:	66          	.byte	0x66
 8008587:	00          	.byte	0x00
  uint32_t frequency = 0U;
 8008588:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800858a:	4b39      	ldr	r3, [pc, #228]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800858c:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800858e:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8008590:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 8008592:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8008596:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800859a:	f3c3 1302 	ubfx	r3, r3, #4, #3
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 800859e:	4a38      	ldr	r2, [pc, #224]	@ (8008680 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80085a0:	5d14      	ldrb	r4, [r2, r4]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80085a2:	5c51      	ldrb	r1, [r2, r1]
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 80085a4:	40e0      	lsrs	r0, r4
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80085a6:	5cd3      	ldrb	r3, [r2, r3]
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80085a8:	40c8      	lsrs	r0, r1
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80085aa:	40d8      	lsrs	r0, r3
}
 80085ac:	b004      	add	sp, #16
 80085ae:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY))?1UL:0UL);
 80085b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80085b2:	4834      	ldr	r0, [pc, #208]	@ (8008684 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80085ba:	bf08      	it	eq
 80085bc:	2000      	moveq	r0, #0
}
 80085be:	b004      	add	sp, #16
 80085c0:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80085c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
  switch (LL_RCC_GetSysClkSource())
 80085ca:	2b18      	cmp	r3, #24
 80085cc:	d80e      	bhi.n	80085ec <LL_RCC_GetUSARTClockFreq+0x148>
 80085ce:	e8df f003 	tbb	[pc, r3]
 80085d2:	0d2d      	.short	0x0d2d
 80085d4:	0d0d0d0d 	.word	0x0d0d0d0d
 80085d8:	0d420d0d 	.word	0x0d420d0d
 80085dc:	0d0d0d0d 	.word	0x0d0d0d0d
 80085e0:	0d2b0d0d 	.word	0x0d2b0d0d
 80085e4:	0d0d0d0d 	.word	0x0d0d0d0d
 80085e8:	0d0d      	.short	0x0d0d
 80085ea:	26          	.byte	0x26
 80085eb:	00          	.byte	0x00
  uint32_t frequency = 0U;
 80085ec:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80085ee:	4b20      	ldr	r3, [pc, #128]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80085f0:	699c      	ldr	r4, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80085f2:	6999      	ldr	r1, [r3, #24]
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 80085f4:	69db      	ldr	r3, [r3, #28]
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(),LL_RCC_GetSysPrescaler())));
 80085f6:	f3c4 2403 	ubfx	r4, r4, #8, #4
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80085fa:	f001 010f 	and.w	r1, r1, #15
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80085fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008602:	e7cc      	b.n	800859e <LL_RCC_GetUSARTClockFreq+0xfa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008604:	2000      	movs	r0, #0
}
 8008606:	b004      	add	sp, #16
 8008608:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 800860a:	4b19      	ldr	r3, [pc, #100]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008612:	d090      	beq.n	8008536 <LL_RCC_GetUSARTClockFreq+0x92>
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8008614:	a801      	add	r0, sp, #4
 8008616:	f7ff fe75 	bl	8008304 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800861a:	9802      	ldr	r0, [sp, #8]
 800861c:	e78b      	b.n	8008536 <LL_RCC_GetUSARTClockFreq+0x92>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800861e:	a801      	add	r0, sp, #4
 8008620:	f7ff fce0 	bl	8007fe4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8008624:	9801      	ldr	r0, [sp, #4]
      break;
 8008626:	e7e2      	b.n	80085ee <LL_RCC_GetUSARTClockFreq+0x14a>
      frequency = HSE_VALUE;
 8008628:	4817      	ldr	r0, [pc, #92]	@ (8008688 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 800862a:	e7e0      	b.n	80085ee <LL_RCC_GetUSARTClockFreq+0x14a>
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800862c:	4b10      	ldr	r3, [pc, #64]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800862e:	4812      	ldr	r0, [pc, #72]	@ (8008678 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008636:	40d8      	lsrs	r0, r3
  return frequency;
 8008638:	e7d9      	b.n	80085ee <LL_RCC_GetUSARTClockFreq+0x14a>
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800863a:	a801      	add	r0, sp, #4
 800863c:	f7ff fcd2 	bl	8007fe4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8008640:	9801      	ldr	r0, [sp, #4]
      break;
 8008642:	e7a2      	b.n	800858a <LL_RCC_GetUSARTClockFreq+0xe6>
      frequency = HSE_VALUE;
 8008644:	4810      	ldr	r0, [pc, #64]	@ (8008688 <LL_RCC_GetUSARTClockFreq+0x1e4>)
      break;
 8008646:	e7a0      	b.n	800858a <LL_RCC_GetUSARTClockFreq+0xe6>
 8008648:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <LL_RCC_GetUSARTClockFreq+0x1cc>)
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider()>> RCC_CR_HSIDIV_Pos);
 800864a:	480b      	ldr	r0, [pc, #44]	@ (8008678 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008652:	40d8      	lsrs	r0, r3
  return frequency;
 8008654:	e799      	b.n	800858a <LL_RCC_GetUSARTClockFreq+0xe6>
  switch (LL_RCC_GetSysClkSource())
 8008656:	480b      	ldr	r0, [pc, #44]	@ (8008684 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 8008658:	e7c9      	b.n	80085ee <LL_RCC_GetUSARTClockFreq+0x14a>
 800865a:	480a      	ldr	r0, [pc, #40]	@ (8008684 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 800865c:	e795      	b.n	800858a <LL_RCC_GetUSARTClockFreq+0xe6>
 800865e:	bf00      	nop
 8008660:	58024000 	.word	0x58024000
 8008664:	07020308 	.word	0x07020308
 8008668:	07000308 	.word	0x07000308
 800866c:	07010308 	.word	0x07010308
 8008670:	58024400 	.word	0x58024400
 8008674:	07040308 	.word	0x07040308
 8008678:	03d09000 	.word	0x03d09000
 800867c:	07050008 	.word	0x07050008
 8008680:	0800a9d0 	.word	0x0800a9d0
 8008684:	003d0900 	.word	0x003d0900
 8008688:	00f42400 	.word	0x00f42400

0800868c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800868c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868e:	4a2d      	ldr	r2, [pc, #180]	@ (8008744 <LL_TIM_Init+0xb8>)
 8008690:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008694:	4c2c      	ldr	r4, [pc, #176]	@ (8008748 <LL_TIM_Init+0xbc>)
 8008696:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800869a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800869c:	eba0 0404 	sub.w	r4, r0, r4

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80086a0:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a2:	fab2 f282 	clz	r2, r2

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80086a6:	880d      	ldrh	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a8:	fab4 f484 	clz	r4, r4
 80086ac:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80086b0:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80086b4:	d01a      	beq.n	80086ec <LL_TIM_Init+0x60>
 80086b6:	b9ca      	cbnz	r2, 80086ec <LL_TIM_Init+0x60>
 80086b8:	4f24      	ldr	r7, [pc, #144]	@ (800874c <LL_TIM_Init+0xc0>)
 80086ba:	42b8      	cmp	r0, r7
 80086bc:	d02c      	beq.n	8008718 <LL_TIM_Init+0x8c>
 80086be:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80086c2:	42b8      	cmp	r0, r7
 80086c4:	d028      	beq.n	8008718 <LL_TIM_Init+0x8c>
 80086c6:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80086ca:	42b8      	cmp	r0, r7
 80086cc:	d00e      	beq.n	80086ec <LL_TIM_Init+0x60>
 80086ce:	b96c      	cbnz	r4, 80086ec <LL_TIM_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086d0:	4c1f      	ldr	r4, [pc, #124]	@ (8008750 <LL_TIM_Init+0xc4>)
 80086d2:	4a20      	ldr	r2, [pc, #128]	@ (8008754 <LL_TIM_Init+0xc8>)
 80086d4:	4290      	cmp	r0, r2
 80086d6:	bf18      	it	ne
 80086d8:	42a0      	cmpne	r0, r4
 80086da:	d021      	beq.n	8008720 <LL_TIM_Init+0x94>
 80086dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80086e0:	4290      	cmp	r0, r2
 80086e2:	d01d      	beq.n	8008720 <LL_TIM_Init+0x94>
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80086e4:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80086e6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80086e8:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ea:	e00e      	b.n	800870a <LL_TIM_Init+0x7e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80086ec:	684f      	ldr	r7, [r1, #4]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	433b      	orrs	r3, r7
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80086f4:	68cf      	ldr	r7, [r1, #12]
 80086f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086fa:	433b      	orrs	r3, r7
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80086fc:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80086fe:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8008700:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008702:	b902      	cbnz	r2, 8008706 <LL_TIM_Init+0x7a>
 8008704:	b19c      	cbz	r4, 800872e <LL_TIM_Init+0xa2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008706:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008708:	6303      	str	r3, [r0, #48]	@ 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800870a:	6943      	ldr	r3, [r0, #20]
 800870c:	f043 0301 	orr.w	r3, r3, #1
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8008710:	bcf0      	pop	{r4, r5, r6, r7}
 8008712:	6143      	str	r3, [r0, #20]
 8008714:	2001      	movs	r0, #1
 8008716:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8008718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871c:	684a      	ldr	r2, [r1, #4]
 800871e:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8008720:	68ca      	ldr	r2, [r1, #12]
 8008722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008726:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008728:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800872a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800872c:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872e:	4a08      	ldr	r2, [pc, #32]	@ (8008750 <LL_TIM_Init+0xc4>)
 8008730:	4b08      	ldr	r3, [pc, #32]	@ (8008754 <LL_TIM_Init+0xc8>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008732:	4298      	cmp	r0, r3
 8008734:	bf18      	it	ne
 8008736:	4290      	cmpne	r0, r2
 8008738:	d0e5      	beq.n	8008706 <LL_TIM_Init+0x7a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800873a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800873e:	4298      	cmp	r0, r3
 8008740:	d0e1      	beq.n	8008706 <LL_TIM_Init+0x7a>
 8008742:	e7e2      	b.n	800870a <LL_TIM_Init+0x7e>
 8008744:	40010000 	.word	0x40010000
 8008748:	40010400 	.word	0x40010400
 800874c:	40000400 	.word	0x40000400
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400

08008758 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4604      	mov	r4, r0
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f010 0001 	ands.w	r0, r0, #1
 8008762:	d13c      	bne.n	80087de <LL_USART_Init+0x86>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008764:	690a      	ldr	r2, [r1, #16]
 8008766:	460d      	mov	r5, r1
 8008768:	688b      	ldr	r3, [r1, #8]
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	4313      	orrs	r3, r2
 800876e:	696a      	ldr	r2, [r5, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	69ea      	ldr	r2, [r5, #28]
 8008774:	4313      	orrs	r3, r2
 8008776:	4a34      	ldr	r2, [pc, #208]	@ (8008848 <LL_USART_Init+0xf0>)
 8008778:	400a      	ands	r2, r1
 800877a:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800877c:	68ea      	ldr	r2, [r5, #12]
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008786:	4313      	orrs	r3, r2
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008788:	69aa      	ldr	r2, [r5, #24]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800878a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800878c:	68a3      	ldr	r3, [r4, #8]
 800878e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008792:	4313      	orrs	r3, r2
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008794:	4a2d      	ldr	r2, [pc, #180]	@ (800884c <LL_USART_Init+0xf4>)
 8008796:	4294      	cmp	r4, r2
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	d031      	beq.n	8008800 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800879c:	4b2c      	ldr	r3, [pc, #176]	@ (8008850 <LL_USART_Init+0xf8>)
 800879e:	429c      	cmp	r4, r3
 80087a0:	d01f      	beq.n	80087e2 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART3)
 80087a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008854 <LL_USART_Init+0xfc>)
 80087a4:	429c      	cmp	r4, r3
 80087a6:	d01c      	beq.n	80087e2 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART4)
 80087a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ac:	429c      	cmp	r4, r3
 80087ae:	d018      	beq.n	80087e2 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART5)
 80087b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d014      	beq.n	80087e2 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == USART6)
 80087b8:	f503 4344 	add.w	r3, r3, #50176	@ 0xc400
 80087bc:	429c      	cmp	r4, r3
 80087be:	d01f      	beq.n	8008800 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
    }
    else if (USARTx == UART7)
 80087c0:	f5a3 431c 	sub.w	r3, r3, #39936	@ 0x9c00
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d00c      	beq.n	80087e2 <LL_USART_Init+0x8a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
    }
    else if (USARTx == UART8)
 80087c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d008      	beq.n	80087e2 <LL_USART_Init+0x8a>
 80087d0:	882a      	ldrh	r2, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80087d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80087d4:	f023 030f 	bic.w	r3, r3, #15
 80087d8:	4313      	orrs	r3, r2
 80087da:	62e3      	str	r3, [r4, #44]	@ 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80087dc:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 80087de:	2000      	movs	r0, #0
}
 80087e0:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80087e2:	481d      	ldr	r0, [pc, #116]	@ (8008858 <LL_USART_Init+0x100>)
 80087e4:	f7ff fe5e 	bl	80084a4 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80087e8:	882a      	ldrh	r2, [r5, #0]
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0f1      	beq.n	80087d2 <LL_USART_Init+0x7a>
        && (USART_InitStruct->BaudRate != 0U))
 80087ee:	686b      	ldr	r3, [r5, #4]
 80087f0:	b953      	cbnz	r3, 8008808 <LL_USART_Init+0xb0>
  ErrorStatus status = ERROR;
 80087f2:	4618      	mov	r0, r3
 80087f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80087f6:	f023 030f 	bic.w	r3, r3, #15
 80087fa:	4313      	orrs	r3, r2
 80087fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087fe:	e7ed      	b.n	80087dc <LL_USART_Init+0x84>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8008800:	4816      	ldr	r0, [pc, #88]	@ (800885c <LL_USART_Init+0x104>)
 8008802:	f7ff fe4f 	bl	80084a4 <LL_RCC_GetUSARTClockFreq>
 8008806:	e7ef      	b.n	80087e8 <LL_USART_Init+0x90>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008808:	69ed      	ldr	r5, [r5, #28]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800880a:	4915      	ldr	r1, [pc, #84]	@ (8008860 <LL_USART_Init+0x108>)
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800880c:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8008810:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8008814:	fbb0 f0f1 	udiv	r0, r0, r1
 8008818:	ea4f 0153 	mov.w	r1, r3, lsr #1
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800881c:	d006      	beq.n	800882c <LL_USART_Init+0xd4>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800881e:	4408      	add	r0, r1
 8008820:	fbb0 f3f3 	udiv	r3, r0, r3
 8008824:	b29b      	uxth	r3, r3
 8008826:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8008828:	2001      	movs	r0, #1
 800882a:	e7d2      	b.n	80087d2 <LL_USART_Init+0x7a>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 800882c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    brrtemp = usartdiv & 0xFFF0U;
 8008830:	f64f 70f0 	movw	r0, #65520	@ 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
 8008834:	fbb1 f1f3 	udiv	r1, r1, r3
    brrtemp = usartdiv & 0xFFF0U;
 8008838:	ea01 0300 	and.w	r3, r1, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800883c:	f3c1 0142 	ubfx	r1, r1, #1, #3
 8008840:	4319      	orrs	r1, r3
    USARTx->BRR = brrtemp;
 8008842:	60e1      	str	r1, [r4, #12]
 8008844:	e7f0      	b.n	8008828 <LL_USART_Init+0xd0>
 8008846:	bf00      	nop
 8008848:	efff69f3 	.word	0xefff69f3
 800884c:	40011000 	.word	0x40011000
 8008850:	40004400 	.word	0x40004400
 8008854:	40004800 	.word	0x40004800
 8008858:	07000008 	.word	0x07000008
 800885c:	07000308 	.word	0x07000308
 8008860:	0800a9e0 	.word	0x0800a9e0

08008864 <exp2f>:
 8008864:	ee10 3a10 	vmov	r3, s0
 8008868:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800886c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008870:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8008874:	d22e      	bcs.n	80088d4 <exp2f+0x70>
 8008876:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800887a:	4b2a      	ldr	r3, [pc, #168]	@ (8008924 <exp2f+0xc0>)
 800887c:	ed93 2b40 	vldr	d2, [r3, #256]	@ 0x100
 8008880:	ee32 3b07 	vadd.f64	d3, d2, d7
 8008884:	ee13 0a10 	vmov	r0, s6
 8008888:	ee33 3b42 	vsub.f64	d3, d3, d2
 800888c:	f000 021f 	and.w	r2, r0, #31
 8008890:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8008894:	b430      	push	{r4, r5}
 8008896:	ee37 7b43 	vsub.f64	d7, d7, d3
 800889a:	ed93 4b42 	vldr	d4, [r3, #264]	@ 0x108
 800889e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80088a2:	684d      	ldr	r5, [r1, #4]
 80088a4:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 80088a8:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 80088ac:	eea4 6b07 	vfma.f64	d6, d4, d7
 80088b0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80088b4:	2100      	movs	r1, #0
 80088b6:	190a      	adds	r2, r1, r4
 80088b8:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80088bc:	eea5 0b07 	vfma.f64	d0, d5, d7
 80088c0:	ec43 2b17 	vmov	d7, r2, r3
 80088c4:	eea6 0b04 	vfma.f64	d0, d6, d4
 80088c8:	bc30      	pop	{r4, r5}
 80088ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 80088ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088d2:	4770      	bx	lr
 80088d4:	f513 0f00 	cmn.w	r3, #8388608	@ 0x800000
 80088d8:	d01e      	beq.n	8008918 <exp2f+0xb4>
 80088da:	f5b2 6fff 	cmp.w	r2, #2040	@ 0x7f8
 80088de:	d218      	bcs.n	8008912 <exp2f+0xae>
 80088e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	dc10      	bgt.n	800890c <exp2f+0xa8>
 80088ea:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8008928 <exp2f+0xc4>
 80088ee:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80088f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f6:	d912      	bls.n	800891e <exp2f+0xba>
 80088f8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800892c <exp2f+0xc8>
 80088fc:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	d5b7      	bpl.n	8008876 <exp2f+0x12>
 8008906:	2000      	movs	r0, #0
 8008908:	f000 ba14 	b.w	8008d34 <__math_may_uflowf>
 800890c:	2000      	movs	r0, #0
 800890e:	f000 ba17 	b.w	8008d40 <__math_oflowf>
 8008912:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008916:	4770      	bx	lr
 8008918:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8008930 <exp2f+0xcc>
 800891c:	4770      	bx	lr
 800891e:	2000      	movs	r0, #0
 8008920:	f000 ba02 	b.w	8008d28 <__math_uflowf>
 8008924:	0800a9f8 	.word	0x0800a9f8
 8008928:	c3160000 	.word	0xc3160000
 800892c:	c3150000 	.word	0xc3150000
	...

08008938 <sinf>:
 8008938:	b530      	push	{r4, r5, lr}
 800893a:	ee10 4a10 	vmov	r4, s0
 800893e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008942:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8008946:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800894a:	b083      	sub	sp, #12
 800894c:	d219      	bcs.n	8008982 <sinf+0x4a>
 800894e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8008952:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8008956:	d36c      	bcc.n	8008a32 <sinf+0xfa>
 8008958:	ee27 2b05 	vmul.f64	d2, d7, d5
 800895c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8008960:	4b69      	ldr	r3, [pc, #420]	@ (8008b08 <sinf+0x1d0>)
 8008962:	ed93 3b1a 	vldr	d3, [r3, #104]	@ 0x68
 8008966:	ed93 6b18 	vldr	d6, [r3, #96]	@ 0x60
 800896a:	ed93 4b16 	vldr	d4, [r3, #88]	@ 0x58
 800896e:	eea5 6b03 	vfma.f64	d6, d5, d3
 8008972:	eea2 7b04 	vfma.f64	d7, d2, d4
 8008976:	eea6 7b01 	vfma.f64	d7, d6, d1
 800897a:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 800897e:	b003      	add	sp, #12
 8008980:	bd30      	pop	{r4, r5, pc}
 8008982:	f240 422e 	movw	r2, #1070	@ 0x42e
 8008986:	4293      	cmp	r3, r2
 8008988:	d85b      	bhi.n	8008a42 <sinf+0x10a>
 800898a:	495f      	ldr	r1, [pc, #380]	@ (8008b08 <sinf+0x1d0>)
 800898c:	ed91 6b08 	vldr	d6, [r1, #32]
 8008990:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008994:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8008998:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 800899c:	ee16 3a90 	vmov	r3, s13
 80089a0:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 80089a4:	161b      	asrs	r3, r3, #24
 80089a6:	f013 0f02 	tst.w	r3, #2
 80089aa:	ee06 3a90 	vmov	s13, r3
 80089ae:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 80089b2:	bf08      	it	eq
 80089b4:	460a      	moveq	r2, r1
 80089b6:	07d8      	lsls	r0, r3, #31
 80089b8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80089bc:	eea6 7b45 	vfms.f64	d7, d6, d5
 80089c0:	ee27 6b07 	vmul.f64	d6, d7, d7
 80089c4:	d41b      	bmi.n	80089fe <sinf+0xc6>
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ce:	ed91 2b00 	vldr	d2, [r1]
 80089d2:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 80089d6:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 80089da:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 80089de:	eea6 5b04 	vfma.f64	d5, d6, d4
 80089e2:	ee27 7b02 	vmul.f64	d7, d7, d2
 80089e6:	ee27 4b06 	vmul.f64	d4, d7, d6
 80089ea:	ee26 6b04 	vmul.f64	d6, d6, d4
 80089ee:	eea4 7b03 	vfma.f64	d7, d4, d3
 80089f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089f6:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 80089fa:	b003      	add	sp, #12
 80089fc:	bd30      	pop	{r4, r5, pc}
 80089fe:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 8008a02:	ee26 5b06 	vmul.f64	d5, d6, d6
 8008a06:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 8008a0a:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 8008a0e:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008a12:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 8008a16:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 8008a1a:	eea6 0b03 	vfma.f64	d0, d6, d3
 8008a1e:	ee26 6b05 	vmul.f64	d6, d6, d5
 8008a22:	eea5 0b04 	vfma.f64	d0, d5, d4
 8008a26:	eea7 0b06 	vfma.f64	d0, d7, d6
 8008a2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008a2e:	b003      	add	sp, #12
 8008a30:	bd30      	pop	{r4, r5, pc}
 8008a32:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8008a36:	bf04      	itt	eq
 8008a38:	eeb7 5bc5 	vcvteq.f32.f64	s10, d5
 8008a3c:	ed8d 5a01 	vstreq	s10, [sp, #4]
 8008a40:	e7db      	b.n	80089fa <sinf+0xc2>
 8008a42:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8008a46:	d23b      	bcs.n	8008ac0 <sinf+0x188>
 8008a48:	4b30      	ldr	r3, [pc, #192]	@ (8008b0c <sinf+0x1d4>)
 8008a4a:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8008a4e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8008a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a56:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8008a5a:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8008a5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a62:	4083      	lsls	r3, r0
 8008a64:	6a08      	ldr	r0, [r1, #32]
 8008a66:	6909      	ldr	r1, [r1, #16]
 8008a68:	fba0 5003 	umull	r5, r0, r0, r3
 8008a6c:	fb03 f202 	mul.w	r2, r3, r2
 8008a70:	fbe3 0201 	umlal	r0, r2, r3, r1
 8008a74:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 8008a78:	0f8d      	lsrs	r5, r1, #30
 8008a7a:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 8008a7e:	1a51      	subs	r1, r2, r1
 8008a80:	f7f7 fdf4 	bl	800066c <__aeabi_l2d>
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <sinf+0x1d8>)
 8008a86:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8008b00 <sinf+0x1c8>
 8008a8a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8008a8e:	ec41 0b17 	vmov	d7, r0, r1
 8008a92:	f014 0f02 	tst.w	r4, #2
 8008a96:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 8008a9a:	bf08      	it	eq
 8008a9c:	4613      	moveq	r3, r2
 8008a9e:	07e9      	lsls	r1, r5, #31
 8008aa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008aa4:	ee27 6b07 	vmul.f64	d6, d7, d7
 8008aa8:	d40f      	bmi.n	8008aca <sinf+0x192>
 8008aaa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008aae:	ed92 2b00 	vldr	d2, [r2]
 8008ab2:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 8008ab6:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8008aba:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 8008abe:	e78e      	b.n	80089de <sinf+0xa6>
 8008ac0:	b003      	add	sp, #12
 8008ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac6:	f000 b941 	b.w	8008d4c <__math_invalidf>
 8008aca:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 8008ace:	ee26 4b06 	vmul.f64	d4, d6, d6
 8008ad2:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 8008ad6:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 8008ada:	eea6 5b01 	vfma.f64	d5, d6, d1
 8008ade:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8008ae2:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 8008ae6:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008aea:	ee26 6b04 	vmul.f64	d6, d6, d4
 8008aee:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008af2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008af6:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8008afa:	e77e      	b.n	80089fa <sinf+0xc2>
 8008afc:	f3af 8000 	nop.w
 8008b00:	54442d18 	.word	0x54442d18
 8008b04:	3c1921fb 	.word	0x3c1921fb
 8008b08:	0800aba0 	.word	0x0800aba0
 8008b0c:	0800ab40 	.word	0x0800ab40
 8008b10:	0800ac10 	.word	0x0800ac10
 8008b14:	00000000 	.word	0x00000000

08008b18 <cosf>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	ee10 4a10 	vmov	r4, s0
 8008b1e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008b22:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8008b26:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8008b2a:	d21e      	bcs.n	8008b6a <cosf+0x52>
 8008b2c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008b30:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8008b34:	d36f      	bcc.n	8008c16 <cosf+0xfe>
 8008b36:	ee27 1b07 	vmul.f64	d1, d7, d7
 8008b3a:	4b69      	ldr	r3, [pc, #420]	@ (8008ce0 <cosf+0x1c8>)
 8008b3c:	ed93 2b14 	vldr	d2, [r3, #80]	@ 0x50
 8008b40:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 8008b44:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8008b48:	eea7 5b02 	vfma.f64	d5, d7, d2
 8008b4c:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8008b50:	ed93 4b10 	vldr	d4, [r3, #64]	@ 0x40
 8008b54:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008b58:	ee27 7b01 	vmul.f64	d7, d7, d1
 8008b5c:	eea1 6b04 	vfma.f64	d6, d1, d4
 8008b60:	eea5 6b07 	vfma.f64	d6, d5, d7
 8008b64:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
 8008b6a:	f240 422e 	movw	r2, #1070	@ 0x42e
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d854      	bhi.n	8008c1c <cosf+0x104>
 8008b72:	495b      	ldr	r1, [pc, #364]	@ (8008ce0 <cosf+0x1c8>)
 8008b74:	ed91 6b08 	vldr	d6, [r1, #32]
 8008b78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008b7c:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8008b80:	ed91 5b0a 	vldr	d5, [r1, #40]	@ 0x28
 8008b84:	ee16 3a90 	vmov	r3, s13
 8008b88:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8008b8c:	161b      	asrs	r3, r3, #24
 8008b8e:	f013 0f02 	tst.w	r3, #2
 8008b92:	ee06 3a90 	vmov	s13, r3
 8008b96:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8008b9a:	bf08      	it	eq
 8008b9c:	460a      	moveq	r2, r1
 8008b9e:	07d8      	lsls	r0, r3, #31
 8008ba0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008ba4:	eea6 7b45 	vfms.f64	d7, d6, d5
 8008ba8:	ee27 6b07 	vmul.f64	d6, d7, d7
 8008bac:	d51a      	bpl.n	8008be4 <cosf+0xcc>
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bb6:	ed91 2b00 	vldr	d2, [r1]
 8008bba:	ed92 4b1a 	vldr	d4, [r2, #104]	@ 0x68
 8008bbe:	ed92 5b18 	vldr	d5, [r2, #96]	@ 0x60
 8008bc2:	ed92 3b16 	vldr	d3, [r2, #88]	@ 0x58
 8008bc6:	eea6 5b04 	vfma.f64	d5, d6, d4
 8008bca:	ee27 7b02 	vmul.f64	d7, d7, d2
 8008bce:	ee27 4b06 	vmul.f64	d4, d7, d6
 8008bd2:	ee26 6b04 	vmul.f64	d6, d6, d4
 8008bd6:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008bda:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008bde:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	ed92 2b14 	vldr	d2, [r2, #80]	@ 0x50
 8008be8:	ee26 5b06 	vmul.f64	d5, d6, d6
 8008bec:	ed92 7b12 	vldr	d7, [r2, #72]	@ 0x48
 8008bf0:	ed92 3b0e 	vldr	d3, [r2, #56]	@ 0x38
 8008bf4:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008bf8:	ed92 0b0c 	vldr	d0, [r2, #48]	@ 0x30
 8008bfc:	ed92 4b10 	vldr	d4, [r2, #64]	@ 0x40
 8008c00:	eea6 0b03 	vfma.f64	d0, d6, d3
 8008c04:	ee26 6b05 	vmul.f64	d6, d6, d5
 8008c08:	eea5 0b04 	vfma.f64	d0, d5, d4
 8008c0c:	eea7 0b06 	vfma.f64	d0, d7, d6
 8008c10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008c14:	bd38      	pop	{r3, r4, r5, pc}
 8008c16:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8008c20:	d23d      	bcs.n	8008c9e <cosf+0x186>
 8008c22:	4b30      	ldr	r3, [pc, #192]	@ (8008ce4 <cosf+0x1cc>)
 8008c24:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8008c28:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8008c2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c30:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8008c34:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8008c38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c3c:	4083      	lsls	r3, r0
 8008c3e:	6a08      	ldr	r0, [r1, #32]
 8008c40:	6909      	ldr	r1, [r1, #16]
 8008c42:	fba0 5003 	umull	r5, r0, r0, r3
 8008c46:	fb03 f202 	mul.w	r2, r3, r2
 8008c4a:	fbe3 0201 	umlal	r0, r2, r3, r1
 8008c4e:	f102 5100 	add.w	r1, r2, #536870912	@ 0x20000000
 8008c52:	0f8d      	lsrs	r5, r1, #30
 8008c54:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 8008c58:	1a51      	subs	r1, r2, r1
 8008c5a:	f7f7 fd07 	bl	800066c <__aeabi_l2d>
 8008c5e:	4b22      	ldr	r3, [pc, #136]	@ (8008ce8 <cosf+0x1d0>)
 8008c60:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008cd8 <cosf+0x1c0>
 8008c64:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8008c68:	ec41 0b17 	vmov	d7, r0, r1
 8008c6c:	f014 0f02 	tst.w	r4, #2
 8008c70:	f1a3 0270 	sub.w	r2, r3, #112	@ 0x70
 8008c74:	bf08      	it	eq
 8008c76:	4613      	moveq	r3, r2
 8008c78:	07e9      	lsls	r1, r5, #31
 8008c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c7e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8008c82:	d510      	bpl.n	8008ca6 <cosf+0x18e>
 8008c84:	f004 0403 	and.w	r4, r4, #3
 8008c88:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008c8c:	ed92 2b00 	vldr	d2, [r2]
 8008c90:	ed93 4b1a 	vldr	d4, [r3, #104]	@ 0x68
 8008c94:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8008c98:	ed93 3b16 	vldr	d3, [r3, #88]	@ 0x58
 8008c9c:	e793      	b.n	8008bc6 <cosf+0xae>
 8008c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca2:	f000 b853 	b.w	8008d4c <__math_invalidf>
 8008ca6:	ed93 1b14 	vldr	d1, [r3, #80]	@ 0x50
 8008caa:	ee26 4b06 	vmul.f64	d4, d6, d6
 8008cae:	ed93 5b12 	vldr	d5, [r3, #72]	@ 0x48
 8008cb2:	ed93 2b0e 	vldr	d2, [r3, #56]	@ 0x38
 8008cb6:	eea6 5b01 	vfma.f64	d5, d6, d1
 8008cba:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8008cbe:	ed93 3b10 	vldr	d3, [r3, #64]	@ 0x40
 8008cc2:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008cc6:	ee26 6b04 	vmul.f64	d6, d6, d4
 8008cca:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008cce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008cd2:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	54442d18 	.word	0x54442d18
 8008cdc:	3c1921fb 	.word	0x3c1921fb
 8008ce0:	0800aba0 	.word	0x0800aba0
 8008ce4:	0800ab40 	.word	0x0800ab40
 8008ce8:	0800ac10 	.word	0x0800ac10

08008cec <with_errnof>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	ed2d 8b02 	vpush	{d8}
 8008cf2:	eeb0 8a40 	vmov.f32	s16, s0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	f000 fc24 	bl	8009544 <__errno>
 8008cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	6004      	str	r4, [r0, #0]
 8008d06:	bd10      	pop	{r4, pc}

08008d08 <xflowf>:
 8008d08:	b130      	cbz	r0, 8008d18 <xflowf+0x10>
 8008d0a:	eef1 7a40 	vneg.f32	s15, s0
 8008d0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008d12:	2022      	movs	r0, #34	@ 0x22
 8008d14:	f7ff bfea 	b.w	8008cec <with_errnof>
 8008d18:	eef0 7a40 	vmov.f32	s15, s0
 8008d1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008d20:	2022      	movs	r0, #34	@ 0x22
 8008d22:	f7ff bfe3 	b.w	8008cec <with_errnof>
 8008d26:	bf00      	nop

08008d28 <__math_uflowf>:
 8008d28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d30 <__math_uflowf+0x8>
 8008d2c:	f7ff bfec 	b.w	8008d08 <xflowf>
 8008d30:	10000000 	.word	0x10000000

08008d34 <__math_may_uflowf>:
 8008d34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d3c <__math_may_uflowf+0x8>
 8008d38:	f7ff bfe6 	b.w	8008d08 <xflowf>
 8008d3c:	1a200000 	.word	0x1a200000

08008d40 <__math_oflowf>:
 8008d40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008d48 <__math_oflowf+0x8>
 8008d44:	f7ff bfe0 	b.w	8008d08 <xflowf>
 8008d48:	70000000 	.word	0x70000000

08008d4c <__math_invalidf>:
 8008d4c:	eef0 7a40 	vmov.f32	s15, s0
 8008d50:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008d54:	eef4 7a67 	vcmp.f32	s15, s15
 8008d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8008d60:	d602      	bvs.n	8008d68 <__math_invalidf+0x1c>
 8008d62:	2021      	movs	r0, #33	@ 0x21
 8008d64:	f7ff bfc2 	b.w	8008cec <with_errnof>
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop

08008d6c <tanhf>:
 8008d6c:	b530      	push	{r4, r5, lr}
 8008d6e:	ed2d 8b02 	vpush	{d8}
 8008d72:	b083      	sub	sp, #12
 8008d74:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008d78:	9c01      	ldr	r4, [sp, #4]
 8008d7a:	f024 4300 	bic.w	r3, r4, #2147483648	@ 0x80000000
 8008d7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008d82:	d310      	bcc.n	8008da6 <tanhf+0x3a>
 8008d84:	4b33      	ldr	r3, [pc, #204]	@ (8008e54 <tanhf+0xe8>)
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	ed93 7a00 	vldr	s14, [r3]
 8008d8c:	edd3 7a00 	vldr	s15, [r3]
 8008d90:	db39      	blt.n	8008e06 <tanhf+0x9a>
 8008d92:	eef0 6a40 	vmov.f32	s13, s0
 8008d96:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8008d9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008d9e:	b003      	add	sp, #12
 8008da0:	ecbd 8b02 	vpop	{d8}
 8008da4:	bd30      	pop	{r4, r5, pc}
 8008da6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e58 <tanhf+0xec>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d90f      	bls.n	8008dcc <tanhf+0x60>
 8008dac:	4a29      	ldr	r2, [pc, #164]	@ (8008e54 <tanhf+0xe8>)
 8008dae:	4b2b      	ldr	r3, [pc, #172]	@ (8008e5c <tanhf+0xf0>)
 8008db0:	ed92 0a00 	vldr	s0, [r2]
 8008db4:	edd3 7a00 	vldr	s15, [r3]
 8008db8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008dbc:	2c00      	cmp	r4, #0
 8008dbe:	bfb8      	it	lt
 8008dc0:	eeb1 0a40 	vneglt.f32	s0, s0
 8008dc4:	b003      	add	sp, #12
 8008dc6:	ecbd 8b02 	vpop	{d8}
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8008dd0:	d323      	bcc.n	8008e1a <tanhf+0xae>
 8008dd2:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008dd6:	d32a      	bcc.n	8008e2e <tanhf+0xc2>
 8008dd8:	4d21      	ldr	r5, [pc, #132]	@ (8008e60 <tanhf+0xf4>)
 8008dda:	f000 f979 	bl	80090d0 <fabsf>
 8008dde:	edd5 7a00 	vldr	s15, [r5]
 8008de2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008de6:	f000 f83d 	bl	8008e64 <expm1f>
 8008dea:	4b1a      	ldr	r3, [pc, #104]	@ (8008e54 <tanhf+0xe8>)
 8008dec:	edd3 7a00 	vldr	s15, [r3]
 8008df0:	ed95 6a00 	vldr	s12, [r5]
 8008df4:	ed95 7a00 	vldr	s14, [r5]
 8008df8:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008dfc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008e00:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8008e04:	e7da      	b.n	8008dbc <tanhf+0x50>
 8008e06:	eddd 6a01 	vldr	s13, [sp, #4]
 8008e0a:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8008e0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008e12:	b003      	add	sp, #12
 8008e14:	ecbd 8b02 	vpop	{d8}
 8008e18:	bd30      	pop	{r4, r5, pc}
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e54 <tanhf+0xe8>)
 8008e1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8008e20:	ed93 0a00 	vldr	s0, [r3]
 8008e24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008e2c:	e7b7      	b.n	8008d9e <tanhf+0x32>
 8008e2e:	4d0c      	ldr	r5, [pc, #48]	@ (8008e60 <tanhf+0xf4>)
 8008e30:	ed95 8a00 	vldr	s16, [r5]
 8008e34:	f000 f94c 	bl	80090d0 <fabsf>
 8008e38:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8008e3c:	f000 f812 	bl	8008e64 <expm1f>
 8008e40:	ed95 7a00 	vldr	s14, [r5]
 8008e44:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008e48:	eef1 7a40 	vneg.f32	s15, s0
 8008e4c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8008e50:	e7b4      	b.n	8008dbc <tanhf+0x50>
 8008e52:	bf00      	nop
 8008e54:	0800ac88 	.word	0x0800ac88
 8008e58:	41afffff 	.word	0x41afffff
 8008e5c:	0800ac80 	.word	0x0800ac80
 8008e60:	0800ac84 	.word	0x0800ac84

08008e64 <expm1f>:
 8008e64:	ee10 0a10 	vmov	r0, s0
 8008e68:	4a8a      	ldr	r2, [pc, #552]	@ (8009094 <expm1f+0x230>)
 8008e6a:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8008e74:	d92b      	bls.n	8008ece <expm1f+0x6a>
 8008e76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008e7a:	f200 808f 	bhi.w	8008f9c <expm1f+0x138>
 8008e7e:	f000 80e3 	beq.w	8009048 <expm1f+0x1e4>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f040 808d 	bne.w	8008fa2 <expm1f+0x13e>
 8008e88:	4a83      	ldr	r2, [pc, #524]	@ (8009098 <expm1f+0x234>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	f200 80ff 	bhi.w	800908e <expm1f+0x22a>
 8008e90:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800909c <expm1f+0x238>
 8008e94:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008e98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ea0:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 80090a0 <expm1f+0x23c>
 8008ea4:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80090a4 <expm1f+0x240>
 8008ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eb0:	ee17 3a90 	vmov	r3, s15
 8008eb4:	eef0 7a40 	vmov.f32	s15, s0
 8008eb8:	eee7 7a46 	vfms.f32	s15, s14, s12
 8008ebc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008ec0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008ec4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ecc:	e007      	b.n	8008ede <expm1f+0x7a>
 8008ece:	4a76      	ldr	r2, [pc, #472]	@ (80090a8 <expm1f+0x244>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d855      	bhi.n	8008f80 <expm1f+0x11c>
 8008ed4:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8008ed8:	f0c0 8090 	bcc.w	8008ffc <expm1f+0x198>
 8008edc:	2300      	movs	r3, #0
 8008ede:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 8008ee2:	ee20 4a03 	vmul.f32	s8, s0, s6
 8008ee6:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80090ac <expm1f+0x248>
 8008eea:	ed9f 6a71 	vldr	s12, [pc, #452]	@ 80090b0 <expm1f+0x24c>
 8008eee:	eddf 4a71 	vldr	s9, [pc, #452]	@ 80090b4 <expm1f+0x250>
 8008ef2:	ed9f 5a71 	vldr	s10, [pc, #452]	@ 80090b8 <expm1f+0x254>
 8008ef6:	ee20 7a04 	vmul.f32	s14, s0, s8
 8008efa:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008efe:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008f02:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80090bc <expm1f+0x258>
 8008f06:	eee6 4a07 	vfma.f32	s9, s12, s14
 8008f0a:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8008f0e:	eee4 6a87 	vfma.f32	s13, s9, s14
 8008f12:	eef1 5a08 	vmov.f32	s11, #24	@ 0x40c00000  6.0
 8008f16:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008f1a:	eef0 6a63 	vmov.f32	s13, s7
 8008f1e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8008f22:	eea4 6a66 	vfms.f32	s12, s8, s13
 8008f26:	eee0 5a46 	vfms.f32	s11, s0, s12
 8008f2a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008f2e:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8008f32:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d05b      	beq.n	8008ff2 <expm1f+0x18e>
 8008f3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8008f44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f48:	d077      	beq.n	800903a <expm1f+0x1d6>
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d05f      	beq.n	800900e <expm1f+0x1aa>
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	2a39      	cmp	r2, #57	@ 0x39
 8008f52:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8008f56:	d840      	bhi.n	8008fda <expm1f+0x176>
 8008f58:	2b16      	cmp	r3, #22
 8008f5a:	dc7b      	bgt.n	8009054 <expm1f+0x1f0>
 8008f5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f60:	fa42 f303 	asr.w	r3, r2, r3
 8008f64:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8008f68:	ee07 3a10 	vmov	s14, r3
 8008f6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f74:	ee17 3a90 	vmov	r3, s15
 8008f78:	18cb      	adds	r3, r1, r3
 8008f7a:	ee00 3a10 	vmov	s0, r3
 8008f7e:	4770      	bx	lr
 8008f80:	4a4f      	ldr	r2, [pc, #316]	@ (80090c0 <expm1f+0x25c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d81d      	bhi.n	8008fc2 <expm1f+0x15e>
 8008f86:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80090a0 <expm1f+0x23c>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d04f      	beq.n	800902e <expm1f+0x1ca>
 8008f8e:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80090c4 <expm1f+0x260>
 8008f92:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f9a:	e791      	b.n	8008ec0 <expm1f+0x5c>
 8008f9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008fa0:	4770      	bx	lr
 8008fa2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80090c8 <expm1f+0x264>
 8008fa6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb2:	d469      	bmi.n	8009088 <expm1f+0x224>
 8008fb4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800909c <expm1f+0x238>
 8008fb8:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8008fbc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008fc0:	e76c      	b.n	8008e9c <expm1f+0x38>
 8008fc2:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800909c <expm1f+0x238>
 8008fc6:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8008fca:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8008fd4:	fe46 7aa7 	vseleq.f32	s15, s13, s15
 8008fd8:	e760      	b.n	8008e9c <expm1f+0x38>
 8008fda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008fde:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008fe2:	ee17 3a90 	vmov	r3, s15
 8008fe6:	4419      	add	r1, r3
 8008fe8:	ee07 1a90 	vmov	s15, r1
 8008fec:	ee37 0ae3 	vsub.f32	s0, s15, s7
 8008ff0:	4770      	bx	lr
 8008ff2:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8008ff6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008ffa:	4770      	bx	lr
 8008ffc:	eddf 7a33 	vldr	s15, [pc, #204]	@ 80090cc <expm1f+0x268>
 8009000:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009004:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009008:	ee30 0a67 	vsub.f32	s0, s0, s15
 800900c:	4770      	bx	lr
 800900e:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8009012:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901a:	d52c      	bpl.n	8009076 <expm1f+0x212>
 800901c:	ee30 3a03 	vadd.f32	s6, s0, s6
 8009020:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8009024:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8009028:	ee27 0a80 	vmul.f32	s0, s15, s0
 800902c:	4770      	bx	lr
 800902e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80090a4 <expm1f+0x240>
 8009032:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009036:	2301      	movs	r3, #1
 8009038:	e742      	b.n	8008ec0 <expm1f+0x5c>
 800903a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800903e:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8009042:	eea7 0a83 	vfma.f32	s0, s15, s6
 8009046:	4770      	bx	lr
 8009048:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800904c:	2800      	cmp	r0, #0
 800904e:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8009052:	4770      	bx	lr
 8009054:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8009058:	05db      	lsls	r3, r3, #23
 800905a:	ee07 3a10 	vmov	s14, r3
 800905e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009062:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009066:	ee30 0a23 	vadd.f32	s0, s0, s7
 800906a:	ee10 3a10 	vmov	r3, s0
 800906e:	440b      	add	r3, r1
 8009070:	ee00 3a10 	vmov	s0, r3
 8009074:	4770      	bx	lr
 8009076:	ee70 7a67 	vsub.f32	s15, s0, s15
 800907a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800907e:	eee7 3a87 	vfma.f32	s7, s15, s14
 8009082:	eeb0 0a63 	vmov.f32	s0, s7
 8009086:	4770      	bx	lr
 8009088:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800908c:	4770      	bx	lr
 800908e:	f7ff be57 	b.w	8008d40 <__math_oflowf>
 8009092:	bf00      	nop
 8009094:	4195b843 	.word	0x4195b843
 8009098:	42b17217 	.word	0x42b17217
 800909c:	3fb8aa3b 	.word	0x3fb8aa3b
 80090a0:	3f317180 	.word	0x3f317180
 80090a4:	3717f7d1 	.word	0x3717f7d1
 80090a8:	3eb17218 	.word	0x3eb17218
 80090ac:	b457edbb 	.word	0xb457edbb
 80090b0:	36867e54 	.word	0x36867e54
 80090b4:	b8a670cd 	.word	0xb8a670cd
 80090b8:	bd088889 	.word	0xbd088889
 80090bc:	3ad00d01 	.word	0x3ad00d01
 80090c0:	3f851591 	.word	0x3f851591
 80090c4:	b717f7d1 	.word	0xb717f7d1
 80090c8:	0da24260 	.word	0x0da24260
 80090cc:	7149f2ca 	.word	0x7149f2ca

080090d0 <fabsf>:
 80090d0:	ee10 3a10 	vmov	r3, s0
 80090d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090d8:	ee00 3a10 	vmov	s0, r3
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop

080090e0 <__assert_func>:
 80090e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090e2:	4614      	mov	r4, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <__assert_func+0x2c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4605      	mov	r5, r0
 80090ec:	68d8      	ldr	r0, [r3, #12]
 80090ee:	b14c      	cbz	r4, 8009104 <__assert_func+0x24>
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <__assert_func+0x30>)
 80090f2:	9100      	str	r1, [sp, #0]
 80090f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f8:	4906      	ldr	r1, [pc, #24]	@ (8009114 <__assert_func+0x34>)
 80090fa:	462b      	mov	r3, r5
 80090fc:	f000 f91e 	bl	800933c <fiprintf>
 8009100:	f000 fa5b 	bl	80095ba <abort>
 8009104:	4b04      	ldr	r3, [pc, #16]	@ (8009118 <__assert_func+0x38>)
 8009106:	461c      	mov	r4, r3
 8009108:	e7f3      	b.n	80090f2 <__assert_func+0x12>
 800910a:	bf00      	nop
 800910c:	2000003c 	.word	0x2000003c
 8009110:	0800ac8c 	.word	0x0800ac8c
 8009114:	0800ac99 	.word	0x0800ac99
 8009118:	0800acc7 	.word	0x0800acc7

0800911c <clearerr>:
 800911c:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <clearerr+0x44>)
 800911e:	b510      	push	{r4, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	b118      	cbz	r0, 800912e <clearerr+0x12>
 8009126:	6a03      	ldr	r3, [r0, #32]
 8009128:	b90b      	cbnz	r3, 800912e <clearerr+0x12>
 800912a:	f000 f8ef 	bl	800930c <__sinit>
 800912e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009130:	07d8      	lsls	r0, r3, #31
 8009132:	d405      	bmi.n	8009140 <clearerr+0x24>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	0599      	lsls	r1, r3, #22
 8009138:	d402      	bmi.n	8009140 <clearerr+0x24>
 800913a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800913c:	f000 fa2d 	bl	800959a <__retarget_lock_acquire_recursive>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8009148:	81a2      	strh	r2, [r4, #12]
 800914a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800914c:	07d2      	lsls	r2, r2, #31
 800914e:	d406      	bmi.n	800915e <clearerr+0x42>
 8009150:	059b      	lsls	r3, r3, #22
 8009152:	d404      	bmi.n	800915e <clearerr+0x42>
 8009154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915a:	f000 ba1f 	b.w	800959c <__retarget_lock_release_recursive>
 800915e:	bd10      	pop	{r4, pc}
 8009160:	2000003c 	.word	0x2000003c

08009164 <feof>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4b10      	ldr	r3, [pc, #64]	@ (80091a8 <feof+0x44>)
 8009168:	4604      	mov	r4, r0
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	b118      	cbz	r0, 8009176 <feof+0x12>
 800916e:	6a03      	ldr	r3, [r0, #32]
 8009170:	b90b      	cbnz	r3, 8009176 <feof+0x12>
 8009172:	f000 f8cb 	bl	800930c <__sinit>
 8009176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009178:	07d8      	lsls	r0, r3, #31
 800917a:	d405      	bmi.n	8009188 <feof+0x24>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	0599      	lsls	r1, r3, #22
 8009180:	d402      	bmi.n	8009188 <feof+0x24>
 8009182:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009184:	f000 fa09 	bl	800959a <__retarget_lock_acquire_recursive>
 8009188:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800918a:	89a5      	ldrh	r5, [r4, #12]
 800918c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009190:	07d2      	lsls	r2, r2, #31
 8009192:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8009196:	d404      	bmi.n	80091a2 <feof+0x3e>
 8009198:	059b      	lsls	r3, r3, #22
 800919a:	d402      	bmi.n	80091a2 <feof+0x3e>
 800919c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800919e:	f000 f9fd 	bl	800959c <__retarget_lock_release_recursive>
 80091a2:	4628      	mov	r0, r5
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	2000003c 	.word	0x2000003c

080091ac <ferror>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4b10      	ldr	r3, [pc, #64]	@ (80091f0 <ferror+0x44>)
 80091b0:	4604      	mov	r4, r0
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	b118      	cbz	r0, 80091be <ferror+0x12>
 80091b6:	6a03      	ldr	r3, [r0, #32]
 80091b8:	b90b      	cbnz	r3, 80091be <ferror+0x12>
 80091ba:	f000 f8a7 	bl	800930c <__sinit>
 80091be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c0:	07d8      	lsls	r0, r3, #31
 80091c2:	d405      	bmi.n	80091d0 <ferror+0x24>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	0599      	lsls	r1, r3, #22
 80091c8:	d402      	bmi.n	80091d0 <ferror+0x24>
 80091ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091cc:	f000 f9e5 	bl	800959a <__retarget_lock_acquire_recursive>
 80091d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091d2:	89a5      	ldrh	r5, [r4, #12]
 80091d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d8:	07d2      	lsls	r2, r2, #31
 80091da:	f3c5 1580 	ubfx	r5, r5, #6, #1
 80091de:	d404      	bmi.n	80091ea <ferror+0x3e>
 80091e0:	059b      	lsls	r3, r3, #22
 80091e2:	d402      	bmi.n	80091ea <ferror+0x3e>
 80091e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091e6:	f000 f9d9 	bl	800959c <__retarget_lock_release_recursive>
 80091ea:	4628      	mov	r0, r5
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	2000003c 	.word	0x2000003c

080091f4 <std>:
 80091f4:	2300      	movs	r3, #0
 80091f6:	b510      	push	{r4, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	e9c0 3300 	strd	r3, r3, [r0]
 80091fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009202:	6083      	str	r3, [r0, #8]
 8009204:	8181      	strh	r1, [r0, #12]
 8009206:	6643      	str	r3, [r0, #100]	@ 0x64
 8009208:	81c2      	strh	r2, [r0, #14]
 800920a:	6183      	str	r3, [r0, #24]
 800920c:	4619      	mov	r1, r3
 800920e:	2208      	movs	r2, #8
 8009210:	305c      	adds	r0, #92	@ 0x5c
 8009212:	f000 f98e 	bl	8009532 <memset>
 8009216:	4b0d      	ldr	r3, [pc, #52]	@ (800924c <std+0x58>)
 8009218:	6263      	str	r3, [r4, #36]	@ 0x24
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <std+0x5c>)
 800921c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <std+0x60>)
 8009220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <std+0x64>)
 8009224:	6323      	str	r3, [r4, #48]	@ 0x30
 8009226:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <std+0x68>)
 8009228:	6224      	str	r4, [r4, #32]
 800922a:	429c      	cmp	r4, r3
 800922c:	d006      	beq.n	800923c <std+0x48>
 800922e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009232:	4294      	cmp	r4, r2
 8009234:	d002      	beq.n	800923c <std+0x48>
 8009236:	33d0      	adds	r3, #208	@ 0xd0
 8009238:	429c      	cmp	r4, r3
 800923a:	d105      	bne.n	8009248 <std+0x54>
 800923c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009244:	f000 b9a8 	b.w	8009598 <__retarget_lock_init_recursive>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	bf00      	nop
 800924c:	08009e19 	.word	0x08009e19
 8009250:	08009e3b 	.word	0x08009e3b
 8009254:	08009e73 	.word	0x08009e73
 8009258:	08009e97 	.word	0x08009e97
 800925c:	200113fc 	.word	0x200113fc

08009260 <stdio_exit_handler>:
 8009260:	4a02      	ldr	r2, [pc, #8]	@ (800926c <stdio_exit_handler+0xc>)
 8009262:	4903      	ldr	r1, [pc, #12]	@ (8009270 <stdio_exit_handler+0x10>)
 8009264:	4803      	ldr	r0, [pc, #12]	@ (8009274 <stdio_exit_handler+0x14>)
 8009266:	f000 b87b 	b.w	8009360 <_fwalk_sglue>
 800926a:	bf00      	nop
 800926c:	20000030 	.word	0x20000030
 8009270:	08009db1 	.word	0x08009db1
 8009274:	20000040 	.word	0x20000040

08009278 <cleanup_stdio>:
 8009278:	6841      	ldr	r1, [r0, #4]
 800927a:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <cleanup_stdio+0x34>)
 800927c:	4299      	cmp	r1, r3
 800927e:	b510      	push	{r4, lr}
 8009280:	4604      	mov	r4, r0
 8009282:	d001      	beq.n	8009288 <cleanup_stdio+0x10>
 8009284:	f000 fd94 	bl	8009db0 <_fflush_r>
 8009288:	68a1      	ldr	r1, [r4, #8]
 800928a:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <cleanup_stdio+0x38>)
 800928c:	4299      	cmp	r1, r3
 800928e:	d002      	beq.n	8009296 <cleanup_stdio+0x1e>
 8009290:	4620      	mov	r0, r4
 8009292:	f000 fd8d 	bl	8009db0 <_fflush_r>
 8009296:	68e1      	ldr	r1, [r4, #12]
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <cleanup_stdio+0x3c>)
 800929a:	4299      	cmp	r1, r3
 800929c:	d004      	beq.n	80092a8 <cleanup_stdio+0x30>
 800929e:	4620      	mov	r0, r4
 80092a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a4:	f000 bd84 	b.w	8009db0 <_fflush_r>
 80092a8:	bd10      	pop	{r4, pc}
 80092aa:	bf00      	nop
 80092ac:	200113fc 	.word	0x200113fc
 80092b0:	20011464 	.word	0x20011464
 80092b4:	200114cc 	.word	0x200114cc

080092b8 <global_stdio_init.part.0>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <global_stdio_init.part.0+0x30>)
 80092bc:	4c0b      	ldr	r4, [pc, #44]	@ (80092ec <global_stdio_init.part.0+0x34>)
 80092be:	4a0c      	ldr	r2, [pc, #48]	@ (80092f0 <global_stdio_init.part.0+0x38>)
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	4620      	mov	r0, r4
 80092c4:	2200      	movs	r2, #0
 80092c6:	2104      	movs	r1, #4
 80092c8:	f7ff ff94 	bl	80091f4 <std>
 80092cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092d0:	2201      	movs	r2, #1
 80092d2:	2109      	movs	r1, #9
 80092d4:	f7ff ff8e 	bl	80091f4 <std>
 80092d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092dc:	2202      	movs	r2, #2
 80092de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e2:	2112      	movs	r1, #18
 80092e4:	f7ff bf86 	b.w	80091f4 <std>
 80092e8:	20011534 	.word	0x20011534
 80092ec:	200113fc 	.word	0x200113fc
 80092f0:	08009261 	.word	0x08009261

080092f4 <__sfp_lock_acquire>:
 80092f4:	4801      	ldr	r0, [pc, #4]	@ (80092fc <__sfp_lock_acquire+0x8>)
 80092f6:	f000 b950 	b.w	800959a <__retarget_lock_acquire_recursive>
 80092fa:	bf00      	nop
 80092fc:	20011539 	.word	0x20011539

08009300 <__sfp_lock_release>:
 8009300:	4801      	ldr	r0, [pc, #4]	@ (8009308 <__sfp_lock_release+0x8>)
 8009302:	f000 b94b 	b.w	800959c <__retarget_lock_release_recursive>
 8009306:	bf00      	nop
 8009308:	20011539 	.word	0x20011539

0800930c <__sinit>:
 800930c:	b510      	push	{r4, lr}
 800930e:	4604      	mov	r4, r0
 8009310:	f7ff fff0 	bl	80092f4 <__sfp_lock_acquire>
 8009314:	6a23      	ldr	r3, [r4, #32]
 8009316:	b11b      	cbz	r3, 8009320 <__sinit+0x14>
 8009318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800931c:	f7ff bff0 	b.w	8009300 <__sfp_lock_release>
 8009320:	4b04      	ldr	r3, [pc, #16]	@ (8009334 <__sinit+0x28>)
 8009322:	6223      	str	r3, [r4, #32]
 8009324:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <__sinit+0x2c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f5      	bne.n	8009318 <__sinit+0xc>
 800932c:	f7ff ffc4 	bl	80092b8 <global_stdio_init.part.0>
 8009330:	e7f2      	b.n	8009318 <__sinit+0xc>
 8009332:	bf00      	nop
 8009334:	08009279 	.word	0x08009279
 8009338:	20011534 	.word	0x20011534

0800933c <fiprintf>:
 800933c:	b40e      	push	{r1, r2, r3}
 800933e:	b503      	push	{r0, r1, lr}
 8009340:	4601      	mov	r1, r0
 8009342:	ab03      	add	r3, sp, #12
 8009344:	4805      	ldr	r0, [pc, #20]	@ (800935c <fiprintf+0x20>)
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	f000 f965 	bl	800961c <_vfiprintf_r>
 8009352:	b002      	add	sp, #8
 8009354:	f85d eb04 	ldr.w	lr, [sp], #4
 8009358:	b003      	add	sp, #12
 800935a:	4770      	bx	lr
 800935c:	2000003c 	.word	0x2000003c

08009360 <_fwalk_sglue>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4607      	mov	r7, r0
 8009366:	4688      	mov	r8, r1
 8009368:	4614      	mov	r4, r2
 800936a:	2600      	movs	r6, #0
 800936c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009370:	f1b9 0901 	subs.w	r9, r9, #1
 8009374:	d505      	bpl.n	8009382 <_fwalk_sglue+0x22>
 8009376:	6824      	ldr	r4, [r4, #0]
 8009378:	2c00      	cmp	r4, #0
 800937a:	d1f7      	bne.n	800936c <_fwalk_sglue+0xc>
 800937c:	4630      	mov	r0, r6
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d907      	bls.n	8009398 <_fwalk_sglue+0x38>
 8009388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800938c:	3301      	adds	r3, #1
 800938e:	d003      	beq.n	8009398 <_fwalk_sglue+0x38>
 8009390:	4629      	mov	r1, r5
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	4306      	orrs	r6, r0
 8009398:	3568      	adds	r5, #104	@ 0x68
 800939a:	e7e9      	b.n	8009370 <_fwalk_sglue+0x10>

0800939c <getc>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4b16      	ldr	r3, [pc, #88]	@ (80093f8 <getc+0x5c>)
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	4604      	mov	r4, r0
 80093a4:	b125      	cbz	r5, 80093b0 <getc+0x14>
 80093a6:	6a2b      	ldr	r3, [r5, #32]
 80093a8:	b913      	cbnz	r3, 80093b0 <getc+0x14>
 80093aa:	4628      	mov	r0, r5
 80093ac:	f7ff ffae 	bl	800930c <__sinit>
 80093b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093b2:	07d8      	lsls	r0, r3, #31
 80093b4:	d405      	bmi.n	80093c2 <getc+0x26>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	0599      	lsls	r1, r3, #22
 80093ba:	d402      	bmi.n	80093c2 <getc+0x26>
 80093bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093be:	f000 f8ec 	bl	800959a <__retarget_lock_acquire_recursive>
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	da0f      	bge.n	80093ec <getc+0x50>
 80093cc:	4628      	mov	r0, r5
 80093ce:	4621      	mov	r1, r4
 80093d0:	f000 f884 	bl	80094dc <__srget_r>
 80093d4:	4605      	mov	r5, r0
 80093d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093d8:	07da      	lsls	r2, r3, #31
 80093da:	d405      	bmi.n	80093e8 <getc+0x4c>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	059b      	lsls	r3, r3, #22
 80093e0:	d402      	bmi.n	80093e8 <getc+0x4c>
 80093e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093e4:	f000 f8da 	bl	800959c <__retarget_lock_release_recursive>
 80093e8:	4628      	mov	r0, r5
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	6022      	str	r2, [r4, #0]
 80093f2:	781d      	ldrb	r5, [r3, #0]
 80093f4:	e7ef      	b.n	80093d6 <getc+0x3a>
 80093f6:	bf00      	nop
 80093f8:	2000003c 	.word	0x2000003c

080093fc <iprintf>:
 80093fc:	b40f      	push	{r0, r1, r2, r3}
 80093fe:	b507      	push	{r0, r1, r2, lr}
 8009400:	4906      	ldr	r1, [pc, #24]	@ (800941c <iprintf+0x20>)
 8009402:	ab04      	add	r3, sp, #16
 8009404:	6808      	ldr	r0, [r1, #0]
 8009406:	f853 2b04 	ldr.w	r2, [r3], #4
 800940a:	6881      	ldr	r1, [r0, #8]
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	f000 f905 	bl	800961c <_vfiprintf_r>
 8009412:	b003      	add	sp, #12
 8009414:	f85d eb04 	ldr.w	lr, [sp], #4
 8009418:	b004      	add	sp, #16
 800941a:	4770      	bx	lr
 800941c:	2000003c 	.word	0x2000003c

08009420 <_puts_r>:
 8009420:	6a03      	ldr	r3, [r0, #32]
 8009422:	b570      	push	{r4, r5, r6, lr}
 8009424:	6884      	ldr	r4, [r0, #8]
 8009426:	4605      	mov	r5, r0
 8009428:	460e      	mov	r6, r1
 800942a:	b90b      	cbnz	r3, 8009430 <_puts_r+0x10>
 800942c:	f7ff ff6e 	bl	800930c <__sinit>
 8009430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d405      	bmi.n	8009442 <_puts_r+0x22>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	0598      	lsls	r0, r3, #22
 800943a:	d402      	bmi.n	8009442 <_puts_r+0x22>
 800943c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943e:	f000 f8ac 	bl	800959a <__retarget_lock_acquire_recursive>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	0719      	lsls	r1, r3, #28
 8009446:	d502      	bpl.n	800944e <_puts_r+0x2e>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d135      	bne.n	80094ba <_puts_r+0x9a>
 800944e:	4621      	mov	r1, r4
 8009450:	4628      	mov	r0, r5
 8009452:	f000 fd63 	bl	8009f1c <__swsetup_r>
 8009456:	b380      	cbz	r0, 80094ba <_puts_r+0x9a>
 8009458:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800945c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800945e:	07da      	lsls	r2, r3, #31
 8009460:	d405      	bmi.n	800946e <_puts_r+0x4e>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	059b      	lsls	r3, r3, #22
 8009466:	d402      	bmi.n	800946e <_puts_r+0x4e>
 8009468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946a:	f000 f897 	bl	800959c <__retarget_lock_release_recursive>
 800946e:	4628      	mov	r0, r5
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	2b00      	cmp	r3, #0
 8009474:	da04      	bge.n	8009480 <_puts_r+0x60>
 8009476:	69a2      	ldr	r2, [r4, #24]
 8009478:	429a      	cmp	r2, r3
 800947a:	dc17      	bgt.n	80094ac <_puts_r+0x8c>
 800947c:	290a      	cmp	r1, #10
 800947e:	d015      	beq.n	80094ac <_puts_r+0x8c>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	6022      	str	r2, [r4, #0]
 8009486:	7019      	strb	r1, [r3, #0]
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800948e:	3b01      	subs	r3, #1
 8009490:	60a3      	str	r3, [r4, #8]
 8009492:	2900      	cmp	r1, #0
 8009494:	d1ed      	bne.n	8009472 <_puts_r+0x52>
 8009496:	2b00      	cmp	r3, #0
 8009498:	da11      	bge.n	80094be <_puts_r+0x9e>
 800949a:	4622      	mov	r2, r4
 800949c:	210a      	movs	r1, #10
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 fcfd 	bl	8009e9e <__swbuf_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d0d7      	beq.n	8009458 <_puts_r+0x38>
 80094a8:	250a      	movs	r5, #10
 80094aa:	e7d7      	b.n	800945c <_puts_r+0x3c>
 80094ac:	4622      	mov	r2, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 fcf5 	bl	8009e9e <__swbuf_r>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d1e7      	bne.n	8009488 <_puts_r+0x68>
 80094b8:	e7ce      	b.n	8009458 <_puts_r+0x38>
 80094ba:	3e01      	subs	r6, #1
 80094bc:	e7e4      	b.n	8009488 <_puts_r+0x68>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	220a      	movs	r2, #10
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	e7ee      	b.n	80094a8 <_puts_r+0x88>
	...

080094cc <puts>:
 80094cc:	4b02      	ldr	r3, [pc, #8]	@ (80094d8 <puts+0xc>)
 80094ce:	4601      	mov	r1, r0
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f7ff bfa5 	b.w	8009420 <_puts_r>
 80094d6:	bf00      	nop
 80094d8:	2000003c 	.word	0x2000003c

080094dc <__srget_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	4605      	mov	r5, r0
 80094e2:	b118      	cbz	r0, 80094ec <__srget_r+0x10>
 80094e4:	6a03      	ldr	r3, [r0, #32]
 80094e6:	b90b      	cbnz	r3, 80094ec <__srget_r+0x10>
 80094e8:	f7ff ff10 	bl	800930c <__sinit>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	f000 fdda 	bl	800a0a8 <__srefill_r>
 80094f4:	b938      	cbnz	r0, 8009506 <__srget_r+0x2a>
 80094f6:	6863      	ldr	r3, [r4, #4]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	7818      	ldrb	r0, [r3, #0]
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800950a:	e7fb      	b.n	8009504 <__srget_r+0x28>

0800950c <strncpy>:
 800950c:	b510      	push	{r4, lr}
 800950e:	3901      	subs	r1, #1
 8009510:	4603      	mov	r3, r0
 8009512:	b132      	cbz	r2, 8009522 <strncpy+0x16>
 8009514:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009518:	f803 4b01 	strb.w	r4, [r3], #1
 800951c:	3a01      	subs	r2, #1
 800951e:	2c00      	cmp	r4, #0
 8009520:	d1f7      	bne.n	8009512 <strncpy+0x6>
 8009522:	441a      	add	r2, r3
 8009524:	2100      	movs	r1, #0
 8009526:	4293      	cmp	r3, r2
 8009528:	d100      	bne.n	800952c <strncpy+0x20>
 800952a:	bd10      	pop	{r4, pc}
 800952c:	f803 1b01 	strb.w	r1, [r3], #1
 8009530:	e7f9      	b.n	8009526 <strncpy+0x1a>

08009532 <memset>:
 8009532:	4402      	add	r2, r0
 8009534:	4603      	mov	r3, r0
 8009536:	4293      	cmp	r3, r2
 8009538:	d100      	bne.n	800953c <memset+0xa>
 800953a:	4770      	bx	lr
 800953c:	f803 1b01 	strb.w	r1, [r3], #1
 8009540:	e7f9      	b.n	8009536 <memset+0x4>
	...

08009544 <__errno>:
 8009544:	4b01      	ldr	r3, [pc, #4]	@ (800954c <__errno+0x8>)
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	2000003c 	.word	0x2000003c

08009550 <__libc_init_array>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	4d0d      	ldr	r5, [pc, #52]	@ (8009588 <__libc_init_array+0x38>)
 8009554:	4c0d      	ldr	r4, [pc, #52]	@ (800958c <__libc_init_array+0x3c>)
 8009556:	1b64      	subs	r4, r4, r5
 8009558:	10a4      	asrs	r4, r4, #2
 800955a:	2600      	movs	r6, #0
 800955c:	42a6      	cmp	r6, r4
 800955e:	d109      	bne.n	8009574 <__libc_init_array+0x24>
 8009560:	4d0b      	ldr	r5, [pc, #44]	@ (8009590 <__libc_init_array+0x40>)
 8009562:	4c0c      	ldr	r4, [pc, #48]	@ (8009594 <__libc_init_array+0x44>)
 8009564:	f001 fbca 	bl	800acfc <_init>
 8009568:	1b64      	subs	r4, r4, r5
 800956a:	10a4      	asrs	r4, r4, #2
 800956c:	2600      	movs	r6, #0
 800956e:	42a6      	cmp	r6, r4
 8009570:	d105      	bne.n	800957e <__libc_init_array+0x2e>
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	f855 3b04 	ldr.w	r3, [r5], #4
 8009578:	4798      	blx	r3
 800957a:	3601      	adds	r6, #1
 800957c:	e7ee      	b.n	800955c <__libc_init_array+0xc>
 800957e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009582:	4798      	blx	r3
 8009584:	3601      	adds	r6, #1
 8009586:	e7f2      	b.n	800956e <__libc_init_array+0x1e>
 8009588:	0800ad1c 	.word	0x0800ad1c
 800958c:	0800ad1c 	.word	0x0800ad1c
 8009590:	0800ad1c 	.word	0x0800ad1c
 8009594:	0800ad28 	.word	0x0800ad28

08009598 <__retarget_lock_init_recursive>:
 8009598:	4770      	bx	lr

0800959a <__retarget_lock_acquire_recursive>:
 800959a:	4770      	bx	lr

0800959c <__retarget_lock_release_recursive>:
 800959c:	4770      	bx	lr

0800959e <memcpy>:
 800959e:	440a      	add	r2, r1
 80095a0:	4291      	cmp	r1, r2
 80095a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80095a6:	d100      	bne.n	80095aa <memcpy+0xc>
 80095a8:	4770      	bx	lr
 80095aa:	b510      	push	{r4, lr}
 80095ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b4:	4291      	cmp	r1, r2
 80095b6:	d1f9      	bne.n	80095ac <memcpy+0xe>
 80095b8:	bd10      	pop	{r4, pc}

080095ba <abort>:
 80095ba:	b508      	push	{r3, lr}
 80095bc:	2006      	movs	r0, #6
 80095be:	f000 fe53 	bl	800a268 <raise>
 80095c2:	2001      	movs	r0, #1
 80095c4:	f000 ff28 	bl	800a418 <_exit>

080095c8 <__sfputc_r>:
 80095c8:	6893      	ldr	r3, [r2, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	b410      	push	{r4}
 80095d0:	6093      	str	r3, [r2, #8]
 80095d2:	da08      	bge.n	80095e6 <__sfputc_r+0x1e>
 80095d4:	6994      	ldr	r4, [r2, #24]
 80095d6:	42a3      	cmp	r3, r4
 80095d8:	db01      	blt.n	80095de <__sfputc_r+0x16>
 80095da:	290a      	cmp	r1, #10
 80095dc:	d103      	bne.n	80095e6 <__sfputc_r+0x1e>
 80095de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e2:	f000 bc5c 	b.w	8009e9e <__swbuf_r>
 80095e6:	6813      	ldr	r3, [r2, #0]
 80095e8:	1c58      	adds	r0, r3, #1
 80095ea:	6010      	str	r0, [r2, #0]
 80095ec:	7019      	strb	r1, [r3, #0]
 80095ee:	4608      	mov	r0, r1
 80095f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <__sfputs_r>:
 80095f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f8:	4606      	mov	r6, r0
 80095fa:	460f      	mov	r7, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	18d5      	adds	r5, r2, r3
 8009600:	42ac      	cmp	r4, r5
 8009602:	d101      	bne.n	8009608 <__sfputs_r+0x12>
 8009604:	2000      	movs	r0, #0
 8009606:	e007      	b.n	8009618 <__sfputs_r+0x22>
 8009608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960c:	463a      	mov	r2, r7
 800960e:	4630      	mov	r0, r6
 8009610:	f7ff ffda 	bl	80095c8 <__sfputc_r>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d1f3      	bne.n	8009600 <__sfputs_r+0xa>
 8009618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800961c <_vfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	460d      	mov	r5, r1
 8009622:	b09d      	sub	sp, #116	@ 0x74
 8009624:	4614      	mov	r4, r2
 8009626:	4698      	mov	r8, r3
 8009628:	4606      	mov	r6, r0
 800962a:	b118      	cbz	r0, 8009634 <_vfiprintf_r+0x18>
 800962c:	6a03      	ldr	r3, [r0, #32]
 800962e:	b90b      	cbnz	r3, 8009634 <_vfiprintf_r+0x18>
 8009630:	f7ff fe6c 	bl	800930c <__sinit>
 8009634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009636:	07d9      	lsls	r1, r3, #31
 8009638:	d405      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 800963a:	89ab      	ldrh	r3, [r5, #12]
 800963c:	059a      	lsls	r2, r3, #22
 800963e:	d402      	bmi.n	8009646 <_vfiprintf_r+0x2a>
 8009640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009642:	f7ff ffaa 	bl	800959a <__retarget_lock_acquire_recursive>
 8009646:	89ab      	ldrh	r3, [r5, #12]
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	d501      	bpl.n	8009650 <_vfiprintf_r+0x34>
 800964c:	692b      	ldr	r3, [r5, #16]
 800964e:	b99b      	cbnz	r3, 8009678 <_vfiprintf_r+0x5c>
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f000 fc62 	bl	8009f1c <__swsetup_r>
 8009658:	b170      	cbz	r0, 8009678 <_vfiprintf_r+0x5c>
 800965a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800965c:	07dc      	lsls	r4, r3, #31
 800965e:	d504      	bpl.n	800966a <_vfiprintf_r+0x4e>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009664:	b01d      	add	sp, #116	@ 0x74
 8009666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	0598      	lsls	r0, r3, #22
 800966e:	d4f7      	bmi.n	8009660 <_vfiprintf_r+0x44>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7ff ff93 	bl	800959c <__retarget_lock_release_recursive>
 8009676:	e7f3      	b.n	8009660 <_vfiprintf_r+0x44>
 8009678:	2300      	movs	r3, #0
 800967a:	9309      	str	r3, [sp, #36]	@ 0x24
 800967c:	2320      	movs	r3, #32
 800967e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009682:	f8cd 800c 	str.w	r8, [sp, #12]
 8009686:	2330      	movs	r3, #48	@ 0x30
 8009688:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009838 <_vfiprintf_r+0x21c>
 800968c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009690:	f04f 0901 	mov.w	r9, #1
 8009694:	4623      	mov	r3, r4
 8009696:	469a      	mov	sl, r3
 8009698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969c:	b10a      	cbz	r2, 80096a2 <_vfiprintf_r+0x86>
 800969e:	2a25      	cmp	r2, #37	@ 0x25
 80096a0:	d1f9      	bne.n	8009696 <_vfiprintf_r+0x7a>
 80096a2:	ebba 0b04 	subs.w	fp, sl, r4
 80096a6:	d00b      	beq.n	80096c0 <_vfiprintf_r+0xa4>
 80096a8:	465b      	mov	r3, fp
 80096aa:	4622      	mov	r2, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7ff ffa1 	bl	80095f6 <__sfputs_r>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f000 80a7 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096bc:	445a      	add	r2, fp
 80096be:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c0:	f89a 3000 	ldrb.w	r3, [sl]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 809f 	beq.w	8009808 <_vfiprintf_r+0x1ec>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d4:	f10a 0a01 	add.w	sl, sl, #1
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e2:	4654      	mov	r4, sl
 80096e4:	2205      	movs	r2, #5
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4853      	ldr	r0, [pc, #332]	@ (8009838 <_vfiprintf_r+0x21c>)
 80096ec:	f7f6 fde0 	bl	80002b0 <memchr>
 80096f0:	9a04      	ldr	r2, [sp, #16]
 80096f2:	b9d8      	cbnz	r0, 800972c <_vfiprintf_r+0x110>
 80096f4:	06d1      	lsls	r1, r2, #27
 80096f6:	bf44      	itt	mi
 80096f8:	2320      	movmi	r3, #32
 80096fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096fe:	0713      	lsls	r3, r2, #28
 8009700:	bf44      	itt	mi
 8009702:	232b      	movmi	r3, #43	@ 0x2b
 8009704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009708:	f89a 3000 	ldrb.w	r3, [sl]
 800970c:	2b2a      	cmp	r3, #42	@ 0x2a
 800970e:	d015      	beq.n	800973c <_vfiprintf_r+0x120>
 8009710:	9a07      	ldr	r2, [sp, #28]
 8009712:	4654      	mov	r4, sl
 8009714:	2000      	movs	r0, #0
 8009716:	f04f 0c0a 	mov.w	ip, #10
 800971a:	4621      	mov	r1, r4
 800971c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009720:	3b30      	subs	r3, #48	@ 0x30
 8009722:	2b09      	cmp	r3, #9
 8009724:	d94b      	bls.n	80097be <_vfiprintf_r+0x1a2>
 8009726:	b1b0      	cbz	r0, 8009756 <_vfiprintf_r+0x13a>
 8009728:	9207      	str	r2, [sp, #28]
 800972a:	e014      	b.n	8009756 <_vfiprintf_r+0x13a>
 800972c:	eba0 0308 	sub.w	r3, r0, r8
 8009730:	fa09 f303 	lsl.w	r3, r9, r3
 8009734:	4313      	orrs	r3, r2
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	46a2      	mov	sl, r4
 800973a:	e7d2      	b.n	80096e2 <_vfiprintf_r+0xc6>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	1d19      	adds	r1, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	9103      	str	r1, [sp, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfbb      	ittet	lt
 8009748:	425b      	neglt	r3, r3
 800974a:	f042 0202 	orrlt.w	r2, r2, #2
 800974e:	9307      	strge	r3, [sp, #28]
 8009750:	9307      	strlt	r3, [sp, #28]
 8009752:	bfb8      	it	lt
 8009754:	9204      	strlt	r2, [sp, #16]
 8009756:	7823      	ldrb	r3, [r4, #0]
 8009758:	2b2e      	cmp	r3, #46	@ 0x2e
 800975a:	d10a      	bne.n	8009772 <_vfiprintf_r+0x156>
 800975c:	7863      	ldrb	r3, [r4, #1]
 800975e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009760:	d132      	bne.n	80097c8 <_vfiprintf_r+0x1ac>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800976e:	3402      	adds	r4, #2
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009848 <_vfiprintf_r+0x22c>
 8009776:	7821      	ldrb	r1, [r4, #0]
 8009778:	2203      	movs	r2, #3
 800977a:	4650      	mov	r0, sl
 800977c:	f7f6 fd98 	bl	80002b0 <memchr>
 8009780:	b138      	cbz	r0, 8009792 <_vfiprintf_r+0x176>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	eba0 000a 	sub.w	r0, r0, sl
 8009788:	2240      	movs	r2, #64	@ 0x40
 800978a:	4082      	lsls	r2, r0
 800978c:	4313      	orrs	r3, r2
 800978e:	3401      	adds	r4, #1
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4829      	ldr	r0, [pc, #164]	@ (800983c <_vfiprintf_r+0x220>)
 8009798:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800979c:	2206      	movs	r2, #6
 800979e:	f7f6 fd87 	bl	80002b0 <memchr>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d03f      	beq.n	8009826 <_vfiprintf_r+0x20a>
 80097a6:	4b26      	ldr	r3, [pc, #152]	@ (8009840 <_vfiprintf_r+0x224>)
 80097a8:	bb1b      	cbnz	r3, 80097f2 <_vfiprintf_r+0x1d6>
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	3307      	adds	r3, #7
 80097ae:	f023 0307 	bic.w	r3, r3, #7
 80097b2:	3308      	adds	r3, #8
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	443b      	add	r3, r7
 80097ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80097bc:	e76a      	b.n	8009694 <_vfiprintf_r+0x78>
 80097be:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c2:	460c      	mov	r4, r1
 80097c4:	2001      	movs	r0, #1
 80097c6:	e7a8      	b.n	800971a <_vfiprintf_r+0xfe>
 80097c8:	2300      	movs	r3, #0
 80097ca:	3401      	adds	r4, #1
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	4619      	mov	r1, r3
 80097d0:	f04f 0c0a 	mov.w	ip, #10
 80097d4:	4620      	mov	r0, r4
 80097d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097da:	3a30      	subs	r2, #48	@ 0x30
 80097dc:	2a09      	cmp	r2, #9
 80097de:	d903      	bls.n	80097e8 <_vfiprintf_r+0x1cc>
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0c6      	beq.n	8009772 <_vfiprintf_r+0x156>
 80097e4:	9105      	str	r1, [sp, #20]
 80097e6:	e7c4      	b.n	8009772 <_vfiprintf_r+0x156>
 80097e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ec:	4604      	mov	r4, r0
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7f0      	b.n	80097d4 <_vfiprintf_r+0x1b8>
 80097f2:	ab03      	add	r3, sp, #12
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	462a      	mov	r2, r5
 80097f8:	4b12      	ldr	r3, [pc, #72]	@ (8009844 <_vfiprintf_r+0x228>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	4630      	mov	r0, r6
 80097fe:	f3af 8000 	nop.w
 8009802:	4607      	mov	r7, r0
 8009804:	1c78      	adds	r0, r7, #1
 8009806:	d1d6      	bne.n	80097b6 <_vfiprintf_r+0x19a>
 8009808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x1fe>
 8009814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009816:	f7ff fec1 	bl	800959c <__retarget_lock_release_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	065b      	lsls	r3, r3, #25
 800981e:	f53f af1f 	bmi.w	8009660 <_vfiprintf_r+0x44>
 8009822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009824:	e71e      	b.n	8009664 <_vfiprintf_r+0x48>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <_vfiprintf_r+0x228>)
 800982e:	a904      	add	r1, sp, #16
 8009830:	4630      	mov	r0, r6
 8009832:	f000 f91b 	bl	8009a6c <_printf_i>
 8009836:	e7e4      	b.n	8009802 <_vfiprintf_r+0x1e6>
 8009838:	0800acc8 	.word	0x0800acc8
 800983c:	0800acd2 	.word	0x0800acd2
 8009840:	00000000 	.word	0x00000000
 8009844:	080095f7 	.word	0x080095f7
 8009848:	0800acce 	.word	0x0800acce

0800984c <sbrk_aligned>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	4e0f      	ldr	r6, [pc, #60]	@ (800988c <sbrk_aligned+0x40>)
 8009850:	460c      	mov	r4, r1
 8009852:	6831      	ldr	r1, [r6, #0]
 8009854:	4605      	mov	r5, r0
 8009856:	b911      	cbnz	r1, 800985e <sbrk_aligned+0x12>
 8009858:	f000 fd34 	bl	800a2c4 <_sbrk_r>
 800985c:	6030      	str	r0, [r6, #0]
 800985e:	4621      	mov	r1, r4
 8009860:	4628      	mov	r0, r5
 8009862:	f000 fd2f 	bl	800a2c4 <_sbrk_r>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d103      	bne.n	8009872 <sbrk_aligned+0x26>
 800986a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800986e:	4620      	mov	r0, r4
 8009870:	bd70      	pop	{r4, r5, r6, pc}
 8009872:	1cc4      	adds	r4, r0, #3
 8009874:	f024 0403 	bic.w	r4, r4, #3
 8009878:	42a0      	cmp	r0, r4
 800987a:	d0f8      	beq.n	800986e <sbrk_aligned+0x22>
 800987c:	1a21      	subs	r1, r4, r0
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fd20 	bl	800a2c4 <_sbrk_r>
 8009884:	3001      	adds	r0, #1
 8009886:	d1f2      	bne.n	800986e <sbrk_aligned+0x22>
 8009888:	e7ef      	b.n	800986a <sbrk_aligned+0x1e>
 800988a:	bf00      	nop
 800988c:	2001153c 	.word	0x2001153c

08009890 <_malloc_r>:
 8009890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009894:	1ccd      	adds	r5, r1, #3
 8009896:	f025 0503 	bic.w	r5, r5, #3
 800989a:	3508      	adds	r5, #8
 800989c:	2d0c      	cmp	r5, #12
 800989e:	bf38      	it	cc
 80098a0:	250c      	movcc	r5, #12
 80098a2:	2d00      	cmp	r5, #0
 80098a4:	4606      	mov	r6, r0
 80098a6:	db01      	blt.n	80098ac <_malloc_r+0x1c>
 80098a8:	42a9      	cmp	r1, r5
 80098aa:	d904      	bls.n	80098b6 <_malloc_r+0x26>
 80098ac:	230c      	movs	r3, #12
 80098ae:	6033      	str	r3, [r6, #0]
 80098b0:	2000      	movs	r0, #0
 80098b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800998c <_malloc_r+0xfc>
 80098ba:	f000 faa1 	bl	8009e00 <__malloc_lock>
 80098be:	f8d8 3000 	ldr.w	r3, [r8]
 80098c2:	461c      	mov	r4, r3
 80098c4:	bb44      	cbnz	r4, 8009918 <_malloc_r+0x88>
 80098c6:	4629      	mov	r1, r5
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff ffbf 	bl	800984c <sbrk_aligned>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	4604      	mov	r4, r0
 80098d2:	d158      	bne.n	8009986 <_malloc_r+0xf6>
 80098d4:	f8d8 4000 	ldr.w	r4, [r8]
 80098d8:	4627      	mov	r7, r4
 80098da:	2f00      	cmp	r7, #0
 80098dc:	d143      	bne.n	8009966 <_malloc_r+0xd6>
 80098de:	2c00      	cmp	r4, #0
 80098e0:	d04b      	beq.n	800997a <_malloc_r+0xea>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	4639      	mov	r1, r7
 80098e6:	4630      	mov	r0, r6
 80098e8:	eb04 0903 	add.w	r9, r4, r3
 80098ec:	f000 fcea 	bl	800a2c4 <_sbrk_r>
 80098f0:	4581      	cmp	r9, r0
 80098f2:	d142      	bne.n	800997a <_malloc_r+0xea>
 80098f4:	6821      	ldr	r1, [r4, #0]
 80098f6:	1a6d      	subs	r5, r5, r1
 80098f8:	4629      	mov	r1, r5
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7ff ffa6 	bl	800984c <sbrk_aligned>
 8009900:	3001      	adds	r0, #1
 8009902:	d03a      	beq.n	800997a <_malloc_r+0xea>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	442b      	add	r3, r5
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	f8d8 3000 	ldr.w	r3, [r8]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	bb62      	cbnz	r2, 800996c <_malloc_r+0xdc>
 8009912:	f8c8 7000 	str.w	r7, [r8]
 8009916:	e00f      	b.n	8009938 <_malloc_r+0xa8>
 8009918:	6822      	ldr	r2, [r4, #0]
 800991a:	1b52      	subs	r2, r2, r5
 800991c:	d420      	bmi.n	8009960 <_malloc_r+0xd0>
 800991e:	2a0b      	cmp	r2, #11
 8009920:	d917      	bls.n	8009952 <_malloc_r+0xc2>
 8009922:	1961      	adds	r1, r4, r5
 8009924:	42a3      	cmp	r3, r4
 8009926:	6025      	str	r5, [r4, #0]
 8009928:	bf18      	it	ne
 800992a:	6059      	strne	r1, [r3, #4]
 800992c:	6863      	ldr	r3, [r4, #4]
 800992e:	bf08      	it	eq
 8009930:	f8c8 1000 	streq.w	r1, [r8]
 8009934:	5162      	str	r2, [r4, r5]
 8009936:	604b      	str	r3, [r1, #4]
 8009938:	4630      	mov	r0, r6
 800993a:	f000 fa67 	bl	8009e0c <__malloc_unlock>
 800993e:	f104 000b 	add.w	r0, r4, #11
 8009942:	1d23      	adds	r3, r4, #4
 8009944:	f020 0007 	bic.w	r0, r0, #7
 8009948:	1ac2      	subs	r2, r0, r3
 800994a:	bf1c      	itt	ne
 800994c:	1a1b      	subne	r3, r3, r0
 800994e:	50a3      	strne	r3, [r4, r2]
 8009950:	e7af      	b.n	80098b2 <_malloc_r+0x22>
 8009952:	6862      	ldr	r2, [r4, #4]
 8009954:	42a3      	cmp	r3, r4
 8009956:	bf0c      	ite	eq
 8009958:	f8c8 2000 	streq.w	r2, [r8]
 800995c:	605a      	strne	r2, [r3, #4]
 800995e:	e7eb      	b.n	8009938 <_malloc_r+0xa8>
 8009960:	4623      	mov	r3, r4
 8009962:	6864      	ldr	r4, [r4, #4]
 8009964:	e7ae      	b.n	80098c4 <_malloc_r+0x34>
 8009966:	463c      	mov	r4, r7
 8009968:	687f      	ldr	r7, [r7, #4]
 800996a:	e7b6      	b.n	80098da <_malloc_r+0x4a>
 800996c:	461a      	mov	r2, r3
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	42a3      	cmp	r3, r4
 8009972:	d1fb      	bne.n	800996c <_malloc_r+0xdc>
 8009974:	2300      	movs	r3, #0
 8009976:	6053      	str	r3, [r2, #4]
 8009978:	e7de      	b.n	8009938 <_malloc_r+0xa8>
 800997a:	230c      	movs	r3, #12
 800997c:	6033      	str	r3, [r6, #0]
 800997e:	4630      	mov	r0, r6
 8009980:	f000 fa44 	bl	8009e0c <__malloc_unlock>
 8009984:	e794      	b.n	80098b0 <_malloc_r+0x20>
 8009986:	6005      	str	r5, [r0, #0]
 8009988:	e7d6      	b.n	8009938 <_malloc_r+0xa8>
 800998a:	bf00      	nop
 800998c:	20011540 	.word	0x20011540

08009990 <_printf_common>:
 8009990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009994:	4616      	mov	r6, r2
 8009996:	4698      	mov	r8, r3
 8009998:	688a      	ldr	r2, [r1, #8]
 800999a:	690b      	ldr	r3, [r1, #16]
 800999c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099a0:	4293      	cmp	r3, r2
 80099a2:	bfb8      	it	lt
 80099a4:	4613      	movlt	r3, r2
 80099a6:	6033      	str	r3, [r6, #0]
 80099a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099ac:	4607      	mov	r7, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	b10a      	cbz	r2, 80099b6 <_printf_common+0x26>
 80099b2:	3301      	adds	r3, #1
 80099b4:	6033      	str	r3, [r6, #0]
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	0699      	lsls	r1, r3, #26
 80099ba:	bf42      	ittt	mi
 80099bc:	6833      	ldrmi	r3, [r6, #0]
 80099be:	3302      	addmi	r3, #2
 80099c0:	6033      	strmi	r3, [r6, #0]
 80099c2:	6825      	ldr	r5, [r4, #0]
 80099c4:	f015 0506 	ands.w	r5, r5, #6
 80099c8:	d106      	bne.n	80099d8 <_printf_common+0x48>
 80099ca:	f104 0a19 	add.w	sl, r4, #25
 80099ce:	68e3      	ldr	r3, [r4, #12]
 80099d0:	6832      	ldr	r2, [r6, #0]
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	42ab      	cmp	r3, r5
 80099d6:	dc26      	bgt.n	8009a26 <_printf_common+0x96>
 80099d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	3b00      	subs	r3, #0
 80099e0:	bf18      	it	ne
 80099e2:	2301      	movne	r3, #1
 80099e4:	0692      	lsls	r2, r2, #26
 80099e6:	d42b      	bmi.n	8009a40 <_printf_common+0xb0>
 80099e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099ec:	4641      	mov	r1, r8
 80099ee:	4638      	mov	r0, r7
 80099f0:	47c8      	blx	r9
 80099f2:	3001      	adds	r0, #1
 80099f4:	d01e      	beq.n	8009a34 <_printf_common+0xa4>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	6922      	ldr	r2, [r4, #16]
 80099fa:	f003 0306 	and.w	r3, r3, #6
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	bf02      	ittt	eq
 8009a02:	68e5      	ldreq	r5, [r4, #12]
 8009a04:	6833      	ldreq	r3, [r6, #0]
 8009a06:	1aed      	subeq	r5, r5, r3
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	bf0c      	ite	eq
 8009a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a10:	2500      	movne	r5, #0
 8009a12:	4293      	cmp	r3, r2
 8009a14:	bfc4      	itt	gt
 8009a16:	1a9b      	subgt	r3, r3, r2
 8009a18:	18ed      	addgt	r5, r5, r3
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	341a      	adds	r4, #26
 8009a1e:	42b5      	cmp	r5, r6
 8009a20:	d11a      	bne.n	8009a58 <_printf_common+0xc8>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e008      	b.n	8009a38 <_printf_common+0xa8>
 8009a26:	2301      	movs	r3, #1
 8009a28:	4652      	mov	r2, sl
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	47c8      	blx	r9
 8009a30:	3001      	adds	r0, #1
 8009a32:	d103      	bne.n	8009a3c <_printf_common+0xac>
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	e7c6      	b.n	80099ce <_printf_common+0x3e>
 8009a40:	18e1      	adds	r1, r4, r3
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	2030      	movs	r0, #48	@ 0x30
 8009a46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a4a:	4422      	add	r2, r4
 8009a4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a54:	3302      	adds	r3, #2
 8009a56:	e7c7      	b.n	80099e8 <_printf_common+0x58>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	4641      	mov	r1, r8
 8009a5e:	4638      	mov	r0, r7
 8009a60:	47c8      	blx	r9
 8009a62:	3001      	adds	r0, #1
 8009a64:	d0e6      	beq.n	8009a34 <_printf_common+0xa4>
 8009a66:	3601      	adds	r6, #1
 8009a68:	e7d9      	b.n	8009a1e <_printf_common+0x8e>
	...

08009a6c <_printf_i>:
 8009a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a70:	7e0f      	ldrb	r7, [r1, #24]
 8009a72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a74:	2f78      	cmp	r7, #120	@ 0x78
 8009a76:	4691      	mov	r9, r2
 8009a78:	4680      	mov	r8, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	469a      	mov	sl, r3
 8009a7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a82:	d807      	bhi.n	8009a94 <_printf_i+0x28>
 8009a84:	2f62      	cmp	r7, #98	@ 0x62
 8009a86:	d80a      	bhi.n	8009a9e <_printf_i+0x32>
 8009a88:	2f00      	cmp	r7, #0
 8009a8a:	f000 80d1 	beq.w	8009c30 <_printf_i+0x1c4>
 8009a8e:	2f58      	cmp	r7, #88	@ 0x58
 8009a90:	f000 80b8 	beq.w	8009c04 <_printf_i+0x198>
 8009a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a9c:	e03a      	b.n	8009b14 <_printf_i+0xa8>
 8009a9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009aa2:	2b15      	cmp	r3, #21
 8009aa4:	d8f6      	bhi.n	8009a94 <_printf_i+0x28>
 8009aa6:	a101      	add	r1, pc, #4	@ (adr r1, 8009aac <_printf_i+0x40>)
 8009aa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aac:	08009b05 	.word	0x08009b05
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009a95 	.word	0x08009a95
 8009ab8:	08009a95 	.word	0x08009a95
 8009abc:	08009a95 	.word	0x08009a95
 8009ac0:	08009a95 	.word	0x08009a95
 8009ac4:	08009b19 	.word	0x08009b19
 8009ac8:	08009a95 	.word	0x08009a95
 8009acc:	08009a95 	.word	0x08009a95
 8009ad0:	08009a95 	.word	0x08009a95
 8009ad4:	08009a95 	.word	0x08009a95
 8009ad8:	08009c17 	.word	0x08009c17
 8009adc:	08009b43 	.word	0x08009b43
 8009ae0:	08009bd1 	.word	0x08009bd1
 8009ae4:	08009a95 	.word	0x08009a95
 8009ae8:	08009a95 	.word	0x08009a95
 8009aec:	08009c39 	.word	0x08009c39
 8009af0:	08009a95 	.word	0x08009a95
 8009af4:	08009b43 	.word	0x08009b43
 8009af8:	08009a95 	.word	0x08009a95
 8009afc:	08009a95 	.word	0x08009a95
 8009b00:	08009bd9 	.word	0x08009bd9
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	1d1a      	adds	r2, r3, #4
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6032      	str	r2, [r6, #0]
 8009b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b14:	2301      	movs	r3, #1
 8009b16:	e09c      	b.n	8009c52 <_printf_i+0x1e6>
 8009b18:	6833      	ldr	r3, [r6, #0]
 8009b1a:	6820      	ldr	r0, [r4, #0]
 8009b1c:	1d19      	adds	r1, r3, #4
 8009b1e:	6031      	str	r1, [r6, #0]
 8009b20:	0606      	lsls	r6, r0, #24
 8009b22:	d501      	bpl.n	8009b28 <_printf_i+0xbc>
 8009b24:	681d      	ldr	r5, [r3, #0]
 8009b26:	e003      	b.n	8009b30 <_printf_i+0xc4>
 8009b28:	0645      	lsls	r5, r0, #25
 8009b2a:	d5fb      	bpl.n	8009b24 <_printf_i+0xb8>
 8009b2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b30:	2d00      	cmp	r5, #0
 8009b32:	da03      	bge.n	8009b3c <_printf_i+0xd0>
 8009b34:	232d      	movs	r3, #45	@ 0x2d
 8009b36:	426d      	negs	r5, r5
 8009b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b3c:	4858      	ldr	r0, [pc, #352]	@ (8009ca0 <_printf_i+0x234>)
 8009b3e:	230a      	movs	r3, #10
 8009b40:	e011      	b.n	8009b66 <_printf_i+0xfa>
 8009b42:	6821      	ldr	r1, [r4, #0]
 8009b44:	6833      	ldr	r3, [r6, #0]
 8009b46:	0608      	lsls	r0, r1, #24
 8009b48:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b4c:	d402      	bmi.n	8009b54 <_printf_i+0xe8>
 8009b4e:	0649      	lsls	r1, r1, #25
 8009b50:	bf48      	it	mi
 8009b52:	b2ad      	uxthmi	r5, r5
 8009b54:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b56:	4852      	ldr	r0, [pc, #328]	@ (8009ca0 <_printf_i+0x234>)
 8009b58:	6033      	str	r3, [r6, #0]
 8009b5a:	bf14      	ite	ne
 8009b5c:	230a      	movne	r3, #10
 8009b5e:	2308      	moveq	r3, #8
 8009b60:	2100      	movs	r1, #0
 8009b62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b66:	6866      	ldr	r6, [r4, #4]
 8009b68:	60a6      	str	r6, [r4, #8]
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	db05      	blt.n	8009b7a <_printf_i+0x10e>
 8009b6e:	6821      	ldr	r1, [r4, #0]
 8009b70:	432e      	orrs	r6, r5
 8009b72:	f021 0104 	bic.w	r1, r1, #4
 8009b76:	6021      	str	r1, [r4, #0]
 8009b78:	d04b      	beq.n	8009c12 <_printf_i+0x1a6>
 8009b7a:	4616      	mov	r6, r2
 8009b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b80:	fb03 5711 	mls	r7, r3, r1, r5
 8009b84:	5dc7      	ldrb	r7, [r0, r7]
 8009b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b8a:	462f      	mov	r7, r5
 8009b8c:	42bb      	cmp	r3, r7
 8009b8e:	460d      	mov	r5, r1
 8009b90:	d9f4      	bls.n	8009b7c <_printf_i+0x110>
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d10b      	bne.n	8009bae <_printf_i+0x142>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	07df      	lsls	r7, r3, #31
 8009b9a:	d508      	bpl.n	8009bae <_printf_i+0x142>
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	6861      	ldr	r1, [r4, #4]
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	bfde      	ittt	le
 8009ba4:	2330      	movle	r3, #48	@ 0x30
 8009ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009baa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009bae:	1b92      	subs	r2, r2, r6
 8009bb0:	6122      	str	r2, [r4, #16]
 8009bb2:	f8cd a000 	str.w	sl, [sp]
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	aa03      	add	r2, sp, #12
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	f7ff fee7 	bl	8009990 <_printf_common>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	d14a      	bne.n	8009c5c <_printf_i+0x1f0>
 8009bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bca:	b004      	add	sp, #16
 8009bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	f043 0320 	orr.w	r3, r3, #32
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	4832      	ldr	r0, [pc, #200]	@ (8009ca4 <_printf_i+0x238>)
 8009bda:	2778      	movs	r7, #120	@ 0x78
 8009bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	6831      	ldr	r1, [r6, #0]
 8009be4:	061f      	lsls	r7, r3, #24
 8009be6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bea:	d402      	bmi.n	8009bf2 <_printf_i+0x186>
 8009bec:	065f      	lsls	r7, r3, #25
 8009bee:	bf48      	it	mi
 8009bf0:	b2ad      	uxthmi	r5, r5
 8009bf2:	6031      	str	r1, [r6, #0]
 8009bf4:	07d9      	lsls	r1, r3, #31
 8009bf6:	bf44      	itt	mi
 8009bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8009bfc:	6023      	strmi	r3, [r4, #0]
 8009bfe:	b11d      	cbz	r5, 8009c08 <_printf_i+0x19c>
 8009c00:	2310      	movs	r3, #16
 8009c02:	e7ad      	b.n	8009b60 <_printf_i+0xf4>
 8009c04:	4826      	ldr	r0, [pc, #152]	@ (8009ca0 <_printf_i+0x234>)
 8009c06:	e7e9      	b.n	8009bdc <_printf_i+0x170>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	f023 0320 	bic.w	r3, r3, #32
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	e7f6      	b.n	8009c00 <_printf_i+0x194>
 8009c12:	4616      	mov	r6, r2
 8009c14:	e7bd      	b.n	8009b92 <_printf_i+0x126>
 8009c16:	6833      	ldr	r3, [r6, #0]
 8009c18:	6825      	ldr	r5, [r4, #0]
 8009c1a:	6961      	ldr	r1, [r4, #20]
 8009c1c:	1d18      	adds	r0, r3, #4
 8009c1e:	6030      	str	r0, [r6, #0]
 8009c20:	062e      	lsls	r6, r5, #24
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	d501      	bpl.n	8009c2a <_printf_i+0x1be>
 8009c26:	6019      	str	r1, [r3, #0]
 8009c28:	e002      	b.n	8009c30 <_printf_i+0x1c4>
 8009c2a:	0668      	lsls	r0, r5, #25
 8009c2c:	d5fb      	bpl.n	8009c26 <_printf_i+0x1ba>
 8009c2e:	8019      	strh	r1, [r3, #0]
 8009c30:	2300      	movs	r3, #0
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	4616      	mov	r6, r2
 8009c36:	e7bc      	b.n	8009bb2 <_printf_i+0x146>
 8009c38:	6833      	ldr	r3, [r6, #0]
 8009c3a:	1d1a      	adds	r2, r3, #4
 8009c3c:	6032      	str	r2, [r6, #0]
 8009c3e:	681e      	ldr	r6, [r3, #0]
 8009c40:	6862      	ldr	r2, [r4, #4]
 8009c42:	2100      	movs	r1, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7f6 fb33 	bl	80002b0 <memchr>
 8009c4a:	b108      	cbz	r0, 8009c50 <_printf_i+0x1e4>
 8009c4c:	1b80      	subs	r0, r0, r6
 8009c4e:	6060      	str	r0, [r4, #4]
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	2300      	movs	r3, #0
 8009c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c5a:	e7aa      	b.n	8009bb2 <_printf_i+0x146>
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	4632      	mov	r2, r6
 8009c60:	4649      	mov	r1, r9
 8009c62:	4640      	mov	r0, r8
 8009c64:	47d0      	blx	sl
 8009c66:	3001      	adds	r0, #1
 8009c68:	d0ad      	beq.n	8009bc6 <_printf_i+0x15a>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	079b      	lsls	r3, r3, #30
 8009c6e:	d413      	bmi.n	8009c98 <_printf_i+0x22c>
 8009c70:	68e0      	ldr	r0, [r4, #12]
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	4298      	cmp	r0, r3
 8009c76:	bfb8      	it	lt
 8009c78:	4618      	movlt	r0, r3
 8009c7a:	e7a6      	b.n	8009bca <_printf_i+0x15e>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4632      	mov	r2, r6
 8009c80:	4649      	mov	r1, r9
 8009c82:	4640      	mov	r0, r8
 8009c84:	47d0      	blx	sl
 8009c86:	3001      	adds	r0, #1
 8009c88:	d09d      	beq.n	8009bc6 <_printf_i+0x15a>
 8009c8a:	3501      	adds	r5, #1
 8009c8c:	68e3      	ldr	r3, [r4, #12]
 8009c8e:	9903      	ldr	r1, [sp, #12]
 8009c90:	1a5b      	subs	r3, r3, r1
 8009c92:	42ab      	cmp	r3, r5
 8009c94:	dcf2      	bgt.n	8009c7c <_printf_i+0x210>
 8009c96:	e7eb      	b.n	8009c70 <_printf_i+0x204>
 8009c98:	2500      	movs	r5, #0
 8009c9a:	f104 0619 	add.w	r6, r4, #25
 8009c9e:	e7f5      	b.n	8009c8c <_printf_i+0x220>
 8009ca0:	0800acd9 	.word	0x0800acd9
 8009ca4:	0800acea 	.word	0x0800acea

08009ca8 <__sflush_r>:
 8009ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	0716      	lsls	r6, r2, #28
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	d454      	bmi.n	8009d62 <__sflush_r+0xba>
 8009cb8:	684b      	ldr	r3, [r1, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dc02      	bgt.n	8009cc4 <__sflush_r+0x1c>
 8009cbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dd48      	ble.n	8009d56 <__sflush_r+0xae>
 8009cc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d045      	beq.n	8009d56 <__sflush_r+0xae>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cd0:	682f      	ldr	r7, [r5, #0]
 8009cd2:	6a21      	ldr	r1, [r4, #32]
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	d030      	beq.n	8009d3a <__sflush_r+0x92>
 8009cd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	0759      	lsls	r1, r3, #29
 8009cde:	d505      	bpl.n	8009cec <__sflush_r+0x44>
 8009ce0:	6863      	ldr	r3, [r4, #4]
 8009ce2:	1ad2      	subs	r2, r2, r3
 8009ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ce6:	b10b      	cbz	r3, 8009cec <__sflush_r+0x44>
 8009ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	2300      	movs	r3, #0
 8009cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cf0:	6a21      	ldr	r1, [r4, #32]
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b0      	blx	r6
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	d106      	bne.n	8009d0a <__sflush_r+0x62>
 8009cfc:	6829      	ldr	r1, [r5, #0]
 8009cfe:	291d      	cmp	r1, #29
 8009d00:	d82b      	bhi.n	8009d5a <__sflush_r+0xb2>
 8009d02:	4a2a      	ldr	r2, [pc, #168]	@ (8009dac <__sflush_r+0x104>)
 8009d04:	40ca      	lsrs	r2, r1
 8009d06:	07d6      	lsls	r6, r2, #31
 8009d08:	d527      	bpl.n	8009d5a <__sflush_r+0xb2>
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	6062      	str	r2, [r4, #4]
 8009d0e:	04d9      	lsls	r1, r3, #19
 8009d10:	6922      	ldr	r2, [r4, #16]
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	d504      	bpl.n	8009d20 <__sflush_r+0x78>
 8009d16:	1c42      	adds	r2, r0, #1
 8009d18:	d101      	bne.n	8009d1e <__sflush_r+0x76>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b903      	cbnz	r3, 8009d20 <__sflush_r+0x78>
 8009d1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d22:	602f      	str	r7, [r5, #0]
 8009d24:	b1b9      	cbz	r1, 8009d56 <__sflush_r+0xae>
 8009d26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	d002      	beq.n	8009d34 <__sflush_r+0x8c>
 8009d2e:	4628      	mov	r0, r5
 8009d30:	f000 faea 	bl	800a308 <_free_r>
 8009d34:	2300      	movs	r3, #0
 8009d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d38:	e00d      	b.n	8009d56 <__sflush_r+0xae>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b0      	blx	r6
 8009d40:	4602      	mov	r2, r0
 8009d42:	1c50      	adds	r0, r2, #1
 8009d44:	d1c9      	bne.n	8009cda <__sflush_r+0x32>
 8009d46:	682b      	ldr	r3, [r5, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0c6      	beq.n	8009cda <__sflush_r+0x32>
 8009d4c:	2b1d      	cmp	r3, #29
 8009d4e:	d001      	beq.n	8009d54 <__sflush_r+0xac>
 8009d50:	2b16      	cmp	r3, #22
 8009d52:	d11e      	bne.n	8009d92 <__sflush_r+0xea>
 8009d54:	602f      	str	r7, [r5, #0]
 8009d56:	2000      	movs	r0, #0
 8009d58:	e022      	b.n	8009da0 <__sflush_r+0xf8>
 8009d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	e01b      	b.n	8009d9a <__sflush_r+0xf2>
 8009d62:	690f      	ldr	r7, [r1, #16]
 8009d64:	2f00      	cmp	r7, #0
 8009d66:	d0f6      	beq.n	8009d56 <__sflush_r+0xae>
 8009d68:	0793      	lsls	r3, r2, #30
 8009d6a:	680e      	ldr	r6, [r1, #0]
 8009d6c:	bf08      	it	eq
 8009d6e:	694b      	ldreq	r3, [r1, #20]
 8009d70:	600f      	str	r7, [r1, #0]
 8009d72:	bf18      	it	ne
 8009d74:	2300      	movne	r3, #0
 8009d76:	eba6 0807 	sub.w	r8, r6, r7
 8009d7a:	608b      	str	r3, [r1, #8]
 8009d7c:	f1b8 0f00 	cmp.w	r8, #0
 8009d80:	dde9      	ble.n	8009d56 <__sflush_r+0xae>
 8009d82:	6a21      	ldr	r1, [r4, #32]
 8009d84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d86:	4643      	mov	r3, r8
 8009d88:	463a      	mov	r2, r7
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b0      	blx	r6
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	dc08      	bgt.n	8009da4 <__sflush_r+0xfc>
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da4:	4407      	add	r7, r0
 8009da6:	eba8 0800 	sub.w	r8, r8, r0
 8009daa:	e7e7      	b.n	8009d7c <__sflush_r+0xd4>
 8009dac:	20400001 	.word	0x20400001

08009db0 <_fflush_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	690b      	ldr	r3, [r1, #16]
 8009db4:	4605      	mov	r5, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b913      	cbnz	r3, 8009dc0 <_fflush_r+0x10>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	b118      	cbz	r0, 8009dca <_fflush_r+0x1a>
 8009dc2:	6a03      	ldr	r3, [r0, #32]
 8009dc4:	b90b      	cbnz	r3, 8009dca <_fflush_r+0x1a>
 8009dc6:	f7ff faa1 	bl	800930c <__sinit>
 8009dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0f3      	beq.n	8009dba <_fflush_r+0xa>
 8009dd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dd4:	07d0      	lsls	r0, r2, #31
 8009dd6:	d404      	bmi.n	8009de2 <_fflush_r+0x32>
 8009dd8:	0599      	lsls	r1, r3, #22
 8009dda:	d402      	bmi.n	8009de2 <_fflush_r+0x32>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dde:	f7ff fbdc 	bl	800959a <__retarget_lock_acquire_recursive>
 8009de2:	4628      	mov	r0, r5
 8009de4:	4621      	mov	r1, r4
 8009de6:	f7ff ff5f 	bl	8009ca8 <__sflush_r>
 8009dea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dec:	07da      	lsls	r2, r3, #31
 8009dee:	4605      	mov	r5, r0
 8009df0:	d4e4      	bmi.n	8009dbc <_fflush_r+0xc>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	059b      	lsls	r3, r3, #22
 8009df6:	d4e1      	bmi.n	8009dbc <_fflush_r+0xc>
 8009df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dfa:	f7ff fbcf 	bl	800959c <__retarget_lock_release_recursive>
 8009dfe:	e7dd      	b.n	8009dbc <_fflush_r+0xc>

08009e00 <__malloc_lock>:
 8009e00:	4801      	ldr	r0, [pc, #4]	@ (8009e08 <__malloc_lock+0x8>)
 8009e02:	f7ff bbca 	b.w	800959a <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	20011538 	.word	0x20011538

08009e0c <__malloc_unlock>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	@ (8009e14 <__malloc_unlock+0x8>)
 8009e0e:	f7ff bbc5 	b.w	800959c <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	20011538 	.word	0x20011538

08009e18 <__sread>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	f000 fa2a 	bl	800a278 <_read_r>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	bfab      	itete	ge
 8009e28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e2c:	181b      	addge	r3, r3, r0
 8009e2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e32:	bfac      	ite	ge
 8009e34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e36:	81a3      	strhlt	r3, [r4, #12]
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <__swrite>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	461f      	mov	r7, r3
 8009e40:	898b      	ldrh	r3, [r1, #12]
 8009e42:	05db      	lsls	r3, r3, #23
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	4616      	mov	r6, r2
 8009e4a:	d505      	bpl.n	8009e58 <__swrite+0x1e>
 8009e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e50:	2302      	movs	r3, #2
 8009e52:	2200      	movs	r2, #0
 8009e54:	f000 f9ce 	bl	800a1f4 <_lseek_r>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	4632      	mov	r2, r6
 8009e66:	463b      	mov	r3, r7
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	f000 ba39 	b.w	800a2e4 <_write_r>

08009e72 <__sseek>:
 8009e72:	b510      	push	{r4, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 f9bb 	bl	800a1f4 <_lseek_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	bf15      	itete	ne
 8009e84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e8e:	81a3      	strheq	r3, [r4, #12]
 8009e90:	bf18      	it	ne
 8009e92:	81a3      	strhne	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__sclose>:
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 b979 	b.w	800a190 <_close_r>

08009e9e <__swbuf_r>:
 8009e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea0:	460e      	mov	r6, r1
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	b118      	cbz	r0, 8009eb0 <__swbuf_r+0x12>
 8009ea8:	6a03      	ldr	r3, [r0, #32]
 8009eaa:	b90b      	cbnz	r3, 8009eb0 <__swbuf_r+0x12>
 8009eac:	f7ff fa2e 	bl	800930c <__sinit>
 8009eb0:	69a3      	ldr	r3, [r4, #24]
 8009eb2:	60a3      	str	r3, [r4, #8]
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	071a      	lsls	r2, r3, #28
 8009eb8:	d501      	bpl.n	8009ebe <__swbuf_r+0x20>
 8009eba:	6923      	ldr	r3, [r4, #16]
 8009ebc:	b943      	cbnz	r3, 8009ed0 <__swbuf_r+0x32>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f82b 	bl	8009f1c <__swsetup_r>
 8009ec6:	b118      	cbz	r0, 8009ed0 <__swbuf_r+0x32>
 8009ec8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009ecc:	4638      	mov	r0, r7
 8009ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	6922      	ldr	r2, [r4, #16]
 8009ed4:	1a98      	subs	r0, r3, r2
 8009ed6:	6963      	ldr	r3, [r4, #20]
 8009ed8:	b2f6      	uxtb	r6, r6
 8009eda:	4283      	cmp	r3, r0
 8009edc:	4637      	mov	r7, r6
 8009ede:	dc05      	bgt.n	8009eec <__swbuf_r+0x4e>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f7ff ff64 	bl	8009db0 <_fflush_r>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d1ed      	bne.n	8009ec8 <__swbuf_r+0x2a>
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	60a3      	str	r3, [r4, #8]
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	701e      	strb	r6, [r3, #0]
 8009efa:	6962      	ldr	r2, [r4, #20]
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d004      	beq.n	8009f0c <__swbuf_r+0x6e>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	07db      	lsls	r3, r3, #31
 8009f06:	d5e1      	bpl.n	8009ecc <__swbuf_r+0x2e>
 8009f08:	2e0a      	cmp	r6, #10
 8009f0a:	d1df      	bne.n	8009ecc <__swbuf_r+0x2e>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f7ff ff4e 	bl	8009db0 <_fflush_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d0d9      	beq.n	8009ecc <__swbuf_r+0x2e>
 8009f18:	e7d6      	b.n	8009ec8 <__swbuf_r+0x2a>
	...

08009f1c <__swsetup_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4b29      	ldr	r3, [pc, #164]	@ (8009fc4 <__swsetup_r+0xa8>)
 8009f20:	4605      	mov	r5, r0
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	460c      	mov	r4, r1
 8009f26:	b118      	cbz	r0, 8009f30 <__swsetup_r+0x14>
 8009f28:	6a03      	ldr	r3, [r0, #32]
 8009f2a:	b90b      	cbnz	r3, 8009f30 <__swsetup_r+0x14>
 8009f2c:	f7ff f9ee 	bl	800930c <__sinit>
 8009f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f34:	0719      	lsls	r1, r3, #28
 8009f36:	d422      	bmi.n	8009f7e <__swsetup_r+0x62>
 8009f38:	06da      	lsls	r2, r3, #27
 8009f3a:	d407      	bmi.n	8009f4c <__swsetup_r+0x30>
 8009f3c:	2209      	movs	r2, #9
 8009f3e:	602a      	str	r2, [r5, #0]
 8009f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f4a:	e033      	b.n	8009fb4 <__swsetup_r+0x98>
 8009f4c:	0758      	lsls	r0, r3, #29
 8009f4e:	d512      	bpl.n	8009f76 <__swsetup_r+0x5a>
 8009f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f52:	b141      	cbz	r1, 8009f66 <__swsetup_r+0x4a>
 8009f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f58:	4299      	cmp	r1, r3
 8009f5a:	d002      	beq.n	8009f62 <__swsetup_r+0x46>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 f9d3 	bl	800a308 <_free_r>
 8009f62:	2300      	movs	r3, #0
 8009f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f043 0308 	orr.w	r3, r3, #8
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	b94b      	cbnz	r3, 8009f96 <__swsetup_r+0x7a>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f8c:	d003      	beq.n	8009f96 <__swsetup_r+0x7a>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 f83f 	bl	800a014 <__smakebuf_r>
 8009f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9a:	f013 0201 	ands.w	r2, r3, #1
 8009f9e:	d00a      	beq.n	8009fb6 <__swsetup_r+0x9a>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	60a2      	str	r2, [r4, #8]
 8009fa4:	6962      	ldr	r2, [r4, #20]
 8009fa6:	4252      	negs	r2, r2
 8009fa8:	61a2      	str	r2, [r4, #24]
 8009faa:	6922      	ldr	r2, [r4, #16]
 8009fac:	b942      	cbnz	r2, 8009fc0 <__swsetup_r+0xa4>
 8009fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fb2:	d1c5      	bne.n	8009f40 <__swsetup_r+0x24>
 8009fb4:	bd38      	pop	{r3, r4, r5, pc}
 8009fb6:	0799      	lsls	r1, r3, #30
 8009fb8:	bf58      	it	pl
 8009fba:	6962      	ldrpl	r2, [r4, #20]
 8009fbc:	60a2      	str	r2, [r4, #8]
 8009fbe:	e7f4      	b.n	8009faa <__swsetup_r+0x8e>
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	e7f7      	b.n	8009fb4 <__swsetup_r+0x98>
 8009fc4:	2000003c 	.word	0x2000003c

08009fc8 <__swhatbuf_r>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	460c      	mov	r4, r1
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2900      	cmp	r1, #0
 8009fd2:	b096      	sub	sp, #88	@ 0x58
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	461e      	mov	r6, r3
 8009fd8:	da0d      	bge.n	8009ff6 <__swhatbuf_r+0x2e>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fe0:	f04f 0100 	mov.w	r1, #0
 8009fe4:	bf14      	ite	ne
 8009fe6:	2340      	movne	r3, #64	@ 0x40
 8009fe8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fec:	2000      	movs	r0, #0
 8009fee:	6031      	str	r1, [r6, #0]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	b016      	add	sp, #88	@ 0x58
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f000 f8da 	bl	800a1b0 <_fstat_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	dbec      	blt.n	8009fda <__swhatbuf_r+0x12>
 800a000:	9901      	ldr	r1, [sp, #4]
 800a002:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a006:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a00a:	4259      	negs	r1, r3
 800a00c:	4159      	adcs	r1, r3
 800a00e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a012:	e7eb      	b.n	8009fec <__swhatbuf_r+0x24>

0800a014 <__smakebuf_r>:
 800a014:	898b      	ldrh	r3, [r1, #12]
 800a016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a018:	079d      	lsls	r5, r3, #30
 800a01a:	4606      	mov	r6, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	d507      	bpl.n	800a030 <__smakebuf_r+0x1c>
 800a020:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	6123      	str	r3, [r4, #16]
 800a028:	2301      	movs	r3, #1
 800a02a:	6163      	str	r3, [r4, #20]
 800a02c:	b003      	add	sp, #12
 800a02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a030:	ab01      	add	r3, sp, #4
 800a032:	466a      	mov	r2, sp
 800a034:	f7ff ffc8 	bl	8009fc8 <__swhatbuf_r>
 800a038:	9f00      	ldr	r7, [sp, #0]
 800a03a:	4605      	mov	r5, r0
 800a03c:	4639      	mov	r1, r7
 800a03e:	4630      	mov	r0, r6
 800a040:	f7ff fc26 	bl	8009890 <_malloc_r>
 800a044:	b948      	cbnz	r0, 800a05a <__smakebuf_r+0x46>
 800a046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04a:	059a      	lsls	r2, r3, #22
 800a04c:	d4ee      	bmi.n	800a02c <__smakebuf_r+0x18>
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	f043 0302 	orr.w	r3, r3, #2
 800a056:	81a3      	strh	r3, [r4, #12]
 800a058:	e7e2      	b.n	800a020 <__smakebuf_r+0xc>
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	6020      	str	r0, [r4, #0]
 800a05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a06a:	b15b      	cbz	r3, 800a084 <__smakebuf_r+0x70>
 800a06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f8af 	bl	800a1d4 <_isatty_r>
 800a076:	b128      	cbz	r0, 800a084 <__smakebuf_r+0x70>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0301 	orr.w	r3, r3, #1
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	431d      	orrs	r5, r3
 800a088:	81a5      	strh	r5, [r4, #12]
 800a08a:	e7cf      	b.n	800a02c <__smakebuf_r+0x18>

0800a08c <lflush>:
 800a08c:	898b      	ldrh	r3, [r1, #12]
 800a08e:	f003 0309 	and.w	r3, r3, #9
 800a092:	2b09      	cmp	r3, #9
 800a094:	d103      	bne.n	800a09e <lflush+0x12>
 800a096:	4b03      	ldr	r3, [pc, #12]	@ (800a0a4 <lflush+0x18>)
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f7ff be89 	b.w	8009db0 <_fflush_r>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	2000003c 	.word	0x2000003c

0800a0a8 <__srefill_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	b118      	cbz	r0, 800a0b8 <__srefill_r+0x10>
 800a0b0:	6a03      	ldr	r3, [r0, #32]
 800a0b2:	b90b      	cbnz	r3, 800a0b8 <__srefill_r+0x10>
 800a0b4:	f7ff f92a 	bl	800930c <__sinit>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c0:	069e      	lsls	r6, r3, #26
 800a0c2:	d408      	bmi.n	800a0d6 <__srefill_r+0x2e>
 800a0c4:	0758      	lsls	r0, r3, #29
 800a0c6:	d445      	bmi.n	800a154 <__srefill_r+0xac>
 800a0c8:	06d9      	lsls	r1, r3, #27
 800a0ca:	d407      	bmi.n	800a0dc <__srefill_r+0x34>
 800a0cc:	2209      	movs	r2, #9
 800a0ce:	602a      	str	r2, [r5, #0]
 800a0d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	071a      	lsls	r2, r3, #28
 800a0de:	d50b      	bpl.n	800a0f8 <__srefill_r+0x50>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fe64 	bl	8009db0 <_fflush_r>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1f4      	bne.n	800a0d6 <__srefill_r+0x2e>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	60a0      	str	r0, [r4, #8]
 800a0f0:	f023 0308 	bic.w	r3, r3, #8
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	61a0      	str	r0, [r4, #24]
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f043 0304 	orr.w	r3, r3, #4
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	b91b      	cbnz	r3, 800a10c <__srefill_r+0x64>
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f7ff ff84 	bl	800a014 <__smakebuf_r>
 800a10c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800a110:	07b3      	lsls	r3, r6, #30
 800a112:	d00f      	beq.n	800a134 <__srefill_r+0x8c>
 800a114:	2301      	movs	r3, #1
 800a116:	4a1b      	ldr	r2, [pc, #108]	@ (800a184 <__srefill_r+0xdc>)
 800a118:	491b      	ldr	r1, [pc, #108]	@ (800a188 <__srefill_r+0xe0>)
 800a11a:	481c      	ldr	r0, [pc, #112]	@ (800a18c <__srefill_r+0xe4>)
 800a11c:	81a3      	strh	r3, [r4, #12]
 800a11e:	f7ff f91f 	bl	8009360 <_fwalk_sglue>
 800a122:	81a6      	strh	r6, [r4, #12]
 800a124:	f006 0609 	and.w	r6, r6, #9
 800a128:	2e09      	cmp	r6, #9
 800a12a:	d103      	bne.n	800a134 <__srefill_r+0x8c>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f7ff fdba 	bl	8009ca8 <__sflush_r>
 800a134:	6922      	ldr	r2, [r4, #16]
 800a136:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800a138:	6963      	ldr	r3, [r4, #20]
 800a13a:	6a21      	ldr	r1, [r4, #32]
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	4628      	mov	r0, r5
 800a140:	47b0      	blx	r6
 800a142:	2800      	cmp	r0, #0
 800a144:	6060      	str	r0, [r4, #4]
 800a146:	dc17      	bgt.n	800a178 <__srefill_r+0xd0>
 800a148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14c:	d116      	bne.n	800a17c <__srefill_r+0xd4>
 800a14e:	f043 0320 	orr.w	r3, r3, #32
 800a152:	e7bf      	b.n	800a0d4 <__srefill_r+0x2c>
 800a154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a156:	2900      	cmp	r1, #0
 800a158:	d0d2      	beq.n	800a100 <__srefill_r+0x58>
 800a15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a15e:	4299      	cmp	r1, r3
 800a160:	d002      	beq.n	800a168 <__srefill_r+0xc0>
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f8d0 	bl	800a308 <_free_r>
 800a168:	2300      	movs	r3, #0
 800a16a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a16c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a16e:	6063      	str	r3, [r4, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0c5      	beq.n	800a100 <__srefill_r+0x58>
 800a174:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	2000      	movs	r0, #0
 800a17a:	e7ae      	b.n	800a0da <__srefill_r+0x32>
 800a17c:	2200      	movs	r2, #0
 800a17e:	6062      	str	r2, [r4, #4]
 800a180:	e7a6      	b.n	800a0d0 <__srefill_r+0x28>
 800a182:	bf00      	nop
 800a184:	20000030 	.word	0x20000030
 800a188:	0800a08d 	.word	0x0800a08d
 800a18c:	20000040 	.word	0x20000040

0800a190 <_close_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	@ (800a1ac <_close_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f000 f8fe 	bl	800a39c <_close>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_close_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_close_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20011544 	.word	0x20011544

0800a1b0 <_fstat_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	@ (800a1d0 <_fstat_r+0x20>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f000 f8f5 	bl	800a3ac <_fstat>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d102      	bne.n	800a1cc <_fstat_r+0x1c>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b103      	cbz	r3, 800a1cc <_fstat_r+0x1c>
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20011544 	.word	0x20011544

0800a1d4 <_isatty_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4d06      	ldr	r5, [pc, #24]	@ (800a1f0 <_isatty_r+0x1c>)
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	602b      	str	r3, [r5, #0]
 800a1e0:	f000 f8f4 	bl	800a3cc <_isatty>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_isatty_r+0x1a>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_isatty_r+0x1a>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	20011544 	.word	0x20011544

0800a1f4 <_lseek_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d07      	ldr	r5, [pc, #28]	@ (800a214 <_lseek_r+0x20>)
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	2200      	movs	r2, #0
 800a200:	602a      	str	r2, [r5, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f000 f8f2 	bl	800a3ec <_lseek>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_lseek_r+0x1e>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_lseek_r+0x1e>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	20011544 	.word	0x20011544

0800a218 <_raise_r>:
 800a218:	291f      	cmp	r1, #31
 800a21a:	b538      	push	{r3, r4, r5, lr}
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	d904      	bls.n	800a22c <_raise_r+0x14>
 800a222:	2316      	movs	r3, #22
 800a224:	6003      	str	r3, [r0, #0]
 800a226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a22e:	b112      	cbz	r2, 800a236 <_raise_r+0x1e>
 800a230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a234:	b94b      	cbnz	r3, 800a24a <_raise_r+0x32>
 800a236:	4628      	mov	r0, r5
 800a238:	f000 f842 	bl	800a2c0 <_getpid_r>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4601      	mov	r1, r0
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a246:	f000 b829 	b.w	800a29c <_kill_r>
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d00a      	beq.n	800a264 <_raise_r+0x4c>
 800a24e:	1c59      	adds	r1, r3, #1
 800a250:	d103      	bne.n	800a25a <_raise_r+0x42>
 800a252:	2316      	movs	r3, #22
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	2001      	movs	r0, #1
 800a258:	e7e7      	b.n	800a22a <_raise_r+0x12>
 800a25a:	2100      	movs	r1, #0
 800a25c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a260:	4620      	mov	r0, r4
 800a262:	4798      	blx	r3
 800a264:	2000      	movs	r0, #0
 800a266:	e7e0      	b.n	800a22a <_raise_r+0x12>

0800a268 <raise>:
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <raise+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f7ff bfd3 	b.w	800a218 <_raise_r>
 800a272:	bf00      	nop
 800a274:	2000003c 	.word	0x2000003c

0800a278 <_read_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_read_r+0x20>)
 800a27c:	4604      	mov	r4, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	f7fb fffa 	bl	8006280 <_read>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_read_r+0x1e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_read_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20011544 	.word	0x20011544

0800a29c <_kill_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	@ (800a2bc <_kill_r+0x20>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	f000 f897 	bl	800a3dc <_kill>
 800a2ae:	1c43      	adds	r3, r0, #1
 800a2b0:	d102      	bne.n	800a2b8 <_kill_r+0x1c>
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	b103      	cbz	r3, 800a2b8 <_kill_r+0x1c>
 800a2b6:	6023      	str	r3, [r4, #0]
 800a2b8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20011544 	.word	0x20011544

0800a2c0 <_getpid_r>:
 800a2c0:	f000 b87c 	b.w	800a3bc <_getpid>

0800a2c4 <_sbrk_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	@ (800a2e0 <_sbrk_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f000 f894 	bl	800a3fc <_sbrk>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_sbrk_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_sbrk_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20011544 	.word	0x20011544

0800a2e4 <_write_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	@ (800a304 <_write_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7fb fffc 	bl	80062f0 <_write>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_write_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_write_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20011544 	.word	0x20011544

0800a308 <_free_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4605      	mov	r5, r0
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d041      	beq.n	800a394 <_free_r+0x8c>
 800a310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a314:	1f0c      	subs	r4, r1, #4
 800a316:	2b00      	cmp	r3, #0
 800a318:	bfb8      	it	lt
 800a31a:	18e4      	addlt	r4, r4, r3
 800a31c:	f7ff fd70 	bl	8009e00 <__malloc_lock>
 800a320:	4a1d      	ldr	r2, [pc, #116]	@ (800a398 <_free_r+0x90>)
 800a322:	6813      	ldr	r3, [r2, #0]
 800a324:	b933      	cbnz	r3, 800a334 <_free_r+0x2c>
 800a326:	6063      	str	r3, [r4, #4]
 800a328:	6014      	str	r4, [r2, #0]
 800a32a:	4628      	mov	r0, r5
 800a32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a330:	f7ff bd6c 	b.w	8009e0c <__malloc_unlock>
 800a334:	42a3      	cmp	r3, r4
 800a336:	d908      	bls.n	800a34a <_free_r+0x42>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	1821      	adds	r1, r4, r0
 800a33c:	428b      	cmp	r3, r1
 800a33e:	bf01      	itttt	eq
 800a340:	6819      	ldreq	r1, [r3, #0]
 800a342:	685b      	ldreq	r3, [r3, #4]
 800a344:	1809      	addeq	r1, r1, r0
 800a346:	6021      	streq	r1, [r4, #0]
 800a348:	e7ed      	b.n	800a326 <_free_r+0x1e>
 800a34a:	461a      	mov	r2, r3
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	b10b      	cbz	r3, 800a354 <_free_r+0x4c>
 800a350:	42a3      	cmp	r3, r4
 800a352:	d9fa      	bls.n	800a34a <_free_r+0x42>
 800a354:	6811      	ldr	r1, [r2, #0]
 800a356:	1850      	adds	r0, r2, r1
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d10b      	bne.n	800a374 <_free_r+0x6c>
 800a35c:	6820      	ldr	r0, [r4, #0]
 800a35e:	4401      	add	r1, r0
 800a360:	1850      	adds	r0, r2, r1
 800a362:	4283      	cmp	r3, r0
 800a364:	6011      	str	r1, [r2, #0]
 800a366:	d1e0      	bne.n	800a32a <_free_r+0x22>
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	6053      	str	r3, [r2, #4]
 800a36e:	4408      	add	r0, r1
 800a370:	6010      	str	r0, [r2, #0]
 800a372:	e7da      	b.n	800a32a <_free_r+0x22>
 800a374:	d902      	bls.n	800a37c <_free_r+0x74>
 800a376:	230c      	movs	r3, #12
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	e7d6      	b.n	800a32a <_free_r+0x22>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	1821      	adds	r1, r4, r0
 800a380:	428b      	cmp	r3, r1
 800a382:	bf04      	itt	eq
 800a384:	6819      	ldreq	r1, [r3, #0]
 800a386:	685b      	ldreq	r3, [r3, #4]
 800a388:	6063      	str	r3, [r4, #4]
 800a38a:	bf04      	itt	eq
 800a38c:	1809      	addeq	r1, r1, r0
 800a38e:	6021      	streq	r1, [r4, #0]
 800a390:	6054      	str	r4, [r2, #4]
 800a392:	e7ca      	b.n	800a32a <_free_r+0x22>
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	20011540 	.word	0x20011540

0800a39c <_close>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	@ (800a3a8 <_close+0xc>)
 800a39e:	2258      	movs	r2, #88	@ 0x58
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3a6:	4770      	bx	lr
 800a3a8:	20011544 	.word	0x20011544

0800a3ac <_fstat>:
 800a3ac:	4b02      	ldr	r3, [pc, #8]	@ (800a3b8 <_fstat+0xc>)
 800a3ae:	2258      	movs	r2, #88	@ 0x58
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3b6:	4770      	bx	lr
 800a3b8:	20011544 	.word	0x20011544

0800a3bc <_getpid>:
 800a3bc:	4b02      	ldr	r3, [pc, #8]	@ (800a3c8 <_getpid+0xc>)
 800a3be:	2258      	movs	r2, #88	@ 0x58
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3c6:	4770      	bx	lr
 800a3c8:	20011544 	.word	0x20011544

0800a3cc <_isatty>:
 800a3cc:	4b02      	ldr	r3, [pc, #8]	@ (800a3d8 <_isatty+0xc>)
 800a3ce:	2258      	movs	r2, #88	@ 0x58
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20011544 	.word	0x20011544

0800a3dc <_kill>:
 800a3dc:	4b02      	ldr	r3, [pc, #8]	@ (800a3e8 <_kill+0xc>)
 800a3de:	2258      	movs	r2, #88	@ 0x58
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3e6:	4770      	bx	lr
 800a3e8:	20011544 	.word	0x20011544

0800a3ec <_lseek>:
 800a3ec:	4b02      	ldr	r3, [pc, #8]	@ (800a3f8 <_lseek+0xc>)
 800a3ee:	2258      	movs	r2, #88	@ 0x58
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3f6:	4770      	bx	lr
 800a3f8:	20011544 	.word	0x20011544

0800a3fc <_sbrk>:
 800a3fc:	4a04      	ldr	r2, [pc, #16]	@ (800a410 <_sbrk+0x14>)
 800a3fe:	4905      	ldr	r1, [pc, #20]	@ (800a414 <_sbrk+0x18>)
 800a400:	6813      	ldr	r3, [r2, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	bf08      	it	eq
 800a406:	460b      	moveq	r3, r1
 800a408:	4418      	add	r0, r3
 800a40a:	6010      	str	r0, [r2, #0]
 800a40c:	4618      	mov	r0, r3
 800a40e:	4770      	bx	lr
 800a410:	20011548 	.word	0x20011548
 800a414:	2001154c 	.word	0x2001154c

0800a418 <_exit>:
 800a418:	e7fe      	b.n	800a418 <_exit>
 800a41a:	bf00      	nop
 800a41c:	00000020 	.word	0x00000020
	...
 800a428:	00000002 	.word	0x00000002
	...
 800a434:	52005020 	.word	0x52005020
	...
 800a440:	20000000 	.word	0x20000000
 800a444:	00000016 	.word	0x00000016
	...
 800a470:	000000c0 	.word	0x000000c0
 800a474:	80000000 	.word	0x80000000
	...
 800a480:	0000007f 	.word	0x0000007f
 800a484:	00020000 	.word	0x00020000
 800a488:	00004000 	.word	0x00004000
	...
 800a49c:	00000008 	.word	0x00000008
	...
 800a4b4:	00000020 	.word	0x00000020
 800a4b8:	00000064 	.word	0x00000064
 800a4bc:	00000020 	.word	0x00000020
 800a4c0:	00000020 	.word	0x00000020
 800a4c4:	00000020 	.word	0x00000020
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	00000200 	.word	0x00000200
 800a4d0:	00000000 	.word	0x00000000
 800a4d4:	74617453 	.word	0x74617453
 800a4d8:	00203a65 	.word	0x00203a65
 800a4dc:	454c4449 	.word	0x454c4449
 800a4e0:	00000000 	.word	0x00000000
 800a4e4:	544e5953 	.word	0x544e5953
 800a4e8:	00000048 	.word	0x00000048
 800a4ec:	4f434552 	.word	0x4f434552
 800a4f0:	00004452 	.word	0x00004452
 800a4f4:	59414c50 	.word	0x59414c50
 800a4f8:	00000000 	.word	0x00000000
 800a4fc:	504f5453 	.word	0x504f5453
 800a500:	00000000 	.word	0x00000000
 800a504:	45564153 	.word	0x45564153
 800a508:	00000000 	.word	0x00000000
 800a50c:	53415245 	.word	0x53415245
 800a510:	00000045 	.word	0x00000045
 800a514:	49474542 	.word	0x49474542
 800a518:	52575f4e 	.word	0x52575f4e
 800a51c:	00455449 	.word	0x00455449
 800a520:	54495257 	.word	0x54495257
 800a524:	00000045 	.word	0x00000045
 800a528:	4d4d4f43 	.word	0x4d4d4f43
 800a52c:	00005449 	.word	0x00005449
 800a530:	4e415453 	.word	0x4e415453
 800a534:	00594244 	.word	0x00594244
 800a538:	52415453 	.word	0x52415453
 800a53c:	00505554 	.word	0x00505554
 800a540:	49444e45 	.word	0x49444e45
 800a544:	0000474e 	.word	0x0000474e
 800a548:	65766153 	.word	0x65766153
 800a54c:	74616420 	.word	0x74616420
 800a550:	6f662061 	.word	0x6f662061
 800a554:	3a646e75 	.word	0x3a646e75
 800a558:	00000000 	.word	0x00000000
 800a55c:	20202020 	.word	0x20202020
 800a560:	00000000 	.word	0x00000000
 800a564:	64417325 	.word	0x64417325
 800a568:	73657264 	.word	0x73657264
 800a56c:	30203a73 	.word	0x30203a73
 800a570:	38302578 	.word	0x38302578
 800a574:	000a586c 	.word	0x000a586c
 800a578:	69537325 	.word	0x69537325
 800a57c:	203a657a 	.word	0x203a657a
 800a580:	30202020 	.word	0x30202020
 800a584:	38302578 	.word	0x38302578
 800a588:	000a586c 	.word	0x000a586c
 800a58c:	52437325 	.word	0x52437325
 800a590:	3a323343 	.word	0x3a323343
 800a594:	30202020 	.word	0x30202020
 800a598:	38302578 	.word	0x38302578
 800a59c:	000a586c 	.word	0x000a586c
 800a5a0:	73206f4e 	.word	0x73206f4e
 800a5a4:	20657661 	.word	0x20657661
 800a5a8:	61746164 	.word	0x61746164
 800a5ac:	756f6620 	.word	0x756f6620
 800a5b0:	0000646e 	.word	0x0000646e
 800a5b4:	61766e49 	.word	0x61766e49
 800a5b8:	2064696c 	.word	0x2064696c
 800a5bc:	72646461 	.word	0x72646461
 800a5c0:	00737365 	.word	0x00737365
 800a5c4:	64616f4c 	.word	0x64616f4c
 800a5c8:	20676e69 	.word	0x20676e69
 800a5cc:	69647561 	.word	0x69647561
 800a5d0:	2e2e2e6f 	.word	0x2e2e2e6f
 800a5d4:	00000020 	.word	0x00000020
 800a5d8:	656e6f64 	.word	0x656e6f64
 800a5dc:	00000000 	.word	0x00000000
 800a5e0:	61766e69 	.word	0x61766e69
 800a5e4:	2064696c 	.word	0x2064696c
 800a5e8:	33435243 	.word	0x33435243
 800a5ec:	30203a32 	.word	0x30203a32
 800a5f0:	38302578 	.word	0x38302578
 800a5f4:	000a586c 	.word	0x000a586c
 800a5f8:	6b6361ff 	.word	0x6b6361ff
 800a5fc:	00000000 	.word	0x00000000
 800a600:	0a7325ff 	.word	0x0a7325ff
 800a604:	00000000 	.word	0x00000000
 800a608:	6e717269 	.word	0x6e717269
 800a60c:	203d3e20 	.word	0x203d3e20
 800a610:	4d6e6f4e 	.word	0x4d6e6f4e
 800a614:	616b7361 	.word	0x616b7361
 800a618:	49656c62 	.word	0x49656c62
 800a61c:	495f746e 	.word	0x495f746e
 800a620:	006e5152 	.word	0x006e5152
 800a624:	64696f76 	.word	0x64696f76
 800a628:	63657220 	.word	0x63657220
 800a62c:	6564726f 	.word	0x6564726f
 800a630:	693a3a72 	.word	0x693a3a72
 800a634:	3a3a7172 	.word	0x3a3a7172
 800a638:	69676552 	.word	0x69676552
 800a63c:	72657473 	.word	0x72657473
 800a640:	646e6148 	.word	0x646e6148
 800a644:	2872656c 	.word	0x2872656c
 800a648:	6e515249 	.word	0x6e515249
 800a64c:	7079545f 	.word	0x7079545f
 800a650:	56202c65 	.word	0x56202c65
 800a654:	6f746365 	.word	0x6f746365
 800a658:	00002972 	.word	0x00002972
 800a65c:	76697264 	.word	0x76697264
 800a660:	2f737265 	.word	0x2f737265
 800a664:	2e717269 	.word	0x2e717269
 800a668:	00707063 	.word	0x00707063
 800a66c:	65637865 	.word	0x65637865
 800a670:	6f697470 	.word	0x6f697470
 800a674:	756e5f6e 	.word	0x756e5f6e
 800a678:	203c206d 	.word	0x203c206d
 800a67c:	6d754e6b 	.word	0x6d754e6b
 800a680:	74636556 	.word	0x74636556
 800a684:	0073726f 	.word	0x0073726f
 800a688:	6e717269 	.word	0x6e717269
 800a68c:	203d3e20 	.word	0x203d3e20
 800a690:	00000030 	.word	0x00000030
 800a694:	64696f76 	.word	0x64696f76
 800a698:	63657220 	.word	0x63657220
 800a69c:	6564726f 	.word	0x6564726f
 800a6a0:	693a3a72 	.word	0x693a3a72
 800a6a4:	3a3a7172 	.word	0x3a3a7172
 800a6a8:	62616e45 	.word	0x62616e45
 800a6ac:	4928656c 	.word	0x4928656c
 800a6b0:	5f6e5152 	.word	0x5f6e5152
 800a6b4:	65707954 	.word	0x65707954
 800a6b8:	00000029 	.word	0x00000029
 800a6bc:	65736552 	.word	0x65736552
 800a6c0:	6f732074 	.word	0x6f732074
 800a6c4:	65637275 	.word	0x65637275
 800a6c8:	73617720 	.word	0x73617720
 800a6cc:	00000020 	.word	0x00000020
 800a6d0:	00524f50 	.word	0x00524f50
 800a6d4:	5453524e 	.word	0x5453524e
 800a6d8:	00000000 	.word	0x00000000
 800a6dc:	00524f42 	.word	0x00524f42
 800a6e0:	00544653 	.word	0x00544653
 800a6e4:	00555043 	.word	0x00555043
 800a6e8:	47445757 	.word	0x47445757
 800a6ec:	00000031 	.word	0x00000031
 800a6f0:	47445749 	.word	0x47445749
 800a6f4:	00000031 	.word	0x00000031
 800a6f8:	454b4157 	.word	0x454b4157
 800a6fc:	00000000 	.word	0x00000000
 800a700:	5257504c 	.word	0x5257504c
 800a704:	00000000 	.word	0x00000000
 800a708:	6e6b6e75 	.word	0x6e6b6e75
 800a70c:	3a6e776f 	.word	0x3a6e776f
 800a710:	25783020 	.word	0x25783020
 800a714:	586c3830 	.word	0x586c3830
 800a718:	0000000a 	.word	0x0000000a
 800a71c:	656b6157 	.word	0x656b6157
 800a720:	65207075 	.word	0x65207075
 800a724:	746e6576 	.word	0x746e6576
 800a728:	73617720 	.word	0x73617720
 800a72c:	63657220 	.word	0x63657220
 800a730:	2064726f 	.word	0x2064726f
 800a734:	74747562 	.word	0x74747562
 800a738:	00006e6f 	.word	0x00006e6f
 800a73c:	656b6157 	.word	0x656b6157
 800a740:	65207075 	.word	0x65207075
 800a744:	746e6576 	.word	0x746e6576
 800a748:	73617720 	.word	0x73617720
 800a74c:	616c7020 	.word	0x616c7020
 800a750:	75622079 	.word	0x75622079
 800a754:	6e6f7474 	.word	0x6e6f7474
 800a758:	00000000 	.word	0x00000000

0800a75c <recorder::JingleEngine::ending_jingle_>:
 800a75c:	4412d333 43c47333 43a4d0a4 4382d0a4     3..D3s.C...C...C

0800a76c <recorder::JingleEngine::startup_jingle_>:
 800a76c:	4382d0a4 43a4d0a4 43c47333 4412d51f     ...C...C3s.C...D

0800a77c <recorder::SynthEngine::minor_scale_chord_types_>:
 800a77c:	00000001 00000002 00000000 00000001     ................
 800a78c:	00000001 00000000 00000000 00000001     ................

0800a79c <recorder::SynthEngine::major_scale_chord_types_>:
 800a79c:	00000000 00000001 00000001 00000000     ................
 800a7ac:	00000000 00000001 00000002 00000000     ................

0800a7bc <recorder::SynthEngine::diminished_chord_multipliers_>:
 800a7bc:	3f800000 3f9837ef 3fb504f7 40000000     ...?.7.?...?...@

0800a7cc <recorder::SynthEngine::minor_chord_multipliers_>:
 800a7cc:	3f800000 3f9837ef 3fbfc886 40000000     ...?.7.?...?...@

0800a7dc <recorder::SynthEngine::major_chord_multipliers_>:
 800a7dc:	3f800000 3fa14517 3fbfc886 40000000     ...?.E.?...?...@

0800a7ec <recorder::SynthEngine::minor_scale_multipliers_>:
 800a7ec:	3f800000 3f8facd6 3f9837ef 3faadc0a     ...?...?.7.?...?
 800a7fc:	3fbfc886 3fcb2ff5 3fe411ed 40000000     ...?./.?...?...@

0800a80c <recorder::SynthEngine::major_scale_multipliers_>:
 800a80c:	3f800000 3f8facd6 3fa14517 3faadc0a     ...?...?.E.?...?
 800a81c:	3fbfc886 3fd744fe 3ff1a1c2 40000000     ...?.D.?...?...@

0800a82c <recorder::SynthEngine::chromatic_frequencies_>:
 800a82c:	4382d0a4 438a970a 4392d47b 439b90a4     ...C...C{..C...C
 800a83c:	43a4d0a4 43ae9d71 43b8feb8 43c40000     ...Cq..C...C...C
 800a84c:	43cfa666 43dc0000 43e9147b 43f6f0a4     f..C...C{..C...C
 800a85c:	4402d000                                ...D

0800a860 <recorder::SynthEngine::kAttenuationLevels>:
 800a860:	3f666666 3f4ccccd 3f333333 3f19999a     fff?..L?333?...?
 800a870:	3f000000                                ...?

0800a874 <recorder::Adc::PotFilter::kPotCorrection>:
 800a874:	00000000 3c805439 3d00a626 3d41709b     ....9T.<&..=.pA=
 800a884:	3d8142f1 3da1f120 3dc2c0f0 3de3b06c     .B.= ..=...=l..=
 800a894:	3e025ec9 3e12f32c 3e239452 3e34412e     .^.>,..>R.#>.A4>
 800a8a4:	3e44f8aa 3e55b9af 3e668323 3e7753e8     ..D>..U>#.f>.Sw>
 800a8b4:	3e84156f 3e8c8371 3e94f36b 3e9d64c9     o..>q..>k..>.d.>
 800a8c4:	3ea5d6fa 3eae496d 3eb6bb8f 3ebf2cd1     ...>mI.>...>.,.>
 800a8d4:	3ec79ca3 3ed00a76 3ed875bd 3ee0dded     ...>v..>.u.>...>
 800a8e4:	3ee9427b 3ef1a2e0 3ef9fe97 3f012a8f     {B.>...>...>.*.?
 800a8f4:	3f0552f9 3f09784b 3f0d9a49 3f11b8b5     .R.?Kx.?I..?...?
 800a904:	3f15d358 3f19e9f6 3f1dfc5b 3f220a51     X..?...?[..?Q."?
 800a914:	3f2613a4 3f2a1825 3f2e17a2 3f3211ef     ..&?%.*?...?..2?
 800a924:	3f3606e0 3f39f64c 3f3de00a 3f41c3f6     ..6?L.9?..=?..A?
 800a934:	3f45a1ea 3f4979c6 3f4d4b69 3f5116b5     ..E?.yI?iKM?..Q?
 800a944:	3f54db8e 3f5899da 3f5c5180 3f600268     ..T?..X?.Q\?h.`?
 800a954:	3f63ac7f 3f674fb1 3f6aebed 3f6e8121     ..c?.Og?..j?!.n?
 800a964:	3f720f41 3f75963e 3f79160e 3f7c8ea7     A.r?>.u?..y?..|?
 800a974:	3f800000                                ...?

0800a978 <D1CorePrescTable>:
 800a978:	00000000 04030201 04030201 09080706     ................

0800a988 <LL_DMA_STR_OFFSET_TAB>:
 800a988:	58402810 b8a08870                       .(@Xp...

0800a990 <LL_MDMA_CH_OFFSET_TAB>:
 800a990:	00000040 00000080 000000c0 00000100     @...............
 800a9a0:	00000140 00000180 000001c0 00000200     @...............
 800a9b0:	00000240 00000280 000002c0 00000300     @...............
 800a9c0:	00000340 00000380 000003c0 00000400     @...............

0800a9d0 <LL_RCC_PrescTable>:
 800a9d0:	00000000 04030201 04030201 09080706     ................

0800a9e0 <USART_PRESCALER_TAB>:
 800a9e0:	00020001 00060004 000a0008 0010000c     ................
 800a9f0:	00400020 01000080                        .@.....

0800a9f8 <__exp2f_data>:
 800a9f8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 800aa08:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 800aa18:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 800aa28:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 800aa38:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 800aa48:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 800aa58:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 800aa68:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 800aa78:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 800aa88:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 800aa98:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 800aaa8:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 800aab8:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 800aac8:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 800aad8:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 800aae8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 800aaf8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 800ab08:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 800ab18:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 800ab28:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 800ab38:	ff0c52d6 3f962e42                       .R..B..?

0800ab40 <__inv_pio4>:
 800ab40:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
 800ab50:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
 800ab60:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
 800ab70:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
 800ab80:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
 800ab90:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

0800aba0 <__sincosf_table>:
 800aba0:	00000000 3ff00000 00000000 bff00000     .......?........
 800abb0:	00000000 bff00000 00000000 3ff00000     ...............?
 800abc0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800abd0:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
 800abe0:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
 800abf0:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
 800ac00:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
 800ac10:	00000000 3ff00000 00000000 bff00000     .......?........
 800ac20:	00000000 bff00000 00000000 3ff00000     ...............?
 800ac30:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
 800ac40:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
 800ac50:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
 800ac60:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
 800ac70:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

0800ac80 <tiny>:
 800ac80:	0da24260                                `B..

0800ac84 <two>:
 800ac84:	40000000                                ...@

0800ac88 <one>:
 800ac88:	3f800000 7566202c 6974636e 203a6e6f     ...?, function: 
 800ac98:	73736100 69747265 22206e6f 20227325     .assertion "%s" 
 800aca8:	6c696166 203a6465 656c6966 73252220     failed: file "%s
 800acb8:	6c202c22 20656e69 73256425 000a7325     ", line %d%s%s..
 800acc8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 800acd8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 800ace8:	31300046 35343332 39383736 64636261     F.0123456789abcd
 800acf8:	00006665                                ef..

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
